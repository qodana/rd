{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to disposed captured variable",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Captured variable is disposed in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is disposed [Learn more...](https://www.jetbrains.com/help/rider/AccessToDisposedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 202,
      "offset": 18,
      "length": 18,
      "code": {
        "startLine": 200,
        "length": 18,
        "offset": 57,
        "surroundingCode": "        Parallel.Invoke(() =>\n        {\n          using (lifetimeDefinition)\n          {\n            for (var i = 0; i < 100; i++)"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "AccessToDisposedClosure"
  },
  "hash": "4f6554e2faf09db4c32d449e28523a7411a5edfaa096738b3e792773c49ccb2d"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdTaskTest.cs",
      "language": "C#",
      "line": 213,
      "offset": 23,
      "length": 6,
      "code": {
        "startLine": 211,
        "length": 6,
        "offset": 115,
        "surroundingCode": "        \n        SpinWaitEx.SpinUntil(TestLifetime, TimeSpan.FromSeconds(10), () => point2);\n        Assert.IsTrue(point2);\n        \n        return i.ToString();"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "03961ad3a580f445c3904655134d762c56be732c15b2ae9e83c07a1b7773b1d9"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 145,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 143,
        "length": 6,
        "offset": 42,
        "surroundingCode": "      void Ack(long seqn)\n      {\n        buffer?.Acknowledge(seqn);\n      }\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "04f9e754a2f4f4477964341b619f339fef10e5afea25c07d06b47ede57b0b86b"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 417,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 415,
        "length": 3,
        "offset": 51,
        "surroundingCode": "      Inner(() => lt.Bracket(() =>\n      {\n        log += 1;\n        def.Terminate();\n      }, () => log += 10));"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "074d3760a38b8af0a9289ced6aec3d4122f4a414dd8c240ca5f58b017da57796"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 332,
      "offset": 37,
      "length": 3,
      "code": {
        "startLine": 330,
        "length": 3,
        "offset": 66,
        "surroundingCode": "      \n      //Action, Action\n      Inner( () => lt.Bracket(() => log += 1, () => log += 10));\n      \n      //Func<T>, Action"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "1b22adfb063de0e3eb3872ea5a19d8152be8ea905a22a4957c4bca182b786f82"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1288,
      "offset": 82,
      "length": 8,
      "code": {
        "startLine": 1286,
        "length": 8,
        "offset": 155,
        "surroundingCode": "            cache = def;\n            Interlocked.Increment(ref localSum);\n            cache.ToCancellationToken().Register(() => Interlocked.Decrement(ref localSum));\n          }\n        }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "232b4fc7ebd450ee2015acd24928c1e809cca915c6ef26dac7d878627d7de0b1"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1323,
      "offset": 83,
      "length": 3,
      "code": {
        "startLine": 1321,
        "length": 3,
        "offset": 177,
        "surroundingCode": "            var newDef = new LifetimeDefinition();\n            Interlocked.Increment(ref sum);\n            newDef.ToCancellationToken().Register(() => Interlocked.Decrement(ref sum));\n            Interlocked.Exchange(ref def, newDef).Terminate();\n            Interlocked.Increment(ref count);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "31e8bd18c5f6af62d6c47301e968786cf1f054f8bf3c9d5cf44423c60607aebf"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/SequentialLifetimesTest.cs",
      "language": "C#",
      "line": 24,
      "offset": 19,
      "length": 1,
      "code": {
        "startLine": 22,
        "length": 1,
        "offset": 62,
        "surroundingCode": "        sequence.Next(lifetime =>\n        {\n          var c = i;\n          lifetime.Bracket(\n            () => sb.AppendLine($\"start {c}\"),"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "3bd4066a2e87ed217c70eb1e62837105319900b780c8470fc521cc5f16cb3420"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdTaskTest.cs",
      "language": "C#",
      "line": 212,
      "offset": 76,
      "length": 6,
      "code": {
        "startLine": 210,
        "length": 6,
        "offset": 126,
        "surroundingCode": "        Volatile.Write(ref point1, true);\n        \n        SpinWaitEx.SpinUntil(TestLifetime, TimeSpan.FromSeconds(10), () => point2);\n        Assert.IsTrue(point2);\n        "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "3f633b7359e372976ce7d0a2b6000de333cf7c590577695400e8480c889f835f"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/BlockingPriorityQueueTest.cs",
      "language": "C#",
      "line": 54,
      "offset": 43,
      "length": 12,
      "code": {
        "startLine": 52,
        "length": 12,
        "offset": 107,
        "surroundingCode": "              return Task.Factory.StartNew(() =>\n              {\n                Interlocked.Increment(ref currentCount);\n                while (lf.IsAlive)\n                {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "41fd9e316878d18c6db99f11c0cea53526fc90b0ec027e32c5dbd855cc5fa816"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ActorTest.cs",
      "language": "C#",
      "line": 105,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 103,
        "length": 5,
        "offset": 81,
        "surroundingCode": "      actor = new Actor<int>(\"TestActor\", TestLifetime, x =>\n      {\n        if (count -- > 0)\n        {\n          actor.SendBlocking(x+1);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "4c6df5753cc0ed809636dbdbc07dc8b8581e2350ca5a9304fa783621053e0948"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/BlockingPriorityQueueTest.cs",
      "language": "C#",
      "line": 34,
      "offset": 41,
      "length": 5,
      "code": {
        "startLine": 32,
        "length": 5,
        "offset": 108,
        "surroundingCode": "            queue.Enqueue(new PrioritizedAction(() =>\n            {\n              Interlocked.Increment(ref count);\n              queue.Enqueue(new PrioritizedAction(() => { Interlocked.Increment(ref count); }));\n            }));"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "5e83b089cb521e4c1582580058b9fc1fb79d15f8258e28c2d9f32e2a0c91aa18"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/BlockingPriorityQueueTest.cs",
      "language": "C#",
      "line": 39,
      "offset": 54,
      "length": 5,
      "code": {
        "startLine": 37,
        "length": 5,
        "offset": 66,
        "surroundingCode": "          }\n\n          SpinWait.SpinUntil(() => Volatile.Read(ref count) == n * 2 || Volatile.Read(ref exception) != null, TimeSpan.FromMinutes(1));\n          Assert.IsNull(Volatile.Read(ref exception));\n          Assert.AreEqual(n * 2, Volatile.Read(ref count));"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "66e34379e0637d8e06d6a0297209769ba6b7db33064bac4ebccce2f7f282ea94"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ActorTest.cs",
      "language": "C#",
      "line": 124,
      "offset": 11,
      "length": 5,
      "code": {
        "startLine": 122,
        "length": 5,
        "offset": 46,
        "surroundingCode": "        if (count -- > 0)\n        {\n          actor.SendOrExecuteInline(x+1).NoAwait();\n          log.Add(x);\n        }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "70942cbf2013511073a5ddd5e741be735a9bc333636e23679f6742c055bc4adc"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ActorTest.cs",
      "language": "C#",
      "line": 140,
      "offset": 17,
      "length": 5,
      "code": {
        "startLine": 138,
        "length": 5,
        "offset": 52,
        "surroundingCode": "        if (count -- > 0)\n        {\n          await actor.SendOrExecuteInline(x+1);\n          log.Add(x);\n        }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "78f56abb238a4ee5c3565815bd93935a01962a54f98974d3afd9006e823c0728"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ProactiveLazyTest.cs",
      "language": "C#",
      "line": 37,
      "offset": 44,
      "length": 4,
      "code": {
        "startLine": 35,
        "length": 4,
        "offset": 128,
        "surroundingCode": "            var lazy = new ProactiveLazy<long>(Lifetime.Eternal, () =>\n            {\n                SpinWaitEx.SpinUntil(() => flag);\n                return 42;\n            });"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "886d90752f27d3e41ec130bbc51cc197854cdd617e4efbb7dc3965ee3ca75a8c"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 465,
      "offset": 11,
      "length": 3,
      "code": {
        "startLine": 463,
        "length": 3,
        "offset": 85,
        "surroundingCode": "      Inner(() => Assert.True(Result.Unit == lt.TryBracket(() =>\n        {\n          log += 1;\n        },\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "8af2a233541bb1429483665e11e6984573ff29adab6f81a9c05246e2ca35c894"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/UnsafeWriterTest.cs",
      "language": "C#",
      "line": 50,
      "offset": 16,
      "length": 3,
      "code": {
        "startLine": 48,
        "length": 3,
        "offset": 59,
        "surroundingCode": "      var thread = new Thread(() =>\n      {\n        while (run) NativeMemoryPool.TryFreeMemory();\n      });\n      thread.Start();"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "8dc72db4913ceb485b486c2670f53e1dd7ddaf76dcf2c215f36b7caa71b14ff9"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdTaskTest.cs",
      "language": "C#",
      "line": 111,
      "offset": 34,
      "length": 4,
      "code": {
        "startLine": 109,
        "length": 4,
        "offset": 56,
        "surroundingCode": "      ld.Terminate();\n\n      SpinWaitEx.SpinUntil(() => task.IsCompleted);\n      Assert.True(task.IsOperationCanceled());\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "992278ea0b562fa3cc0f0d678b77b6920fa6d3f77b1919d004f670167456b441"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 203,
      "offset": 31,
      "length": 4,
      "code": {
        "startLine": 201,
        "length": 4,
        "offset": 71,
        "surroundingCode": "              log.Add(l);\n              \n              Assert.True(l > prev);\n              prev = l;\n            }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "9e69058b8bcbbe41822584e3fb2e5cdeac4f76e2c963e8fe59251a8057f6cc7c"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 725,
      "offset": 11,
      "length": 3,
      "code": {
        "startLine": 723,
        "length": 3,
        "offset": 67,
        "surroundingCode": "      InnerSuccess(wrap => lt.TryBracket(() =>\n        {\n          log += 1;\n          def.Terminate();\n        },"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "c7cb4ffe2d82d69c6195c557fab93788d757d2aff4758bd8716ba1082f023981"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 625,
      "offset": 70,
      "length": 3,
      "code": {
        "startLine": 623,
        "length": 3,
        "offset": 95,
        "surroundingCode": "      Inner(() =>\n      {\n        Assert.Throws<FailureException>( () => lt.TryBracket(() => { log += 1; Fail(); },\n          () => { log += 10;  }\n        ));"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "cae3fffe601ab6aef37cc195e2b315d5d0d2b403251aeb9e0fe35a975139729b"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 373,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 371,
        "length": 3,
        "offset": 51,
        "surroundingCode": "      Inner(() => lt.Bracket(() =>\n      {\n        log += 1;\n        Fail();\n      }, () => log += 10));"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "d3efa87c2610a0a4e96901a1e03119c737bac23d99bbf11d87cf18da664c00df"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/SequentialLifetimesTest.cs",
      "language": "C#",
      "line": 67,
      "offset": 19,
      "length": 1,
      "code": {
        "startLine": 65,
        "length": 1,
        "offset": 78,
        "surroundingCode": "        sequence.DefineNext(lifetimeDefinition =>\n        {\n          var c = i;\n          lifetimeDefinition.Bracket(\n            () => sb.AppendLine($\"start {c}\"),"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "d4ac348c32e2abd1976818ea395ffec69dad1ac79150e10f98364f0ca503ad28"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdTaskTest.cs",
      "language": "C#",
      "line": 122,
      "offset": 34,
      "length": 4,
      "code": {
        "startLine": 120,
        "length": 4,
        "offset": 169,
        "surroundingCode": "      handlerCompletedSuccessfully = false;\n      task = serverEntity.Start(new LifetimeDefinition().Lifetime, Unit.Instance).AsTask();\n      SpinWaitEx.SpinUntil(() => task.IsCompleted);\n      Assert.False(task.IsOperationCanceled());\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "dc0827b42af2fd67400ce26d2ae391c65ba1d72c6cda341c5e92876c01304e60"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 293,
      "offset": 37,
      "length": 3,
      "code": {
        "startLine": 291,
        "length": 3,
        "offset": 66,
        "surroundingCode": "      \n      //Action, Action\n      Inner( () => lt.Bracket(() => log += 1, () => log += 10));\n      \n      //Func<T>, Action"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "f45e264d52b276cc9393e5e686d10e416b22af29a966a7e90a8aa4d9b4b7b295"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Access to modified captured variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Captured variable is modified in the outer scope",
  "detailsInfo": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 537,
      "offset": 41,
      "length": 3,
      "code": {
        "startLine": 535,
        "length": 3,
        "offset": 66,
        "surroundingCode": "      Inner(() =>\n      {\n        var res = lt.TryBracket(() => { log += 1; },\n\n          () => { log += 10; }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "AccessToModifiedClosure"
  },
  "hash": "f9dd5f1c48c9d14509d59974d55f7a3c391a89cbbe8d07f1f26e8b1bb6f4418b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent body style: use expression-bodied property",
  "detailsInfo": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Components/TestWire.cs",
      "language": "C#",
      "line": 35,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 33,
        "length": 6,
        "offset": 46,
        "surroundingCode": "    public bool HasMessages\n    {\n      get { return myOutgoingMessages.Count > 0; }\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeAccessorOwnerBody"
  },
  "hash": "0467e14527ed84315c5cae57ac38250e145b0b4ffffdbd0ff25693df4691fce1"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent body style: use expression-bodied property",
  "detailsInfo": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 16,
      "offset": 67,
      "length": 6,
      "code": {
        "startLine": 14,
        "length": 6,
        "offset": 99,
        "surroundingCode": "    //fields\n    //public fields\n    public IViewableProperty<RdTextBufferChange?> Changes { get { return _Changes; }}\n    public IViewableProperty<TextBufferVersion> VersionBeforeTypingSession { get { return _VersionBeforeTypingSession; }}\n    public IViewableProperty<RdAssertion> AssertedMasterText { get { return _AssertedMasterText; }}"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeAccessorOwnerBody"
  },
  "hash": "06b11e28f833ce98fdb1e13a0ad547b2bb8615d709bba93458a09eb9907c4932"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent body style: use expression-bodied property",
  "detailsInfo": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 17,
      "offset": 84,
      "length": 6,
      "code": {
        "startLine": 15,
        "length": 6,
        "offset": 189,
        "surroundingCode": "    //public fields\n    public IViewableProperty<RdTextBufferChange?> Changes { get { return _Changes; }}\n    public IViewableProperty<TextBufferVersion> VersionBeforeTypingSession { get { return _VersionBeforeTypingSession; }}\n    public IViewableProperty<RdAssertion> AssertedMasterText { get { return _AssertedMasterText; }}\n    public IViewableProperty<RdAssertion> AssertedSlaveText { get { return _AssertedSlaveText; }}"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeAccessorOwnerBody"
  },
  "hash": "08bf4a7c41adea1465b9cd3274129131ff7125060a9e302b026571fb5d91a753"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent body style: use expression body",
  "detailsInfo": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 280,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 278,
        "length": 6,
        "offset": 83,
        "surroundingCode": "    {\n      [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n      get { return myPtr; }\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeAccessorOwnerBody"
  },
  "hash": "18df5f5c7692c8bb5e3c3e81c2f977e7ecbf290bad6179b24582d69e8a6c7035"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent body style: use expression-bodied property",
  "detailsInfo": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Components/TestWire.cs",
      "language": "C#",
      "line": 30,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 28,
        "length": 6,
        "offset": 43,
        "surroundingCode": "    public bool IsMaster\n    {\n      get { return myIsMaster; }\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeAccessorOwnerBody"
  },
  "hash": "196ebe1fc69bb463541ba1f2e774f6af69d2a0ce3fcdaadadf9565dc498bda15"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent body style: use expression body",
  "detailsInfo": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 274,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 272,
        "length": 6,
        "offset": 83,
        "surroundingCode": "    {\n      [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n      get { return myStartPtr; }\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeAccessorOwnerBody"
  },
  "hash": "1d413129a561b9687db65e32b165e84d3a6f90a985b9b7ef7a3a09f9c671169a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent body style: use expression-bodied property",
  "detailsInfo": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 19,
      "offset": 69,
      "length": 6,
      "code": {
        "startLine": 17,
        "length": 6,
        "offset": 290,
        "surroundingCode": "    public IViewableProperty<TextBufferVersion> VersionBeforeTypingSession { get { return _VersionBeforeTypingSession; }}\n    public IViewableProperty<RdAssertion> AssertedMasterText { get { return _AssertedMasterText; }}\n    public IViewableProperty<RdAssertion> AssertedSlaveText { get { return _AssertedSlaveText; }}\n\n    //private fields"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeAccessorOwnerBody"
  },
  "hash": "27a75b5e410d713351d990282955dcd21623723a01baee7dbb68bd1248a60dc5"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent body style: use expression-bodied property",
  "detailsInfo": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 128,
      "offset": 56,
      "length": 6,
      "code": {
        "startLine": 126,
        "length": 6,
        "offset": 135,
        "surroundingCode": "    //public fields\n    [NotNull] public string SearchLabel {get; private set;}\n    [NotNull] public ISignal<string> Signaller { get { return _Signaller; }}\n    \n    //private fields"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeAccessorOwnerBody"
  },
  "hash": "29551bf61759122afd7a527eeeed9ecab2da00c0e3042653d4fcabe271e03e89"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent body style: use expression-bodied property",
  "detailsInfo": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/TextBufferVersion.cs",
      "language": "C#",
      "line": 59,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 57,
        "length": 6,
        "offset": 107,
        "surroundingCode": "    public static IEqualityComparer<TextBufferVersion> MasterVersionSlaveVersionComparer\n    {\n      get { return ourMasterVersionSlaveVersionComparerInstance; }\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeAccessorOwnerBody"
  },
  "hash": "2da2a96be7b26e53f2ed63d710afc0f70d03528c820813f26a9af53d5e5902ea"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent body style: use expression-bodied property",
  "detailsInfo": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 442,
      "offset": 75,
      "length": 6,
      "code": {
        "startLine": 440,
        "length": 6,
        "offset": 154,
        "surroundingCode": "    //public fields\n    [NotNull] public string SearchLabel {get; private set;}\n    [NotNull] public IViewableMap<int, WrappedStringModel> Issues { get { return _Issues; }}\n    \n    //private fields"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeAccessorOwnerBody"
  },
  "hash": "4afe422703c3d8695b331736e490a017f728354367ac77e51db9e4cddfe5e2d6"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent body style: use expression-bodied property",
  "detailsInfo": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 100,
      "offset": 67,
      "length": 6,
      "code": {
        "startLine": 98,
        "length": 6,
        "offset": 124,
        "surroundingCode": "    \n    private SerializationCtx mySerializationContext;\n    public override SerializationCtx SerializationContext { get { return mySerializationContext; } }\n    //primary constructor\n    private InterningExtRootModel("
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeAccessorOwnerBody"
  },
  "hash": "5be49558f5f997c031c64c2b5bd1c26f9cc49556cde5074e3ec9c058146b93ac"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent body style: use expression-bodied property",
  "detailsInfo": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 18,
      "offset": 70,
      "length": 6,
      "code": {
        "startLine": 16,
        "length": 6,
        "offset": 277,
        "surroundingCode": "    public IViewableProperty<RdTextBufferChange?> Changes { get { return _Changes; }}\n    public IViewableProperty<TextBufferVersion> VersionBeforeTypingSession { get { return _VersionBeforeTypingSession; }}\n    public IViewableProperty<RdAssertion> AssertedMasterText { get { return _AssertedMasterText; }}\n    public IViewableProperty<RdAssertion> AssertedSlaveText { get { return _AssertedSlaveText; }}\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeAccessorOwnerBody"
  },
  "hash": "705f8c750b43206f552a8ff0d579158486df811fc2c96edc8081e7b09e14ad01"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent body style: use expression-bodied property",
  "detailsInfo": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 92,
      "offset": 75,
      "length": 6,
      "code": {
        "startLine": 90,
        "length": 6,
        "offset": 278,
        "surroundingCode": "    [NotNull] public IViewableProperty<string> InternedLocally { get { return _InternedLocally; }}\n    [NotNull] public IViewableProperty<string> InternedExternally { get { return _InternedExternally; }}\n    [NotNull] public IViewableProperty<string> InternedInProtocol { get { return _InternedInProtocol; }}\n    \n    //private fields"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeAccessorOwnerBody"
  },
  "hash": "935644510d97169050af333f5376ac903fc149672efaa8864587a8c151eac9e4"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent body style: use expression-bodied property",
  "detailsInfo": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/TestThrowingLogFactory.cs",
      "language": "C#",
      "line": 16,
      "offset": 40,
      "length": 6,
      "code": {
        "startLine": 14,
        "length": 6,
        "offset": 90,
        "surroundingCode": "    internal class TestThrowingLogger : ILog\n    {\n        public string Category { get { return \"\"; } }\n\n        public bool IsEnabled(LoggingLevel level) { return level == LoggingLevel.ERROR; }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeAccessorOwnerBody"
  },
  "hash": "a7d597030436b4b86d361b5e656f32f3ea1fd43cd23195bfcf018877d5271473"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent body style: use expression-bodied property",
  "detailsInfo": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 90,
      "offset": 72,
      "length": 6,
      "code": {
        "startLine": 88,
        "length": 6,
        "offset": 104,
        "surroundingCode": "    //fields\n    //public fields\n    [NotNull] public IViewableProperty<string> InternedLocally { get { return _InternedLocally; }}\n    [NotNull] public IViewableProperty<string> InternedExternally { get { return _InternedExternally; }}\n    [NotNull] public IViewableProperty<string> InternedInProtocol { get { return _InternedInProtocol; }}"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeAccessorOwnerBody"
  },
  "hash": "a8d5ae79410c96c8b2b856b882b14eab7fa8282d49d7acb25b1038e8916a211d"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent body style: use expression-bodied property",
  "detailsInfo": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 86,
      "offset": 67,
      "length": 6,
      "code": {
        "startLine": 84,
        "length": 6,
        "offset": 140,
        "surroundingCode": "    //private fields\n    private SerializationCtx mySerializationContext;\n    public override SerializationCtx SerializationContext { get { return mySerializationContext; } }\n    //primary constructor\n    //secondary constructor"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeAccessorOwnerBody"
  },
  "hash": "ab4279b1b52a7f2919cfa59cdbae9c53383e713159e27ed393143e528ac4ab43"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent body style: use expression-bodied property",
  "detailsInfo": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 91,
      "offset": 75,
      "length": 6,
      "code": {
        "startLine": 89,
        "length": 6,
        "offset": 193,
        "surroundingCode": "    //public fields\n    [NotNull] public IViewableProperty<string> InternedLocally { get { return _InternedLocally; }}\n    [NotNull] public IViewableProperty<string> InternedExternally { get { return _InternedExternally; }}\n    [NotNull] public IViewableProperty<string> InternedInProtocol { get { return _InternedInProtocol; }}\n    "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeAccessorOwnerBody"
  },
  "hash": "b25e162dfb770844594696b92160128e650cf344a66a3372c338e0ce8546aff3"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent body style: use expression-bodied property",
  "detailsInfo": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/SpinWaitLock.cs",
      "language": "C#",
      "line": 19,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 17,
        "length": 6,
        "offset": 63,
        "surroundingCode": "    public static int ApprovedProcessorCount\n    {\n      get { return _processorCount; }\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeAccessorOwnerBody"
  },
  "hash": "bc1cb6bfa407b41496f66895db5085651503e1209b90d11442e4e6d6d622494a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent body style: use expression-bodied property",
  "detailsInfo": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestPropertyWrapper.cs",
      "language": "C#",
      "line": 21,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 19,
        "length": 6,
        "offset": 76,
        "surroundingCode": "    public override SerializationCtx SerializationContext\n    {\n      get { return mySerializationContext; }\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeAccessorOwnerBody"
  },
  "hash": "cc15ef9dced2f8f691efbbbebad99b912154a23946757783d1c1939b84b82474"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent body style: use expression-bodied property",
  "detailsInfo": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 448,
      "offset": 67,
      "length": 6,
      "code": {
        "startLine": 446,
        "length": 6,
        "offset": 124,
        "surroundingCode": "    \n    private SerializationCtx mySerializationContext;\n    public override SerializationCtx SerializationContext { get { return mySerializationContext; } }\n    //primary constructor\n    private InterningTestModel("
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeAccessorOwnerBody"
  },
  "hash": "cd3649f57cee9c49f43e45f0a13cd7493751c73ed8fcafc9f69efea9ea9c1466"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent body style: use expression-bodied property",
  "detailsInfo": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdIdHierarchyGuardTest.cs",
      "language": "C#",
      "line": 60,
      "offset": 30,
      "length": 6,
      "code": {
        "startLine": 58,
        "length": 6,
        "offset": 38,
        "surroundingCode": "      }\n\n      public RdId Id { get { return myValue.RdId; } }\n\n      public static Model Read(SerializationCtx ctx, UnsafeReader reader)"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeAccessorOwnerBody"
  },
  "hash": "ced698eaeb977dd5c80ce0af1b533bfd845fced3167bde50c44253e5a699e615"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent body style: use expression-bodied property",
  "detailsInfo": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 134,
      "offset": 67,
      "length": 6,
      "code": {
        "startLine": 132,
        "length": 6,
        "offset": 124,
        "surroundingCode": "    \n    private SerializationCtx mySerializationContext;\n    public override SerializationCtx SerializationContext { get { return mySerializationContext; } }\n    //primary constructor\n    private InterningMtModel("
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeAccessorOwnerBody"
  },
  "hash": "d80444fb08bb043a05f5a89acc2761f29dddf68aec6f62a8fc8712ab82ed62a8"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent body style: use expression-bodied property",
  "detailsInfo": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 23,
      "offset": 76,
      "length": 6,
      "code": {
        "startLine": 21,
        "length": 6,
        "offset": 108,
        "surroundingCode": "    //fields\n    //public fields\n    [NotNull] public IViewableProperty<InterningExtRootModel> Root { get { return _Root; }}\n    \n    //private fields"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeAccessorOwnerBody"
  },
  "hash": "de7ed1a41559c0ce0fe3c7099467071bac7fb688554852ee05c73b249f3e5259"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent body style: use expression-bodied property",
  "detailsInfo": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 371,
      "offset": 83,
      "length": 6,
      "code": {
        "startLine": 369,
        "length": 6,
        "offset": 162,
        "surroundingCode": "    //public fields\n    [NotNull] public string SearchLabel {get; private set;}\n    [NotNull] public IViewableMap<int, ProtocolWrappedStringModel> Issues { get { return _Issues; }}\n    \n    //private fields"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeAccessorOwnerBody"
  },
  "hash": "ed84d87f840be1b374bf0d9a447889ce57dc693d2f17e140c652de6e90a2ca34"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent body style: use expression body",
  "detailsInfo": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 267,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 265,
        "length": 6,
        "offset": 26,
        "surroundingCode": "      get\n      {\n        return myCount;\n      }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeAccessorOwnerBody"
  },
  "hash": "f7db46d8886581706bcf649fca1e3b3888337f785adaa57f5e67d78613baec2f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of default value expression when type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in default value expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/JetPriorityQueue.cs",
      "language": "C#",
      "line": 45,
      "offset": 62,
      "length": 3,
      "code": {
        "startLine": 43,
        "length": 3,
        "offset": 134,
        "surroundingCode": "    {\n      if (initialCapacity <= 0) initialCapacity = DefaultCapacity;\n      myStorage = new List<T?>(initialCapacity + 1) { default(T) }; //first elem is always false to simplify `left` and `right`\n      myVersions = new List<long>(initialCapacity + 1) {0};\n      myComparer = comparer ?? Comparer<T?>.Default;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeDefaultValueWhenTypeEvident"
  },
  "hash": "4b86a863b0a12b6a5eca37d346e70374d87ea3c6be87fcb6888fda3d8129fa5f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of default value expression when type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in default value expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SocketWireTest.cs",
      "language": "C#",
      "line": 33,
      "offset": 94,
      "length": 10,
      "code": {
        "startLine": 31,
        "length": 10,
        "offset": 95,
        "surroundingCode": "\n\n    private void WaitAndAssert<T>(RdProperty<T> property, T expected, Maybe<T> prev = default(Maybe<T>))\n    {\n      var start = Environment.TickCount;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeDefaultValueWhenTypeEvident"
  },
  "hash": "6c1756a57382736fa8bce5fa015c5355ad22195b097ceef644de321be3f03aaf"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of default value expression when type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in default value expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 188,
      "offset": 107,
      "length": 3,
      "code": {
        "startLine": 186,
        "length": 3,
        "offset": 236,
        "surroundingCode": "    /// <typeparam name=\"T\">Expected return type</typeparam>\n    /// <returns>Evaluated property value or default value</returns>\n    public static T? GetPropertyValueSafe<T>(this object o, string propertyName, T? defaultValue = default(T))\n    {\n      T? result = defaultValue;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeDefaultValueWhenTypeEvident"
  },
  "hash": "8b7d8b41a386ac0166159b0798e6ef82af3288fe67f1551c4223edb7d3ebe98a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of default value expression when type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in default value expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/DictionaryEx.cs",
      "language": "C#",
      "line": 15,
      "offset": 100,
      "length": 8,
      "code": {
        "startLine": 13,
        "length": 8,
        "offset": 166,
        "surroundingCode": "    [Pure]\n    internal static TValue? GetOrDefault<TKey, TValue>(\n      this Dictionary<TKey, TValue> dictionary, [DisallowNull] TKey key, TValue? @default = default(TValue))\n    {\n      if (dictionary == null) throw new ArgumentNullException(nameof(dictionary));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeDefaultValueWhenTypeEvident"
  },
  "hash": "9f72b2cdbc2d40b49a08bfd4dbdd1a2364357c93d82dce12d701fc9cc685acd2"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of default value expression when type is not evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in default value expression when type is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeNotEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdTaskResult.cs",
      "language": "C#",
      "line": 29,
      "offset": 118,
      "length": 3,
      "code": {
        "startLine": 27,
        "length": 3,
        "offset": 231,
        "surroundingCode": "    internal static RdTaskResult<T> Cancelled() => new RdTaskResult<T>(RdTaskStatus.Canceled, default(T), null);\n\n    internal static RdTaskResult<T> Faulted(Exception exception) => new RdTaskResult<T>(RdTaskStatus.Faulted, default(T), exception as RdFault ?? new RdFault(exception));\n\n    public T Unwrap()"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeDefaultValueWhenTypeNotEvident"
  },
  "hash": "05d019c45473b57a72d95e69ee0ba1589bd841545199953b36e089260a019236"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of default value expression when type is not evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in default value expression when type is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeNotEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 196,
      "offset": 26,
      "length": 3,
      "code": {
        "startLine": 194,
        "length": 3,
        "offset": 51,
        "surroundingCode": "    {\n      myIndex = -1;\n      myCurrent = default(T);\n    }\n      "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeDefaultValueWhenTypeNotEvident"
  },
  "hash": "065ef9455ade2a05cfe3bdf7551c818d24ed58a86d10e6de0da1fb673bdc0a6d"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of default value expression when type is not evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in default value expression when type is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeNotEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/JetPriorityQueue.cs",
      "language": "C#",
      "line": 123,
      "offset": 23,
      "length": 3,
      "code": {
        "startLine": 121,
        "length": 3,
        "offset": 62,
        "surroundingCode": "      if (myStorage.Count <= 1)\n      {\n        res = default (T);\n        return false;\n      }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeDefaultValueWhenTypeNotEvident"
  },
  "hash": "0695fd2c2aab6d99365f4f5625245627b935b66227a117d35dd9d77fa22c17f6"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of default value expression when type is not evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in default value expression when type is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeNotEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 189,
      "offset": 26,
      "length": 3,
      "code": {
        "startLine": 187,
        "length": 3,
        "offset": 34,
        "surroundingCode": "      }\n\n      myCurrent = default(T);\n      return false;\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeDefaultValueWhenTypeNotEvident"
  },
  "hash": "0ea2c7d49a88911370dde9039772b86a88f087c47bcb769bd2c334b7e594560b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of default value expression when type is not evident",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in default value expression when type is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeNotEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 410,
      "offset": 36,
      "length": 6,
      "code": {
        "startLine": 408,
        "length": 6,
        "offset": 72,
        "surroundingCode": "    {\n      int count = ReadInt32();\n      if (count < 0) return default(TCol);\n\n      TCol col = constructor(count);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeDefaultValueWhenTypeNotEvident"
  },
  "hash": "14fe87cdc6c2b2a6bac901589057371c2e5fccc6ae78e85621ae72e24ab7636e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of default value expression when type is not evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in default value expression when type is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeNotEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/JetPriorityQueue.cs",
      "language": "C#",
      "line": 386,
      "offset": 54,
      "length": 3,
      "code": {
        "startLine": 384,
        "length": 3,
        "offset": 142,
        "surroundingCode": "    [PublicAPI] public static T? ExtractOrDefault<T>(this IPriorityQueue<T> queue)\n    {\n      return !queue.TryExtract(out var res) ? default(T) : res;\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeDefaultValueWhenTypeNotEvident"
  },
  "hash": "16907151ef8e8799af4ca5285d7ba2c711ba2782a6aafffca8e20b092d047cb3"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of default value expression when type is not evident",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in default value expression when type is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeNotEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdTaskResult.cs",
      "language": "C#",
      "line": 27,
      "offset": 102,
      "length": 3,
      "code": {
        "startLine": 25,
        "length": 3,
        "offset": 216,
        "surroundingCode": "    internal static RdTaskResult<T> Success(T result) => new RdTaskResult<T>(RdTaskStatus.Success, result, null);\n\n    internal static RdTaskResult<T> Cancelled() => new RdTaskResult<T>(RdTaskStatus.Canceled, default(T), null);\n\n    internal static RdTaskResult<T> Faulted(Exception exception) => new RdTaskResult<T>(RdTaskStatus.Faulted, default(T), exception as RdFault ?? new RdFault(exception));"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeDefaultValueWhenTypeNotEvident"
  },
  "hash": "1998a5a1fe70a1ba0eb8107ffc742af7607c1dce2ce5d23aff56cb698d00cf23"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of default value expression when type is not evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in default value expression when type is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeNotEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Result.cs",
      "language": "C#",
      "line": 365,
      "offset": 35,
      "length": 3,
      "code": {
        "startLine": 363,
        "length": 3,
        "offset": 106,
        "surroundingCode": "    public static implicit operator Result<T>(Result<Nothing> me)\n    {\n      return new Result<T>(default(T), me.ExceptionOrExceptionDispatchInfo);\n    }\n    "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeDefaultValueWhenTypeNotEvident"
  },
  "hash": "242d8c91f50ce868a17ccd1128a30bfba7428f238ea5fb05ce1188c33877bc0e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of default value expression when type is not evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in default value expression when type is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeNotEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 97,
      "offset": 34,
      "length": 3,
      "code": {
        "startLine": 95,
        "length": 3,
        "offset": 57,
        "surroundingCode": "      {\n        case 1:\n          mySingleValue = default(T);\n          myMultipleValues = null;\n          return true;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeDefaultValueWhenTypeNotEvident"
  },
  "hash": "29dee4e553425673d960d018f2a9be6b435045041c18757028626eb0768dfb64"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of default value expression when type is not evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in default value expression when type is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeNotEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 69,
      "offset": 30,
      "length": 3,
      "code": {
        "startLine": 67,
        "length": 3,
        "offset": 59,
        "surroundingCode": "    public void Clear()\n    {\n      mySingleValue = default(T);\n      myMultipleValues = null;\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeDefaultValueWhenTypeNotEvident"
  },
  "hash": "39d1d8e808b05378d643f202833154dda2cfcbf73bb76d6ae7ab2b411b7dfd73"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of default value expression when type is not evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in default value expression when type is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeNotEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 425,
      "offset": 36,
      "length": 7,
      "code": {
        "startLine": 423,
        "length": 7,
        "offset": 72,
        "surroundingCode": "    {\n      int count = ReadInt32();\n      if (count < 0) return default(TDict);\n\n      TDict dict = constructor(count);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeDefaultValueWhenTypeNotEvident"
  },
  "hash": "3f767a87cb3f6fe4fe991140a3a3e4346e71ebcbc823045138e4cc6fbaa770f5"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of default value expression when type is not evident",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in default value expression when type is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeNotEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ListEvent.cs",
      "language": "C#",
      "line": 28,
      "offset": 66,
      "length": 3,
      "code": {
        "startLine": 26,
        "length": 3,
        "offset": 129,
        "surroundingCode": "    public static ListEvent<V> Add(int index, V newValue)\n    {\n      return new ListEvent<V>(AddUpdateRemove.Add, index, default(V), newValue);\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeDefaultValueWhenTypeNotEvident"
  },
  "hash": "437b5ca7604a05603d55b63f3b7c0b8c09d3e0d313b0bcf557a23f458e34a84d"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of default value expression when type is not evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in default value expression when type is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeNotEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Result.cs",
      "language": "C#",
      "line": 523,
      "offset": 52,
      "length": 10,
      "code": {
        "startLine": 521,
        "length": 10,
        "offset": 150,
        "surroundingCode": "    public static implicit operator Result<TSuccess, TFailure>(Result<Nothing, TFailure> me)\n    {\n      return new Result<TSuccess, TFailure>(default(TSuccess), me.ExceptionOrExceptionDispatchInfo, me.FailValue);\n    }\n    "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeDefaultValueWhenTypeNotEvident"
  },
  "hash": "5617aa0571dedb1e6f3e3f5e381fffe86426cfaa8d8972415023a3685410e2a8"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of default value expression when type is not evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in default value expression when type is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeNotEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 58,
      "offset": 34,
      "length": 3,
      "code": {
        "startLine": 56,
        "length": 3,
        "offset": 117,
        "surroundingCode": "        case 1: \n          myMultipleValues = new List<T?> { mySingleValue, item };\n          mySingleValue = default(T);\n          break;\n        default:"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeDefaultValueWhenTypeNotEvident"
  },
  "hash": "649be94c1fc6a99941fc703e802b571658df2e683d7aaa09b8cae84a8c6a411d"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of default value expression when type is not evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in default value expression when type is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeNotEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogLog.cs",
      "language": "C#",
      "line": 341,
      "offset": 23,
      "length": 3,
      "code": {
        "startLine": 339,
        "length": 3,
        "offset": 48,
        "surroundingCode": "      {\n        Error(e);\n        return default(T);\n      }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeDefaultValueWhenTypeNotEvident"
  },
  "hash": "66ba3b3268669084a3f5569dabb2c9e8eeb86c13c73de879ccf16413483119c4"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of default value expression when type is not evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in default value expression when type is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeNotEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ListEvent.cs",
      "language": "C#",
      "line": 38,
      "offset": 79,
      "length": 3,
      "code": {
        "startLine": 36,
        "length": 3,
        "offset": 145,
        "surroundingCode": "    public static ListEvent<V> Remove(int index, V oldValue)\n    {\n      return new ListEvent<V>(AddUpdateRemove.Remove, index, oldValue, default(V));\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeDefaultValueWhenTypeNotEvident"
  },
  "hash": "67444d968b21916cee4f9df1ae62925c83d790012923bac94f8ab9bc40c90c5e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of default value expression when type is not evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in default value expression when type is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeNotEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/JetPriorityQueue.cs",
      "language": "C#",
      "line": 75,
      "offset": 28,
      "length": 3,
      "code": {
        "startLine": 73,
        "length": 3,
        "offset": 78,
        "surroundingCode": "      myStorage.Clear();\n      myVersions.Clear();\n      myStorage.Add(default(T));\n      myVersions.Add(0);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeDefaultValueWhenTypeNotEvident"
  },
  "hash": "7d98d5ea3d9a4b37f1306c4adda79c055d56340bf50a592bffa92341c958db56"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of default value expression when type is not evident",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in default value expression when type is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeNotEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Result.cs",
      "language": "C#",
      "line": 533,
      "offset": 99,
      "length": 10,
      "code": {
        "startLine": 531,
        "length": 10,
        "offset": 188,
        "surroundingCode": "    public static implicit operator Result<TSuccess, TFailure>(Result<TSuccess> me)\n    {\n      return new Result<TSuccess, TFailure>(me.Value, me.ExceptionOrExceptionDispatchInfo, default(TFailure));\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeDefaultValueWhenTypeNotEvident"
  },
  "hash": "aa72765186e139d6894a39f5a167f20a2f8de894e1550d38b8913a50a10b853f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of default value expression when type is not evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in default value expression when type is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeNotEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/ValueLifetimed.cs",
      "language": "C#",
      "line": 27,
      "offset": 24,
      "length": 3,
      "code": {
        "startLine": 25,
        "length": 3,
        "offset": 58,
        "surroundingCode": "    {\n      if (!Lifetime.IsAlive)\n        Value = default(T);\n    }\n  }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeDefaultValueWhenTypeNotEvident"
  },
  "hash": "b14628f77691c09249af8841852afdb884fa7439812fc2930f750ca1cfe81ff3"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of default value expression when type is not evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in default value expression when type is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeDefaultValueWhenTypeNotEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CollectionEx.cs",
      "language": "C#",
      "line": 54,
      "offset": 22,
      "length": 3,
      "code": {
        "startLine": 52,
        "length": 3,
        "offset": 40,
        "surroundingCode": "      else\n      {\n        res = default(T);\n        return false;\n      }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeDefaultValueWhenTypeNotEvident"
  },
  "hash": "f86bb078394637819767d39c7450093d9fa4e0d0d3b275b58ed6287eadca4f38"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ProactiveLazy.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 31,
        "surroundingCode": "\nnamespace JetBrains.Threading\n{\n    /// <summary>\n    /// Holder that starts evaluation immediately right in the constructor in background. "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "00a955d3508ee8fbdeef453ef7627d1d974ddabd81ec21b9747d81dfc917f25a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/IViewableList.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Collections.Viewable\n{\n  /// <summary>\n  /// Observable list."
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "00c23e71199cea4be8a1c442879b7583241a265769ed42a57530b3d505457b59"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/RdTextChangeSerializer.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 2,
        "length": 1,
        "offset": 40,
        "surroundingCode": "\nnamespace JetBrains.Rd.Text.Intrinsics\n{\n  public static class RdTextChangeSerializer\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "01056c084c6830dd0a6cf74674f45bdeb87cd5dce29fedef769c8305bff24ff7"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Components/TestWire.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Components\n{\n  public class TestWire : WireBase\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "018db6249385594d8b3b857ca73032e931d936f4fecc8d97dd8e42f68042699a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Core/TestResult.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 31,
        "surroundingCode": "\nnamespace Test.Lifetimes.Core\n{\n  public class TestResult : LifetimesTestBase\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "034c6a4f2d02db4845fdc888447827693a0fdbbaac39666e8a61f77c7b5a325a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/IInternRoot.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 24,
        "surroundingCode": "\nnamespace JetBrains.Rd\n{\n  /// <summary>\n  /// Interns values sent over protocol"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "03a8de541d404e236888ce081d095be22ace5b7756869bdb41fc84d03e4c7378"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Util/PrettyPrinter.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Util\n{\n  public class PrettyPrinter\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "057ae746f20153dba2ff5f3eaf5cedebe914d62e29ec59357e22adf1922e63c3"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/InternRoot.cs",
      "language": "C#",
      "line": 16,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 14,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Impl\n{\n  public class InternRoot<TBase> : IInternRoot<TBase>\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "0645fbaf92ae258fa28d4083df3dacb16c2d412fd985e2b1b94ddd3d0b7ba698"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGeneratorUtil.cs",
      "language": "C#",
      "line": 12,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 10,
        "length": 1,
        "offset": 35,
        "surroundingCode": "\nnamespace JetBrains.Rd.Reflection\n{\n  /// <summary>\n  /// Helpers method which used by generated proxies."
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "064d6c77b95ba8d24434c1d8965120a8b12d3090941f5925bfee3ba0f18ab6f6"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Disposable.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 2,
        "length": 1,
        "offset": 26,
        "surroundingCode": "\nnamespace Test.Lifetimes\n{\n    public class Disposable : IDisposable\n    {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "065ec0c6ee6a0d3d923272a4e8f2238d7ea957db70b17ece1b73941e3437d35e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 21,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 19,
        "length": 1,
        "offset": 35,
        "surroundingCode": "\nnamespace JetBrains.Rd.Reflection\n{\n  [AttributeUsage(AttributeTargets.Class, Inherited = false), MeansImplicitUse(ImplicitUseTargetFlags.WithMembers)]\n  [BaseTypeRequired(typeof(RdExtReflectionBindableBase))]"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "073c6bf2c730bba18190f1738206fbc731595076ca97c9d2eca9f82c353205f8"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 21,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 19,
        "length": 1,
        "offset": 35,
        "surroundingCode": "\nnamespace JetBrains.Rd.Reflection\n{\n  /**\n    <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "097b879a2b813ab7061b9edf2d0e49f406ab7360f8601c6a4265fa8fac66dcfe"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 9,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 7,
        "length": 1,
        "offset": 33,
        "surroundingCode": "\nnamespace JetBrains.Collections\n{  \n  /// <summary>\n  /// Saves memory footprint and traffic for lists with single element: doesn't allocate real list"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "0a6f3abbe8eb10974862a8f6723c891561d14705cc78950e2e946ed8e6f51707"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 22,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 20,
        "length": 1,
        "offset": 35,
        "surroundingCode": "\nnamespace JetBrains.Rd.Reflection\n{\n  /// <summary>\n\t/// To get maximal performance of  Rd framework you should directly provide serializers to every Model and Property."
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "0b4364ce928feb426e26fdd8d8facc2125201f5a0618b200ae2c5706506b9fee"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdListTest.cs",
      "language": "C#",
      "line": 9,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 7,
        "length": 1,
        "offset": 28,
        "surroundingCode": "\nnamespace Test.RdFramework\n{\n  [TestFixture]\n  [Apartment(System.Threading.ApartmentState.STA)]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "0c9271482802a14ac9e6ecc1b02271fedbe991f5741dde5c5441183e6020897d"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/CtxReadDelegate.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 2,
        "length": 1,
        "offset": 24,
        "surroundingCode": "\nnamespace JetBrains.Rd\n{\n  public delegate T CtxReadDelegate<out T>(SerializationCtx ctx, UnsafeReader reader);\n  public delegate void CtxWriteDelegate<in T>(SerializationCtx ctx, UnsafeWriter writer, T value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "0d51adc17ea98cc673a87f6b583d5282bdd999d0c16ef5c547799fd822394acb"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 16,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 14,
        "length": 1,
        "offset": 31,
        "surroundingCode": "\nnamespace JetBrains.Lifetimes\n{\n  /// <summary>\n  /// Lifetime's lifecycle statuses. Lifetime is created in <see cref=\"Alive\"/> status and eventually becomes <see cref=\"Terminated\"/>."
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "0eebbf96c7fe40e4be41296ddb3cef78eb7bb847c3fddba76e0d09364ece348c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFacade.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 35,
        "surroundingCode": "\nnamespace JetBrains.Rd.Reflection\n{\n  public class ReflectionSerializersFacade\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "0f77ef546df9c3726a3bf0b8a731416db0dfd370a5bd94acbad4bf9b2e776e27"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ThreadEx.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 31,
        "surroundingCode": "\nnamespace JetBrains.Threading\n{\n  public static class ThreadEx\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "101acbea06f51920f1f86450876ac5b620c5dedc5f4074675145ab2def20fdba"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/PolymorphicScalarIntrinsicTest.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [TestFixture]\n  public class PolymorphicScalarIntrinsicTest : RdReflectionTestBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "10edd303aadd59b4217826ab16fa6231c86def551b7296722dad6c6fa7eade3b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/RdTextChangeEx.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Text\n{\n  public static class RdTextChangeEx\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "13b23857226289ad147c06c38cd407e3fc6e14b583b165d083b7c086424247bb"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Interop/MethodImplAdvancedOptions.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 26,
        "surroundingCode": "\nnamespace JetBrains.Util\n{\n//  [Obsolete(\"Use the intrinsic constant MethodImplOptions::AggressiveInlining directly.\")]\n  public static class MethodImplAdvancedOptions"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "13f785fc49d0a3610eb36a1540d12e9a4e5c36168b68d7ecd12bbe6fa70d976e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/ContextWithExtTest.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 37,
        "surroundingCode": "\nnamespace Test.RdFramework.Contexts\n{\n  public class ContextWithExtTest : RdFrameworkTestBase\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "14173b943882fa523b1742e3816f984aee0bbecaa693fe133c57cb66e333ba81"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdPerContextMap.cs",
      "language": "C#",
      "line": 11,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 9,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Impl\n{\n    public class RdPerContextMap<K, V> : RdReactiveBase, IPerContextMap<K, V> where V : RdBindableBase where K: notnull\n    {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "1496c50a805b9cd70b4890edbb02da6e3d2424c356f28f2ebb1d6af17e603e15"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/CollectionTest.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 38,
        "surroundingCode": "\nnamespace Test.Lifetimes.Collections\n{\n  [TestFixture]\n  public class CollectionTest : LifetimesTestBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "1510f9bce0616b66e721473e86a334fc4191e9e874b7cf03a1d29d3bbecfb004"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 14,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 12,
        "length": 1,
        "offset": 35,
        "surroundingCode": "\nnamespace JetBrains.Serialization\n{\n  /// <summary>\n  /// Effective serialization tool. <see cref=\"UnsafeWriter\"/> is thread-bound automatically expandable and shrinkable"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "157d636e688a1faaa858c9f753c4c1b88c95e648e101a7c4813ac0cfeff6fc7f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ISignal.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 41,
        "surroundingCode": "namespace JetBrains.Collections.Viewable\n{\n  \n  /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "158309db676ad0b94771b8a0c56a8f533221b8059fb5f6e9151f65d866c6acc3"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ViewableProperty.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Collections.Viewable\n{\n  /// <summary>\n  /// Default implementation of <see cref=\"IViewableProperty{T}\"/>. Synchronized internally."
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "180e249353bd62d327fa57206b057bbdaf8034e461504332e4d909eef48e45d1"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/Example/Animals.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [RdModel]\n  public class Animal : RdReflectionBindableBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "189f487874a17329393aa1b4702874885db4cd5f8b74750989925bba5918efb6"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/CornerCase/CantHavePrivateFieldError.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [RdModel]\n  public class CantHavePrivateFieldError : RdReflectionBindableBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "1aa958d866c8ab7ef56ba24e9d5cc53cf4005c7830563e763a7a4aebf53be4b3"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSet.cs",
      "language": "C#",
      "line": 13,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 11,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Impl\n{\n  public class RdSet<T> : RdReactiveBase, IViewableSet<T> where T: notnull\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "1bf564f11117d5f48cec021d69734804025d811ff35ba8529c04d2575f18b7cb"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/ProcessWatchdog.cs",
      "language": "C#",
      "line": 12,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 10,
        "length": 1,
        "offset": 33,
        "surroundingCode": "\nnamespace JetBrains.Diagnostics\n{\n  /// <summary>\n  /// Watchdog that automatically terminates current process if some other process exits."
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "1ecdb37a77311b37dce159dd3a298d150557d724627849a21c1844d9aae9d9ea"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdDelegateBase.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Base\n{\n  public class RdDelegateBase<T> : IRdBindable where T : class, IRdBindable\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "1fc1977b45d06f4b3c122c5de28f32b7138b450c1bfdb8f6f4405a4b37519c86"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/LocalStopwatch.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 28,
        "surroundingCode": "\r\nnamespace JetBrains.Util\r\n{\r\n  /// <summary>\r\n  /// This structure can be used as a non-allocated version of the <see cref=\"Stopwatch\"/>\r"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "200003efdbf7753b34e968f58bc0c814a708edc64096bf3c85a24b54a4e0c0bc"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/Example/ModelCalls.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [RdExt]\n  public sealed class ModelCalls : RdExtReflectionBindableBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "2032c63ac70976dde748bcb5fb691fd153b0547e713176c412a089c3c5eabcc2"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Maybe.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 26,
        "surroundingCode": "\nnamespace JetBrains.Core\n{\n  /// <summary>\n  /// Implementation of 'maybe' monad. Either <seealso cref=\"HasValue\"/> is `true` and <seealso cref=\"Value\"/> doesn't throw exception or `false`. "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "20eb016437c045521ed529b8fd03f860042c59e6114ecd3bf6105b2b6e3e2dfe"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/TestLogger.cs",
      "language": "C#",
      "line": 10,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 8,
        "length": 1,
        "offset": 26,
        "surroundingCode": "\nnamespace Test.Lifetimes\n{\n  public class TestLogger : LogBase\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "226c9ebec25dc9d678ac99d4df5a254870ef426b6c6f63f2249ca2cb49097649"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ScopedAsyncLocal.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 31,
        "surroundingCode": "\nnamespace JetBrains.Threading\n{\n  #if !NET35\n  public struct ScopedAsyncLocal<T> : IDisposable "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "227d9efce3fde7188b7cad8f5c1c45e946c8737f311aaf56e29852f4de6c4149"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Nothing.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 26,
        "surroundingCode": "\nnamespace JetBrains.Core\n{\n  /// <summary>\n  /// Type that has no instances. Subclass of all classes, so can be casted to any class."
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "233cd704c016ba0efe29a5d7414563fac89bb451d9d0344e89e68b32ac6003a0"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorInheritanceNegativeTest.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [TestFixture]\n  public class ProxyGeneratorInheritanceNegativeTest : RdReflectionTestBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "244db9194d67541fc9bfbf636404af7a971e5c5135083e9dfffb50441c3388d8"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Assertion.cs",
      "language": "C#",
      "line": 17,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 15,
        "length": 1,
        "offset": 33,
        "surroundingCode": "\nnamespace JetBrains.Diagnostics\n{\n  [System.ComponentModel.Localizable(false)]\n  public static class Assertion"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "246f286a6e02ababbf308e8953ff856ae2c4e444e57b7b0c2eff62166992a0a6"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/AddRemove.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 41,
        "surroundingCode": "namespace JetBrains.Collections.Viewable\n{\n  /// <summary>\n  /// Defines whether the event kind is <see cref=\"Add\"/> or <see cref=\"Remove\"/>."
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "24d4b3706a19de9da30c51a8dbd05ea749956ca037260da1dd9e7ddacba845a1"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/ISingleContextHandler.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Base\n{\n  internal interface ISingleContextHandler\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "271e9c10ae499e4742316edae80598e3595f1ef4c90e5fe1edf0e1a1e2c8e8a0"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SocketProxyTest.cs",
      "language": "C#",
      "line": 12,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 10,
        "length": 1,
        "offset": 28,
        "surroundingCode": "\nnamespace Test.RdFramework\n{\n  [TestFixture]\n  [Ignore(\"TODO: this test tends to hang\")]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "277a585ab4945ccad02ffa511044557bea039633978cb8ed1c398fae7c40760a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Actor.cs",
      "language": "C#",
      "line": 14,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 12,
        "length": 1,
        "offset": 31,
        "surroundingCode": "\nnamespace JetBrains.Threading\n{\n\n#if !NET35"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "27d8dac1291b85c9d19f6983e1b6b60d63246e537fbd35a2947afe9d722a0326"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/IViewableSet.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 2,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Collections.Viewable\n{\n  /// <summary>\n  /// Observable set."
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "27e529fad5950c3cb67201bc2deb136633018f077ae779d2178c32c40484e884"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/SpinWaitLock.cs",
      "language": "C#",
      "line": 11,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 9,
        "length": 1,
        "offset": 31,
        "surroundingCode": "\nnamespace JetBrains.Threading\n{\n  [StructLayout(LayoutKind.Auto)]\n  public struct SpinWaitLock"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "28defe1af5cec43f3505dcc49c6bd7162292e5304e16b2fc940e58f7c89ae17a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SynchronousScheduler.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Collections.Viewable\n{\n  /// <summary>\n  /// Scheduler that executes task and action synchronously"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "2a9e8d099a6ac8ce5832e8166f93286504fe6e1b6b670b958ee3f83e7a800642"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/SequentialLifetimes.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 31,
        "surroundingCode": "\nnamespace JetBrains.Lifetimes\n{\n  /// <summary>\n  /// Maintains a sequence of lifetimes, so that the previous lifetime is closed before the new one is opened."
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "2ae91ed115368cc39f06afb2ff5ad408c2bd403a735afd11755951cd618c1aa5"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/BitSlice.cs",
      "language": "C#",
      "line": 10,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 8,
        "length": 1,
        "offset": 31,
        "surroundingCode": "\nnamespace JetBrains.Util.Util\n{\n  public class BitSlice\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "2cdcf3067333972ba40d889dbf3b08243bf7e53968667f6d203c6ff148410a69"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/SimpleTypesCatalog.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 35,
        "surroundingCode": "\nnamespace JetBrains.Rd.Reflection\n{\n  public class SimpleTypesCatalog : ITypesCatalog\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "2e224a3705827616532d4444b614dfb19ba49eab0f3700735ac17efcc50e3cc1"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ModificationCookieViewableSet.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Collections.Viewable\n{\n  \n  /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "2fb0d80126178d10b53933878d57499c160fa85e04f7f8858d0657c0df21d0f1"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/NullableEx.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 25,
        "surroundingCode": "namespace JetBrains.Util\n{\n  public static class NullableEx\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "2fc93209c8175387c16ab5a16837f7295cd1910fd554238be276eb1e64bd4dff"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/RdReflectionTestBase.cs",
      "language": "C#",
      "line": 13,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 11,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [TestFixture]\n  [Apartment(System.Threading.ApartmentState.STA)]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "310a1d49472eaebd3c3a271f0e50b02f0fbbe1489dd20b4b2e297710961db702"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/JetPriorityQueue.cs",
      "language": "C#",
      "line": 13,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 11,
        "length": 1,
        "offset": 33,
        "surroundingCode": "\nnamespace JetBrains.Collections\n{\n  /// <summary>\n  /// JetBrains interface of priority queue data structure."
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "315b76dacba9b454c75bca46fe3c4f60052e7d30d4d99eac3a6985e20ed6322d"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SingleThreadScheduler.cs",
      "language": "C#",
      "line": 12,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 10,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Collections.Viewable\n{\n  public class PrioritizedAction : IComparable<PrioritizedAction>\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "31c18717432e52e327d22f4503e8145f969f8797c76d70eeeaf7ab4a3e8d9a10"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/SerializersTest.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [TestFixture]\n  public class SerializersTest"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "32f2a5341b29cbf8c21c959fda29b66e5d5062b8ba8625e165830d9cb24ae4fa"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetimed.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 2,
        "length": 1,
        "offset": 31,
        "surroundingCode": "\nnamespace JetBrains.Lifetimes\n{\n  /// <summary>\n  /// Special kind reference to <see cref=\"Value\"/> "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "331764793a2b7ca80bd5c2d41696e3c161dd926d86a7c421b046a65e902ec6ad"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/IIntrinsicMarshaller.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 2,
        "length": 1,
        "offset": 35,
        "surroundingCode": "\nnamespace JetBrains.Rd.Reflection\n{\n  public interface IIntrinsicMarshaller<T>\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "33afe4f62ef91cfc1808cd916d70f1dedddb535f315c606bee0026ea86cb5449"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorAsyncCallsTest.cs",
      "language": "C#",
      "line": 18,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 16,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [TestFixture]\n  public class ProxyGeneratorAsyncCallsTest : ProxyGeneratorTestBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "33dc1cfaf2b3b496e165282b4bbaaae5521c84c6e29f9829d74b915264381f81"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/TestStealingWorker.cs",
      "language": "C#",
      "line": 9,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 7,
        "length": 1,
        "offset": 28,
        "surroundingCode": "\nnamespace Test.RdFramework\n{\n  public class TestStealingScheduler\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "33ef7185f4ab10a36bdc33574fa83670abb1e94c68591ee9bb59d8a7fa038b4d"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Util/SingleLinePrettyPrinter.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 2,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Util\n{\n  public class SingleLinePrettyPrinter : PrettyPrinter\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "34c63d8ca3c6a70cf6d22ce463b5c0ecfdd0ffc4d0ca2617bdaafe44493f8c48"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextEarlyDeliveryTest.cs",
      "language": "C#",
      "line": 13,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 11,
        "length": 1,
        "offset": 37,
        "surroundingCode": "\nnamespace Test.RdFramework.Contexts\n{\n  /// <summary>\n  /// This test replicates a case that happens often in real world: one end is created,"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "364dfae384026b6d3ac000a4dd4fbf37f87a1a2e7d2ca2572ae5073463b175d8"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorCornerCasesTests.cs",
      "language": "C#",
      "line": 12,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 10,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [TestFixture]\n  public class AsyncCornerCases : ProxyGeneratorAsyncCallsTest"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "36f03b2bb3d6cf1e3eea4dbeda8c3a4006d30f74683edc4146c34b2eff7d84e4"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorInheritanceTest.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [TestFixture]\n  public class ProxyGeneratorInheritanceTest : RdReflectionTestBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "378576ddca789c3755140fc879840c40cedb42a4df25fae885bdcb7f88e42af2"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Reflection.App/Program.cs",
      "language": "C#",
      "line": 13,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 11,
        "length": 1,
        "offset": 31,
        "surroundingCode": "\nnamespace Test.Reflection.App\n{\n  [RdRpc]\n  public interface IRootExt"
      }
    }
  ],
  "attributes": {
    "module": "Test.Reflection.App",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "38d0d665ac7326cd5fd84a696e53aabf9dc030ce9a5aae332e3370fa9878cbc0"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ByteBufferAsyncProcessor.cs",
      "language": "C#",
      "line": 12,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 10,
        "length": 1,
        "offset": 31,
        "surroundingCode": "\nnamespace JetBrains.Threading\n{\n  /// <summary>\n  /// Circular auto expandable and shrinkable byte buffer based on linked list of arrays with two roles:"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "38d517977f26b9732c1d21f6b7fc2cff01a14f367bb569de59b1b078dafcf289"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/RuntimeInfo.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 26,
        "surroundingCode": "\nnamespace JetBrains.Util\n{\n  public static class RuntimeInfo\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "39720d721616994e9297ab425f61e6800bfef8cabc6ef9d61ad4e2568d05ef4a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/ITypesRegistrar.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 24,
        "surroundingCode": "\nnamespace JetBrains.Rd\n{\n  public interface ITypesRegistrar\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "3a1c8e93cc9d1c2c57178c8312c78d05dac540bc553c403cecf1cbe706a18043"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/DefaultScheduler.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 2,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Collections.Viewable\n{\n  public sealed class DefaultScheduler : TaskSchedulerWrapper\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "3a73028c12e268d79636a126129f175c25756b34041836cec20fdfa4f98a589d"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextBasicTest.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 37,
        "surroundingCode": "\nnamespace Test.RdFramework.Contexts\n{\n  public class RdContextBasicTest : RdFrameworkTestBase\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "3aea9f9ce29b422578079b67c80c48640d72b6aa28e82e7d5c6d11ecb1900127"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 10,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 8,
        "length": 1,
        "offset": 36,
        "surroundingCode": "\nnamespace Test.Lifetimes.Lifetimes\n{\n  public class LifetimedListTest : LifetimesTestBase\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "3bd0f465960ae138589bfcef04329bbd9b12a793218ad954eaaf816298e76366"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/JetKeyValuePair.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 33,
        "surroundingCode": "\nnamespace JetBrains.Collections\n{\n  /// <summary>\n  /// Facilitates <see cref=\"KeyValuePair{TKey,TValue}\"/>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "3bd386e23289b180ec67636cdbfe48b5d8fa2ac1ebab7dd7a6e400405276cc4b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/IViewableMap.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Collections.Viewable\n{\n  \n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "3c6649430d469c1c9f0e251d47967983db0fec6b445075126655984066359ec1"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Statics.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 31,
        "surroundingCode": "\nnamespace JetBrains.Util.Util\n{\n\n  "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "3cc4b7e65267418938e07127d681a17d8ed56c06ec8d3de4f6189bd9b2b16a31"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorModelTest.cs",
      "language": "C#",
      "line": 12,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 10,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  /// <summary>\n  /// Live models can be returned from calls. Provided lifetime in method's parameters should define the lifetime of"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "3cfb6791f0b790ae81a10c593862edcfa3245fd93043dbe2476a2dcbdbb3ebed"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdProperty.cs",
      "language": "C#",
      "line": 13,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 11,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Impl\n{\n  public abstract class RdPropertyBase : RdReactiveBase {}\n  public class RdProperty<T> : RdPropertyBase, IViewableProperty<T>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "3e2edf08816e4ec4d0dd559ab730ec0cb66f1c9ecd9af19149e21b01d3234af4"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ChannelTest.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 36,
        "surroundingCode": "\nnamespace Test.Lifetimes.Threading\n{\n#if !NET35\n  public class ChannelTest : LifetimesTestBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "3e57214821ce07c7a87f6b73988d3a42043a2490d2c7ae4dbe01ac9add6136d6"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdExtBase.cs",
      "language": "C#",
      "line": 16,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 14,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Base\n{\n  public abstract class RdExtBase : RdReactiveBase\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "3efb6d492c84122bb8edea1413c28cdb05479d403a83f29937bce66fa35a6168"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/MapEvent.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 2,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Collections.Viewable\n{\n  /// <summary>\n  /// Event of <see cref=\"IViewableMap{K,V}\"/>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "3fa054d499078e4029d1a15ddef0c44e2f64eab22c66a8ba5ed3340989531b32"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 17,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 15,
        "length": 1,
        "offset": 26,
        "surroundingCode": "\nnamespace JetBrains.Util\n{\n  public static class ReflectionUtil\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "41e029e1c04f9c81c42c6f3546c7369ab07572729707c6d212b2817e201c3222"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ISource.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Collections.Viewable\n{\n  /// <summary>\n  /// Analogue of .NET event but subscription could be done only with <see cref=\"Lifetime\"/>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "4209edac678d1620b7b43ced895e182fe91c86d2fd72cea192064891fb341daa"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/Interfaces.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 30,
        "surroundingCode": "\nnamespace JetBrains.Rd.Tasks\n{\n  [PublicAPI] \n  public interface IRdTask<T>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "434e04d81b0a0a94f5e8cbf4adcb4cdf3d4fa6837ea46dc9346d1ef37ff4aad2"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/ILogFactory.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 2,
        "length": 1,
        "offset": 33,
        "surroundingCode": "\nnamespace JetBrains.Diagnostics\n{\n  /// <summary>\n  /// Logger's factory frontend. This class could"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "43e909a8ae827754d431e3ac7f26350f9f8b4a219a95a3f55db4aa85c68fa7c8"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/CustomGenericPrimitiveTest.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [TestFixture]\n  public class CustomGenericPrimitiveTest : RdReflectionTestBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "45cb5cf40407ff71136e01a1c10033f837057c1c62b86acbb70f90b5c3b70c92"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 15,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 13,
        "length": 1,
        "offset": 36,
        "surroundingCode": "\nnamespace Test.Lifetimes.Lifetimes\n{\n  \n  "
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "46660b1a951721323e767862845e3989aa2339aa845594b1ff29d5db74cb04ab"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/NullableAttributes.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 43,
        "surroundingCode": "\nnamespace System.Diagnostics.CodeAnalysis\n{\n#if !NETCOREAPP\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "47018a9cf6eedc540ad2c0f57d105f14b1efc5ea6b86ef98b657ffcf37e4e00e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/DictionaryEx.cs",
      "language": "C#",
      "line": 10,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 8,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Util\n{\n  static class DictionaryEx\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "47333392deddcc57f6410272229ea060421a0b41b5fd92dae7e9aed812ddc286"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferChange.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 45,
        "surroundingCode": "\nnamespace JetBrains.Rd.Text.Impl.Intrinsics\n{\n  public class RdTextBufferChange : IPrintable\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "473cfcbb1b0b00225bfb4729d74d85f3f548b3ed0e7a935abd53e27d3c5b2dc4"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdList.cs",
      "language": "C#",
      "line": 20,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 18,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Impl\n{\n  public class  RdList<V> : RdReactiveBase, IViewableList<V>\n#if !NET35"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "4782966313f24203af9afb4018d403c78586661976c79dc37a2b5c28e4459a62"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdMapTest.cs",
      "language": "C#",
      "line": 10,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 8,
        "length": 1,
        "offset": 28,
        "surroundingCode": "\nnamespace Test.RdFramework\n{\n  [TestFixture]\n  [Apartment(System.Threading.ApartmentState.STA)]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "48269a43a7ae20d963c5586e8cb79dc3515cf4ab6f81e14959a594e2859e0463"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdMap.cs",
      "language": "C#",
      "line": 17,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 15,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Impl\n{\n\n  public class RdMap<K, V> : RdReactiveBase, IViewableMap<K, V> where K : notnull"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "4908e10d92a670f6d7f8cf75d98193421884518260fbcad084a8733befa3ea87"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/IIdentities.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 23,
        "surroundingCode": "namespace JetBrains.Rd\n{\n  public interface IIdentities\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "4a742df03fffde25e721375d03b00e813a1b6a0c6d8e44827f9e06aa7eddba59"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdPropertyTest.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 28,
        "surroundingCode": "\nnamespace Test.RdFramework\n{\n  [TestFixture]\n  [Apartment(System.Threading.ApartmentState.STA)]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "4d2e785ed71f65caa3ed2706dcd8d794fdf1eccb7044122a383f6a4b242da7ff"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/TestVerification.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [TestFixture]\n  public class TestVerification"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "4d66f2a04473d50f73afc67ca78f33d0c50c2de65cbeb1e788ac5f7e2488a1e3"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Identities.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 2,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Impl\n{\n  public class Identities : IIdentities\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "4db3479f5ec4e1ae0c744de85f7eb9ed49ae8dc1995a1590a7a84a00c9e87634"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/EmptyEnumerator.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 33,
        "surroundingCode": "\nnamespace JetBrains.Collections\n{\n  /// <summary>\n  /// Enumerator for empty collection."
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "4e35134186c5a151f89ef92b0b381ea84794ebdf941c4d1624223c3624f62d1c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorCustomSignalTest.cs",
      "language": "C#",
      "line": 14,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 12,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  public class ProxyGeneratorCustomSignalTest : RdReflectionTestBase\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "4ef81bb3d731c521701e23708b47b5914b1a9e6a1802dab33d0e8b7f392f17e5"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SendContext.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 2,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Impl\n{\n  internal static class SendContext\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "520ea4f9c792b7b0d162f573bd7df35ac9069db577096c4f09ffdd7ad364dd76"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/SpinWaitEx.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 31,
        "surroundingCode": "\nnamespace JetBrains.Threading\n{  \n  /// <summary>\n  /// Extensions for <see cref=\"SpinWait\"/> static methods."
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "5454207e9a88549790ad69a30e880a9a98576ec4e737bc9b992ab7a4c2912611"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/TypesRegistrar.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 35,
        "surroundingCode": "\nnamespace JetBrains.Rd.Reflection\n{\n  public class TypesRegistrar : ITypesRegistrar\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "5487bfa87f48b2a5174640e0a0b33998360fc7abc82f1b89487d81ccb09e8010"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/FirstChanceExceptionInterceptor.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 33,
        "surroundingCode": "\nnamespace JetBrains.Diagnostics\n{\n  /// <summary>\n  /// Facilitates runtime diagnostics when exception arises. In a current thread scope, put diagnostic information in exception if it arises somewhere in call stack."
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "559a59e9164e4d39d211714338ff177f80f02bd919a2eca21d0950f11d853292"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/HeavySingleContextHandler.cs",
      "language": "C#",
      "line": 12,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 10,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Impl\n{\n  internal class HeavySingleContextHandler<T> : RdReactiveBase, ISingleContextHandler<T>\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "565c85f6db6f35bd0527463faa2fa7054b7e2de99a8cdfb5d7846219e456afcd"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/ISerializers.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 24,
        "surroundingCode": "\nnamespace JetBrains.Rd\n{\n  public interface ISerializersContainer\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "5a8036539b5401735b9cc48128af525e3d891e06e22792bfe5008e7c6d7ca6bb"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTest.cs",
      "language": "C#",
      "line": 12,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 10,
        "length": 1,
        "offset": 38,
        "surroundingCode": "\nnamespace Test.RdFramework.Interning\n{\n  [TestFixture]\n  [Apartment(System.Threading.ApartmentState.STA)]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "5beb94a04d05b2490df39fca9efbbd42c2996e972f85f6d0bbf4d77f21c2dbc3"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Result.cs",
      "language": "C#",
      "line": 16,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 14,
        "length": 1,
        "offset": 26,
        "surroundingCode": "\nnamespace JetBrains.Core\n{\n\n#if NET35"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "5c129fafde7e693fdaef8688656acf668aa9272181f9e6b1636b10927d89a9b7"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/CallerArgumentExpressionAttribute.cs",
      "language": "C#",
      "line": 9,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 7,
        "length": 1,
        "offset": 83,
        "surroundingCode": "// ReSharper disable once CheckNamespace\nnamespace System.Runtime.CompilerServices\n{\n  [AttributeUsage(AttributeTargets.Parameter)]\n  internal sealed class CallerArgumentExpressionAttribute : Attribute"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "5c5918fd36fbc07623757797c1253b80191bb2db220c468deabe325537e7fb18"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 16,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 14,
        "length": 1,
        "offset": 31,
        "surroundingCode": "\nnamespace JetBrains.Lifetimes\n{\n  /// <summary>\n  /// Controller for <see cref=\"Lifetime\"/> like <see cref=\"CancellationTokenSource\"/> is a controller fot <see cref=\"CancellationToken\"/>."
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "5cc45c6e2b24a4b2b5fa4093aa27c80ffaaeae061e277666fa69fe6b2f8bbbf9"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/TestGeneratedModelsInReflection.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  /// <summary>\n  /// In Reflection RdExt root it is possible to use generated models from DSL-based generated models"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "5d439ececd4fab177c896d0cf27118e4fc79fbd6c1c4481493c458547e917d89"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 15,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 13,
        "length": 1,
        "offset": 35,
        "surroundingCode": "\nnamespace JetBrains.Rd.Reflection\n{\n  public class ProxyGenerator : IProxyGenerator\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "5d4400e4eb4e6760ef81c476d2df1a470e001fd6a57774007c007d9bcc89db4c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdTaskResult.cs",
      "language": "C#",
      "line": 9,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 7,
        "length": 1,
        "offset": 30,
        "surroundingCode": "\nnamespace JetBrains.Rd.Tasks\n{\n  //todo Union with Result\n  public sealed class RdTaskResult<T> : IPrintable"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "5dec089a191360987753147be46d5e6f3d4d5dd77cfdbe377ecccbc39e61c9b8"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/EmptyAction.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 2,
        "length": 1,
        "offset": 26,
        "surroundingCode": "\nnamespace JetBrains.Util\n{\n  public static class EmptyAction\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "5fd28821e1c173dc340a3f9c9363609e0bd14aa6606400a8d889a42da75e2393"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdAssertion.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 45,
        "surroundingCode": "\nnamespace JetBrains.Rd.Text.Impl.Intrinsics\n{\n  public class RdAssertion : IPrintable, IEquatable<RdAssertion> {\n    //fields"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "605156f22598cefd019874ce6ddaa652c5012f45f0e4caec12613f17420f610e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/CornerCase/NoBaseType.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 2,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [RdExt]\n  // ReSharper disable once RequiredBaseTypesIsNotInherited"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "61a072fbed76d5e2771e2590624b03a1316f41770c4c58cf11e09f582df1b59a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/CastTo.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 31,
        "surroundingCode": "\nnamespace JetBrains.Util.Util\n{\n  #if !NET35\n  /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "6397c74f23007010bdfbb28eac7393298041a6951ec39c0b7acfec3d70a33f06"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/CornerCase/CircularDependencyInModelError.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [RdExt]\n  public class CircularDependencyInModelError : RdExtReflectionBindableBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "64d606dfbb039a38f0bf9919c21fe7c078e68b81e4e893e54bcd5dfa5320eec7"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdTaskEx.cs",
      "language": "C#",
      "line": 11,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 9,
        "length": 1,
        "offset": 30,
        "surroundingCode": "\nnamespace JetBrains.Rd.Tasks\n{\n  public static class RdTaskEx\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "66940de36842ff139a547306985654f4acef2ff5c56e6d5677e5d99a52a5c68e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/RdReflectionBindableBase.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 35,
        "surroundingCode": "\nnamespace JetBrains.Rd.Reflection\n{\n  public class RdReflectionBindableBase : RdBindableBase, IReflectionBindable\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "67304026e4bc16db9898ac4ccc9205a676486d48acaeb0b7474bcadb7f048896"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/BitHacks.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 2,
        "length": 1,
        "offset": 26,
        "surroundingCode": "\nnamespace JetBrains.Util\n{\n  /// <summary>\n  /// Inspired by http://graphics.stanford.edu/~seander/bithacks.html"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "6a7c41e951c79c5c3126dea0c7e4ebc0c17744f6c114f75c67628a5ae770688d"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/StealingScheduler.cs",
      "language": "C#",
      "line": 9,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 7,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Impl\n{\n  /// <summary>\n  /// A scheduler with a ability to join all queued tasks at some point and execute them synchronously when necessary"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "6c30fde426a0e21b12d701944543c14450f559c46feb238924f9ee43468389fa"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ViewableList.cs",
      "language": "C#",
      "line": 11,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 9,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Collections.Viewable\n{\n  /// <summary>\n  /// Default implementation if <see cref=\"IViewableList{T}\"/>. "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "6e45f1ae5427d03b79bbc077d4137189bd1de309d8f398c6e6e2f84d98599434"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Log.cs",
      "language": "C#",
      "line": 15,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 13,
        "length": 1,
        "offset": 33,
        "surroundingCode": "\nnamespace JetBrains.Diagnostics\n{\n  /// <summary>\n  /// Logger configuration entry point. "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "6e7016d72f4e163f54d9cf1bc22bc2aeedc69aa21ecde42167a7a8d8341f25e4"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSimpleDispatcher.cs",
      "language": "C#",
      "line": 9,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 7,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Impl\n{\n  public class RdSimpleDispatcher : IScheduler\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "6f6c635a5ee1abde7ec0c704ecf9355201cd1f61bb109635d90a7aeaa23f31fd"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 16,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 14,
        "length": 1,
        "offset": 38,
        "surroundingCode": "\nnamespace Test.RdFramework.Interning\n{\n  \n  "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "7225a6a86b291b5bd19772076e24348365a9838251f5db0aee181386e392db87"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IRdBindable.cs",
      "language": "C#",
      "line": 13,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 11,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Base\n{\n  public interface IRdDynamic\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "724282b68695967ae4804f5892bd72d2f94ae82242bf38087416021d29c35a96"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdFault.cs",
      "language": "C#",
      "line": 9,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 7,
        "length": 1,
        "offset": 30,
        "surroundingCode": "\nnamespace JetBrains.Rd.Tasks\n{\n  [PublicAPI] \n  [Serializable] "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "73918ca86266a748a8c648c92f6507a569109914a6670aefe410ef9e2fe8faa6"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogWithLevel.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 33,
        "surroundingCode": "\nnamespace JetBrains.Diagnostics\n{\n  /// <summary>\n  /// Special struct to replace common patten by one-liner:"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "739fffe8b3375f21ef47ebe50f981e8ac4f020f827def1fdebb21de22a054ccd"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/Example/FieldsNullableOk.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [RdScalar] // Not required\n  public sealed class FieldsNullableOk"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "75b5ba950aca92d6ded55def24e1c7fe9392e1679b05df036151c18fbf46dd19"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/NativeMemoryPoolTests.cs",
      "language": "C#",
      "line": 15,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 13,
        "length": 1,
        "offset": 40,
        "surroundingCode": "\nnamespace Test.Lifetimes.Serialization\n{\n  [TestFixture]\n  public class NativeMemoryPoolTests : LifetimesTestBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "776899d00dffc191c5aaeb966bb4d4c6076fc6506c27f116a20aaf3337645a9e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CollectionEx.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 33,
        "surroundingCode": "\nnamespace JetBrains.Collections\n{\n  /// <summary>\n  /// Extension methods for collections"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "77e6012e4350a7da9d3f5a5ca8964e7539858a630839ed05fc1da9fc2b9e8b2b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/EmptyArray.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 26,
        "surroundingCode": "\nnamespace JetBrains.Util\n{\n  /// <summary>\n  /// Reuses the single instance of an empty array (one per type). If possible, prefer <code>EmptyList{T}.InstanceList</code>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "786a456d65ab06a9156939882f92273ceed56c05f4d2a71aab59fa29deca891e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/IScheduler.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 2,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Collections.Viewable\n{\n  /// <summary>\n  /// Abstraction of executor. Can be be UI thread, Pooled, synchronous and so on   "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "7a036a76d6c06a8cd5cf9abf75216e63e3f2ec78967a76ca47b1e60b582dfb0f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Util/ConcurrentSet.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Util\n{\n  internal class ConcurrentSet<T> : \n    #if NET35"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "7a52d03cfe8b529af26f777aa4dc42309efa341d8ab1b6d6c74c6a3d343b8bde"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LoggingLevel.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 33,
        "surroundingCode": "\nnamespace JetBrains.Diagnostics\n{\n  public enum LoggingLevel\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "7abb8e41c57c70100aa27fa0179bf536d1f109b57943f250a0833853b4e9584b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SetEvent.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 2,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Collections.Viewable\n{\n  /// <summary>\n  /// Event of <see cref=\"IViewableSet{T}\"/>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "7afcda36b2c370349d65819b979dfcf44e2ca06c7901b1c9d2f998e81a63f3fc"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SchedulerWrapper.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Collections.Viewable\n{\n  public class SchedulerWrapper : TaskScheduler\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "7bad3b5e772bffe9a4ee3f56171be2a2ecc5cf4ca5fb99c31d8a5eb22498509b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/Signal.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Collections.Viewable\n{\n    public class Signal\n    {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "7c18d4272a3b0d798c86eb517e57797505fc92adc76634768e0f8a90b9eccbe9"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/UnsafeWriterTest.cs",
      "language": "C#",
      "line": 9,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 7,
        "length": 1,
        "offset": 28,
        "surroundingCode": "\nnamespace Test.RdFramework\n{\n  [TestFixture]\n  public class UnsafeWriterTest"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "7fd9bcc5ab320b48c2f0a1b780f938e87a446f0a596b249058f33f2cb73885ba"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdBindableBase.cs",
      "language": "C#",
      "line": 13,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 11,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Base\n{\n  public abstract class RdBindableBase : IRdBindable, INotifyPropertyChanged\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "80ab60649669b07eb418e75ff37ea905ad58adce338da5e0f61e27f763e5f349"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/IProtocol.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 24,
        "surroundingCode": "\nnamespace JetBrains.Rd\n{\n  public interface IProtocol : IRdDynamic\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "81217b4319856e7664b40383cdaf634b64825c708cba387486e228cac422d07b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/TaskSchedulerWrapper.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Collections.Viewable\n{\n  public class TaskSchedulerWrapper : IScheduler\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "813812251efa964d6cce56a4a0e468d3133968f410cc3d0702196dfb02c02d2f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SchedulerEx.cs",
      "language": "C#",
      "line": 9,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 7,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Collections.Viewable\n{\n  public static class SchedulerEx\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "81427372772bd72b5c827c5b83f5d3edfb04af30852bf2b89c713e59894d2fc2"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/InterpolatedStringHandlerArgumentAttribute.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 43,
        "surroundingCode": "\nnamespace System.Runtime.CompilerServices\n{\n  /// <summary>Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.</summary>\n  [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false, Inherited = false)]"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "8268165033a43781a4ca1a7e97b9625cbdec09325fa3cec8e142abb03158599f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ITypesCatalog.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 2,
        "length": 1,
        "offset": 35,
        "surroundingCode": "\nnamespace JetBrains.Rd.Reflection\n{\n  public interface ITypesCatalog\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "82e04d917fb10dca5cbd3167d88c2bd4c2e1122c3bb1c4c62ae1951bfc990aac"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Internal/SingletonLogFactory.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 41,
        "surroundingCode": "namespace JetBrains.Diagnostics.Internal\n{\n  /// <summary>\n  /// This factory always create one instance of <see cref=\"ILog\"/> for any category"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "83f268f3d120ef1ea78def9ef3abc523ba853a6c5bf7f440e37b065534266069"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/BitSliceTest.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 32,
        "surroundingCode": "\nnamespace Test.Lifetimes.Utils\n{\n  public class BitSliceTest\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "84b006804599caf38e12dcf1ba41191ad60ba272293b3115ac10b49e11694bd0"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Synchronized/TestSynchronizedDictionary.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 51,
        "surroundingCode": "\nnamespace Test.Lifetimes.Collections.Synchronized\n{\n    [TestFixture]\n    public class TestSynchronizedDictionary : LifetimesTestBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "84d02e1646574edc911adac58db2ba798b78147e9127b0da0d8fe183a1478fde"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 12,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 10,
        "length": 1,
        "offset": 35,
        "surroundingCode": "\nnamespace JetBrains.Serialization\n{\n  /// <summary>\n  /// Deserialize data from byte buffer that was initially serialized by <see cref=\"UnsafeWriter\"/>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "84f9f553b84a639e700b87485f63ae388ed340c19f51c93a8e6b22be7326f98a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogEx.cs",
      "language": "C#",
      "line": 9,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 7,
        "length": 1,
        "offset": 33,
        "surroundingCode": "\nnamespace JetBrains.Diagnostics\n{\n  public static class LogEx\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "8664a3f6e32977fa50156dd9721dc03105a54252549fe7957e9b7baa5d33b4d8"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/RName.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 33,
        "surroundingCode": "\nnamespace JetBrains.Diagnostics\n{\n  /// <summary>\n  /// Recursive name. For constructs like Aaaa.Bbb::CCC"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "8740cdb9f3c3870202220811082dd3535dc960ae73d46c03ad8568660c7a5d35"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/RdExtReflectionBindableBase.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 35,
        "surroundingCode": "\nnamespace JetBrains.Rd.Reflection\n{\n  public class RdExtReflectionBindableBase : RdExtBase, IReflectionBindable\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "89ffc04d28495d03b041f5a79eb9484fdb8c12ebb683bb363d06072008ac9dd9"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IPerContextMap.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Base\n{\n  /// <summary>\n  /// <para>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "8add8562361c02aff6307d102160e8e82bf5de9f83fc449aeee18b74537faf0b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Diagnostics/TextWriterLogTest.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 38,
        "surroundingCode": "\nnamespace Test.Lifetimes.Diagnostics\n{\n  public class TextWriterLogTest : LifetimesTestBase\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "8dc85aeb694a7625d821ab00806bbf5b3d29937c4c8dcb47a40d8ee7a06975e3"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/CastToTest.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 32,
        "surroundingCode": "\nnamespace Test.Lifetimes.Utils\n{\n    public class CastToTest\n    {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "8dde2ca54bbeaf6479fa3213fc4e1092cdac1188d0bcbc51fd273c106d393e2c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ViewableSet.cs",
      "language": "C#",
      "line": 9,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 7,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Collections.Viewable\n{\n  /// <summary>\n  /// Default implementation for <see cref=\"IViewableSet{T}\"/>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "8e466973832b8ca2cb8565433001e9f9b63416b09b584b25c5dca309e5ff3303"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogLog.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 33,
        "surroundingCode": "\nnamespace JetBrains.Diagnostics\n{\n\n  /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "8f54acd9b858f5e22ef120cf29b9e3f0d2fd56293c425cb4c3b91cd3f6061915"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 15,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 13,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Impl\n{\n  public static class SocketWire\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "8f71ee636678ad859d121eca5051d9557233f2006c7c05009d6afdbed5c0e450"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Synchronized/SynchronizedList.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 46,
        "surroundingCode": "\nnamespace JetBrains.Collections.Synchronized\n{\n  /// <summary>\n  /// This is a thread-safe list with all methods synchronized."
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "90bf707fbd0d8b38d0d8e3c1559805095d32d85640f73c28690879debd4c9a0d"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/LifetimesTestBase.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 26,
        "surroundingCode": "\nnamespace Test.Lifetimes\n{\n  public abstract class LifetimesTestBase\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "90d02e00d10c68771cf7dcb63b053e1d326094654c81905819d680bd599bf823"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeCanceledException.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 31,
        "surroundingCode": "\nnamespace JetBrains.Lifetimes\n{\n  /// <summary>\n  /// Inheritor of <see cref=\"OperationCanceledException\"/> which is thrown by <see cref=\"Lifetimes.Lifetime.ThrowIfNotAlive\"/>."
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "916618e2681928893f9e7ec96d1dfd702cf3d631ff7ec19ba4fb96853e3ec91a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/BindableChildrenUtil.cs",
      "language": "C#",
      "line": 11,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 9,
        "length": 1,
        "offset": 35,
        "surroundingCode": "\nnamespace JetBrains.Rd.Reflection\n{\n  internal interface IReflectionBindable\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "91b9dab53266ff364285423d417a303f5370452986ee6e807c48b9fc2d986c8c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/TextBufferVersion.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 2,
        "length": 1,
        "offset": 40,
        "surroundingCode": "\nnamespace JetBrains.Rd.Text.Intrinsics\n{\n  public struct TextBufferVersion\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "93f797d7702412a4f7311d10d7794d955ad619c78388b2cd342ffcf2d351260d"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SocketProxy.cs",
      "language": "C#",
      "line": 12,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 10,
        "length": 1,
        "offset": 28,
        "surroundingCode": "\nnamespace Test.RdFramework\n{\n  public class SocketProxy\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "9556075eaae917a10872e9d50cb76fb4b9095d31aa95025b5e1f495cd8329d9b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimedList.cs",
      "language": "C#",
      "line": 13,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 11,
        "length": 1,
        "offset": 31,
        "surroundingCode": "\nnamespace JetBrains.Lifetimes\n{\n  \n  /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "99de75e9e76e2c90833e93fb18304e981f30e0a3a1a39aa242997d17ca098251"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/ReferenceEqualityComparer.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 33,
        "surroundingCode": "\nnamespace JetBrains.Collections\n{\n  /// <summary>\n  /// Comparer that uses reference equality."
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "9a61c9c3773aabd3ce0081d42efa5972a971a08479f3a13a626e83d93d660bd0"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/RdId.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 24,
        "surroundingCode": "\nnamespace JetBrains.Rd\n{\n  public struct RdId : IEquatable<RdId>\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "9b5463cff6187706065a1f8649e65aad0a023116125cf71c21d37e2f911a31a1"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Internal/TextWriterLog.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Diagnostics.Internal\n{\n  /// <summary>\n  /// Log that able to write to <see cref=\"TextWriter\"/>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "9da5b44d977007656fb29b4a38474d39605c75e8eb7c100e94911834a98705fd"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdTask.cs",
      "language": "C#",
      "line": 14,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 12,
        "length": 1,
        "offset": 30,
        "surroundingCode": "\nnamespace JetBrains.Rd.Tasks\n{\n  public class RdTask<T> : IRdTask<T>\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "9ddf66a0be1d6ac134da4285ef435b6e1fc6c7f99c9b7c4c5e05c21ba09cdb91"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/LocalStopwatchTest.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 34,
        "surroundingCode": "\r\nnamespace Test.Lifetimes.Utils\r\n{\r\n  public class LocalStopwatchTest\r\n  {\r"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "9e5abf760f0ab4ba946a0c2fd64f49a9e94ed19efe14118ec2e88a43301b5e3b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Synchronized/SynchronizedDictionary.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 46,
        "surroundingCode": "\nnamespace JetBrains.Collections.Synchronized\n{\n  /// <summary>\n  /// This dictionary is used for Net3.5 as a poor replacement of ConcurrentDictionary."
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "9f86f66fe30597fba6a9f34e78ee2d2564e82f48f0da3bd783e1224640b5f36d"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/WriteOncePropertyTest.cs",
      "language": "C#",
      "line": 11,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 9,
        "length": 1,
        "offset": 47,
        "surroundingCode": "\nnamespace Test.Lifetimes.Collections.Viewable\n{\n  public class WriteOncePropertyTest : LifetimesTestBase\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "9fc30603f11666896e8c38f98ab4012c19d22fab5640f24cf102b58b5a81482b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/Example/RootModel.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [RdExt]\n  public sealed class RootModel : RdExtReflectionBindableBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "9ff49d9f1866bf2a2e1614f66480ac9b7197cd19486d98bc14976fe405aed3e0"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorScalarInterfaceSerializerTest.cs",
      "language": "C#",
      "line": 10,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 8,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [TestFixture] [Apartment(System.Threading.ApartmentState.STA)]\n  public class ProxyGeneratorScalarInterfaceSerializerTest : RdReflectionTestBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "a1a6a486c370a1b5035cd0d387fca7fd2e2afc05b919d6a4318c36694c66deb5"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdReactiveBase.cs",
      "language": "C#",
      "line": 11,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 9,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Base\n{\n  public abstract class RdReactiveBase : RdBindableBase, IRdReactive\n  {    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "a1ed1354e7fe4a9d8ca741eb6057fc9d2af9f77609f6acb80526dd0e4cdffda7"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 18,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 16,
        "length": 1,
        "offset": 35,
        "surroundingCode": "\nnamespace JetBrains.Rd.Reflection\n{\n  public class ScalarSerializer : IScalarSerializers, ISerializersContainer\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "a37bfbbef52843c03ec2e78d0f88f1c9e2af27c4cb0b508b40bc7c7624a54988"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/GeneralEx.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 26,
        "surroundingCode": "\nnamespace Test.Lifetimes\n{\n    public static class GeneralEx\n    {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "a55d2ff386de08cd3db9d0be20729896d4d7635a6dd5f95919274601737a9b10"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/TestThrowingLogFactory.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 28,
        "surroundingCode": "\nnamespace Test.RdFramework\n{\n    internal class TestThrowingLogFactory : SingletonLogFactory\n    {"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "a6cb6ec757e7a25c88f826f8bb3de5d0b4bc89dee88682ca0ab4316df583d574"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Synchronized/SynchronizedSet.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 46,
        "surroundingCode": "\nnamespace JetBrains.Collections.Synchronized\n{\n  #if !NET35\n  /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "a8f89df18f5df2d14405c0d62c074812ea4d6a460c4dc6910415ff2a2f0508f3"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/LightSingleContextHandler.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Impl\n{\n  internal class LightSingleContextHandler<T> : ISingleContextHandler<T>\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "aba84e6147a3f9475f4689353926558c0508fed5d7f22a3c3905fee5fd66bf74"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/AddUpdateRemove.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 41,
        "surroundingCode": "namespace JetBrains.Collections.Viewable\n{\n  /// <summary>\n  /// Defines whether the event kind is <see cref=\"Add\"/>, <see cref=\"Update\"/> or <see cref=\"Remove\"/>."
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "ac39674c5e24bd11249476116eda8289cc620dd9de3c738d49c872cf102b986c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/OuterLifetime.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 31,
        "surroundingCode": "\nnamespace JetBrains.Lifetimes\n{\n  /// <summary>\n  ///   <para>A subset of the <see cref=\"Lifetime\" /> interface with which you cannot “bind” actions to a lifetime.</para>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "ac3d5a0264b9bedfc1f2826c96fc9d4cd8b709d7adbe3bd92733065021fb6a26"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/Example/ModelSample.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [RdModel]\n  public sealed class ModelSample : RdReflectionBindableBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "ad2220a3cbf4e13ff9c8d331dfaa958ae2223d4e9ec2b711443c2161386bfdd3"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Reflection.App/Common/Util.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace SampleGame.Common\n{\n  internal static class Util\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Reflection.App",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "ad303ab89e86bcee21f917654c50c23e048eebe89d353afcbbd10032d491b5e6"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 11,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 9,
        "length": 1,
        "offset": 45,
        "surroundingCode": "\nnamespace JetBrains.Rd.Text.Impl.Intrinsics\n{\n  public class RdTextBufferState : RdBindableBase\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "aece9e7a5708f820d73ae9a2b6cdbdb57055b84aa823485474ba6f8376ade1df"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CopyOnWriteList.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 33,
        "surroundingCode": "\nnamespace JetBrains.Collections\n{\n  /// <summary>\n  /// A lock-free list that copies the underlying storage on all write operations. This allows for thread-safe operation with well-defined semantics at the cost of performance in write-heavy scenarios."
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "b062e9a8e3000d3da8f975ebf015f14302568dfb67606719ff2babcdfcba29f4"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/Intrinsic.cs",
      "language": "C#",
      "line": 12,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 10,
        "length": 1,
        "offset": 35,
        "surroundingCode": "\nnamespace JetBrains.Rd.Reflection\n{\n  public static class Intrinsic\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "b0a271e29fe2bd1269004efdeee88b5758a7895dcebf0512b058a5c9530fc16c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/UnsafeMarshallersTest.cs",
      "language": "C#",
      "line": 11,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 9,
        "length": 1,
        "offset": 40,
        "surroundingCode": "\nnamespace Test.Lifetimes.Serialization\n{\n  public unsafe class UnsafeMarshallersTest : LifetimesTestBase\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "b194d313796b9e0db5c4c5be6af2f8d819e8bda0512eb3df6d107ff2b25edcda"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/ReflectionExtensions.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 26,
        "surroundingCode": "\nnamespace Test.Lifetimes\n{\n    public static class ReflectionExtensions\n    {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "b1d3ba48e7ebe165dd947ba2faf2104253b92104c572ef63d2b5177b25cae340"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 12,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 10,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Impl\n{\n  public static class Polymorphic<T>\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "b32fff9e6b19eef8f74baf540bbd4ecaabaa1cadcfd8cff186a388322c6a26fa"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Internal/NullLog.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Diagnostics.Internal\n{\n  public class NullLog : ILog\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "b3807283e2bfd9f69f2b346429a62320c9d402b5e9f957fcf1dc48f1246ba50b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SerializersEx.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Impl\n{\n  public static class SerializersEx\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "b391ea91fbae2077372aa7767a6bff11e128014138d716d89925108206dac45a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 11,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 9,
        "length": 1,
        "offset": 36,
        "surroundingCode": "\nnamespace Test.Lifetimes.Threading\n{\n  [TestFixture]\n  public class ByteBufferAsyncProcessorTest : LifetimesTestBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "b503805ccdb6649475308560ad59949c2c11cf45ad6cb620698a1ba3fd396a46"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 14,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 12,
        "length": 1,
        "offset": 32,
        "surroundingCode": "\nnamespace JetBrains.Rd.Scripts\n{\n  internal class Program\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "b579a90d06680cda3eaca421ba2e7cc09975e072e6fb9b4e93c93d7e628501ad"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/CollectionSerializers.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 35,
        "surroundingCode": "\nnamespace JetBrains.Rd.Reflection\n{\n  /// <summary>\n  /// Special asymmetric serializers for collections. Used in reflection serializers to use covariant conversion instead of runtime casting."
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "b61ab3f327c625952d397b5ec0c1ddc45bfeb0269fd759da7f8de14e6bd8b7c9"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdSignalTest.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 28,
        "surroundingCode": "\nnamespace Test.RdFramework\n{\n  [TestFixture]\n  [Apartment(System.Threading.ApartmentState.STA)]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "b75879408ee0056e9994a198112ac79b97d2ec1873e35347afd11f1fb7a4172f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Interop/Windows.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Interop\n{\n    internal static class Kernel32\n    {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "b7db6051409864bc1b93353a25906e186533598bb0e8e1493ee84a54c75f9827"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/ILog.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 33,
        "surroundingCode": "\nnamespace JetBrains.Diagnostics\n{\n  /// <summary>\n  /// Logger's frontend. This class is used as entry point for logging in this library. It could"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "b858dbd97ae3394cea525e73775558b60bb873280b4f97b3a3bd539389781ed0"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/PolymorphicScalarTest.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [TestFixture]\n  public class PolymorphicScalarTest : RdReflectionTestBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "b883cefa30177c53717977b3e46e7af614722077f31957148d71aace23ece5c8"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 11,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 9,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [TestFixture]\n  public class ScalarTests : RdReflectionTestBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "b8fd38c39a9d3dd8006cb9968968dac6cf7fc391d4de79add2e3a1db2cc4be08"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/IReadonlyProperty.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Collections.Viewable\n{\n  /// <summary>\n  /// Special kind of <see cref=\"ISource{T}\"/> that remembers last <see cref=\"Value\"/>."
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "b9fe3d7cebe77c085e5410e6d42f02a0b7efd818580600db0afbf51b37cfb890"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/Example/CustomReactive.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  public sealed class CustomReactive<T1, T2> : RdReactiveBase\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "bc702665242a8b0e3e51b7c65c193c9dcb5d2c4e6428d6cf811c4197f662ad12"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/CornerCase/EmptyOK.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 2,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [RdModel]\n  public sealed class EmptyOK : RdReflectionBindableBase { }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "bc7f14ec7b3f1a8734c50bf7c751aeca6921563ef34318c7f945809f2aef520c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGeneratorCache.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 35,
        "surroundingCode": "\nnamespace JetBrains.Rd.Reflection\n{\n  public class ProxyGeneratorCache : IProxyGenerator\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "bca5375e0ad882f462f019f48d6930142b694147d441bb1f707fc4884ab2e5d7"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/ExtCreationInfo.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 24,
        "surroundingCode": "\nnamespace JetBrains.Rd\n{\n  public struct ExtCreationInfo\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "bf2d12877d5fbd4faecd8488fb3f047a94731b9df1331ebf96fac9429db7d005"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/ExtCreatedUtils.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Impl\n{\n  public static class ExtCreatedUtils\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "bfbbca2ebed459cdd0a910624f5e5ea6eb02f1dad25cb37e1b81e189ae0c0043"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/ITextBuffer.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Text\n{\n  public interface ITextBuffer : ISignal<RdTextChange>\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "c25b9cfaff1938615b8a593fe072dfb1e5a01176d3cbde0eaada33a647f6eb84"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorSimpleTest.cs",
      "language": "C#",
      "line": 11,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 9,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [TestFixture]\n  [Apartment(System.Threading.ApartmentState.STA)]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "c3d43e1f596db6e72c32283ed3061b9bb6b43011e9ccba6939775a90931ff303"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdPerContextMapTest.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 37,
        "surroundingCode": "\nnamespace Test.RdFramework.Contexts\n{\n  public class RdPerContextMapTest : RdFrameworkTestBase\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "c413850e0fce0505870df18146d3dee8506d389706084f7f5048da827063fa6d"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/DefaultSchedulerTest.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 47,
        "surroundingCode": "\nnamespace Test.Lifetimes.Collections.Viewable\n{\n  public class DefaultSchedulerTest : LifetimesTestBase\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "c57b889a0e6d0b4b62fab0d1d03e2967078b172b73d0d559a32fce8527e42b1f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/SignalTest.cs",
      "language": "C#",
      "line": 9,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 7,
        "length": 1,
        "offset": 47,
        "surroundingCode": "\nnamespace Test.Lifetimes.Collections.Viewable\n{\n  public class SignalTest : LifetimesTestBase\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "c62cf28cc3332f879117b9f0afff10a23313b70ee724561aabf38f20ba1aacaa"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/SerializationCtx.cs",
      "language": "C#",
      "line": 10,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 8,
        "length": 1,
        "offset": 24,
        "surroundingCode": "\nnamespace JetBrains.Rd\n{\n  public struct SerializationCtx\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "c68e9d4c250b63c1512531ca2f182030d3599b3091d2b9b7d1d417e70e1ec040"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Protocol.cs",
      "language": "C#",
      "line": 11,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 9,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Impl\n{\n  public class Protocol : IProtocol\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "c6975457604d1fff134c81ffdff302ce3bd77a570491d920c31659c315c53507"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/TextBufferVersionSerializer.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 39,
        "surroundingCode": "namespace JetBrains.Rd.Text.Intrinsics\n{\n  public static class TextBufferVersionSerializer\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "c7630e8fdd7a2e13f315432d0edbfcc5ad4d5dde2a635752dada39d451d62141"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/TaskEx.cs",
      "language": "C#",
      "line": 10,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 8,
        "length": 1,
        "offset": 31,
        "surroundingCode": "\nnamespace JetBrains.Threading\n{\n    public static class TaskEx\n    {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "cc17cd35e47f08f212b459523a076eb08316f07572cf6ec9197fe4beb0ad407e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarIntrinsicTests.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [TestFixture]\n  public class ScalarIntrinsicTests : RdReflectionTestBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "cc9586de539d21dd695f317299a7dbce888b72a8cf89babb31697eaf626c07f0"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/WireEx.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 24,
        "surroundingCode": "\nnamespace JetBrains.Rd\n{\n  public static class WireEx\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "cd3ba8078727cc38b7610988722ae12ae8d6a793520655c3ad72a4308689f27c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 35,
        "surroundingCode": "\nnamespace JetBrains.Util.Internal\n{\n  public class Memory\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "cdfc6c40d430abd513da1d5872778b4aaf5bcee256c634cbd4052fa262325c59"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdIdHierarchyGuardTest.cs",
      "language": "C#",
      "line": 10,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 8,
        "length": 1,
        "offset": 28,
        "surroundingCode": "\nnamespace Test.RdFramework\n{\n  [TestFixture]\n  [Apartment(System.Threading.ApartmentState.STA)]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "cea26792df56860c45c8f9e047fb5a9d2192fdedc94d6fe05353e5e018e20970"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SerializersTest.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 28,
        "surroundingCode": "\nnamespace Test.RdFramework\n{\n  [TestFixture]\n  public class SerializersTest : LifetimesTestBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "cebd834e31c89d6aabaa9daca8824ce46129707c2e64262b40221ed382f4ad52"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/CornerCase/NotRdModelData.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 38,
        "surroundingCode": "namespace Test.RdFramework.Reflection\n{\n  public class NotRdModelData { }\n}"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "cef62654fd24cdd03ea482fb56db7ebb0b28c2c6e70354292e903d6119c40bc2"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ListEvent.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Collections.Viewable\n{\n  /// <summary>\n  /// Event of <see cref=\"IViewableList{T}\"/>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "cf1941c485a0e7bf425a177713cd5c49ea1936b569b585b008426108bd4358fe"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/IProxyGenerator.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 35,
        "surroundingCode": "\nnamespace JetBrains.Rd.Reflection\n{\n  public interface IProxyGenerator\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "d2457218bbe81fe80670fa1261374f9e0a0751f8e35622fbda7418fdd8dfced4"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/NativeMemoryPool.cs",
      "language": "C#",
      "line": 11,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 9,
        "length": 1,
        "offset": 35,
        "surroundingCode": "\nnamespace JetBrains.Serialization\n{\n  public static class NativeMemoryPool\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "d420738db6ff70d1d63c3d0c74be423c7dd67773da3e8913b65ba15aad0c9669"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Linearization.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 26,
        "surroundingCode": "\nnamespace Test.Lifetimes\n{\n  public class Linearization\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "d43d0f72274a5589584b42f4b25c075ec7b107e1ae4a32a1ef1f12d3cbd0b75f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/RdTextChange.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 40,
        "surroundingCode": "\nnamespace JetBrains.Rd.Text.Intrinsics\n{\n  public enum RdTextChangeKind\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "d4907ef16d5af741da0add6c1b164daf17dbc0dcf161566ed5e2ae4c976781ea"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/PriorityQueueTest.cs",
      "language": "C#",
      "line": 10,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 8,
        "length": 1,
        "offset": 38,
        "surroundingCode": "\nnamespace Test.Lifetimes.Collections\n{\n  [TestFixture]\n  public class PriorityQueueTest : LifetimesTestBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "d506324819e4f0aada30aa02eac4339cc95029d80f4c827289ba36ee142e265f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/IViewableProperty.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 41,
        "surroundingCode": "namespace JetBrains.Collections.Viewable\n{\n  /// <summary>\n  /// Mutable <see cref=\"IReadonlyProperty{T}\"/>."
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "d5d9f4daae4adf47fd82790dbd85883abb9b32f5e304110ec5b23037b6768eeb"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/IWire.cs",
      "language": "C#",
      "line": 11,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 9,
        "length": 1,
        "offset": 24,
        "surroundingCode": "\nnamespace JetBrains.Rd\n{\n  public interface IWire\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "d725cbc24e97bc2aee431a9f5876912d09ba158735add75602a4bd754b6822ff"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ViewableMap.cs",
      "language": "C#",
      "line": 11,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 9,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Collections.Viewable\n{\n  /// <summary>\n  /// Default implementation of <see cref=\"IViewableMap{K,V}\"/>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "daed45857cf7bbf80ae9b532b44e7ce710a6f6126eaff81c83bfffeec0770964"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/SequentialLifetimesTest.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 36,
        "surroundingCode": "\nnamespace Test.Lifetimes.Lifetimes\n{\n  [TestFixture]\n  public class SequentialLifetimesTest: LifetimesTestBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "dcedb4c65bf9edb6677b33d700b46aed7c17f4f8f9fd864ad9fd1621f77e0241"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/SchedulerWrapperTest.cs",
      "language": "C#",
      "line": 9,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 7,
        "length": 1,
        "offset": 47,
        "surroundingCode": "\nnamespace Test.Lifetimes.Collections.Viewable\n{\n#if !NET35\n  public class SchedulerWrapperTest : LifetimesTestBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "dfd1351abfe3a948fa86dba280baf99f267de05b1a6342b44e1f75940366cfa9"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdFrameworkTestBase.cs",
      "language": "C#",
      "line": 14,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 12,
        "length": 1,
        "offset": 28,
        "surroundingCode": "\nnamespace Test.RdFramework\n{ \n  public abstract class RdFrameworkTestBase : LifetimesTestBase\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "e23644cbc7997a131fe49dd192a71ede550a566d89f8b45a67c0226a5d1b4728"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/ITerminationHandler.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 30,
        "surroundingCode": "namespace JetBrains.Lifetimes\n{\n  /// <summary>\n  /// Alternative to <see cref=\"Lifetime.OnTermination(System.Action)\"/>."
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "e2f0fe341899dffd87caad6f42f0a1984e62a1f1521a55a3fcd1463aee5fbf2f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/DelayedContextWithExtTest.cs",
      "language": "C#",
      "line": 10,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 8,
        "length": 1,
        "offset": 37,
        "surroundingCode": "\nnamespace Test.RdFramework.Contexts\n{\n  public class DelayedContextWithExtTest : RdFrameworkTestBase\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "e398025f5039c520d876c3031cfa90def513fc02bfcdec3982b1c4d5e9e862c1"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ReactiveEx.cs",
      "language": "C#",
      "line": 11,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 9,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Collections.Viewable\n{\n  public static class ReactiveEx\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "e39cedd352bdd07f94507854cebf910173e28a7ae7ea4bbe37b324cee59bcff1"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Internal/LogBase.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 2,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Diagnostics.Internal\n{\n  public struct LeveledMessage\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "e3ac67eed9f71db5a07b160ac8e4ad5183c3c6370dc477ddb0b8c1a26f9c721b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/LineEndingUtil.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 32,
        "surroundingCode": "\nnamespace JetBrains.Rd.Scripts\n{\n    public static class LineEndingUtil\n    {"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "e45bdeed90ec786c611279aa579b6d7c599a01463050df5547ebcf7ab05843c6"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/MessageBroker.cs",
      "language": "C#",
      "line": 12,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 10,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Impl\n{\n  public class MessageBroker\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "e4791e022c0933f4de8e5a651cd0270e679ee7b84e61218484ab50eacc59e463"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/Example/PropertiesNotNullOk.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [RdScalar] // not required\n  public class PropertiesNotNullOk"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "e47ec0fd767ccb63428a23362224c2b54adf605c7db94e3220335265c77d4bad"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/BufferWindow.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Impl\n{\n  public struct BufferWindow\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "e69f2d59124d14e67ba8712dbda6f23e58a704d6c0d21c38cb850bccb697567b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSecureString.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Impl\n{\n  /// <summary>\n  /// This is a temporary stub for proper secure strings in protocol"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "e6e65740541d162f99a5e77b2b3e5be26d7351d9f7529e3bd72b893f987fb12b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ExceptionEx.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 31,
        "surroundingCode": "\nnamespace JetBrains.Threading\n{\n    public static class ExceptionEx\n    {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "e82fe501796e1adf418f5fe03caaaf08b9afb239c09027dec74c6eedcea0470d"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/ValueLifetimed.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 30,
        "surroundingCode": "namespace JetBrains.Lifetimes\n{\n  /// <summary>\n  /// Pair of lifetime and value"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "e8d43a73b785b24d9401db7c66ed21e887f6d581b2caeb693a899f48e08e99ee"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestPropertyWrapper.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 38,
        "surroundingCode": "\nnamespace Test.RdFramework.Interning\n{\n  public class InterningTestPropertyWrapper<T> : RdBindableBase\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "e91955de59d90715c82ae560e7ab9c330f810eba43405dd9ac2f5f92196a8d0c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/SerializerReflectionUtil.cs",
      "language": "C#",
      "line": 15,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 13,
        "length": 1,
        "offset": 35,
        "surroundingCode": "\nnamespace JetBrains.Rd.Reflection\n{\n  public class SerializerReflectionUtil\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "ea7d49ba7ea0b8c2e812c8d23f97c02432a7729fe1a7c3b8e4509ee24f303027"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SocketWireTest.cs",
      "language": "C#",
      "line": 20,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 18,
        "length": 1,
        "offset": 28,
        "surroundingCode": "\nnamespace Test.RdFramework\n{\n  [TestFixture]\n  public class SocketWireTest : LifetimesTestBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "eb76dd04ae0aa85d3d538dc29cea58a19019e2fe2433138b515eed646e8a7c73"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/RdContext.cs",
      "language": "C#",
      "line": 12,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 10,
        "length": 1,
        "offset": 24,
        "surroundingCode": "\nnamespace JetBrains.Rd\n{\n  public abstract class RdContextBase : IEquatable<RdContextBase>\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "ec7ad599820296b5f3926c15f0e346140b2e47880c034b02de5c2504022d0835"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/SwitchingScheduler.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 35,
        "surroundingCode": "\nnamespace JetBrains.Rd.Reflection\n{\n  /// <summary>\n  /// A special scheduler which can be globally temporarily switched to another implementation."
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "ef1a0aeb00c5e5c00f7ba062519483a64f00eba5b5b2ae94017ea67683d08bea"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/SingletonEnumerator.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 33,
        "surroundingCode": "\nnamespace JetBrains.Collections\n{\n  /// <summary>\n  /// Enumerator for imaginary collection from single value"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "f0caa304f7451fa04aadcd089a3c63660b9792759d834dd6d6f6ddf8f653ef24"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IRdReactive.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Base\n{\n  \n  public interface IRdReactive : IRdBindable, IRdWireable"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "f0d17bb1c1306be39381c118e5838cebafb70970beb80ddd4ec77f92e2ec15dd"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ActorTest.cs",
      "language": "C#",
      "line": 13,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 11,
        "length": 1,
        "offset": 36,
        "surroundingCode": "\nnamespace Test.Lifetimes.Threading\n{\n#if !NET35\n  public class ActorTest : LifetimesTestBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "f2099e32d19f7eaf843c3c861bf84a6b72cee583aea8e7daad08776c50bbe135"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorTestBase.cs",
      "language": "C#",
      "line": 14,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 12,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  public class ProxyGeneratorTestBase : RdReflectionTestBase\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "f264e5e47598721d51f7ab6b2441da65d84aef2b0870b9b04025a1ac136f88e4"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/TestReflectionSerialization.cs",
      "language": "C#",
      "line": 10,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 8,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [TestFixture]\n  [Apartment(System.Threading.ApartmentState.STA)]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "f29381b992e64bf2caeee4e3a9f0c0540abb4af24115f99d3eba9e9f89fc234e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/BlockingPriorityQueueTest.cs",
      "language": "C#",
      "line": 12,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 10,
        "length": 1,
        "offset": 38,
        "surroundingCode": "\nnamespace Test.Lifetimes.Collections\n{\n#if !NET35\n  public class BlockingPriorityQueueTest"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "f2ac5dd842668842df63f68b9b836bad706d85b9926edcc014436b94fcb85008"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/WiredRdTask.cs",
      "language": "C#",
      "line": 10,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 8,
        "length": 1,
        "offset": 30,
        "surroundingCode": "\nnamespace JetBrains.Rd.Tasks\n{\n  internal abstract class WiredRdTask<TReq, TRes> : RdTask<TRes>, IRdWireable\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "f3d392dbf378fd3e26565ecb99f0ce62f2bf729eaa1b8316983bfbea20201258"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdTaskStatus.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 29,
        "surroundingCode": "namespace JetBrains.Rd.Tasks\n{\n  public enum RdTaskStatus\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "f521ed711c545c8261dd9ed751c2e05bafd15212f6e7e49ad5326da802a22bb8"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdChangeOrigin.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 44,
        "surroundingCode": "namespace JetBrains.Rd.Text.Impl.Intrinsics\n{\n  public enum RdChangeOrigin {\n    Slave,"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "f52602d02fa57b436b3ce216f02e6ba182cfeedd856f2f6e5d5804c221ea6afb"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/ProtocolContexts.cs",
      "language": "C#",
      "line": 15,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 13,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Impl\n{\n  /// <summary>\n  /// This class handles RdContext on protocol level. It tracks existing contexts and allows access to their value sets (when present)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "f5814c04efe553da1544504731dae510d677e88828697e47dd9de33196553632"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdSetTest.cs",
      "language": "C#",
      "line": 9,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 7,
        "length": 1,
        "offset": 28,
        "surroundingCode": "\nnamespace Test.RdFramework\n{\n  [TestFixture]\n  [Apartment(System.Threading.ApartmentState.STA)]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "f59a01b3710ab3709c8fc6b1ee45897010f1be6e28ee452d14e22ed390188c21"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 17,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 15,
        "length": 1,
        "offset": 38,
        "surroundingCode": "\nnamespace Test.RdFramework.Interning\n{\n  \n  "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "f6725c42fb8451295502e6fe5aac9cb341435a8fc7c39c957ca9cd6e0dec4f86"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RpcTimeouts.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 30,
        "surroundingCode": "\nnamespace JetBrains.Rd.Tasks\n{\n  /// <summary>\n  /// Timeouts for synchronous request by <see cref=\"RdCall{TReq,TRes}.Sync\"/>. "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "f81bfe766bbe130db0150873798816218f6e530b0d047bedb26d9261f4873f58"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorAsyncNestedCallsTest.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  /// <summary>\n  /// Factorial calculator using tail recursion and independent protocols."
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "f90244cf41d9144c7d394cc43d4a2c00621f3c96434419201e1ef48a3b4f2140"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSignal.cs",
      "language": "C#",
      "line": 9,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 7,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\nnamespace JetBrains.Rd.Impl\n{\n  public class RdSignal<T> : RdReactiveBase, ISignal<T>\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "f937bace853be9a99e97be2d4465639317a979fc5e5b750118433cde210b6f37"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Types.cs",
      "language": "C#",
      "line": 9,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 7,
        "length": 1,
        "offset": 31,
        "surroundingCode": "\nnamespace JetBrains.Util.Util\n{\n  /// <summary>\n  /// Extensions to <see cref=\"Type\"/>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "fa0a37f00cd9115011c638b63519fb6ffc0fb4ceb5c97795e4e371c44166bb41"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Unit.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 2,
        "length": 1,
        "offset": 26,
        "surroundingCode": "\nnamespace JetBrains.Core\n{\n  /// <summary>\n  /// Type that has the single instance accessible by <see cref=\"Instance\"/>. Adornment to <see cref=\"System.Void\"/>."
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "faae32893bdbb1a716451e564b03d33716a07d42f2c598d8a630a673ccdd8fe3"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdCall.cs",
      "language": "C#",
      "line": 12,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 10,
        "length": 1,
        "offset": 30,
        "surroundingCode": "\nnamespace JetBrains.Rd.Tasks\n{\n  public class RdCall<TReq, TRes> : RdReactiveBase, IRdCall<TReq, TRes>, IRdEndpoint<TReq, TRes>\n  {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "fbd6371c6dfcaed1a5f710117e414b66c58a1372d2631258164e7c7f662b341c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdTaskTest.cs",
      "language": "C#",
      "line": 15,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 13,
        "length": 1,
        "offset": 28,
        "surroundingCode": "\nnamespace Test.RdFramework\n{\n  [TestFixture]\n  [Apartment(System.Threading.ApartmentState.STA)]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "fca7bf31b26f39f19d9d637b251afeefdaedfd9039dde45888170ad3d87eb6f7"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/WriteOnceProperty.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 42,
        "surroundingCode": "\nnamespace JetBrains.Collections.Viewable\n{\n  public sealed class WriteOnceProperty<T> : IViewableProperty<T>\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "fd3c2a77f22ab3b4e36e8c78fef01a94669edbf012348d6a2b31c942c3e48ace"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorCancellationTest.cs",
      "language": "C#",
      "line": 14,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 12,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [TestFixture]\n  public class ProxyGeneratorCancellationTest : ProxyGeneratorTestBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "fd41dc9e845345ad805e9f3b4e8bb6f2559cb4629ff60ca6c8ffc8413f42e91b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorPropertiesTest.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 6,
        "length": 1,
        "offset": 39,
        "surroundingCode": "\nnamespace Test.RdFramework.Reflection\n{\n  [TestFixture]\n  [Apartment(System.Threading.ApartmentState.STA)]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "fdad530abd17bd7516531a732e77999c7b5a1fe2b3490482d56de83c2955f829"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred namespace body style",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert to file-scoped namespace",
  "detailsInfo": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/InterpolatedStringHandlerAttribute.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 106,
        "surroundingCode": "// and updated to have the scope of the attributes be internal.\nnamespace System.Runtime.CompilerServices\n{\n  /// <summary>Indicates the attributed type is to be used as an interpolated string handler.</summary>\n  [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = false, Inherited = false)]"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeNamespaceBody"
  },
  "hash": "fedbe9385ec2866089678021b0db91ed85568d40defa80a26ef950608ada22f0"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/EmptyEnumerator.cs",
      "language": "C#",
      "line": 13,
      "offset": 62,
      "length": 18,
      "code": {
        "startLine": 11,
        "length": 18,
        "offset": 124,
        "surroundingCode": "  public sealed class EmptyEnumerator<T> : IEnumerator<T> \n  {\n    public static readonly EmptyEnumerator<T> Instance = new EmptyEnumerator<T>();\n\n    public T Current => throw new InvalidOperationException($\"{nameof(EmptyEnumerator<T>)}.{nameof(Current)} is undefined\");"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "05dc8545a07d8dbbc21e76f979ad342e946da230cb4ce722530f76855c545ba9"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/ProtocolContexts.cs",
      "language": "C#",
      "line": 48,
      "offset": 81,
      "length": 25,
      "code": {
        "startLine": 46,
        "length": 25,
        "offset": 148,
        "surroundingCode": "    public override SerializationCtx SerializationContext { get; }\n\n    internal SendWithoutContextsCookie CreateSendWithoutContextsCookie() => new SendWithoutContextsCookie(this);\n    public bool IsSendWithoutContexts => mySendWithoutContexts.Value; \n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "0796f6e6b4813cec9f1c968c7c856aead50b44fa03b38c0d6063c4878d6ee89b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/ProtocolContexts.cs",
      "language": "C#",
      "line": 23,
      "offset": 101,
      "length": 58,
      "code": {
        "startLine": 21,
        "length": 58,
        "offset": 392,
        "surroundingCode": "    private readonly CopyOnWriteList<ISingleContextHandler> myCounterpartHandlers = new CopyOnWriteList<ISingleContextHandler>();\n    private readonly IViewableList<ISingleContextHandler> myHandlerOrder = new ViewableList<ISingleContextHandler>(new CopyOnWriteList<ISingleContextHandler>());\n    private readonly ConcurrentDictionary<RdContextBase, ISingleContextHandler> myHandlersMap = new ConcurrentDictionary<RdContextBase, ISingleContextHandler>();\n    private readonly object myOrderingLock = new object();\n    private readonly ThreadLocal<bool> mySendWithoutContexts = new ThreadLocal<bool>(() => false);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "0d3c73b535c5b0f5501ff8086cddb23064f290dcd8da2a86d5fe4d3410323636"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/CollectionTest.cs",
      "language": "C#",
      "line": 41,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 39,
        "length": 11,
        "offset": 58,
        "surroundingCode": "      var set = new List<ComplexType>\n      {\n        new ComplexType(42),\n        new ComplexType(666)\n      };"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "0f13850cf41644e084ae3cb03e1ae9269a6d70398061c9456bcb9009ce9938f7"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ByteBufferAsyncProcessor.cs",
      "language": "C#",
      "line": 79,
      "offset": 42,
      "length": 6,
      "code": {
        "startLine": 77,
        "length": 6,
        "offset": 106,
        "surroundingCode": "\n    //to be done:  more granular locking for better performance\n    private readonly object myLock = new object();\n    public long AcknowledgedSeqN { get; private set; }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "114dc32c5910dce83c48652b9dc0dd28fb5460412c0aacf032de2948dbff34c4"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ViewableMap.cs",
      "language": "C#",
      "line": 21,
      "offset": 62,
      "length": 24,
      "code": {
        "startLine": 19,
        "length": 24,
        "offset": 173,
        "surroundingCode": "    private readonly IDictionary<TK, TV> myStorage;\n    private readonly IEqualityComparer<TV> myValueComparer;\n    private readonly Signal<MapEvent<TK, TV>> myChange = new Signal<MapEvent<TK, TV>>();\n\n    public ISource<MapEvent<TK, TV>> Change => myChange;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "125dd86a4e6ee06f4cd5e27b0a7db9abc48cc8599dafbf72b913e1e4377f8a55"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Statics.cs",
      "language": "C#",
      "line": 13,
      "offset": 43,
      "length": 7,
      "code": {
        "startLine": 11,
        "length": 7,
        "offset": 98,
        "surroundingCode": "  public class StaticsForType<T> where T:class\n  {     \n    private readonly List<T> myList = new List<T>();\n    private event Action? Changed;\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "12bc700270cc06d7a5252214ffa2ee4a3fd20c4e2c543b6699651be705419824"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 38,
      "offset": 72,
      "length": 33,
      "code": {
        "startLine": 36,
        "length": 33,
        "offset": 81,
        "surroundingCode": "        \n\n    private readonly Queue<TaskCompletionSource<Unit>> mySenders = new Queue<TaskCompletionSource<Unit>>();\n    private readonly Queue<T> myMessages = new Queue<T>();\n    private readonly Queue<TaskCompletionSource<T>> myReceivers = new Queue<TaskCompletionSource<T>>();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "17a0ef05126fcc1d4c7116b38abfa12b2b83b97e11f096b474cbb3cc7e41f7cf"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/DefaultScheduler.cs",
      "language": "C#",
      "line": 7,
      "offset": 52,
      "length": 16,
      "code": {
        "startLine": 5,
        "length": 16,
        "offset": 117,
        "surroundingCode": "  public sealed class DefaultScheduler : TaskSchedulerWrapper\n  {\n    public static DefaultScheduler Instance => new DefaultScheduler();\n    \n    private DefaultScheduler() : base(TaskScheduler.Default, true)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "1827611084c827b1468371f433a2e4cd412485b7e330e79eb5405bb764cc2f02"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 107,
      "offset": 42,
      "length": 6,
      "code": {
        "startLine": 105,
        "length": 6,
        "offset": 93,
        "surroundingCode": "    private readonly IScalarSerializers myScalars;\n\n    private readonly object myLock = new object();\n\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "18cfd018ad60aa21ffb7d8c9bc32e73c150f095a22fb6e78a9dcb5e68ddf36be"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/WriteOnceProperty.cs",
      "language": "C#",
      "line": 10,
      "offset": 42,
      "length": 6,
      "code": {
        "startLine": 8,
        "length": 6,
        "offset": 116,
        "surroundingCode": "  {\n    private readonly WriteOnceSignal mySignal = new WriteOnceSignal();\n    private readonly object myLock = new object();\n    private Maybe<T> myMaybe;\n    "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "1ab5fc6cd34947dbc86c622d8d4f9adaecc31b5313307f8abad810b9d8867deb"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/InternRoot.cs",
      "language": "C#",
      "line": 114,
      "offset": 55,
      "length": 5,
      "code": {
        "startLine": 112,
        "length": 5,
        "offset": 211,
        "surroundingCode": "    public IProtocol Proto => myParent.NotNull(this).Proto;\n    public SerializationCtx SerializationContext => myParent.NotNull(this).SerializationContext;\n    public RName Location { get; private set; } = new RName(\"<<not bound>>\");\n\n    public void Print(PrettyPrinter printer)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "1c3eb2c753ce8ef16fc9f04414ca7d65068f64b5403cd7431a2d9cfeecd6c8a8"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextEarlyDeliveryTest.cs",
      "language": "C#",
      "line": 71,
      "offset": 58,
      "length": 12,
      "code": {
        "startLine": 69,
        "length": 12,
        "offset": 72,
        "surroundingCode": "      }\n      \n      public static readonly TestKeyHeavy Instance = new TestKeyHeavy();\n\n      protected internal override void RegisterOn(ISerializers serializers)"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "1d266c2558d7d8f05a87f5e188cb8e962f7308cefa2c0a3dc15f97141c7ca544"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 378,
      "offset": 54,
      "length": 6,
      "code": {
        "startLine": 376,
        "length": 6,
        "offset": 62,
        "surroundingCode": "      }\n\n      private readonly object mySocketSendLock = new object();\n\n      private int ReceiveFromSocket(byte[] buffer, int offset, int size)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "1eed375aba948515ff26c49d3d97076a4193e259671c5a154bf8d157ebb055b5"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ByteBufferAsyncProcessor.cs",
      "language": "C#",
      "line": 100,
      "offset": 59,
      "length": 15,
      "code": {
        "startLine": 98,
        "length": 15,
        "offset": 69,
        "surroundingCode": "    }\n    \n    private readonly HashSet<string> myPauseReasons = new HashSet<string>();\n\n    public StateKind State { get; private set; }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "26eb9e8ea333e095246c948a1f4759ed3bfff95d5df07e637c4cd7204909d918"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextEarlyDeliveryTest.cs",
      "language": "C#",
      "line": 85,
      "offset": 58,
      "length": 12,
      "code": {
        "startLine": 83,
        "length": 12,
        "offset": 72,
        "surroundingCode": "      }\n      \n      public static readonly TestKeyLight Instance = new TestKeyLight();\n\n      protected internal override void RegisterOn(ISerializers serializers)"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "28b50660fa646b9263bcfc359e87b14baa20b0b203a2635e32f0cb8290b8f615"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorSimpleTest.cs",
      "language": "C#",
      "line": 117,
      "offset": 70,
      "length": 13,
      "code": {
        "startLine": 115,
        "length": 13,
        "offset": 117,
        "surroundingCode": "      public sealed class IntrinsicType\n      {\n        public static IntrinsicType Read(UnsafeReader reader) => new IntrinsicType();\n        public void Write(UnsafeWriter writer)\n        {"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "2b8f6cecb0b0c41441d6017e5aaff5440145630829eaea74800981109c374edc"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogLog.cs",
      "language": "C#",
      "line": 56,
      "offset": 50,
      "length": 6,
      "code": {
        "startLine": 54,
        "length": 6,
        "offset": 63,
        "surroundingCode": "      }\n    }\n    private static readonly object ourLock = new object();\n\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "2f290144c3d2d0bc631997a93539efaf377edd30803e46598a6464f8467b2410"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdTaskResult.cs",
      "language": "C#",
      "line": 25,
      "offset": 62,
      "length": 15,
      "code": {
        "startLine": 23,
        "length": 15,
        "offset": 63,
        "surroundingCode": "\n\n    internal static RdTaskResult<T> Success(T result) => new RdTaskResult<T>(RdTaskStatus.Success, result, null);\n\n    internal static RdTaskResult<T> Cancelled() => new RdTaskResult<T>(RdTaskStatus.Canceled, default(T), null);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "2f8d184c55f5a63e8647b8169b6456622617df1c3dbbc7e02e339e892bfb6168"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/ReferenceEqualityComparer.cs",
      "language": "C#",
      "line": 15,
      "offset": 75,
      "length": 28,
      "code": {
        "startLine": 13,
        "length": 28,
        "offset": 98,
        "surroundingCode": "    where T : class\n  {\n    private static readonly ReferenceEqualityComparer<T> ourDefault = new ReferenceEqualityComparer<T>();\n    private ReferenceEqualityComparer() { }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "2f8ffaf3b4482941f5555348657da06036a1ee50ca6c4ba8b3946b84398f2a03"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdExtBase.cs",
      "language": "C#",
      "line": 28,
      "offset": 46,
      "length": 7,
      "code": {
        "startLine": 26,
        "length": 7,
        "offset": 55,
        "surroundingCode": "    \n    \n    private readonly ExtWire myExtWire = new ExtWire();\n    private IProtocol myExtProtocol;\n    public override IProtocol Proto => myExtProtocol ?? base.Proto;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "317d5cacc6f40088104dabc907d730696fcf0ba98efd1c806cf96af0ff5f06f3"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 598,
      "offset": 108,
      "length": 18,
      "code": {
        "startLine": 596,
        "length": 18,
        "offset": 151,
        "surroundingCode": "    /// <returns></returns>\n    [PublicAPI]\n    public LifetimeDefinition CreateNested([InstantHandle] Action<LifetimeDefinition> atomicAction) => new LifetimeDefinition(this, atomicAction);\n    \n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "3195b0a6516b4e9dc1d8caf38091906d5d8523519368ef17a70b2e3090028428"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/JetPriorityQueue.cs",
      "language": "C#",
      "line": 204,
      "offset": 44,
      "length": 6,
      "code": {
        "startLine": 202,
        "length": 6,
        "offset": 135,
        "surroundingCode": "    private readonly Lifetime myLifetime;\n    private readonly JetPriorityQueue<T> myQueue;\n    private readonly object mySentry = new object();\n\n    public BlockingPriorityQueue(Lifetime lifetime, int initialCapacity = JetPriorityQueue<T>.DefaultCapacity, IComparer<T?>? comparer = null)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "3273a0b9fff17c14a69c6325288760f1b46f3c6faa61f9e0dfde632485e6436c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGeneratorCache.cs",
      "language": "C#",
      "line": 12,
      "offset": 74,
      "length": 32,
      "code": {
        "startLine": 10,
        "length": 32,
        "offset": 126,
        "surroundingCode": "  {\n    private readonly ProxyGenerator myGenerator;\n    private readonly ConcurrentDictionary<Type, Type> myTypesCache = new ConcurrentDictionary<Type, Type>();\n    private readonly ConcurrentDictionary<Type, SortedList<MethodInfo, DynamicMethod>> myAdaptersCache = new ConcurrentDictionary<Type, SortedList<MethodInfo, DynamicMethod>>();\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "350b2f57f2dcdef603e14d57de74e403faf984787f202195183725334b8f2f72"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/LocalStopwatch.cs",
      "language": "C#",
      "line": 27,
      "offset": 52,
      "length": 14,
      "code": {
        "startLine": 25,
        "length": 14,
        "offset": 60,
        "surroundingCode": "    }\r\n\r\n    public static LocalStopwatch StartNew() => new LocalStopwatch(Stopwatch.GetTimestamp());\r\n\r\n    #endregion\r"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "3555bf0c6fb4172cd6f5937511f2277a6efac9cd06dc1c406efb01e09d15023c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/SwitchingScheduler.cs",
      "language": "C#",
      "line": 16,
      "offset": 50,
      "length": 6,
      "code": {
        "startLine": 14,
        "length": 6,
        "offset": 109,
        "surroundingCode": "    private readonly IRdDynamic myFallbackSchedulerSource;\n\n    private static readonly object ourLock = new object();\n    private static int ourDisable;\n    private static readonly Stack<IScheduler> ourSchedulersOverride = new Stack<IScheduler>();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "356ac5c880f6a7d10eaf80c216837c92cea57be22cd0e99d07e67e6fae3ca35c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ViewableList.cs",
      "language": "C#",
      "line": 19,
      "offset": 58,
      "length": 20,
      "code": {
        "startLine": 17,
        "length": 20,
        "offset": 102,
        "surroundingCode": "  {\n    private readonly IList<T> myStorage;\n    private readonly Signal<ListEvent<T>> myChange = new Signal<ListEvent<T>>();\n\n    [PublicAPI]"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "364f74ded8b45b7a87e104ae77a42e471c6a898a9bcbaa9f611ea4300cf2b913"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdMap.cs",
      "language": "C#",
      "line": 75,
      "offset": 64,
      "length": 19,
      "code": {
        "startLine": 73,
        "length": 19,
        "offset": 129,
        "surroundingCode": "    public bool IsMaster = false;\n    private long myNextVersion;\n    private readonly Dictionary<K, long> myPendingForAck = new Dictionary<K, long>();\n\n    #endregion"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "385160d5d9356bc9179d44baacb594303761c43049d5bc0e769d2eab1422e12e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdTaskResult.cs",
      "language": "C#",
      "line": 27,
      "offset": 56,
      "length": 15,
      "code": {
        "startLine": 25,
        "length": 15,
        "offset": 170,
        "surroundingCode": "    internal static RdTaskResult<T> Success(T result) => new RdTaskResult<T>(RdTaskStatus.Success, result, null);\n\n    internal static RdTaskResult<T> Cancelled() => new RdTaskResult<T>(RdTaskStatus.Canceled, default(T), null);\n\n    internal static RdTaskResult<T> Faulted(Exception exception) => new RdTaskResult<T>(RdTaskStatus.Faulted, default(T), exception as RdFault ?? new RdFault(exception));"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "385b136c2fd6f4279ca5af595e6bec7f30301f33ac0a02e5a3c9bf9b381eeefe"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 28,
      "offset": 81,
      "length": 42,
      "code": {
        "startLine": 26,
        "length": 42,
        "offset": 174,
        "surroundingCode": "  {\n    private readonly Dictionary<Type, RdId> myTypeMapping = new Dictionary<Type, RdId>();\n    private readonly Dictionary<RdId, CtxReadDelegate<object?>> myReaders = new Dictionary<RdId, CtxReadDelegate<object?>>();\n    private readonly Dictionary<RdId, CtxWriteDelegate<object?>> myWriters = new Dictionary<RdId, CtxWriteDelegate<object?>>();\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "3a007c987bb087d3bb8689bc6c1b1562e535fe757369fda20453602cb3a4f5f0"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/WriteOnceProperty.cs",
      "language": "C#",
      "line": 9,
      "offset": 53,
      "length": 15,
      "code": {
        "startLine": 7,
        "length": 15,
        "offset": 122,
        "surroundingCode": "  public sealed class WriteOnceProperty<T> : IViewableProperty<T>\n  {\n    private readonly WriteOnceSignal mySignal = new WriteOnceSignal();\n    private readonly object myLock = new object();\n    private Maybe<T> myMaybe;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "3de3d662aa643d10917d46b3896257b330b1103855559c9706c1bb84aeb6980c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdList.cs",
      "language": "C#",
      "line": 27,
      "offset": 51,
      "length": 15,
      "code": {
        "startLine": 25,
        "length": 15,
        "offset": 76,
        "surroundingCode": "    where V : notnull\n  {\n    private readonly ViewableList<V> myList = new ViewableList<V>();\n       \n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "3e184b154bec0721e1a60f7c366438ecac45fbb598ae08cf4ca4be181f0f32dd"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Unit.cs",
      "language": "C#",
      "line": 13,
      "offset": 48,
      "length": 4,
      "code": {
        "startLine": 11,
        "length": 4,
        "offset": 130,
        "surroundingCode": "    /// The only way to get instance of type <see cref=\"Unit\"/>\n    /// </summary>\n    public static readonly Unit Instance = new Unit();\n    \n    private Unit() {}"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "40876343902dfebcf021bd0848bdc9221c4c1d66f8eb6bd625e9d3602aaf10b6"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/ProtocolContexts.cs",
      "language": "C#",
      "line": 25,
      "offset": 68,
      "length": 17,
      "code": {
        "startLine": 23,
        "length": 17,
        "offset": 288,
        "surroundingCode": "    private readonly ConcurrentDictionary<RdContextBase, ISingleContextHandler> myHandlersMap = new ConcurrentDictionary<RdContextBase, ISingleContextHandler>();\n    private readonly object myOrderingLock = new object();\n    private readonly ThreadLocal<bool> mySendWithoutContexts = new ThreadLocal<bool>(() => false);\n    \n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "41a5f24791d07a984b0ddcc0117b7e5f1e39f6e003ea3aa12947a5bc3e61eb2e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/TestLogger.cs",
      "language": "C#",
      "line": 16,
      "offset": 45,
      "length": 6,
      "code": {
        "startLine": 14,
        "length": 6,
        "offset": 116,
        "surroundingCode": "    public static readonly ILogFactory Factory = new TestLogFactory();\n\n    private readonly object myMonitor = new object();\n    private readonly List<Exception> myExceptions = new List<Exception>();\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "422b924dec90ea7ed413d976ba1d04415eff794edd201d550d01c35efe2ec9ee"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Types.cs",
      "language": "C#",
      "line": 18,
      "offset": 74,
      "length": 24,
      "code": {
        "startLine": 16,
        "length": 24,
        "offset": 136,
        "surroundingCode": "    /// To prettify Int32, Int64 and so on.\n    /// </summary>\n    private static readonly Dictionary<Type, string> ourPrimitives = new Dictionary<Type, string>\n    {\n      {typeof(byte), \"byte\"},"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "42e64b9ffa9afe84dbd6a05dfe1baaedcb550e4972fe4f8c7e865b18e357d088"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 27,
      "offset": 65,
      "length": 22,
      "code": {
        "startLine": 25,
        "length": 22,
        "offset": 110,
        "surroundingCode": "  public class Serializers : ISerializers\n  {\n    private readonly Dictionary<Type, RdId> myTypeMapping = new Dictionary<Type, RdId>();\n    private readonly Dictionary<RdId, CtxReadDelegate<object?>> myReaders = new Dictionary<RdId, CtxReadDelegate<object?>>();\n    private readonly Dictionary<RdId, CtxWriteDelegate<object?>> myWriters = new Dictionary<RdId, CtxWriteDelegate<object?>>();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "45e2c2aa38ca02bfb6fb55657b52d16fecd0263caa29df7c79097356cda35a8b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 75,
      "offset": 67,
      "length": 13,
      "code": {
        "startLine": 73,
        "length": 13,
        "offset": 121,
        "surroundingCode": "  public static class ReflectionSerializerVerifier\n  {\n    private static readonly HashSet<Type> ourPrimitiveTypes = new HashSet<Type>()\n    {\n      typeof(byte),              // serializers.Register(ReadByte, WriteByte, 1);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "46c4787d77a139b27f971fb0e7f1e1aaefd395533f58cfb524bf23326f8a409e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/IInternRoot.cs",
      "language": "C#",
      "line": 63,
      "offset": 42,
      "length": 8,
      "code": {
        "startLine": 61,
        "length": 8,
        "offset": 93,
        "surroundingCode": "    public bool IsLocal => (myValue & 1) == 0;\n    \n    public static InternId Invalid = new InternId(InvalidId);\n\n    public static InternId Read(UnsafeReader reader) => new InternId(reader.ReadInt());"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "48166fb6ab450be7428f7b12a504f57e1395909ab76d145cef1d616a4dd61e82"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Linearization.cs",
      "language": "C#",
      "line": 8,
      "offset": 42,
      "length": 6,
      "code": {
        "startLine": 6,
        "length": 6,
        "offset": 74,
        "surroundingCode": "  public class Linearization\n  {\n    private readonly object myLock = new object();\n    \n    private int myNextId;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "4b10be83de2750d6fffbb90da43279d478fa38b2bd0fd611ae73c2d4a2706bf1"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogLog.cs",
      "language": "C#",
      "line": 61,
      "offset": 80,
      "length": 26,
      "code": {
        "startLine": 59,
        "length": 26,
        "offset": 106,
        "surroundingCode": "    #region Records event\n\n    private static readonly List<Action<LogLogRecord>> ourEventListeners = new List<Action<LogLogRecord>>();\n\n    public static event Action<LogLogRecord> RecordsChanged"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "4d520318d8a430ecbff07ccc95c319f0d2fd0c069ad03fd0824a2a23e2ca627f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/BindableChildrenUtil.cs",
      "language": "C#",
      "line": 22,
      "offset": 105,
      "length": 45,
      "code": {
        "startLine": 20,
        "length": 45,
        "offset": 285,
        "surroundingCode": "  {\n    private static readonly Dictionary<Type, Action<IReflectionBindable, PrettyPrinter>> ourPrettyPrinters = new Dictionary<Type, Action<IReflectionBindable, PrettyPrinter>>();\n    private static readonly Dictionary<Type, Action<IReflectionBindable>> ourFillBindableChildren = new Dictionary<Type, Action<IReflectionBindable>>();\n    private static readonly object ourPrettyPrintersLock = new object();\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "54432cf7aa6318493400229c1cc2331d6dfcbb33afe5bb66888a6ff549072d43"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/InternRoot.cs",
      "language": "C#",
      "line": 22,
      "offset": 77,
      "length": 35,
      "code": {
        "startLine": 20,
        "length": 35,
        "offset": 128,
        "surroundingCode": "      new ConcurrentDictionary<InternId, TBase>();\n\n    private readonly ConcurrentDictionary<TBase, IdPair> myInverseMap = new ConcurrentDictionary<TBase, IdPair>();\n    private int myInternedIdCounter;\n    private readonly CtxReadDelegate<TBase> myReadDelegate;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "57f7ea26b0c4b39717fcbb678a66b7f52f510cc9dc74dcdbb46a187256bcab7b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 337,
      "offset": 64,
      "length": 13,
      "code": {
        "startLine": 335,
        "length": 13,
        "offset": 69,
        "surroundingCode": "\n    \n    private readonly HashSet<Type> myRegisteredToplevels = new HashSet<Type>();\n    public void RegisterToplevelOnce(Type toplevelType, Action<ISerializers> registerDeclaredTypesSerializers)\n    {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "5850b42ffb10f7bec39bdd0dd35302422bdd9a9e4f71ce5990d6ac371d66e71b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ViewableSet.cs",
      "language": "C#",
      "line": 16,
      "offset": 61,
      "length": 19,
      "code": {
        "startLine": 14,
        "length": 19,
        "offset": 132,
        "surroundingCode": "    public class ViewableSet<T> : IViewableSet<T> where T : notnull\n  {\n        private readonly Signal<SetEvent<T>> myChange = new Signal<SetEvent<T>>();\n#if !NET35\n    private readonly ISet<T> myStorage;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "5bdbde147700fe123c52033165a20e9b00746c71775d367c2a7cadd99913b15a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdTask.cs",
      "language": "C#",
      "line": 18,
      "offset": 79,
      "length": 34,
      "code": {
        "startLine": 16,
        "length": 34,
        "offset": 87,
        "surroundingCode": "  {\n    \n    internal readonly WriteOnceProperty<RdTaskResult<T>> ResultInternal = new WriteOnceProperty<RdTaskResult<T>>();\n\n    public IReadonlyProperty<RdTaskResult<T>> Result => ResultInternal;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "60bb063bbb1e141525bc50c0de6b5d2d09a2ce14c25f72d6889fb0b08262d9fe"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RpcTimeouts.cs",
      "language": "C#",
      "line": 17,
      "offset": 54,
      "length": 11,
      "code": {
        "startLine": 15,
        "length": 11,
        "offset": 213,
        "surroundingCode": "    /// If request lasts more than 3000 ms it's considered as hang. <c>Sync</c> request interrupts and <see cref=\"ILog.Error\"/> is reported.\n    /// </summary>\n    public static readonly RpcTimeouts Default = new RpcTimeouts(TimeSpan.FromMilliseconds(200), TimeSpan.FromMilliseconds(3000));\n    \n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "6363178a9c57e85fce45871e8d2bb3b307f989c90d64edd1b7e0a4d374c2d05c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 874,
      "offset": 71,
      "length": 18,
      "code": {
        "startLine": 872,
        "length": 18,
        "offset": 109,
        "surroundingCode": "    /// <returns></returns>\n    [Pure]\n    public static LifetimeDefinition Define(string? id = null) => new LifetimeDefinition {Id = id};\n    \n    #endregion"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "64266d2cf68fb252efe832a7be27b3d6c8bba77dab74be91ee7f0f57bb2ff435"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 32,
      "offset": 81,
      "length": 32,
      "code": {
        "startLine": 30,
        "length": 32,
        "offset": 217,
        "surroundingCode": "    /// Collection static serializers (polymorphic is not possible here! Only instance serializer can be polymorphic)\n    /// </summary>\n    private readonly Dictionary<Type, SerializerPair> myStaticSerializers = new Dictionary<Type, SerializerPair>();\n\n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "64924236f77bd28b7b2a35ba19b348d36c5b9c33defbdb973abdc0de1ec2f9c6"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSimpleDispatcher.cs",
      "language": "C#",
      "line": 17,
      "offset": 51,
      "length": 14,
      "code": {
        "startLine": 15,
        "length": 14,
        "offset": 117,
        "surroundingCode": "\n    private readonly Queue<Action> myTasks = new Queue<Action>();\n    private readonly AutoResetEvent myEvent = new AutoResetEvent(false);\n\n    public TimeSpan? MessageTimeout = null;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "6888498cd86a899b5b7410c55bd32e8d3039342bcba057001717e861f2916ccb"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdExtBase.cs",
      "language": "C#",
      "line": 154,
      "offset": 62,
      "length": 22,
      "code": {
        "startLine": 152,
        "length": 22,
        "offset": 63,
        "surroundingCode": "\n\n    internal readonly ViewableProperty<bool> Connected = new ViewableProperty<bool>(false);\n    internal IWire RealWire;\n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "6d7625a77b8f8260f3d174141e2e0cc08bcf0cc93c02749b2abb8fb6ed7737ad"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSignal.cs",
      "language": "C#",
      "line": 35,
      "offset": 47,
      "length": 9,
      "code": {
        "startLine": 33,
        "length": 9,
        "offset": 62,
        "surroundingCode": "    #endregion\n\n    private readonly Signal<T> mySignal = new Signal<T>();\n\n    public new SerializationCtx SerializationContext { get; private set; }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "6ea5b053406525edd77b45a2c53953efa52853d76dbc598a59303d8fb050d213"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorTestBase.cs",
      "language": "C#",
      "line": 53,
      "offset": 57,
      "length": 18,
      "code": {
        "startLine": 51,
        "length": 18,
        "offset": 159,
        "surroundingCode": "\n    protected SchedulerAwaitable YieldToClient() => new SchedulerAwaitable(ClientProtocol.Scheduler);\n    protected SchedulerAwaitable YieldToServer() => new SchedulerAwaitable(ServerProtocol.Scheduler);\n\n    protected override IScheduler CreateScheduler(bool isServer)"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "701ef7ddd3c32e7a6707abea327a5afcc218339ca8dcff07eb06317568c2d895"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 102,
      "offset": 75,
      "length": 32,
      "code": {
        "startLine": 100,
        "length": 32,
        "offset": 152,
        "surroundingCode": "    /// Collection true type to non-polymorphic serializer\n    /// </summary>\n    private readonly Dictionary<Type, SerializerPair> mySerializers = new Dictionary<Type, SerializerPair>();\n\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "70918972d6036745874606c20a21067f8b7674df3dc97161db8720d20c49105c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 883,
      "offset": 116,
      "length": 26,
      "code": {
        "startLine": 881,
        "length": 26,
        "offset": 125,
        "surroundingCode": "    \n    \n    [MethodImpl(MethodImplOptions.AggressiveInlining)] private ScopedAsyncLocal<Lifetime> UsingAsyncLocal() => new ScopedAsyncLocal<Lifetime>(AsyncLocal, this);\n\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "70ab550098257d7ca2105ecc08a28a34c725eb97570f3e3ea42fb9b243ed57ca"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 115,
      "offset": 66,
      "length": 11,
      "code": {
        "startLine": 113,
        "length": 11,
        "offset": 154,
        "surroundingCode": "    /// used to provide diagnostics about circular dependencies only.\n    /// </summary>\n    private readonly Queue<Type> myCurrentSerializersChain = new Queue<Type>();\n\n    public IScalarSerializers Scalars => myScalars;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "7191ee1ddfba04f829c77361595e7a3546be2acc9b3ba77b9685232d9f9fefce"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdBindableBase.cs",
      "language": "C#",
      "line": 20,
      "offset": 51,
      "length": 5,
      "code": {
        "startLine": 18,
        "length": 5,
        "offset": 86,
        "surroundingCode": "    public RdId RdId { get; set; }\n\n    internal static readonly RName NotBound = new RName(\"<<not bound>>\");\n    public RName Location { get; private set; } = NotBound;   \n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "71ddaedf544604bc801d6d79f11f5a27712292eed300269917ca018ae54c9386"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 29,
      "offset": 82,
      "length": 43,
      "code": {
        "startLine": 27,
        "length": 43,
        "offset": 297,
        "surroundingCode": "    private readonly Dictionary<Type, RdId> myTypeMapping = new Dictionary<Type, RdId>();\n    private readonly Dictionary<RdId, CtxReadDelegate<object?>> myReaders = new Dictionary<RdId, CtxReadDelegate<object?>>();\n    private readonly Dictionary<RdId, CtxWriteDelegate<object?>> myWriters = new Dictionary<RdId, CtxWriteDelegate<object?>>();\n\n    private readonly ITypesRegistrar? myRegistrar;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "789abc86cef7e983e64b5057b63893a04c8c067cbb915a22849822d450cc646e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 976,
      "offset": 66,
      "length": 25,
      "code": {
        "startLine": 974,
        "length": 25,
        "offset": 107,
        "surroundingCode": "        \n    //Only if state >= Canceling\n    private LifetimeCanceledException CanceledException() => new LifetimeCanceledException(Lifetime);\n    \n    //Only if state >= Canceling"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "7ccba2ae8c73197fac89e0c42f7d24539dac809b66c59be672483289407019b0"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Internal/NullLog.cs",
      "language": "C#",
      "line": 8,
      "offset": 51,
      "length": 7,
      "code": {
        "startLine": 6,
        "length": 7,
        "offset": 84,
        "surroundingCode": "  public class NullLog : ILog\n  {\n    public static readonly NullLog Instance = new NullLog();        \n    \n    private NullLog() {}"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "84c484529f2100edeefbeef1e6a39fe2251f01ba82e4c03953644b202553c38a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 38,
      "offset": 79,
      "length": 32,
      "code": {
        "startLine": 36,
        "length": 32,
        "offset": 166,
        "surroundingCode": "    /// entity to guarantee consistency of serializers in Rd objects\n    /// </summary>\n    private readonly Dictionary<Type, SerializerPair> myPolySerializers = new Dictionary<Type, SerializerPair>();\n\n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "860fd72c118faa92675afa50f2c98c7e7f2b53e420b4de6304351fa050811ea4"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/SwitchingScheduler.cs",
      "language": "C#",
      "line": 18,
      "offset": 75,
      "length": 17,
      "code": {
        "startLine": 16,
        "length": 17,
        "offset": 168,
        "surroundingCode": "    private static readonly object ourLock = new object();\n    private static int ourDisable;\n    private static readonly Stack<IScheduler> ourSchedulersOverride = new Stack<IScheduler>();\n\n    public bool IsActive  => ActiveScheduler.IsActive;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "882dd819e499695d2d053c8cf407b89a1246cf9d22c7f936f1aa76e93c67f585"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/MessageBroker.cs",
      "language": "C#",
      "line": 27,
      "offset": 74,
      "length": 29,
      "code": {
        "startLine": 25,
        "length": 29,
        "offset": 169,
        "surroundingCode": "    private readonly IScheduler myScheduler;\n    private readonly object myLock = new object();\n    private readonly Dictionary<RdId, IRdWireable> mySubscriptions = new Dictionary<RdId, IRdWireable>();\n    private readonly Dictionary<RdId, Mq> myBroker = new Dictionary<RdId, Mq>();\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "8e736dc0eeaf8f3c4aab8a5098ab3b14c701333fac9dd100070ce058771ca73a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Result.cs",
      "language": "C#",
      "line": 23,
      "offset": 77,
      "length": 21,
      "code": {
        "startLine": 21,
        "length": 21,
        "offset": 210,
        "surroundingCode": "    public Exception SourceException { get; }\n    private ExceptionDispatchInfo(Exception exception) { SourceException = exception; }\n    public static ExceptionDispatchInfo Capture(Exception exception) => new ExceptionDispatchInfo(exception);\n    public void Throw() { throw SourceException; }\n  } "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "8fc1b7bd56d2f74682aaa97df2d8730f66d2cbce5cd03b5f8e29ad38ad265757"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 281,
      "offset": 125,
      "length": 55,
      "code": {
        "startLine": 279,
        "length": 55,
        "offset": 275,
        "surroundingCode": "    /// </summary>\n    /// <returns>Disposable that allow to call <see cref=\"LifetimeDefinition.Terminate\"/> under <see cref=\"Execute{T}\"/> </returns>\n    [PublicAPI] public LifetimeDefinition.AllowTerminationUnderExecutionCookie UsingAllowTerminationUnderExecution() => new LifetimeDefinition.AllowTerminationUnderExecutionCookie(Thread.CurrentThread);\n    \n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "92207d1296ec7b91f2934e242dbbaa053747ddde8de9b6c8b1144c65dd6999d1"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/TaskSchedulerWrapper.cs",
      "language": "C#",
      "line": 10,
      "offset": 62,
      "length": 16,
      "code": {
        "startLine": 8,
        "length": 16,
        "offset": 114,
        "surroundingCode": "  public class TaskSchedulerWrapper : IScheduler\n  {\n    private readonly ThreadLocal<int> myExecutionCount = new ThreadLocal<int>();\n    private readonly TaskScheduler myScheduler;\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "92928f9c74ef76a7d1c6ec6b2403b4e9b77b4d21a2ed1b04f4ef0025bf7c2d6c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/BindableChildrenUtil.cs",
      "language": "C#",
      "line": 23,
      "offset": 64,
      "length": 6,
      "code": {
        "startLine": 21,
        "length": 6,
        "offset": 393,
        "surroundingCode": "    private static readonly Dictionary<Type, Action<IReflectionBindable, PrettyPrinter>> ourPrettyPrinters = new Dictionary<Type, Action<IReflectionBindable, PrettyPrinter>>();\n    private static readonly Dictionary<Type, Action<IReflectionBindable>> ourFillBindableChildren = new Dictionary<Type, Action<IReflectionBindable>>();\n    private static readonly object ourPrettyPrintersLock = new object();\n\n    internal static void PrettyPrint(PrettyPrinter p, IReflectionBindable instance)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "946437da5b96588fa30a309c620cc4a784deda7cf8a8a4f631ae70140daa2358"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Util/PrettyPrinter.cs",
      "language": "C#",
      "line": 31,
      "offset": 52,
      "length": 13,
      "code": {
        "startLine": 29,
        "length": 13,
        "offset": 115,
        "surroundingCode": "    private bool myNeedIndent = true;\n    private int myIndent;\n    private readonly StringBuilder myBuilder = new StringBuilder();\n    #endregion\n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "956f82bff610ed899b762b5d48b32810f4ada29b0ea89e82a47d85d8ff135d9a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 176,
      "offset": 37,
      "length": 8,
      "code": {
        "startLine": 174,
        "length": 8,
        "offset": 74,
        "surroundingCode": "    /// </remarks>\n    /// </summary>\n    public Lifetime Lifetime => new Lifetime(this);\n    \n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "9617a43621688502708704b5919a6b572a6ee4490ea20955d1e658e02661b9fa"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Statics.cs",
      "language": "C#",
      "line": 112,
      "offset": 78,
      "length": 24,
      "code": {
        "startLine": 110,
        "length": 24,
        "offset": 111,
        "surroundingCode": "  public static class Statics\n  {\n    private static readonly Dictionary<Type, object> ourPerTypeStatics = new Dictionary<Type, object>();\n    \n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "9a45c8792a3b366a708df08ca4a1748098caf3180eedea08c23bbff723e0c803"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/TextBufferVersion.cs",
      "language": "C#",
      "line": 7,
      "offset": 55,
      "length": 17,
      "code": {
        "startLine": 5,
        "length": 17,
        "offset": 92,
        "surroundingCode": "  public struct TextBufferVersion\n  {\n    public static TextBufferVersion InitVersion = new TextBufferVersion(-1, -1);\n\n    public TextBufferVersion(int master, int slave) : this()"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "9a63c79f22be4ba5b311b12f470362785193b1d451a1f83f8d3f267507278007"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/BindableChildrenUtil.cs",
      "language": "C#",
      "line": 21,
      "offset": 114,
      "length": 60,
      "code": {
        "startLine": 19,
        "length": 60,
        "offset": 162,
        "surroundingCode": "  internal static class BindableChildrenUtil\n  {\n    private static readonly Dictionary<Type, Action<IReflectionBindable, PrettyPrinter>> ourPrettyPrinters = new Dictionary<Type, Action<IReflectionBindable, PrettyPrinter>>();\n    private static readonly Dictionary<Type, Action<IReflectionBindable>> ourFillBindableChildren = new Dictionary<Type, Action<IReflectionBindable>>();\n    private static readonly object ourPrettyPrintersLock = new object();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "9a6734b1a5c465fc54f97b6c11e5c5a0a1d664a648d3b2fabb91522be1ac1041"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/TestLogger.cs",
      "language": "C#",
      "line": 17,
      "offset": 57,
      "length": 15,
      "code": {
        "startLine": 15,
        "length": 15,
        "offset": 111,
        "surroundingCode": "\n    private readonly object myMonitor = new object();\n    private readonly List<Exception> myExceptions = new List<Exception>();\n\n    private TestLogger([NotNull] string category) : base(category, LoggingLevel.VERBOSE)"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "9b74d024deb8f778ec0d755b185caf38187db0114eea49a3d4cf37266328fc60"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/RdTextBuffer.cs",
      "language": "C#",
      "line": 218,
      "offset": 64,
      "length": 18,
      "code": {
        "startLine": 216,
        "length": 18,
        "offset": 207,
        "surroundingCode": "      private readonly RdTextBuffer myBuffer;\n      private readonly List<RdTextBufferChange> myRemoteChanges = new List<RdTextBufferChange>();\n      private readonly List<RdTextChange> myLocalChanges = new List<RdTextChange>();\n      private readonly TextBufferVersion myVersionBeforeOpening;\n      private readonly TextBufferVersion myInitialBufferVersion;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "9beaf0f018f8e72444f3b01c0c59c85296b06a3ef7dc58d20cfe060bd6c75cf9"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/RdTextBuffer.cs",
      "language": "C#",
      "line": 223,
      "offset": 64,
      "length": 20,
      "code": {
        "startLine": 221,
        "length": 20,
        "offset": 108,
        "surroundingCode": "      private State myState = State.Opened;\n\n      public readonly Signal<RdTextChange> OnLocalChange = new Signal<RdTextChange>();\n      public readonly Signal<RdTextChange> OnRemoteChange = new Signal<RdTextChange>();\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "a2b059d1051207d4bcda1976705f38f97025686ccbdfa6d1a10355b95853ae4e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/MessageBroker.cs",
      "language": "C#",
      "line": 28,
      "offset": 58,
      "length": 20,
      "code": {
        "startLine": 26,
        "length": 20,
        "offset": 214,
        "surroundingCode": "    private readonly object myLock = new object();\n    private readonly Dictionary<RdId, IRdWireable> mySubscriptions = new Dictionary<RdId, IRdWireable>();\n    private readonly Dictionary<RdId, Mq> myBroker = new Dictionary<RdId, Mq>();\n\n    private bool myIsQueueingAllMessages;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "a8eddaa5f7cf3fa3c0b24f9cb5f2f8d91d553b1bfb8cbf4a93c1c64b320c96c6"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 51,
      "offset": 44,
      "length": 6,
      "code": {
        "startLine": 49,
        "length": 6,
        "offset": 106,
        "surroundingCode": "\n      protected readonly ByteBufferAsyncProcessor SendBuffer;\n      protected readonly object Lock = new object();\n\n      public Socket Socket { get; protected set; }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "a9b0a564f61d1c8df97f6b4cfe5bb1666bcc64353947c371f9da9e138625db63"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 35,
      "offset": 42,
      "length": 6,
      "code": {
        "startLine": 33,
        "length": 6,
        "offset": 84,
        "surroundingCode": "    private readonly Lifetime myLifetime;\n\n    private readonly object myLock = new object();\n        \n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "aaa4ed4b742f8f18a0ac68bd5dc51517a5e07758ce84eb85def5afb3ed6404fb"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Reflection.App/Program.cs",
      "language": "C#",
      "line": 39,
      "offset": 60,
      "length": 10,
      "code": {
        "startLine": 37,
        "length": 10,
        "offset": 105,
        "surroundingCode": "    public static event Action<char> OnChar;\n\n    private static readonly IPEndPoint ourIpEndPoint = new IPEndPoint(IPAddress.Loopback, ourPort);\n\n    public static void StartClient() => Main(new [] {\"client\"});"
      }
    }
  ],
  "attributes": {
    "module": "Test.Reflection.App",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "afa86b83e4f30dd1925cfd7876b533dea69095845f9a43822a1689127f9a8ad5"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/MessageBroker.cs",
      "language": "C#",
      "line": 26,
      "offset": 42,
      "length": 6,
      "code": {
        "startLine": 24,
        "length": 6,
        "offset": 87,
        "surroundingCode": "\n    private readonly IScheduler myScheduler;\n    private readonly object myLock = new object();\n    private readonly Dictionary<RdId, IRdWireable> mySubscriptions = new Dictionary<RdId, IRdWireable>();\n    private readonly Dictionary<RdId, Mq> myBroker = new Dictionary<RdId, Mq>();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "afb8a3d7cf56def86c70945fd262dd9bedbbe606194868e6bf4bf02c399ac0ce"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdTaskResult.cs",
      "language": "C#",
      "line": 29,
      "offset": 73,
      "length": 15,
      "code": {
        "startLine": 27,
        "length": 15,
        "offset": 186,
        "surroundingCode": "    internal static RdTaskResult<T> Cancelled() => new RdTaskResult<T>(RdTaskStatus.Canceled, default(T), null);\n\n    internal static RdTaskResult<T> Faulted(Exception exception) => new RdTaskResult<T>(RdTaskStatus.Faulted, default(T), exception as RdFault ?? new RdFault(exception));\n\n    public T Unwrap()"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "b0654cd60af8db49db61a67295cc72dd82ccedc500c456449db86457d86848d0"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 591,
      "offset": 53,
      "length": 18,
      "code": {
        "startLine": 589,
        "length": 18,
        "offset": 96,
        "surroundingCode": "    /// <returns></returns>\n    [PublicAPI]\n    public LifetimeDefinition CreateNested() => new LifetimeDefinition(this);\n        \n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "b0a1fd25a6d7b854bd0e2b3fe061c349952e3bc982ee78a7603032ffbfddd9de"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/InternRoot.cs",
      "language": "C#",
      "line": 235,
      "offset": 65,
      "length": 19,
      "code": {
        "startLine": 233,
        "length": 19,
        "offset": 109,
        "surroundingCode": "  class InternRootScheduler : IScheduler\n  {\n    internal static readonly InternRootScheduler Instance = new InternRootScheduler();\n    \n    private int myActive = 0;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "b1a654b326a4502a4fa5289c50eca7760647408d735dc13f511db33d1aadeaa0"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RpcTimeouts.cs",
      "language": "C#",
      "line": 22,
      "offset": 54,
      "length": 11,
      "code": {
        "startLine": 20,
        "length": 11,
        "offset": 220,
        "surroundingCode": "    /// This timeout is used by <see cref=\"RdCall{TReq,TRes}.Sync\"/> if no timeouts specified and <see cref=\"RespectRpcTimeouts\"/> is <c>false</c>.\n    /// </summary>\n    public static readonly RpcTimeouts Maximal = new RpcTimeouts(TimeSpan.FromMilliseconds(30000), TimeSpan.FromMilliseconds(30000));\n\n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "b2ede7500f7bb42add5a2933cb04a280bbdfce93182eea3e72aae781880237a6"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/StealingScheduler.cs",
      "language": "C#",
      "line": 23,
      "offset": 60,
      "length": 21,
      "code": {
        "startLine": 21,
        "length": 21,
        "offset": 113,
        "surroundingCode": "    /// </summary>\n    private volatile int myActive;\n    private readonly ConcurrentQueue<Task> myActions = new ConcurrentQueue<Task>();\n\n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "b44263589bd0201d478bf32e452af3d5398db65ba1a562facf4afd2a40f4d247"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/CollectionTest.cs",
      "language": "C#",
      "line": 42,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 40,
        "length": 11,
        "offset": 49,
        "surroundingCode": "      {\n        new ComplexType(42),\n        new ComplexType(666)\n      };\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "ba0f43be1b102d188ba45a21039ab26c926ddefb097b45d181b20aac3705c1ab"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/ProtocolContexts.cs",
      "language": "C#",
      "line": 21,
      "offset": 89,
      "length": 38,
      "code": {
        "startLine": 19,
        "length": 38,
        "offset": 141,
        "surroundingCode": "  public class ProtocolContexts : RdReactiveBase\n  {\n    private readonly CopyOnWriteList<ISingleContextHandler> myCounterpartHandlers = new CopyOnWriteList<ISingleContextHandler>();\n    private readonly IViewableList<ISingleContextHandler> myHandlerOrder = new ViewableList<ISingleContextHandler>(new CopyOnWriteList<ISingleContextHandler>());\n    private readonly ConcurrentDictionary<RdContextBase, ISingleContextHandler> myHandlersMap = new ConcurrentDictionary<RdContextBase, ISingleContextHandler>();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "bd1d1053850feaba998022b2ed11d0a54c17b9a71817575ad1e4389d2dd4e290"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGeneratorCache.cs",
      "language": "C#",
      "line": 13,
      "offset": 110,
      "length": 65,
      "code": {
        "startLine": 11,
        "length": 65,
        "offset": 267,
        "surroundingCode": "    private readonly ProxyGenerator myGenerator;\n    private readonly ConcurrentDictionary<Type, Type> myTypesCache = new ConcurrentDictionary<Type, Type>();\n    private readonly ConcurrentDictionary<Type, SortedList<MethodInfo, DynamicMethod>> myAdaptersCache = new ConcurrentDictionary<Type, SortedList<MethodInfo, DynamicMethod>>();\n\n    private sealed class MethodNameComparer : IComparer<MethodInfo>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "bedd303f6253bb538d2fff951b93dc4d17e0b70cae04d574d25d8b3ff8a780e9"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/RdId.cs",
      "language": "C#",
      "line": 12,
      "offset": 49,
      "length": 4,
      "code": {
        "startLine": 10,
        "length": 4,
        "offset": 97,
        "surroundingCode": "    public static readonly RdId Root = Nil;\n    \n    public static readonly RdId TestValue = new RdId(1);\n    public const int MaxStaticId = 1000000;\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "c0614d3f19047c26485bafcc57353f6fe32fc4e9fc93fa4a25fbaf3b49732650"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 131,
      "offset": 66,
      "length": 20,
      "code": {
        "startLine": 129,
        "length": 20,
        "offset": 137,
        "surroundingCode": "    /// and can be used by cooperative cancellation.\n    /// </summary>\n    public static readonly AsyncLocal<Lifetime> AsyncLocal = new AsyncLocal<Lifetime>();\n    #endif\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "c1da0d3d01b1ab68967587ddf6b711fd1b10b1fdf769e5664f511983494da841"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogLog.cs",
      "language": "C#",
      "line": 165,
      "offset": 71,
      "length": 24,
      "code": {
        "startLine": 163,
        "length": 24,
        "offset": 101,
        "surroundingCode": "\n    //field for StoredRecords\n    private static readonly LinkedList<LogLogRecord> ourRecords = new LinkedList<LogLogRecord>();\n\n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "c69ba2698c8b47b200f6f90a3e0ff809b57bc64ec4b4f845a3878bdaa4c5b757"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorSimpleTest.cs",
      "language": "C#",
      "line": 147,
      "offset": 56,
      "length": 6,
      "code": {
        "startLine": 145,
        "length": 6,
        "offset": 64,
        "surroundingCode": "      }\n\n      public string ReverseString(string input) => new string(input.Reverse().ToArray());\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "c93d68b99431da85122744a62e03161e1af9acecd1c379d111979c5bdc1c1a76"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 69,
      "offset": 70,
      "length": 27,
      "code": {
        "startLine": 67,
        "length": 27,
        "offset": 77,
        "surroundingCode": "    };\n\n    private static Lazy<ProxyGeneratorMembers> ourLazyMembers => new Lazy<ProxyGeneratorMembers>(() => new ProxyGeneratorMembers());\n    private static ProxyGeneratorMembers Members => ourLazyMembers.Value;\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "c997db4b48de7664d8eb1959ac8a8cadceb8304a0518563d615a72dce4953e1b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/ProtocolContexts.cs",
      "language": "C#",
      "line": 24,
      "offset": 50,
      "length": 6,
      "code": {
        "startLine": 22,
        "length": 6,
        "offset": 373,
        "surroundingCode": "    private readonly IViewableList<ISingleContextHandler> myHandlerOrder = new ViewableList<ISingleContextHandler>(new CopyOnWriteList<ISingleContextHandler>());\n    private readonly ConcurrentDictionary<RdContextBase, ISingleContextHandler> myHandlersMap = new ConcurrentDictionary<RdContextBase, ISingleContextHandler>();\n    private readonly object myOrderingLock = new object();\n    private readonly ThreadLocal<bool> mySendWithoutContexts = new ThreadLocal<bool>(() => false);\n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "caffa8a379b23fe01a82929dc285b8f78dd5e17de54494c8aadaea78047615cb"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/RdTextBuffer.cs",
      "language": "C#",
      "line": 217,
      "offset": 71,
      "length": 24,
      "code": {
        "startLine": 215,
        "length": 24,
        "offset": 117,
        "surroundingCode": "\n      private readonly RdTextBuffer myBuffer;\n      private readonly List<RdTextBufferChange> myRemoteChanges = new List<RdTextBufferChange>();\n      private readonly List<RdTextChange> myLocalChanges = new List<RdTextChange>();\n      private readonly TextBufferVersion myVersionBeforeOpening;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "cb0f41e9fd6bf946a4bd367fa49d5cca18e9d5c1a18143c81e94963298cd4cfe"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 32,
      "offset": 42,
      "length": 6,
      "code": {
        "startLine": 30,
        "length": 6,
        "offset": 93,
        "surroundingCode": "\n    private readonly ITypesRegistrar? myRegistrar;\n    private readonly object myLock = new object();\n    \n#if !NET35"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "cf20acabf32b1d6d66194f1ba8fbec2aebc42d6b75538ee7ce88a5156246714c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/TestLogger.cs",
      "language": "C#",
      "line": 13,
      "offset": 61,
      "length": 10,
      "code": {
        "startLine": 11,
        "length": 10,
        "offset": 100,
        "surroundingCode": "  public class TestLogger : LogBase\n  {\n    public static readonly TestLogger ExceptionLogger = new TestLogger(\"Tests\");\n    public static readonly ILogFactory Factory = new TestLogFactory();\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "d0e5091ad1df63bee4cf906ee993e30d5cea9c4622eb8b2409ba75c487ee8f82"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 40,
      "offset": 71,
      "length": 30,
      "code": {
        "startLine": 38,
        "length": 30,
        "offset": 237,
        "surroundingCode": "    private readonly Queue<TaskCompletionSource<Unit>> mySenders = new Queue<TaskCompletionSource<Unit>>();\n    private readonly Queue<T> myMessages = new Queue<T>();\n    private readonly Queue<TaskCompletionSource<T>> myReceivers = new Queue<TaskCompletionSource<T>>();\n\n    private int myTotalMessagesSent = 0;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "d251e1a0c78fbc105dfbc7b0a92537d7ed57e4fd5ca5d653d41f246dc7cbd79b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ViewableProperty.cs",
      "language": "C#",
      "line": 15,
      "offset": 47,
      "length": 9,
      "code": {
        "startLine": 13,
        "length": 9,
        "offset": 108,
        "surroundingCode": "  public class ViewableProperty<T> : IViewableProperty<T>\n  {\n    private readonly Signal<T> myChange = new Signal<T>();\n\n    public ISource<T> Change => myChange;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "d51cdd67baec11c778b41792bcb567a38981f86e60152413347e6fa58313db74"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 18,
      "offset": 58,
      "length": 8,
      "code": {
        "startLine": 16,
        "length": 8,
        "offset": 109,
        "surroundingCode": "  public struct CompactList<T> : IEnumerable<T>\n  {\n    internal static readonly List<T?> SingleMarker = new List<T?>();\n\n    private T? mySingleValue;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "d6a94540a5a2a8788f75112468f5a55600efa467fd7f9f83e998e5007ea3ac1a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 39,
      "offset": 48,
      "length": 8,
      "code": {
        "startLine": 37,
        "length": 8,
        "offset": 156,
        "surroundingCode": "\n    private readonly Queue<TaskCompletionSource<Unit>> mySenders = new Queue<TaskCompletionSource<Unit>>();\n    private readonly Queue<T> myMessages = new Queue<T>();\n    private readonly Queue<TaskCompletionSource<T>> myReceivers = new Queue<TaskCompletionSource<T>>();\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "dc1baef22a5f9d4676047245dd965731756aabd15d8d2b997e2749cee2e8e316"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextBasicTest.cs",
      "language": "C#",
      "line": 113,
      "offset": 54,
      "length": 8,
      "code": {
        "startLine": 111,
        "length": 8,
        "offset": 68,
        "surroundingCode": "      }\n      \n      public static readonly TestKey2 Instance = new TestKey2();\n\n      protected internal override void RegisterOn(ISerializers serializers)"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "e04a22d7776fab73858c6914d965d675c13bd4136d1bcbbe541de765b8617aa8"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/RdContext.cs",
      "language": "C#",
      "line": 125,
      "offset": 51,
      "length": 14,
      "code": {
        "startLine": 123,
        "length": 14,
        "offset": 65,
        "surroundingCode": "    \n#if NET35\n    private readonly ThreadLocal<T> myValue = new ThreadLocal<T>();\n#else\n    private readonly AsyncLocal<T> myValue = new();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "e1a1065db7d1b12babe873d97c98e1b24864959de60cba01880b6b704ced7b08"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextBasicTest.cs",
      "language": "C#",
      "line": 43,
      "offset": 58,
      "length": 12,
      "code": {
        "startLine": 41,
        "length": 12,
        "offset": 72,
        "surroundingCode": "      }\n      \n      public static readonly TestKeyLight Instance = new TestKeyLight();\n\n      protected internal override void RegisterOn(ISerializers serializers)"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "e318224e3d40a3a0685676a24ed1b0a5b414cd08dedb5a050050cb1ae7c61422"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 123,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 121,
        "length": 11,
        "offset": 76,
        "surroundingCode": "          Polymorphic = new List<ColorFields>()\n          {\n            new ColorFields(1, 2, 3)\n          },\n          PolymorphicArray = new List<ColorFields[]>()"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "e4f78ef065f34c35152ede0130fbfef6be4367e27b2f4fb123b18ddd2aef40d3"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/NativeMemoryPool.cs",
      "language": "C#",
      "line": 28,
      "offset": 50,
      "length": 6,
      "code": {
        "startLine": 26,
        "length": 6,
        "offset": 173,
        "surroundingCode": "    /// </summary>\n    private static ThreadMemoryHolder?[] ourBlocks = new ThreadMemoryHolder[Environment.ProcessorCount];\n    private static readonly object ourLock = new object();\n\n    public static int SampleUsed() => ourBlocks.Count(b => b != null && b.IsUsed);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "e58e3d4042c39ad245038c0abd1b5695a26560432b45ca40d9ebd1f5470ca3cc"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdMap.cs",
      "language": "C#",
      "line": 21,
      "offset": 52,
      "length": 17,
      "code": {
        "startLine": 19,
        "length": 17,
        "offset": 137,
        "surroundingCode": "  public class RdMap<K, V> : RdReactiveBase, IViewableMap<K, V> where K : notnull\n  {\n    private readonly ViewableMap<K, V> myMap = new ViewableMap<K, V>();\n\n    public RdMap(CtxReadDelegate<K> readKey, CtxWriteDelegate<K> writeKey, CtxReadDelegate<V> readValue, CtxWriteDelegate<V> writeValue)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "e5b1e318e4693d70f85c0329d54a5b01c54eee5bfeae8bc9d70c8993b48aeadd"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorTestBase.cs",
      "language": "C#",
      "line": 52,
      "offset": 57,
      "length": 18,
      "code": {
        "startLine": 50,
        "length": 18,
        "offset": 63,
        "surroundingCode": "    }\n\n    protected SchedulerAwaitable YieldToClient() => new SchedulerAwaitable(ClientProtocol.Scheduler);\n    protected SchedulerAwaitable YieldToServer() => new SchedulerAwaitable(ServerProtocol.Scheduler);\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "e6d6a728777a6a69bee630e056a604e4f452219bb2ebe7f6daffadd3f57303c4"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/RdId.cs",
      "language": "C#",
      "line": 9,
      "offset": 43,
      "length": 4,
      "code": {
        "startLine": 7,
        "length": 4,
        "offset": 86,
        "surroundingCode": "  public struct RdId : IEquatable<RdId>\n  {\n    public static readonly RdId Nil = new RdId(0);\n    public static readonly RdId Root = Nil;\n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "e777d899c1e89048eabb4403e727fdb5f6e422c9f0025ba8f682e02cf9ef1eff"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/LocalStopwatch.cs",
      "language": "C#",
      "line": 33,
      "offset": 36,
      "length": 8,
      "code": {
        "startLine": 31,
        "length": 8,
        "offset": 82,
        "surroundingCode": "    private readonly long myStartTimeStamp;\r\n\r\n    public TimeSpan Elapsed => new TimeSpan(GetElapsedDateTimeTicks());\r\n\r\n    public long ElapsedMilliseconds => GetElapsedDateTimeTicks() / TicksPerMillisecond;\r"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "e8104b109ec302aa63e12e0276ea3420e956d5dbdfe7f88869434daf551d0650"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/MessageBroker.cs",
      "language": "C#",
      "line": 19,
      "offset": 69,
      "length": 12,
      "code": {
        "startLine": 17,
        "length": 12,
        "offset": 87,
        "surroundingCode": "    class Mq\n    {\n      internal readonly List<byte[]> DefaultSchedulerMessages = new List<byte[]>();\n      internal readonly List<byte[]> CustomSchedulerMessages = new List<byte[]>();\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "e859ff9f42d8c6d5cc53a2b18971ada29f840d31e8b09a399ad8d3826fd04b4f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/WriteOnceProperty.cs",
      "language": "C#",
      "line": 75,
      "offset": 55,
      "length": 18,
      "code": {
        "startLine": 73,
        "length": 18,
        "offset": 117,
        "surroundingCode": "    private sealed class WriteOnceSignal : SignalBase<T>\n    {\n      private readonly LifetimeDefinition myDef = new LifetimeDefinition();\n      public Lifetime Lifetime => myDef.Lifetime;\n      "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "e94f1e40d78cbb8176e0a1943a5bf79fac566a60ef590de583f38e57d537c1a6"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSimpleDispatcher.cs",
      "language": "C#",
      "line": 16,
      "offset": 50,
      "length": 13,
      "code": {
        "startLine": 14,
        "length": 13,
        "offset": 85,
        "surroundingCode": "    private readonly string? myId;\n\n    private readonly Queue<Action> myTasks = new Queue<Action>();\n    private readonly AutoResetEvent myEvent = new AutoResetEvent(false);\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "eac3f95a3f8d11333fd633fc994e8fb6bb3064d31de12cb3b45003f5d6dd288d"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdExtBase.cs",
      "language": "C#",
      "line": 172,
      "offset": 53,
      "length": 16,
      "code": {
        "startLine": 170,
        "length": 16,
        "offset": 58,
        "surroundingCode": "\n    \n    private readonly Queue<QueueItem> mySendQ = new Queue<QueueItem>();\n\n    public bool IsStub => false;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "ebd9c0bddcf6eed5084883410c7ed2a4d0c69f6916423b709ad49f8277217848"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/RdTextBuffer.cs",
      "language": "C#",
      "line": 224,
      "offset": 65,
      "length": 20,
      "code": {
        "startLine": 222,
        "length": 20,
        "offset": 152,
        "surroundingCode": "\n      public readonly Signal<RdTextChange> OnLocalChange = new Signal<RdTextChange>();\n      public readonly Signal<RdTextChange> OnRemoteChange = new Signal<RdTextChange>();\n\n      public TextBufferTypingSession(RdTextBuffer buffer)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "ed35b67547772c0ac50e44bebfe8424927f54e8f967210e7a3ebbba95132e2a3"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdBindableBase.cs",
      "language": "C#",
      "line": 59,
      "offset": 82,
      "length": 34,
      "code": {
        "startLine": 57,
        "length": 34,
        "offset": 87,
        "surroundingCode": "\n    \n    protected readonly List<KeyValuePair<string, object>> BindableChildren = new List<KeyValuePair<string, object>>();  \n\n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "f0429dc1e79461f4bc71afbeabea740d36f12f79ebc118ad4ed60d76e5e77803"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Util/ConcurrentSet.cs",
      "language": "C#",
      "line": 14,
      "offset": 71,
      "length": 29,
      "code": {
        "startLine": 12,
        "length": 29,
        "offset": 85,
        "surroundingCode": "    #endif\n  {\n    private readonly ConcurrentDictionary<T, bool> myDictionary = new ConcurrentDictionary<T, bool>();\n\n    IEnumerator IEnumerable.GetEnumerator()"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "f1f8bc281510b590041f82727517b0dc5fa3072c7258ec34d2646c7aebc0b077"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/RName.cs",
      "language": "C#",
      "line": 11,
      "offset": 58,
      "length": 5,
      "code": {
        "startLine": 9,
        "length": 5,
        "offset": 82,
        "surroundingCode": "  public class RName\n  {\n    [PublicAPI] public static readonly RName Empty = new RName(null, \"\", \"\");\n    \n    [PublicAPI] "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "f7b438d2a5bda2c6b64c3952529bb353b574e755ffd040a106119de949722209"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/MessageBroker.cs",
      "language": "C#",
      "line": 20,
      "offset": 68,
      "length": 12,
      "code": {
        "startLine": 18,
        "length": 12,
        "offset": 157,
        "surroundingCode": "    {\n      internal readonly List<byte[]> DefaultSchedulerMessages = new List<byte[]>();\n      internal readonly List<byte[]> CustomSchedulerMessages = new List<byte[]>();\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "f7c71f06467515e76a4082501d998f5ed3224fd8fbd21d06656e053e8fbbf713"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/SimpleTypesCatalog.cs",
      "language": "C#",
      "line": 8,
      "offset": 71,
      "length": 22,
      "code": {
        "startLine": 6,
        "length": 22,
        "offset": 124,
        "surroundingCode": "  public class SimpleTypesCatalog : ITypesCatalog\n  {\n    private readonly Dictionary<RdId, Type> myRdIdToTypeMapping = new Dictionary<RdId, Type>();\n\n    public Type? GetById(RdId id)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "f8f035e1c7dfb4e0f526790e5ac23903e2b34553678443d724b629f7823ca34e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/IInternRoot.cs",
      "language": "C#",
      "line": 65,
      "offset": 61,
      "length": 8,
      "code": {
        "startLine": 63,
        "length": 8,
        "offset": 123,
        "surroundingCode": "    public static InternId Invalid = new InternId(InvalidId);\n\n    public static InternId Read(UnsafeReader reader) => new InternId(reader.ReadInt());\n\n    public static void Write(UnsafeWriter writer, InternId value) => writer.Write(value.myValue == InvalidId ? value.myValue : value.myValue ^ 1);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "fa97b5f0223a0d3f9da6d55d866d4fcdcba8eaa28a8afd4572f8c72e728b7213"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SynchronousScheduler.cs",
      "language": "C#",
      "line": 15,
      "offset": 64,
      "length": 20,
      "code": {
        "startLine": 13,
        "length": 20,
        "offset": 131,
        "surroundingCode": "  public class SynchronousScheduler : TaskScheduler, IScheduler\n  {\n    public static readonly SynchronousScheduler Instance = new SynchronousScheduler();\n\n    [ThreadStatic] private static int ourActive;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "fb4e2494d7cf277df4fe2585683453d2f8865bc75345a6302045ac85a7e503d3"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextBasicTest.cs",
      "language": "C#",
      "line": 29,
      "offset": 58,
      "length": 12,
      "code": {
        "startLine": 27,
        "length": 12,
        "offset": 72,
        "surroundingCode": "      }\n      \n      public static readonly TestKeyHeavy Instance = new TestKeyHeavy();\n\n      protected internal override void RegisterOn(ISerializers serializers)"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "fd9415655d10793fe2ce542f5271aadda652b3973fbb48cdde9a2b6ba7562bff"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style of 'new' expression when created type is evident",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant type specification",
  "detailsInfo": "Add or remove explicit type specification in 'new' expression when type is evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/ArrangeObjectCreationWhenTypeEvident.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/InternRoot.cs",
      "language": "C#",
      "line": 20,
      "offset": 11,
      "length": 37,
      "code": {
        "startLine": 18,
        "length": 37,
        "offset": 87,
        "surroundingCode": "  {\n    private readonly ConcurrentDictionary<InternId, TBase> myDirectMap =\n      new ConcurrentDictionary<InternId, TBase>();\n\n    private readonly ConcurrentDictionary<TBase, IdPair> myInverseMap = new ConcurrentDictionary<TBase, IdPair>();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeObjectCreationWhenTypeEvident"
  },
  "hash": "ffb6b7891ff1dde1e8914c382713eabe6160fdce7500c04388393701dd122d7e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 30,
      "offset": 34,
      "length": 1,
      "code": {
        "startLine": 28,
        "length": 1,
        "offset": 83,
        "surroundingCode": "        {\n          *((int*)dest) = *((int*)src);\n          *((int*)(dest + 4)) = *((int*)(src + 4));\n          dest += 8;\n          src += 8;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "02ff9b49f6df936df39f89e1dd4185e86ec8b66aa00e06cc4164e9eb8b8bb534"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 19,
      "offset": 34,
      "length": 1,
      "code": {
        "startLine": 17,
        "length": 1,
        "offset": 125,
        "surroundingCode": "          *((int*)dest) = *((int*)src);\n          *((int*)(dest + 4)) = *((int*)(src + 4));\n          *((int*)(dest + 8)) = *((int*)(src + 8));\n          *((int*)(dest + 12)) = *((int*)(src + 12));\n          dest += 0x10;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "0774e4d701831a9da237464400222e4be5ea68548e3d7ad26cd7ab86f262a0b1"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 18,
      "offset": 34,
      "length": 1,
      "code": {
        "startLine": 16,
        "length": 1,
        "offset": 83,
        "surroundingCode": "        {\n          *((int*)dest) = *((int*)src);\n          *((int*)(dest + 4)) = *((int*)(src + 4));\n          *((int*)(dest + 8)) = *((int*)(src + 8));\n          *((int*)(dest + 12)) = *((int*)(src + 12));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "1c072cfd7414d6437a846cf957b57fd2e304d602f4f9347ec69b3c5c0c0c2433"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 36,
      "offset": 28,
      "length": 1,
      "code": {
        "startLine": 34,
        "length": 1,
        "offset": 64,
        "surroundingCode": "        if((len & 4) != 0)\n        {\n          *((int*)dest) = *((int*)src);\n          dest += 4;\n          src += 4;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "2262703050107f93de9d529a93a35eb56537cd27ab60e85bfa54fbf47964335a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 29,
      "offset": 28,
      "length": 1,
      "code": {
        "startLine": 27,
        "length": 1,
        "offset": 64,
        "surroundingCode": "        if((len & 8) != 0)\n        {\n          *((int*)dest) = *((int*)src);\n          *((int*)(dest + 4)) = *((int*)(src + 4));\n          dest += 8;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "3d621095614eca8adf6a344a60055c3e0e65fc5739e9fcf148072b051005e87c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/RdId.cs",
      "language": "C#",
      "line": 56,
      "offset": 38,
      "length": 1,
      "code": {
        "startLine": 54,
        "length": 1,
        "offset": 74,
        "surroundingCode": "    public RdId Mix(long tail)\n    {\n      return new RdId(myValue * 31 + (tail + 1));\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "51af2a8d2d621040bfbb501ffb66af885f18de69d729586637526a6a08f2b45a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdMap.cs",
      "language": "C#",
      "line": 151,
      "offset": 26,
      "length": 1,
      "code": {
        "startLine": 149,
        "length": 1,
        "offset": 68,
        "surroundingCode": "    {\n      var header = stream.ReadInt();\n      var msgVersioned = (header >> versionedFlagShift) != 0;\n      var opType = header & ((1 << versionedFlagShift) - 1);\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "5b346d9a00faa54e0ff4ee01c58b11988da280b5891e05e89165c6fd3b7805ca"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 30,
      "offset": 12,
      "length": 1,
      "code": {
        "startLine": 28,
        "length": 1,
        "offset": 61,
        "surroundingCode": "        {\n          *((int*)dest) = *((int*)src);\n          *((int*)(dest + 4)) = *((int*)(src + 4));\n          dest += 8;\n          src += 8;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "69ce3431d79c5fc08e925cb58857d3e94cae81ef600f21d2bb789507dcdaa519"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CopyOnWriteList.cs",
      "language": "C#",
      "line": 63,
      "offset": 17,
      "length": 1,
      "code": {
        "startLine": 61,
        "length": 1,
        "offset": 46,
        "surroundingCode": "    public void Clear()\n    {\n      Modify(0, ((_, __) => new T[0]));\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "6b9c55966a7db703e59e616e6d0976b4a77f67a96530d39d802523d959801500"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 36,
      "offset": 12,
      "length": 1,
      "code": {
        "startLine": 34,
        "length": 1,
        "offset": 48,
        "surroundingCode": "        if((len & 4) != 0)\n        {\n          *((int*)dest) = *((int*)src);\n          dest += 4;\n          src += 4;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "6bb26ae466d6be75a7129262cc4fd13e7e0dc53ea8df36f34bbef534c0fc8fdc"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 248,
      "offset": 14,
      "length": 1,
      "code": {
        "startLine": 246,
        "length": 1,
        "offset": 59,
        "surroundingCode": "    {\n      var returnType = impl.ReturnType;\n      return (returnType != typeof(Task)) && (!returnType.IsGenericType || returnType.GetGenericTypeDefinition() != typeof(Task<>));\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "77c62003730488087602caf6d1dc7858df79cbefaddb3652202094ed1297778b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CopyOnWriteList.cs",
      "language": "C#",
      "line": 157,
      "offset": 54,
      "length": 1,
      "code": {
        "startLine": 155,
        "length": 1,
        "offset": 90,
        "surroundingCode": "    {\n      get => myStorage[index];\n      set => Modify(new ItemIndexPair(index, value), ((currentArray, pair) =>\n      {\n        var newArray = new T[currentArray.Length];"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "82ab9602d4b08c15a7c13fe67d7fc73a107c45e12cb2c23836ffa1f492556a4b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 535,
      "offset": 32,
      "length": 1,
      "code": {
        "startLine": 533,
        "length": 1,
        "offset": 69,
        "surroundingCode": "      .NotNull(nameof(SyncNested4));\n\n    public MethodInfo ToTask = (typeof(ProxyGeneratorUtil))\n      .GetMethod(nameof(ProxyGeneratorUtil.ToTask))\n      .NotNull(nameof(ToTask));"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "858efa9b270676fdb5dcbfb37ea7770773954872d917de9c797bbc82a72a7f6b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 333,
      "offset": 8,
      "length": 1,
      "code": {
        "startLine": 331,
        "length": 1,
        "offset": 42,
        "surroundingCode": "    {\n      Prepare(sizeof(byte));\n      *(myPtr++) = (byte)(value ? 1 : 0);\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "876df3cc0a32fb94023ab816ec36a4d988a18a19f3a72428d48f7b3763720d20"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 42,
      "offset": 12,
      "length": 1,
      "code": {
        "startLine": 40,
        "length": 1,
        "offset": 48,
        "surroundingCode": "        if((len & 2) != 0)\n        {\n          *((short*)dest) = *((short*)src);\n          dest += 2;\n          src += 2;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "881ee981afee8f24d74ebaf7e82a410b1794a257df6ddde4a9ee1c353eaaac7b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 94,
      "offset": 15,
      "length": 1,
      "code": {
        "startLine": 92,
        "length": 1,
        "offset": 71,
        "surroundingCode": "      if (Mode.IsAssertion) AssertLength(sizeof(byte));\n\n      return *(myPtr++) != 0;\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "8c1bdb0a0587dae795dbe001f22177c561f113e8bbb32edeaf46bf6e097b6250"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 20,
      "offset": 12,
      "length": 1,
      "code": {
        "startLine": 18,
        "length": 1,
        "offset": 115,
        "surroundingCode": "          *((int*)(dest + 4)) = *((int*)(src + 4));\n          *((int*)(dest + 8)) = *((int*)(src + 8));\n          *((int*)(dest + 12)) = *((int*)(src + 12));\n          dest += 0x10;\n          src += 0x10;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "99f8c36ac848f3b72f6e91d6a6bb1ca6ed3c5ed0a8178811ee0c245bfaf49b8a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 17,
      "offset": 12,
      "length": 1,
      "code": {
        "startLine": 15,
        "length": 1,
        "offset": 32,
        "surroundingCode": "        do\n        {\n          *((int*)dest) = *((int*)src);\n          *((int*)(dest + 4)) = *((int*)(src + 4));\n          *((int*)(dest + 8)) = *((int*)(src + 8));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "ad063bca2c0cd224d45d8c6c99602bcde8c895c5b7cada587bccc11911c123d5"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 89,
      "offset": 36,
      "length": 1,
      "code": {
        "startLine": 87,
        "length": 1,
        "offset": 94,
        "surroundingCode": "\n      var hasValue  = map.TryGetValue(this, out var old);\n      Assertion.Assert(hasValue == (old > 0), \"Illegal state, hasValue={0}, _old={1}\", hasValue, old);\n      \n      var _new = old + increment;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "afb8159d09129b93ff3efe174cfa7422a0ebde2b80e6e411551a9a85d4c7c84e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 19,
      "offset": 12,
      "length": 1,
      "code": {
        "startLine": 17,
        "length": 1,
        "offset": 103,
        "surroundingCode": "          *((int*)dest) = *((int*)src);\n          *((int*)(dest + 4)) = *((int*)(src + 4));\n          *((int*)(dest + 8)) = *((int*)(src + 8));\n          *((int*)(dest + 12)) = *((int*)(src + 12));\n          dest += 0x10;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "b282b82b25c5a5960658e99ed805eda325e720cdc7db5f2911cbd8b3b96ed8c8"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 268,
      "offset": 42,
      "length": 1,
      "code": {
        "startLine": 266,
        "length": 1,
        "offset": 93,
        "surroundingCode": "          break;\n        case MemberTypes.Property:\n          ImplementProperty(typebuilder, ((PropertyInfo)member));\n          break;\n        default:"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "b7ec890bf523832db25950c7a146f8c79a24ba71648ca595ba58d3a315314df5"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 102,
      "offset": 15,
      "length": 1,
      "code": {
        "startLine": 100,
        "length": 1,
        "offset": 71,
        "surroundingCode": "      if (Mode.IsAssertion) AssertLength(sizeof(byte));\n\n      return *(myPtr++);\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "c1caf1c0d159bfc976a8f5c86d305fd49439b6b5c7a0c1315e9c1c0290beed1b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 42,
      "offset": 30,
      "length": 1,
      "code": {
        "startLine": 40,
        "length": 1,
        "offset": 66,
        "surroundingCode": "        if((len & 2) != 0)\n        {\n          *((short*)dest) = *((short*)src);\n          dest += 2;\n          src += 2;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "ca19073f2dedc938faa834be95ad958bfefb8d324755e1353781e4f3bffa0dfe"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/SerializerReflectionUtil.cs",
      "language": "C#",
      "line": 163,
      "offset": 11,
      "length": 1,
      "code": {
        "startLine": 161,
        "length": 1,
        "offset": 71,
        "surroundingCode": "        if (\n          mi.MemberType == MemberTypes.Field &&\n          (mi.DeclaringType != null && !mi.DeclaringType.GetTypeInfo().IsAssignableFrom(baseType)) &&\n          mi.GetCustomAttribute<NonSerializedAttribute>() == null &&\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "ca9f0cdbd32f2de32a1f44e92d8fce0c8122677e93d2b842fa57841a6c3e4101"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 29,
      "offset": 12,
      "length": 1,
      "code": {
        "startLine": 27,
        "length": 1,
        "offset": 48,
        "surroundingCode": "        if((len & 8) != 0)\n        {\n          *((int*)dest) = *((int*)src);\n          *((int*)(dest + 4)) = *((int*)(src + 4));\n          dest += 8;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "cb5297d6270c7098cdf9854531896b53afc1d304d43c97d25e263445f9935215"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Types.cs",
      "language": "C#",
      "line": 98,
      "offset": 13,
      "length": 1,
      "code": {
        "startLine": 96,
        "length": 1,
        "offset": 81,
        "surroundingCode": "        var outer = type.DeclaringType;\n        return outer == null\n          ? (withNamespaces && !string.IsNullOrEmpty(type.Namespace) ? type.Namespace + \".\" + trait : trait)\n          : Present(outer, genericArguments.Take(outerGaCount).ToArray()) + \"+\" + trait;\n      }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "cf06a87957872dabf03b6f1cb08bda7291f7e2b80d5942ae48dafd0b9e075b47"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 340,
      "offset": 8,
      "length": 1,
      "code": {
        "startLine": 338,
        "length": 1,
        "offset": 42,
        "surroundingCode": "    {\n      Prepare(sizeof(byte));\n      *(myPtr++) = value;\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "d206a3bce490fb050033e4d8ccbebb5cc5578d763880f06adbc9993d902f9f10"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 17,
      "offset": 28,
      "length": 1,
      "code": {
        "startLine": 15,
        "length": 1,
        "offset": 48,
        "surroundingCode": "        do\n        {\n          *((int*)dest) = *((int*)src);\n          *((int*)(dest + 4)) = *((int*)(src + 4));\n          *((int*)(dest + 8)) = *((int*)(src + 8));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "df4acc2391a28a1b417713a07e11a9e8f2e67e7f7628af65218313424020c638"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/UnsafeMarshallersTest.cs",
      "language": "C#",
      "line": 37,
      "offset": 37,
      "length": 1,
      "code": {
        "startLine": 35,
        "length": 1,
        "offset": 79,
        "surroundingCode": "        cookie.Writer.Write(\"abcd = yй\");\n\n        cookie.Writer.Write((int[]) (null));\n        cookie.Writer.Write(new int[0]);\n        cookie.Writer.Write(new[] {1, 2, 3});"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "ec343f35d54a036988e32edc17ab8a5de6ad5aada1c92f1b8f87fbf8b9dd5dfe"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 18,
      "offset": 12,
      "length": 1,
      "code": {
        "startLine": 16,
        "length": 1,
        "offset": 61,
        "surroundingCode": "        {\n          *((int*)dest) = *((int*)src);\n          *((int*)(dest + 4)) = *((int*)(src + 4));\n          *((int*)(dest + 8)) = *((int*)(src + 8));\n          *((int*)(dest + 12)) = *((int*)(src + 12));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "edde7cacc1f5e6ff52d8120bbd2fb8bde2127884ab58b170c777452db7634c41"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/SpinWaitLock.cs",
      "language": "C#",
      "line": 93,
      "offset": 19,
      "length": 1,
      "code": {
        "startLine": 91,
        "length": 1,
        "offset": 55,
        "surroundingCode": "          {\n            ++procCount;\n            am &= (am - 1);\n          }\n        }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "efc2b6557895dc1870c92e96d4a217d4b34a486ee3c31e0f3b8996147fcc506c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Remove redundant parentheses",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant parentheses",
  "detailsInfo": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 20,
      "offset": 35,
      "length": 1,
      "code": {
        "startLine": 18,
        "length": 1,
        "offset": 138,
        "surroundingCode": "          *((int*)(dest + 4)) = *((int*)(src + 4));\n          *((int*)(dest + 8)) = *((int*)(src + 8));\n          *((int*)(dest + 12)) = *((int*)(src + 12));\n          dest += 0x10;\n          src += 0x10;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeRedundantParentheses"
  },
  "hash": "fc4dc79954f814ed5f01e24b67f185fec673331f0de5c8ace1124c482a643975"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Add/remove qualifier for static members",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Qualifier is redundant",
  "detailsInfo": "Qualifier can be safely added/removed without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeStaticMemberQualifier.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 312,
      "offset": 112,
      "length": 31,
      "code": {
        "startLine": 310,
        "length": 31,
        "offset": 228,
        "surroundingCode": "    };\n    public static CtxReadDelegate<string> ReadStringInternedAtTest = Serializers.ReadString.Interned(\"Test\");\n    public static CtxReadDelegate<InterningNestedTestStringModel> ReadInterningNestedTestStringModelNullable = InterningNestedTestStringModel.Read.NullableClass();\n    \n    public static CtxWriteDelegate<InterningNestedTestStringModel> Write = (ctx, writer, value) => "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeStaticMemberQualifier"
  },
  "hash": "2f2d13cf776294430103944ef6ddde1101f60cc19c63727a8c40921dced6ea62"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Add/remove qualifier for static members",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Qualifier is redundant",
  "detailsInfo": "Qualifier can be safely added/removed without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeStaticMemberQualifier.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 229,
      "offset": 108,
      "length": 25,
      "code": {
        "startLine": 227,
        "length": 25,
        "offset": 136,
        "surroundingCode": "      return _result;\n    };\n    public static CtxReadDelegate<InterningNestedTestModel> ReadInterningNestedTestModelInternedNullable = InterningNestedTestModel.Read.Interned(\"Test\").NullableClass();\n    \n    public static CtxWriteDelegate<InterningNestedTestModel> Write = (ctx, writer, value) => "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeStaticMemberQualifier"
  },
  "hash": "5e73c1aae6672c33f53e7320fc0d63da38f5c17698630b6f159aed77410005ca"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Add/remove qualifier for static members",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Qualifier is redundant",
  "detailsInfo": "Qualifier can be safely added/removed without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeStaticMemberQualifier.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 50,
      "offset": 64,
      "length": 15,
      "code": {
        "startLine": 48,
        "length": 15,
        "offset": 165,
        "surroundingCode": "      serializers.Register(ProtocolWrappedStringModel.Read, ProtocolWrappedStringModel.Write);\n      \n      serializers.RegisterToplevelOnce(typeof(InterningRoot1), InterningRoot1.RegisterDeclaredTypesSerializers);\n      serializers.RegisterToplevelOnce(typeof(InterningExt), InterningExt.RegisterDeclaredTypesSerializers);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeStaticMemberQualifier"
  },
  "hash": "6021c22c85409da9890883a1e1cbadcf3f34cd9ec89a3cb06461c40cd758ce99"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Add/remove qualifier for static members",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Qualifier is redundant",
  "detailsInfo": "Qualifier can be safely added/removed without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeStaticMemberQualifier.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 320,
      "offset": 114,
      "length": 31,
      "code": {
        "startLine": 318,
        "length": 31,
        "offset": 233,
        "surroundingCode": "    };\n    public static CtxWriteDelegate<string> WriteStringInternedAtTest = Serializers.WriteString.Interned(\"Test\");\n    public static CtxWriteDelegate<InterningNestedTestStringModel> WriteInterningNestedTestStringModelNullable = InterningNestedTestStringModel.Write.NullableClass();\n    //custom body\n    //equals trait"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeStaticMemberQualifier"
  },
  "hash": "606309696137b6e51be982e5ba6254551318ac9fe83b3d9266b2586231e350b8"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Add/remove qualifier for static members",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Qualifier is redundant",
  "detailsInfo": "Qualifier can be safely added/removed without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeStaticMemberQualifier.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 236,
      "offset": 110,
      "length": 25,
      "code": {
        "startLine": 234,
        "length": 25,
        "offset": 195,
        "surroundingCode": "      WriteInterningNestedTestModelInternedNullable(ctx, writer, value.Inner);\n    };\n    public static CtxWriteDelegate<InterningNestedTestModel> WriteInterningNestedTestModelInternedNullable = InterningNestedTestModel.Write.Interned(\"Test\").NullableClass();\n    //custom body\n    //equals trait"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeStaticMemberQualifier"
  },
  "hash": "636c041c8c9a1297f2988210d2deb6deb61b5d47213ae53335a6bb9b2b198186"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Add/remove 'this.' qualifier",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Qualifier 'this.' is redundant",
  "detailsInfo": "'this.' qualifier can be safely added/removed without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeThisQualifier.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/Example/CustomReactive.cs",
      "language": "C#",
      "line": 45,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 43,
        "length": 5,
        "offset": 96,
        "surroundingCode": "      WriteValueDelegate = writeValueDelegate;\n      myCreatedFromRead = createdFromRead;\n      this.t1 = t;\n      this.t2 = t2;\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeThisQualifier"
  },
  "hash": "6d772a1d6fcc6c30fee5de0fd71d17d4231a827c51bfe2dca2daba6e3a658835"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Add/remove 'this.' qualifier",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Qualifier 'this.' is redundant",
  "detailsInfo": "'this.' qualifier can be safely added/removed without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeThisQualifier.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 384,
      "offset": 40,
      "length": 5,
      "code": {
        "startLine": 382,
        "length": 5,
        "offset": 56,
        "surroundingCode": "      Enum\n    {\n      myStaticSerializers[typeof(T)] = this.CreateEnumSerializer<T>();\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeThisQualifier"
  },
  "hash": "f641608c15d4ecefd03c95664d1ee960f6c900dd667ef842a9984607d3a25a23"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style for trailing comma before new line in multiline lists",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Remove trailing comma to conform to code style",
  "detailsInfo": "Add or remove trailing comma before new line in multiline lists according to code style settings [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTrailingCommaInMultilineLists.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 66,
      "offset": 33,
      "length": 1,
      "code": {
        "startLine": 64,
        "length": 1,
        "offset": 128,
        "surroundingCode": "      typeof(FakeTuple<,,,,,>),\n      typeof(FakeTuple<,,,,,,>),  // T1, T2, T3, T4, T5, T6, T7\n      typeof(FakeTuple<,,,,,,,>), // T1, T2, T3, T4, T5, T6, T7, TRest\n    };\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeTrailingCommaInMultilineLists"
  },
  "hash": "017df73ef5e5491775845cf605d75eb24db9dd15f4628812bc610ae30c74e219"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style for trailing comma before new line in multiline lists",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Remove trailing comma to conform to code style",
  "detailsInfo": "Add or remove trailing comma before new line in multiline lists according to code style settings [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTrailingCommaInMultilineLists.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 148,
      "offset": 53,
      "length": 1,
      "code": {
        "startLine": 146,
        "length": 1,
        "offset": 164,
        "surroundingCode": "          CollectionOfInts = new List<int>() {1, 2, 3},\n          ReadonlyListInts = new List<int>() {1, 2, 3},\n          EnumerableInts = new List<int>() {1, 2, 3},\n        };\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeTrailingCommaInMultilineLists"
  },
  "hash": "0839e054e0da22786860cf17124c3805cdda572ab20166113d282ce714fb2fe0"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style for trailing comma before new line in multiline lists",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Remove trailing comma to conform to code style",
  "detailsInfo": "Add or remove trailing comma before new line in multiline lists according to code style settings [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTrailingCommaInMultilineLists.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/SerializerReflectionUtil.cs",
      "language": "C#",
      "line": 100,
      "offset": 26,
      "length": 1,
      "code": {
        "startLine": 98,
        "length": 1,
        "offset": 89,
        "surroundingCode": "        typeof(SerializationCtx),\n        typeof(UnsafeWriter),\n        typeInfo.AsType(),\n      };\n      var methodInfo = typeInfo.GetMethod(\"Write\",  types, null);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeTrailingCommaInMultilineLists"
  },
  "hash": "1573a9629a3a19a006f0b8b7c84733bbb2432cad4b0c3d29b2a3e2e0e1323e04"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style for trailing comma before new line in multiline lists",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Remove trailing comma to conform to code style",
  "detailsInfo": "Add or remove trailing comma before new line in multiline lists according to code style settings [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTrailingCommaInMultilineLists.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/SerializerReflectionUtil.cs",
      "language": "C#",
      "line": 116,
      "offset": 29,
      "length": 1,
      "code": {
        "startLine": 114,
        "length": 1,
        "offset": 60,
        "surroundingCode": "      var types = new[]\n      {\n        typeof(UnsafeWriter),\n      };\n      var methodInfo = typeInfo.GetMethod(\"Write\", types, null);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeTrailingCommaInMultilineLists"
  },
  "hash": "1f41c72642cb62119a4f6f42d7d78657a0e79671bbcab0f3986d1ce8db14128b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style for trailing comma before new line in multiline lists",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Remove trailing comma to conform to code style",
  "detailsInfo": "Add or remove trailing comma before new line in multiline lists according to code style settings [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTrailingCommaInMultilineLists.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 105,
      "offset": 22,
      "length": 1,
      "code": {
        "startLine": 103,
        "length": 1,
        "offset": 211,
        "surroundingCode": "      typeof(ushort[]),          // serializers.Register(ReadUShortArray, WriteUShortArray, 46);\n      typeof(uint[]),            // serializers.Register(ReadUIntArray, WriteUIntArray, 47);\n      typeof(ulong[]),           // serializers.Register(ReadULongArray, WriteULongArray, 48);\n    };\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeTrailingCommaInMultilineLists"
  },
  "hash": "1f9e23e772b3be01d6b0651dbd04452a7609300b8e50ea26496c0d9219d2e0a7"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style for trailing comma before new line in multiline lists",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Remove trailing comma to conform to code style",
  "detailsInfo": "Add or remove trailing comma before new line in multiline lists according to code style settings [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTrailingCommaInMultilineLists.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/SerializerReflectionUtil.cs",
      "language": "C#",
      "line": 26,
      "offset": 29,
      "length": 1,
      "code": {
        "startLine": 24,
        "length": 1,
        "offset": 70,
        "surroundingCode": "      {\n        typeof(SerializationCtx),\n        typeof(UnsafeReader),\n      };\n      var methodInfo = typeInfo.GetMethod(\"Read\", types);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeTrailingCommaInMultilineLists"
  },
  "hash": "713651c2e301b3d75a8a017bd51ce0af6cee7614eead4e859cf5b41214bee13e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style for trailing comma before new line in multiline lists",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Remove trailing comma to conform to code style",
  "detailsInfo": "Add or remove trailing comma before new line in multiline lists according to code style settings [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTrailingCommaInMultilineLists.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/SerializerReflectionUtil.cs",
      "language": "C#",
      "line": 42,
      "offset": 29,
      "length": 1,
      "code": {
        "startLine": 40,
        "length": 1,
        "offset": 60,
        "surroundingCode": "      var types = new[]\n      {\n        typeof(UnsafeReader),\n      };\n      var methodInfo = typeInfo.GetMethod(\"Read\", types);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeTrailingCommaInMultilineLists"
  },
  "hash": "abdc05e6a2512fba54a80dd2fe482b0c73466b2706e574dc007c9c97f265e922"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style for trailing comma before new line in multiline lists",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Remove trailing comma to conform to code style",
  "detailsInfo": "Add or remove trailing comma before new line in multiline lists according to code style settings [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTrailingCommaInMultilineLists.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Interop/Windows.cs",
      "language": "C#",
      "line": 47,
      "offset": 32,
      "length": 1,
      "code": {
        "startLine": 45,
        "length": 1,
        "offset": 99,
        "surroundingCode": "        PROCESS_VM_OPERATION = 0x8,\n        PROCESS_VM_READ = 0x10,\n        PROCESS_VM_WRITE = 0x20,\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeTrailingCommaInMultilineLists"
  },
  "hash": "dce7ed3883a3572d6f92bd15ed943f5166d83bcc5cd387abf0cdc7f4ecd8e17b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred style for trailing comma when the last element is not followed by a new line",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Remove trailing comma to conform to code style",
  "detailsInfo": "Add or remove trailing comma when the last element is not followed by a new line according to code style settings [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTrailingCommaInSinglelineLists.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 483,
      "offset": 69,
      "length": 1,
      "code": {
        "startLine": 481,
        "length": 1,
        "offset": 155,
        "surroundingCode": "    {\n      void WriterDelegate(SerializationCtx ctx, UnsafeWriter writer, T value) =>\n        writeMethod.Invoke(null, new[] { ctx, writer, (object?)value, });\n\n      T ReaderDelegate(SerializationCtx ctx, UnsafeReader reader) =>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ArrangeTrailingCommaInSinglelineLists"
  },
  "hash": "efb4396e40b5352898b543fb1479e0628d6c2c24f861c70c1622292a57584570"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use explicit or implicit modifier definition for type members",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent modifiers style: missing 'private' modifier",
  "detailsInfo": "'private' modifier can be safely added/removed from type members without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeMemberModifiers.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 22,
      "offset": 24,
      "length": 3,
      "code": {
        "startLine": 20,
        "length": 3,
        "offset": 77,
        "surroundingCode": "    \n    // ReSharper disable once InconsistentNaming\n    LifetimeDefinition def;\n    // ReSharper disable once InconsistentNaming\n    private Lifetime lt => def.Lifetime;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeTypeMemberModifiers"
  },
  "hash": "29432c75e51d17aec1a78cf083621eee19bda081457af11d26d039b1674d773f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use explicit or implicit modifier definition for type members",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent modifiers style: missing 'private' modifier",
  "detailsInfo": "'private' modifier can be safely added/removed from type members without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeMemberModifiers.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Reflection.App/Program.cs",
      "language": "C#",
      "line": 45,
      "offset": 17,
      "length": 4,
      "code": {
        "startLine": 43,
        "length": 4,
        "offset": 63,
        "surroundingCode": "    \n    //try to start both client and server\n    static void Main(string[] args)\n    {\n      using (var lifetimeDefinition = new LifetimeDefinition())"
      }
    }
  ],
  "attributes": {
    "module": "Test.Reflection.App",
    "inspectionName": "ArrangeTypeMemberModifiers"
  },
  "hash": "342452825049ec16646bec81e4515000096b71e0b3952fc3e927a62e56de9c2d"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use explicit or implicit modifier definition for type members",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent modifiers style: missing 'private' modifier",
  "detailsInfo": "'private' modifier can be safely added/removed from type members without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeMemberModifiers.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SocketWireTest.cs",
      "language": "C#",
      "line": 44,
      "offset": 16,
      "length": 12,
      "code": {
        "startLine": 42,
        "length": 12,
        "offset": 17,
        "surroundingCode": "\n\n    static int FindFreePort()\n    {\n      TcpListener l = new TcpListener(IPAddress.Loopback, 0);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeTypeMemberModifiers"
  },
  "hash": "3a2367207d598215e29895d53e21608175036a0e1a32398acabc80820046684a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use explicit or implicit modifier definition for type members",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent modifiers style: missing 'private' modifier",
  "detailsInfo": "'private' modifier can be safely added/removed from type members without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeMemberModifiers.html)",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 27,
      "offset": 37,
      "length": 2,
      "code": {
        "startLine": 25,
        "length": 2,
        "offset": 256,
        "surroundingCode": "    static readonly Type t = typeof(Program);\n    static readonly List<MethodInfo> ep = t.GetMethods().Where(mi => mi.IsStatic && mi.IsPublic && mi.ReturnType == typeof(void) && mi.GetParameters().Length == 0).ToList();\n    static readonly List<FieldInfo> ps = t.GetFields().Where(f => f.IsStatic && f.IsPublic && f.FieldType == typeof(string)).ToList();\n\n    private static void E(string msg = \"\") => Console.Error.WriteLine(msg);"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "ArrangeTypeMemberModifiers"
  },
  "hash": "4060d359dbffcd4fc57dd0a2ff29390460cf2a2f0e3df0fe244fe9bab2bc98ef"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use explicit or implicit modifier definition for type members",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent modifiers style: missing 'private' modifier",
  "detailsInfo": "'private' modifier can be safely added/removed from type members without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeMemberModifiers.html)",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 26,
      "offset": 38,
      "length": 2,
      "code": {
        "startLine": 24,
        "length": 2,
        "offset": 88,
        "surroundingCode": "    \n    static readonly Type t = typeof(Program);\n    static readonly List<MethodInfo> ep = t.GetMethods().Where(mi => mi.IsStatic && mi.IsPublic && mi.ReturnType == typeof(void) && mi.GetParameters().Length == 0).ToList();\n    static readonly List<FieldInfo> ps = t.GetFields().Where(f => f.IsStatic && f.IsPublic && f.FieldType == typeof(string)).ToList();\n"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "ArrangeTypeMemberModifiers"
  },
  "hash": "518f1a1a1b3eb89c7f5670a6525474e98e92bb1e5b38268ac9c2bb7ed21495c7"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use explicit or implicit modifier definition for type members",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent modifiers style: missing 'private' modifier",
  "detailsInfo": "'private' modifier can be safely added/removed from type members without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeMemberModifiers.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/PriorityQueueTest.cs",
      "language": "C#",
      "line": 71,
      "offset": 11,
      "length": 5,
      "code": {
        "startLine": 69,
        "length": 5,
        "offset": 12,
        "surroundingCode": "\n\n    class Timed\n    {\n      internal string Name { get; private set; }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeTypeMemberModifiers"
  },
  "hash": "5deedf124357bb8c4b49ea54b06a24ea7277ada21aa84f0a996026debfa7cac2"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use explicit or implicit modifier definition for type members",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent modifiers style: missing 'private' modifier",
  "detailsInfo": "'private' modifier can be safely added/removed from type members without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeMemberModifiers.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/MessageBroker.cs",
      "language": "C#",
      "line": 17,
      "offset": 11,
      "length": 2,
      "code": {
        "startLine": 15,
        "length": 2,
        "offset": 75,
        "surroundingCode": "    private readonly ILog myLogger = Log.GetLog(\"protocol.Mq\");\n\n    class Mq\n    {\n      internal readonly List<byte[]> DefaultSchedulerMessages = new List<byte[]>();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeTypeMemberModifiers"
  },
  "hash": "8a99c4bec81b7f20e96bbb90e5d7c60f8d71bd1a21e12635b060b6e9c1a998f1"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use explicit or implicit modifier definition for type members",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent modifiers style: missing 'private' modifier",
  "detailsInfo": "'private' modifier can be safely added/removed from type members without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeMemberModifiers.html)",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 25,
      "offset": 26,
      "length": 1,
      "code": {
        "startLine": 23,
        "length": 1,
        "offset": 173,
        "surroundingCode": "    public static string[] Packages = {\"JetBrains.Lifetimes\", \"JetBrains.RdFramework\", \"JetBrains.RdFramework.Reflection\", \"JetBrains.RdGen\"};\n    \n    static readonly Type t = typeof(Program);\n    static readonly List<MethodInfo> ep = t.GetMethods().Where(mi => mi.IsStatic && mi.IsPublic && mi.ReturnType == typeof(void) && mi.GetParameters().Length == 0).ToList();\n    static readonly List<FieldInfo> ps = t.GetFields().Where(f => f.IsStatic && f.IsPublic && f.FieldType == typeof(string)).ToList();"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "ArrangeTypeMemberModifiers"
  },
  "hash": "8f1e29e8ce9cd40518445bc4f630bdf07b1dd9498629ba5a237b81d20b8ed781"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use explicit or implicit modifier definition for type members",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent modifiers style: missing 'private' modifier",
  "detailsInfo": "'private' modifier can be safely added/removed from type members without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeMemberModifiers.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ByteBufferAsyncProcessor.cs",
      "language": "C#",
      "line": 35,
      "offset": 11,
      "length": 5,
      "code": {
        "startLine": 33,
        "length": 5,
        "offset": 96,
        "surroundingCode": "    public delegate void Processor(byte[] data, int offset, int len, ref long seqN);\n\n    class Chunk\n    {\n      internal readonly byte[] Data;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeTypeMemberModifiers"
  },
  "hash": "94679353383568fe56cbc74b7bb66d354b2625c62931e77464d311fa9f2f8373"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use explicit or implicit modifier definition for type members",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent modifiers style: missing 'private' modifier",
  "detailsInfo": "'private' modifier can be safely added/removed from type members without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeMemberModifiers.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Protocol.cs",
      "language": "C#",
      "line": 21,
      "offset": 18,
      "length": 22,
      "code": {
        "startLine": 19,
        "length": 22,
        "offset": 123,
        "surroundingCode": "    /// Should match textual RdId of protocol intern root in Kotlin/js/cpp counterpart\n    /// </summary>\n    const string ProtocolInternRootRdId = \"ProtocolInternRoot\";\n    const string ContextHandlerRdId = \"ProtocolContextHandler\";\n    internal const string ProtocolExtCreatedRdId = \"ProtocolExtCreated\";"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeTypeMemberModifiers"
  },
  "hash": "97bc926b66b8acfa4bd88acb263bde0704e8a11d62ecb8fa8236510fae794b44"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use explicit or implicit modifier definition for type members",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent modifiers style: missing 'private' modifier",
  "detailsInfo": "'private' modifier can be safely added/removed from type members without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeMemberModifiers.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 33,
      "offset": 11,
      "length": 16,
      "code": {
        "startLine": 31,
        "length": 16,
        "offset": 17,
        "surroundingCode": "    }\n\n    class FailureException : Exception\n    {}\n    private void Fail()"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ArrangeTypeMemberModifiers"
  },
  "hash": "db6b3b14867d1a4a2a9e709672874579ab4f158a8591d62d44de264f4b386007"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use explicit or implicit modifier definition for type members",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent modifiers style: missing 'private' modifier",
  "detailsInfo": "'private' modifier can be safely added/removed from type members without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeMemberModifiers.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Protocol.cs",
      "language": "C#",
      "line": 28,
      "offset": 18,
      "length": 27,
      "code": {
        "startLine": 26,
        "length": 27,
        "offset": 103,
        "surroundingCode": "    /// Should match whatever is in rd-gen for ProtocolInternScope\n    /// </summary>\n    const string ProtocolInternScopeStringId = \"Protocol\";\n\n    public Protocol(string name, ISerializers serializers, IIdentities identities, IScheduler scheduler, "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeTypeMemberModifiers"
  },
  "hash": "e6e23baa5132553fe1e8003ad44a67a127df5c65f5871974fd2c1f225acbb73a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use explicit or implicit modifier definition for type members",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent modifiers style: missing 'private' modifier",
  "detailsInfo": "'private' modifier can be safely added/removed from type members without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeMemberModifiers.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SingleThreadScheduler.cs",
      "language": "C#",
      "line": 42,
      "offset": 11,
      "length": 11,
      "code": {
        "startLine": 40,
        "length": 11,
        "offset": 79,
        "surroundingCode": "  public class SingleThreadScheduler : TaskScheduler, IScheduler\n  {\n    class ActionQueue\n    {\n      internal readonly BlockingPriorityQueue<PrioritizedAction> Storage;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeTypeMemberModifiers"
  },
  "hash": "e8c37822d0b9a634bef430f97451b5eac2507d922554417b1a88840d4d23eb98"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use explicit or implicit modifier definition for type members",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent modifiers style: missing 'private' modifier",
  "detailsInfo": "'private' modifier can be safely added/removed from type members without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeMemberModifiers.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 62,
      "offset": 20,
      "length": 23,
      "code": {
        "startLine": 60,
        "length": 23,
        "offset": 65,
        "surroundingCode": "\n      private readonly Actor<long> myAcktor;\n      const string DisconnectedPauseReason = \"Disconnected\";\n\n      protected Base(string id, Lifetime lifetime, IScheduler scheduler) : base(scheduler)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeTypeMemberModifiers"
  },
  "hash": "f32e777d0d778308413b54b135d222fe2135f13976c9f09d3b9c4f7800f349ed"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use explicit or implicit modifier definition for type members",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent modifiers style: missing 'private' modifier",
  "detailsInfo": "'private' modifier can be safely added/removed from type members without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeMemberModifiers.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Protocol.cs",
      "language": "C#",
      "line": 22,
      "offset": 18,
      "length": 18,
      "code": {
        "startLine": 20,
        "length": 18,
        "offset": 100,
        "surroundingCode": "    /// </summary>\n    const string ProtocolInternRootRdId = \"ProtocolInternRoot\";\n    const string ContextHandlerRdId = \"ProtocolContextHandler\";\n    internal const string ProtocolExtCreatedRdId = \"ProtocolExtCreated\";\n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeTypeMemberModifiers"
  },
  "hash": "f6c9aaf417c83009b0b3e883774daf0a33010cc7ca5538f25cc0dbbebea4f94d"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use explicit or implicit modifier definition for types",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent modifiers style: missing 'internal' modifier",
  "detailsInfo": "'internal' modifier can be safely added/removed from types without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeModifiers.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SocketProxyTest.cs",
      "language": "C#",
      "line": 15,
      "offset": 9,
      "length": 15,
      "code": {
        "startLine": 13,
        "length": 15,
        "offset": 68,
        "surroundingCode": "  [TestFixture]\n  [Ignore(\"TODO: this test tends to hang\")]\n  class SocketProxyTest : LifetimesTestBase\n  {\n    [Test]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ArrangeTypeModifiers"
  },
  "hash": "316c900d948cfddaaa43bc5e912b662d22f679aef5657b073469453f286dbb33"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use explicit or implicit modifier definition for types",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent modifiers style: missing 'internal' modifier",
  "detailsInfo": "'internal' modifier can be safely added/removed from types without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeModifiers.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdExtBase.cs",
      "language": "C#",
      "line": 150,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 148,
        "length": 7,
        "offset": 14,
        "surroundingCode": "  \n  \n  class ExtWire : IWire\n  {\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeTypeModifiers"
  },
  "hash": "97f1fb89f3428f794d53e25d71776c4b7250520f3c1048188c555edc848eda0c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use explicit or implicit modifier definition for types",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent modifiers style: missing 'internal' modifier",
  "detailsInfo": "'internal' modifier can be safely added/removed from types without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeModifiers.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/DictionaryEx.cs",
      "language": "C#",
      "line": 11,
      "offset": 16,
      "length": 12,
      "code": {
        "startLine": 9,
        "length": 12,
        "offset": 45,
        "surroundingCode": "namespace JetBrains.Rd.Util\n{\n  static class DictionaryEx\n  {\n    [Pure]"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeTypeModifiers"
  },
  "hash": "bafdf1f363ac864e25d4f2a229bc6a61a03df5249af25e2c555711f1744bb6b2"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use explicit or implicit modifier definition for types",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent modifiers style: missing 'internal' modifier",
  "detailsInfo": "'internal' modifier can be safely added/removed from types without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeModifiers.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Reflection.App/Program.cs",
      "language": "C#",
      "line": 33,
      "offset": 16,
      "length": 7,
      "code": {
        "startLine": 31,
        "length": 7,
        "offset": 20,
        "surroundingCode": "  }\n\n  static class Program\n  {\n    private static int ourPort = 5000;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Reflection.App",
    "inspectionName": "ArrangeTypeModifiers"
  },
  "hash": "bff9d04776c606ce639a329043ac64013d5cd7db90b8e394f221f5a68ba4df13"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use explicit or implicit modifier definition for types",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent modifiers style: missing 'internal' modifier",
  "detailsInfo": "'internal' modifier can be safely added/removed from types without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeModifiers.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/InternRoot.cs",
      "language": "C#",
      "line": 233,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 231,
        "length": 19,
        "offset": 13,
        "surroundingCode": "  }\n\n  class InternRootScheduler : IScheduler\n  {\n    internal static readonly InternRootScheduler Instance = new InternRootScheduler();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ArrangeTypeModifiers"
  },
  "hash": "ec4afcc7fe411dc9f958649a18c747e69d3b4a6b9db341b3ed65164268006654"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 404,
      "offset": 53,
      "length": 11,
      "code": {
        "startLine": 402,
        "length": 11,
        "offset": 284,
        "surroundingCode": "      var searchLabel = reader.ReadString();\n      var issues = RdMap<int, ProtocolWrappedStringModel>.Read(ctx, reader, Serializers.ReadInt, Serializers.WriteInt, ProtocolWrappedStringModel.Read, ProtocolWrappedStringModel.Write);\n      var _result = new InterningProtocolLevelModel(searchLabel, issues).WithId(_id);\n      return _result;\n    };"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "0de50578690de8b9a41f4abd8ad2d48fff5011b3fdb91b74ea327f6b46473d81"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdList.cs",
      "language": "C#",
      "line": 190,
      "offset": 26,
      "length": 5,
      "code": {
        "startLine": 188,
        "length": 5,
        "offset": 88,
        "surroundingCode": "          case AddUpdateRemove.Add:\n            if (index < 0)\n              myList.Add(value);\n            else\n              myList.Insert(index, value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "18b87707f2310259ef06339dc05bb19f8efde3f3d0755fa1b9b28bbf3aae2b96"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 226,
      "offset": 50,
      "length": 5,
      "code": {
        "startLine": 224,
        "length": 5,
        "offset": 165,
        "surroundingCode": "      var value = reader.ReadString();\n      var inner = ReadInterningNestedTestModelInternedNullable(ctx, reader);\n      var _result = new InterningNestedTestModel(value, inner);\n      return _result;\n    };"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "191310f4898158c98a041d931ee074b72235e2b7af86a4a8407573202db3a41f"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/SerializerReflectionUtil.cs",
      "language": "C#",
      "line": 187,
      "offset": 22,
      "length": 13,
      "code": {
        "startLine": 185,
        "length": 13,
        "offset": 87,
        "surroundingCode": "\n      // private fields only being returned for the current type\n      while ((type = type.BaseType) != baseType && type != null)\n      {\n        // but protected fields are returned in first step"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "1ba79d4348ef14770f76488d2ab72b53514c6f0f69dd29b173bee3759c1447f7"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Util/ConcurrentSet.cs",
      "language": "C#",
      "line": 38,
      "offset": 39,
      "length": 4,
      "code": {
        "startLine": 36,
        "length": 4,
        "offset": 77,
        "surroundingCode": "    public bool Contains(T item)\n    {\n      return myDictionary.ContainsKey(item);\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "23d56cedcef0434f76e3fa1608bc2bcaa3d58ae8c55e67364d6c013bd0992ffa"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdExtBase.cs",
      "language": "C#",
      "line": 197,
      "offset": 17,
      "length": 8,
      "code": {
        "startLine": 195,
        "length": 8,
        "offset": 95,
        "surroundingCode": "            {\n              using (Contexts.CreateSendWithoutContextsCookie())\n                RealWire.Send(p.Id, writer => writer.WriteRaw(p.Bytes, 0, p.Bytes.Length));\n              continue;\n            }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "3749a689219aca8d938f32b361b5f47226147827c6fafb77b650256e92da1c00"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 163,
      "offset": 42,
      "length": 11,
      "code": {
        "startLine": 161,
        "length": 11,
        "offset": 197,
        "surroundingCode": "      var searchLabel = reader.ReadString();\n      var signaller = RdSignal<string>.Read(ctx, reader, ReadStringInternedAtTest, WriteStringInternedAtTest);\n      var _result = new InterningMtModel(searchLabel, signaller).WithId(_id);\n      _result.mySerializationContext = ctx.WithInternRootsHere(_result, \"Test\");\n      return _result;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "406a4641d7a4e4738da80ae7c13c4b8c92ff3c77d5882045da225e0a2ce2ea05"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Diagnostics/InterpolatedStringHandlerTests.cs",
      "language": "C#",
      "line": 405,
      "offset": 14,
      "length": 7,
      "code": {
        "startLine": 403,
        "length": 7,
        "offset": 78,
        "surroundingCode": "        throw new Exception(\"Unexpected exception\", exception);\n\n      return message;\n    }\n  }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "41183acee616230a7e843d92fe6dbfbf6acbf9dde7c2743b4402d7794b407d27"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 543,
      "offset": 78,
      "length": 24,
      "code": {
        "startLine": 541,
        "length": 24,
        "offset": 197,
        "surroundingCode": "    private static SerializerPair CreateFromNonProtocolMethodsT<T>(MethodInfo readMethod, MethodInfo writeMethod)\n    {\n      Assertion.Assert(readMethod.IsStatic, $\"Read method should be static ({readMethod.DeclaringType.ToString(true)})\");\n      Assertion.Assert(!writeMethod.IsStatic, $\"Read method should not be static ({readMethod.DeclaringType.ToString(true)})\");\n      "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "4183bed81d39766c9db978048905c3ff6f010e22023fe204822b8e787f6c7cc2"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/RdReflectionTestBase.cs",
      "language": "C#",
      "line": 91,
      "offset": 55,
      "length": 9,
      "code": {
        "startLine": 89,
        "length": 9,
        "offset": 129,
        "surroundingCode": "      generator.DynamicAssembly.Save(generator.DynamicAssembly.FullName);\n\n      var tempPath = Path.Combine(Path.GetTempPath(), proxyName);\n      if (File.Exists(tempPath))\n        File.Delete(tempPath);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "48f88690c97b4b902b45f533938fd5fafcc82d9da8eff4f3e3bc8f8864ba31c8"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Util/ConcurrentSet.cs",
      "language": "C#",
      "line": 28,
      "offset": 20,
      "length": 4,
      "code": {
        "startLine": 26,
        "length": 4,
        "offset": 61,
        "surroundingCode": "    void ICollection<T>.Add(T item)\n    {\n      myDictionary[item] = false;\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "57c158f6fd64e340293015dd6cc3bda891c530b17577c750a7b8affc82eea015"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/Intrinsic.cs",
      "language": "C#",
      "line": 84,
      "offset": 51,
      "length": 14,
      "code": {
        "startLine": 82,
        "length": 14,
        "offset": 158,
        "surroundingCode": "      {\n        var marshallerType = typeInfo.GetCustomAttribute<RdScalarAttribute>().NotNull().Marshaller;\n        var marshaller = Activator.CreateInstance(marshallerType);\n        return (SerializerPair?) ReflectionUtil.InvokeStaticGeneric(typeof(SerializerPair), nameof(SerializerPair.FromMarshaller), typeInfo, marshaller);\n      }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "588421169d649711de5e6f31200b7f691f970829d64c6fb0357cdfe6ff1d6c9d"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdFault.cs",
      "language": "C#",
      "line": 20,
      "offset": 23,
      "length": 24,
      "code": {
        "startLine": 18,
        "length": 24,
        "offset": 93,
        "surroundingCode": "    public RdFault(Exception inner) : base(inner.Message, inner)\n    {\n      ReasonTypeFqn = inner.GetType().FullName;\n      ReasonMessage = inner.Message;\n      ReasonText = inner.ToString(); //todo Use system capabilities, stack traces, etc"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "685d4601dee557d657b0cd0a016293a8ec16a898b0f67584cb3a5223cdb72a65"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 109,
      "offset": 23,
      "length": 5,
      "code": {
        "startLine": 107,
        "length": 5,
        "offset": 86,
        "surroundingCode": "    {\n      var array = ReadArray(reader => reader.ReadByte());\n      return new Guid(array);\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "7179f95ce5f18a1345c7514bae61f9d96926fc6b92a25bd2e08104a04b943a76"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/SerializerReflectionUtil.cs",
      "language": "C#",
      "line": 18,
      "offset": 65,
      "length": 132,
      "code": {
        "startLine": 16,
        "length": 132,
        "offset": 108,
        "surroundingCode": "  public class SerializerReflectionUtil\n  {\n    private static readonly MethodInfo ourConvertTypedCtxRead = typeof(SerializerReflectionUtil).GetTypeInfo().GetMethod(nameof(CtxReadTypedToObject), BindingFlags.Static | BindingFlags.NonPublic);\n    private static readonly MethodInfo ourConvertTypedCtxWrite = typeof(SerializerReflectionUtil).GetTypeInfo().GetMethod(nameof(CtxWriteTypedToObject), BindingFlags.Static | BindingFlags.NonPublic);\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "80510203ddb13a0e3914d10284fd872759d05d6f78c3e9329afc148e4d90aa60"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 266,
      "offset": 45,
      "length": 12,
      "code": {
        "startLine": 264,
        "length": 12,
        "offset": 75,
        "surroundingCode": "    public Uri ReadUri()\n    {\n      return new Uri(Uri.UnescapeDataString(ReadString()), UriKind.RelativeOrAbsolute);\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "8695f60944388f1f098f9cec149ef1d48157fcf1a5ad0af58be578100cf669d1"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdMapTest.cs",
      "language": "C#",
      "line": 138,
      "offset": 66,
      "length": 4,
      "code": {
        "startLine": 136,
        "length": 4,
        "offset": 153,
        "surroundingCode": "\n      Assert.Throws<Assertion.AssertionException>(() => { serverMap.Add(\"\", null); });\n      Assert.Throws<ArgumentNullException>(() => { serverMap.Add(null, \"\"); });\n      ServerWire.TransmitAllMessages();\n      ClientWire.TransmitAllMessages();"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "917af71cfecffeaa69fe3f432971cced9f98c331074cf0898ae5937e7fa1a048"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdExtBase.cs",
      "language": "C#",
      "line": 209,
      "offset": 15,
      "length": 8,
      "code": {
        "startLine": 207,
        "length": 8,
        "offset": 44,
        "surroundingCode": "            try\n            {\n              RealWire.Send(p.Id, writer => writer.WriteRaw(p.Bytes, 0, p.Bytes.Length));\n            }\n            finally"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "991039b572756f612432e4836c846e0cf0867072a937bd89aa7c35ce5da97ffb"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/MessageBroker.cs",
      "language": "C#",
      "line": 151,
      "offset": 22,
      "length": 12,
      "code": {
        "startLine": 149,
        "length": 12,
        "offset": 70,
        "surroundingCode": "            else if (msg1 != null)\n            {\n              Invoke(subscription, msg1, sync: subscription.WireScheduler == myScheduler);\n            }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "a9c8dce34e7868fa84c916c79bf35da00f8adeda5c3f3dfd3f01e74e7ba4e429"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 477,
      "offset": 44,
      "length": 11,
      "code": {
        "startLine": 475,
        "length": 11,
        "offset": 251,
        "surroundingCode": "      var searchLabel = reader.ReadString();\n      var issues = RdMap<int, WrappedStringModel>.Read(ctx, reader, Serializers.ReadInt, Serializers.WriteInt, WrappedStringModel.Read, WrappedStringModel.Write);\n      var _result = new InterningTestModel(searchLabel, issues).WithId(_id);\n      _result.mySerializationContext = ctx.WithInternRootsHere(_result, \"Test\");\n      return _result;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "ad0fe6547dd1d6cce5affe9be39f219258fe2ec7ead725eaacbeeb16466453bf"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdSetTest.cs",
      "language": "C#",
      "line": 59,
      "offset": 73,
      "length": 4,
      "code": {
        "startLine": 57,
        "length": 4,
        "offset": 103,
        "surroundingCode": "\n      serverSet.Add(\"Value\");\n      Assert.Throws<Assertion.AssertionException>(() => { serverSet.Add(null); });\n      ServerWire.TransmitAllMessages();\n      ClientWire.TransmitAllMessages();"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "b4aeae6e11fdb667a2fcdd302afae43c9801d168759d26f79ee204398bfc69c9"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 126,
      "offset": 105,
      "length": 18,
      "code": {
        "startLine": 124,
        "length": 18,
        "offset": 142,
        "surroundingCode": "        else if (t.IsArray)\n        {\n          return (SerializerPair) ReflectionUtil.InvokeGenericThis(this, nameof(CreateArraySerializer), t.GetElementType())!;\n        }\n        else if (t.IsEnum)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "cbf78af2acb94e8c8e6117caa36cbd2c44d8317c28232155531bda2be3fffbc8"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/RdReflectionTestBase.cs",
      "language": "C#",
      "line": 94,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 92,
        "length": 10,
        "offset": 80,
        "surroundingCode": "      if (File.Exists(tempPath))\n        File.Delete(tempPath);\n      File.Move(modulePath, tempPath);\n      Console.WriteLine(\"Proxy module saved to: \" + tempPath);\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "d36c4bc3daf3e23def191a929f273e2ab563a4b9d7cf213f7a85441ea4e13297"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/SerializerReflectionUtil.cs",
      "language": "C#",
      "line": 19,
      "offset": 66,
      "length": 133,
      "code": {
        "startLine": 17,
        "length": 133,
        "offset": 267,
        "surroundingCode": "  {\n    private static readonly MethodInfo ourConvertTypedCtxRead = typeof(SerializerReflectionUtil).GetTypeInfo().GetMethod(nameof(CtxReadTypedToObject), BindingFlags.Static | BindingFlags.NonPublic);\n    private static readonly MethodInfo ourConvertTypedCtxWrite = typeof(SerializerReflectionUtil).GetTypeInfo().GetMethod(nameof(CtxWriteTypedToObject), BindingFlags.Static | BindingFlags.NonPublic);\n\n    public static MethodInfo GetReadStaticSerializer(TypeInfo typeInfo)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "d989b1ceaeaef1b524ad37f93d44a2cf3050e3b974f87b1cbd725e08e4de5476"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SocketProxy.cs",
      "language": "C#",
      "line": 77,
      "offset": 43,
      "length": 29,
      "code": {
        "startLine": 75,
        "length": 29,
        "offset": 125,
        "surroundingCode": "        {\n          myLogger.Verbose(\"Creating proxies for server and client...\");\n          var proxyServer = new TcpClient(IPAddress.Loopback.ToString(), myServerPort);\n          var proxyClient = new TcpListener(new IPEndPoint(IPAddress.Loopback, 0));\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "daab0e166d5f6d20a6ed9b729d1e86551213a1338ae2f6817c86942cabd34bd0"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 455,
      "offset": 18,
      "length": 21,
      "code": {
        "startLine": 453,
        "length": 21,
        "offset": 144,
        "surroundingCode": "        var rpcInterface = ReflectionSerializerVerifier.GetRpcInterface(type.GetTypeInfo());\n        if (rpcInterface != null)\n          return rpcInterface.FullName;\n      }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "e3f7e4f78bc920cf1ad9dce2cad8b8450990899852869e1b2ebfa776265dbd5e"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/RdReflectionTestBase.cs",
      "language": "C#",
      "line": 84,
      "offset": 23,
      "length": 14,
      "code": {
        "startLine": 82,
        "length": 14,
        "offset": 102,
        "surroundingCode": "#else\n      var generatorCache = SFacade.ProxyGenerator as ProxyGeneratorCache;\n      var generator = generatorCache.GetDynamicField(\"myGenerator\") as ProxyGenerator;\n\n      var modulePath = generator.DynamicModule.FullyQualifiedName;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "f581df6038b05101ba7db0027bbe57afb4ba8e91da66dd950ed5125e8f5384f3"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 229,
      "offset": 73,
      "length": 23,
      "code": {
        "startLine": 227,
        "length": 23,
        "offset": 158,
        "surroundingCode": "      if (!mySerializers.TryGetValue(serializerType, out var serializerPair))\n      {\n        using (new FirstChanceExceptionInterceptor.ThreadLocalDebugInfo(serializerType.FullName))\n          ReflectionUtil.InvokeGenericThis(this, nameof(RegisterScalar), serializerType);\n     "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "f60b844e33e50d48be21556a0eed15b1568955b6e6113c562476549ffda7e2cc"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 544,
      "offset": 84,
      "length": 24,
      "code": {
        "startLine": 542,
        "length": 24,
        "offset": 211,
        "surroundingCode": "    {\n      Assertion.Assert(readMethod.IsStatic, $\"Read method should be static ({readMethod.DeclaringType.ToString(true)})\");\n      Assertion.Assert(!writeMethod.IsStatic, $\"Read method should not be static ({readMethod.DeclaringType.ToString(true)})\");\n      \n      void WriterDelegate(SerializationCtx ctx, UnsafeWriter writer, T value)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "f7edbb7d0258530e09c33f25c40c145b7ee129bc3fc173808ab06c4e872f9386"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdList.cs",
      "language": "C#",
      "line": 291,
      "offset": 20,
      "length": 4,
      "code": {
        "startLine": 289,
        "length": 4,
        "offset": 60,
        "surroundingCode": "      using (UsingLocalChange())\n      {\n        myList.Add(item);\n      }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "f8e5e7efeb430641e2663f177fc03195ca15aeeb33f671a3fbd03aff089deb4b"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Possible 'null' assignment to non-nullable entity",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Possible 'null' assignment to non-nullable entity",
  "detailsInfo": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 458,
      "offset": 14,
      "length": 8,
      "code": {
        "startLine": 456,
        "length": 8,
        "offset": 22,
        "surroundingCode": "      }\n\n      return typename;\n    }\n  }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "AssignNullToNotNullAttribute"
  },
  "hash": "fbff2286ae2935c25efc0b8de31dec3473ef8abf6f035863c43c849f2ef1abda"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Auto-property can be made get-only (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Auto-property can be made get-only",
  "detailsInfo": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Internal/LogBase.cs",
      "language": "C#",
      "line": 22,
      "offset": 45,
      "length": 4,
      "code": {
        "startLine": 20,
        "length": 4,
        "offset": 131,
        "surroundingCode": "    public event Action<LeveledMessage>? Handlers;\n    public string Category { get; }\n    public LoggingLevel EnabledLevel { get; set; }\n\n    protected LogBase(string category, LoggingLevel enabledLevel = LoggingLevel.INFO)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "AutoPropertyCanBeMadeGetOnly.Global"
  },
  "hash": "5297405cbd7950f2a7a3b9b142cc2d26325e713bb86120b5ebf04d51b2414d26"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Auto-property can be made get-only (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Auto-property can be made get-only",
  "detailsInfo": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 396,
      "offset": 48,
      "length": 4,
      "code": {
        "startLine": 394,
        "length": 4,
        "offset": 134,
        "surroundingCode": "      /// Its value must be the same on both sides of connection.\n      /// </summary>\n      public TimeSpan HeartBeatInterval { get; set; } = TimeSpan.FromMilliseconds(500);\n\n      /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "AutoPropertyCanBeMadeGetOnly.Global"
  },
  "hash": "b8bde12c8bc3f64f1c07ea738c3b4e2eb77565aaf75582c4d81584d6edb4afbe"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Auto-property can be made get-only (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Auto-property can be made get-only",
  "detailsInfo": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 441,
      "offset": 47,
      "length": 12,
      "code": {
        "startLine": 439,
        "length": 12,
        "offset": 79,
        "surroundingCode": "    //fields\n    //public fields\n    [NotNull] public string SearchLabel {get; private set;}\n    [NotNull] public IViewableMap<int, WrappedStringModel> Issues { get { return _Issues; }}\n    "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "AutoPropertyCanBeMadeGetOnly.Local"
  },
  "hash": "22c82635d5ecbc6436cdfadbe274865b5c7a055f1fa7bcd3769505700d6a0c2d"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Auto-property can be made get-only (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Auto-property can be made get-only",
  "detailsInfo": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 516,
      "offset": 40,
      "length": 12,
      "code": {
        "startLine": 514,
        "length": 12,
        "offset": 72,
        "surroundingCode": "    //fields\n    //public fields\n    [NotNull] public string Text {get; private set;}\n    \n    //private fields"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "AutoPropertyCanBeMadeGetOnly.Local"
  },
  "hash": "42503cc9f5d6b4f3e8c97711b823986e8b447c02f53e05bc70948a3f53c8e0cc"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Auto-property can be made get-only (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Auto-property can be made get-only",
  "detailsInfo": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 287,
      "offset": 67,
      "length": 12,
      "code": {
        "startLine": 285,
        "length": 12,
        "offset": 140,
        "surroundingCode": "    //public fields\n    [NotNull] public string Value {get; private set;}\n    [CanBeNull] public InterningNestedTestStringModel Inner {get; private set;}\n    \n    //private fields"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "AutoPropertyCanBeMadeGetOnly.Local"
  },
  "hash": "4ef0aff8f23cb26908d6e32f191b3a5df1229624875b377063c1433f57a86035"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Auto-property can be made get-only (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Auto-property can be made get-only",
  "detailsInfo": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdAssertion.cs",
      "language": "C#",
      "line": 13,
      "offset": 35,
      "length": 12,
      "code": {
        "startLine": 11,
        "length": 12,
        "offset": 103,
        "surroundingCode": "    //public fields\n    public int MasterVersion {get; private set;}\n    public int SlaveVersion {get; private set;}\n    public string Text {get; private set;}\n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "AutoPropertyCanBeMadeGetOnly.Local"
  },
  "hash": "564ee6d954924c33aaf486e466b22ee2789524d3618621dcaff4533605386a7b"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Auto-property can be made get-only (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Auto-property can be made get-only",
  "detailsInfo": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 127,
      "offset": 47,
      "length": 12,
      "code": {
        "startLine": 125,
        "length": 12,
        "offset": 79,
        "surroundingCode": "    //fields\n    //public fields\n    [NotNull] public string SearchLabel {get; private set;}\n    [NotNull] public ISignal<string> Signaller { get { return _Signaller; }}\n    "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "AutoPropertyCanBeMadeGetOnly.Local"
  },
  "hash": "5ab57999a64dc50df70d04f8625ba4b76d46775e2e0419cd1347d77a7b9ce69c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Auto-property can be made get-only (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Auto-property can be made get-only",
  "detailsInfo": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 204,
      "offset": 41,
      "length": 12,
      "code": {
        "startLine": 202,
        "length": 12,
        "offset": 73,
        "surroundingCode": "    //fields\n    //public fields\n    [NotNull] public string Value {get; private set;}\n    [CanBeNull] public InterningNestedTestModel Inner {get; private set;}\n    "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "AutoPropertyCanBeMadeGetOnly.Local"
  },
  "hash": "60ee067bf472a620667a46ccf73f2d8629d8a768651c1a14b76cddcd867b7511"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Auto-property can be made get-only (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Auto-property can be made get-only",
  "detailsInfo": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdAssertion.cs",
      "language": "C#",
      "line": 14,
      "offset": 30,
      "length": 12,
      "code": {
        "startLine": 12,
        "length": 12,
        "offset": 126,
        "surroundingCode": "    public int MasterVersion {get; private set;}\n    public int SlaveVersion {get; private set;}\n    public string Text {get; private set;}\n    \n    //private fields"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "AutoPropertyCanBeMadeGetOnly.Local"
  },
  "hash": "6232b49230191c7eab2b08da653f9ad4965f718c7cf5f27f01b3b8049c18453c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Auto-property can be made get-only (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Auto-property can be made get-only",
  "detailsInfo": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/SerializationCtx.cs",
      "language": "C#",
      "line": 13,
      "offset": 44,
      "length": 12,
      "code": {
        "startLine": 11,
        "length": 12,
        "offset": 80,
        "surroundingCode": "  public struct SerializationCtx\n  {\n    public ISerializers Serializers { get; private set; }\n\n    [NotNull] public readonly IDictionary<string, IInternRoot<object>> InternRoots;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "AutoPropertyCanBeMadeGetOnly.Local"
  },
  "hash": "84bba029a354fd6eb7d4623290a52f431218a2532a91dbe5310e26aaf0d5cc38"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Auto-property can be made get-only (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Auto-property can be made get-only",
  "detailsInfo": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSet.cs",
      "language": "C#",
      "line": 32,
      "offset": 56,
      "length": 12,
      "code": {
        "startLine": 30,
        "length": 12,
        "offset": 80,
        "surroundingCode": "    #region Serializers\n\n    public CtxReadDelegate<T> ReadValueDelegate { get; private set; }\n    public CtxWriteDelegate<T> WriteValueDelegate { get; private set; }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "AutoPropertyCanBeMadeGetOnly.Local"
  },
  "hash": "853bf9b0cc024f0702f386bc2203538054cb5de21cf8db339635e96e71c07817"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Auto-property can be made get-only (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Auto-property can be made get-only",
  "detailsInfo": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestPropertyWrapper.cs",
      "language": "C#",
      "line": 17,
      "offset": 42,
      "length": 12,
      "code": {
        "startLine": 15,
        "length": 12,
        "offset": 48,
        "surroundingCode": "    }\n\n    public RdProperty<T> Property { get; private set; }\n\n    public override SerializationCtx SerializationContext"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "AutoPropertyCanBeMadeGetOnly.Local"
  },
  "hash": "85db604e25670f8f4094c367a19e7ae8b5f5fcfa74f01f9bcceb043d771d3526"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Auto-property can be made get-only (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Auto-property can be made get-only",
  "detailsInfo": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/PriorityQueueTest.cs",
      "language": "C#",
      "line": 74,
      "offset": 37,
      "length": 12,
      "code": {
        "startLine": 72,
        "length": 12,
        "offset": 91,
        "surroundingCode": "    {\n      internal string Name { get; private set; }\n      internal DateTime Time { get; private set; }\n\n      public Timed(string name, DateTime time)"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "AutoPropertyCanBeMadeGetOnly.Local"
  },
  "hash": "87688e77ee03f09379ae96a409dd70997bed3f9df7f3913ad82347f40a2efd34"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Auto-property can be made get-only (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Auto-property can be made get-only",
  "detailsInfo": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 205,
      "offset": 61,
      "length": 12,
      "code": {
        "startLine": 203,
        "length": 12,
        "offset": 134,
        "surroundingCode": "    //public fields\n    [NotNull] public string Value {get; private set;}\n    [CanBeNull] public InterningNestedTestModel Inner {get; private set;}\n    \n    //private fields"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "AutoPropertyCanBeMadeGetOnly.Local"
  },
  "hash": "a0203549f17af332f22b1d28b809aac76d7df7c7f56294f1d4a4c1313526123d"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Auto-property can be made get-only (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Auto-property can be made get-only",
  "detailsInfo": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdAssertion.cs",
      "language": "C#",
      "line": 12,
      "offset": 36,
      "length": 12,
      "code": {
        "startLine": 10,
        "length": 12,
        "offset": 68,
        "surroundingCode": "    //fields\n    //public fields\n    public int MasterVersion {get; private set;}\n    public int SlaveVersion {get; private set;}\n    public string Text {get; private set;}"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "AutoPropertyCanBeMadeGetOnly.Local"
  },
  "hash": "af252741b5c5f8ce802cf735242ebdaf4def6de70da59c74d03a41449e517fe0"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Auto-property can be made get-only (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Auto-property can be made get-only",
  "detailsInfo": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 286,
      "offset": 41,
      "length": 12,
      "code": {
        "startLine": 284,
        "length": 12,
        "offset": 73,
        "surroundingCode": "    //fields\n    //public fields\n    [NotNull] public string Value {get; private set;}\n    [CanBeNull] public InterningNestedTestStringModel Inner {get; private set;}\n    "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "AutoPropertyCanBeMadeGetOnly.Local"
  },
  "hash": "b4ac51963b7a85b446d08fe97b33d3034234d27be7ed189b75e133b41c147bb1"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Auto-property can be made get-only (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Auto-property can be made get-only",
  "detailsInfo": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/PriorityQueueTest.cs",
      "language": "C#",
      "line": 73,
      "offset": 35,
      "length": 12,
      "code": {
        "startLine": 71,
        "length": 12,
        "offset": 56,
        "surroundingCode": "    class Timed\n    {\n      internal string Name { get; private set; }\n      internal DateTime Time { get; private set; }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "AutoPropertyCanBeMadeGetOnly.Local"
  },
  "hash": "b6cb63c5902fc6c5f6fbe21f25781152ec75de1fb7dd8cdee375a956aab7471d"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Auto-property can be made get-only (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Auto-property can be made get-only",
  "detailsInfo": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 370,
      "offset": 47,
      "length": 12,
      "code": {
        "startLine": 368,
        "length": 12,
        "offset": 79,
        "surroundingCode": "    //fields\n    //public fields\n    [NotNull] public string SearchLabel {get; private set;}\n    [NotNull] public IViewableMap<int, ProtocolWrappedStringModel> Issues { get { return _Issues; }}\n    "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "AutoPropertyCanBeMadeGetOnly.Local"
  },
  "hash": "b70879da20d073534a15fd723acf04a3f0321efb7d3537ba7bdbca2cf26b2020"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Auto-property can be made get-only (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Auto-property can be made get-only",
  "detailsInfo": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdProperty.cs",
      "language": "C#",
      "line": 43,
      "offset": 56,
      "length": 12,
      "code": {
        "startLine": 41,
        "length": 12,
        "offset": 80,
        "surroundingCode": "    #region Serializers\n\n    public CtxReadDelegate<T> ReadValueDelegate { get; private set; }\n    public CtxWriteDelegate<T> WriteValueDelegate { get; private set; }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "AutoPropertyCanBeMadeGetOnly.Local"
  },
  "hash": "bfb9e8498842e82c112e4891b14d42389cf6c006b50c1c991bbf75826ba8c311"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Auto-property can be made get-only (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Auto-property can be made get-only",
  "detailsInfo": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdProperty.cs",
      "language": "C#",
      "line": 44,
      "offset": 58,
      "length": 12,
      "code": {
        "startLine": 42,
        "length": 12,
        "offset": 128,
        "surroundingCode": "\n    public CtxReadDelegate<T> ReadValueDelegate { get; private set; }\n    public CtxWriteDelegate<T> WriteValueDelegate { get; private set; }\n\n    public static RdProperty<T> Read(SerializationCtx ctx, UnsafeReader reader)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "AutoPropertyCanBeMadeGetOnly.Local"
  },
  "hash": "c052853d1c4d9cb0b90bf84de917206d9dac6e018547d83b9a7b0280974fabfc"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Auto-property can be made get-only (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Auto-property can be made get-only",
  "detailsInfo": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 591,
      "offset": 40,
      "length": 12,
      "code": {
        "startLine": 589,
        "length": 12,
        "offset": 72,
        "surroundingCode": "    //fields\n    //public fields\n    [NotNull] public string Text {get; private set;}\n    \n    //private fields"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "AutoPropertyCanBeMadeGetOnly.Local"
  },
  "hash": "daa376555d076eebdf41fb528908dd7404bde8909bd61f0a9ce223bd65609053"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Auto-property can be made get-only (private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Auto-property can be made get-only",
  "detailsInfo": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSet.cs",
      "language": "C#",
      "line": 33,
      "offset": 58,
      "length": 12,
      "code": {
        "startLine": 31,
        "length": 12,
        "offset": 128,
        "surroundingCode": "\n    public CtxReadDelegate<T> ReadValueDelegate { get; private set; }\n    public CtxWriteDelegate<T> WriteValueDelegate { get; private set; }\n\n    public static RdSet<T> Read(SerializationCtx ctx, UnsafeReader reader)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "AutoPropertyCanBeMadeGetOnly.Local"
  },
  "hash": "f34dab4867a608545667e87143312bef5d7666ed41eaf5982bb5dc745c6e2e6a"
},{
  "tool": "Code Inspection",
  "category": "Formatting",
  "type": "Incorrect indent (around child statement)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Line is not indented relative to the previous line around child statement, expected indent 2 spaces",
  "detailsInfo": "Around child statement [Learn more...](https://www.jetbrains.com/help/rider/BadChildStatementIndent.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SocketWireTest.cs",
      "language": "C#",
      "line": 404,
      "offset": 1,
      "length": 6,
      "code": {
        "startLine": 402,
        "length": 6,
        "offset": 99,
        "surroundingCode": "    {\n      using (Log.UsingLogFactory(new TextWriterLogFactory(Console.Out, LoggingLevel.TRACE)))\n      Lifetime.Using(lifetime =>\n      {\n        SynchronousScheduler.Instance.SetActive(lifetime);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "BadChildStatementIndent"
  },
  "hash": "5f4a02289e2e88717e1d29a5970dd79d7b4c0d9c0529f228c38ae121f490b7e7"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 423,
      "offset": 16,
      "length": 6,
      "code": {
        "startLine": 421,
        "length": 6,
        "offset": 52,
        "surroundingCode": "    {\n      Prepare(sizeof(UInt16));\n      var x = (UInt16*)myPtr;\n      myPtr = (byte*)(x + 1);\n      *x = value;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "05f5f3c1f684534a023ed02bd974ac4247eb6aa94509b776dcd8dd12902f65f6"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 338,
      "offset": 41,
      "length": 6,
      "code": {
        "startLine": 336,
        "length": 6,
        "offset": 232,
        "surroundingCode": "    public static readonly ReadDelegate<Int64> Int64Delegate = reader => reader.ReadInt64();\n    public static readonly ReadDelegate<long> LongDelegate = reader => reader.ReadInt64(); //alias\n    public static readonly ReadDelegate<UInt16> UInt16Delegate = reader => reader.ReadUInt16();\n    public static readonly ReadDelegate<UInt32> UInt32Delegate = reader => reader.ReadUInt32();\n    public static readonly ReadDelegate<UInt64> UInt64Delegate = reader => reader.ReadUInt64();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "0c5707eae48b459b7186bc4809d5783cf5da9e5fd7706feb9b5566e0d390a2f4"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 388,
      "offset": 22,
      "length": 5,
      "code": {
        "startLine": 386,
        "length": 5,
        "offset": 62,
        "surroundingCode": "    public void Write(Int16 value)\n    {\n      Prepare(sizeof(Int16));\n      var x = (Int16*)myPtr;\n      myPtr = (byte*)(x + 1);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "0d066b47c9091e0f17a675f93cf7b1416001ecf56dc0a5a742b2c37b2a508d20"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 565,
      "offset": 42,
      "length": 6,
      "code": {
        "startLine": 563,
        "length": 6,
        "offset": 237,
        "surroundingCode": "    public static readonly WriteDelegate<UInt16> UInt16Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<UInt32> UInt32Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<UInt64> UInt64Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<DateTime> DateTimeDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Uri> UriDelegate = (writer, x) => writer.Write(x);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "145d64ccb63f40283654cd6a4af1c746e41d7a5de31f2b59f559b0f39c8734d4"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 206,
      "offset": 49,
      "length": 5,
      "code": {
        "startLine": 204,
        "length": 5,
        "offset": 83,
        "surroundingCode": "    public Int64 ReadInt64()\n    {\n      if (Mode.IsAssertion) AssertLength(sizeof(Int64));\n\n      var x = (Int64*)myPtr;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "1b7afa41d0f30313e16aaf3de47c70cb4b4afdd3a6ac0362e6fc0c8885c3f448"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 564,
      "offset": 42,
      "length": 6,
      "code": {
        "startLine": 562,
        "length": 6,
        "offset": 235,
        "surroundingCode": "    public static readonly WriteDelegate<Int64> Int64Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<UInt16> UInt16Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<UInt32> UInt32Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<UInt64> UInt64Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<DateTime> DateTimeDelegate = (writer, x) => writer.Write(x);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "1eb5c01e5a9e3b5564f40705495ec8119829bac5070efeb371ac8b3e5c86dc53"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 208,
      "offset": 16,
      "length": 5,
      "code": {
        "startLine": 206,
        "length": 5,
        "offset": 73,
        "surroundingCode": "      if (Mode.IsAssertion) AssertLength(sizeof(Int64));\n\n      var x = (Int64*)myPtr;\n      myPtr = (byte*)(x + 1);\n      return *x;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "219124b4e476f01fc6b871b5bf78d240688cabf4d027b5ec65141eaa4504870f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 163,
      "offset": 12,
      "length": 5,
      "code": {
        "startLine": 161,
        "length": 5,
        "offset": 75,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public Int16 ReadShort() //alias\n    {\n      return ReadInt16();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "2831e2bcbfbd8a5313992f814539f928f75d43f7987004c555385d8fb2e3c188"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 18,
      "offset": 19,
      "length": 6,
      "code": {
        "startLine": 16,
        "length": 6,
        "offset": 70,
        "surroundingCode": "  public class ProxyGenerator : IProxyGenerator\n  {\n    private const String DynamicAssemblyName = \"JetBrains.Rd.ProxyGenerator\";\n    private readonly bool myAllowSave;\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "2da278a182744ac5dd51fba6086eddb939c5062e6c0f578e69eeb44ddce5d366"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 155,
      "offset": 49,
      "length": 5,
      "code": {
        "startLine": 153,
        "length": 5,
        "offset": 83,
        "surroundingCode": "    public Int16 ReadInt16()\n    {\n      if (Mode.IsAssertion) AssertLength(sizeof(Int16));\n\n      var x = (Int16*)myPtr;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "324735c9fde399a6ab74920bdd97d82ca36d8224c5cd31f2eaa16aedb2f41cf5"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 420,
      "offset": 23,
      "length": 6,
      "code": {
        "startLine": 418,
        "length": 6,
        "offset": 86,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public void Write(UInt16 value)\n    {\n      Prepare(sizeof(UInt16));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "38a44d5c455001027bcefbd7615ddcf2cb6d6c20ebb4fb82d64505e8cfb09b5f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 438,
      "offset": 23,
      "length": 6,
      "code": {
        "startLine": 436,
        "length": 6,
        "offset": 86,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public void Write(UInt64 value)\n    {\n      Prepare(sizeof(UInt64));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "3e604d024462247a7eb5835711b098ce45af196df73a06f26154b599c3375d3b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 230,
      "offset": 49,
      "length": 6,
      "code": {
        "startLine": 228,
        "length": 6,
        "offset": 85,
        "surroundingCode": "    public UInt16 ReadUInt16()\n    {\n      if (Mode.IsAssertion) AssertLength(sizeof(UInt16));\n\n      var x = (UInt16*)myPtr;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "40647711f8949bfddabbd93e70a4744a602159de52537645b40a02941e874839"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 258,
      "offset": 104,
      "length": 5,
      "code": {
        "startLine": 256,
        "length": 5,
        "offset": 150,
        "surroundingCode": "            if (len == PING_LEN)\n            {\n              Int32 receivedTimestamp = UnsafeReader.ReadInt32FromBytes(myPkgHeaderBuffer.Data, sizeof(Int32));\n              Int32 receivedCounterpartTimestamp = UnsafeReader.ReadInt32FromBytes(myPkgHeaderBuffer.Data, sizeof(Int32) + sizeof(Int32));\n              myCounterpartTimestamp = receivedTimestamp;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "42dec96f65feee74b7577334c9254ad96076fa7d32be1954a8d63ebaae4800da"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 332,
      "offset": 41,
      "length": 5,
      "code": {
        "startLine": 330,
        "length": 5,
        "offset": 229,
        "surroundingCode": "    public static readonly ReadDelegate<double> DoubleDelegate = reader => reader.ReadDouble();\n    public static readonly ReadDelegate<float> FloatDelegate = reader => reader.ReadFloat();\n    public static readonly ReadDelegate<Int16> Int16Delegate = reader => reader.ReadInt16();\n    public static readonly ReadDelegate<short> ShortDelegate = reader => reader.ReadInt16(); //alias\n    public static readonly ReadDelegate<Int32> Int32Delegate = reader => reader.ReadInt32();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "46178e8ce7e28c0dfbbe1799082826fa339f164157e6e7758c5c15ef84868951"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 190,
      "offset": 19,
      "length": 5,
      "code": {
        "startLine": 188,
        "length": 5,
        "offset": 29,
        "surroundingCode": "    }\n    \n    public static Int64 ReadInt64FromBytes(byte[] bytes, int offset = 0)\n    {\n      fixed (byte* bb = bytes)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "478940deb08f241aabc179814daa1b715b9a840fa78428d543256eb55a3b3d52"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 252,
      "offset": 16,
      "length": 6,
      "code": {
        "startLine": 250,
        "length": 6,
        "offset": 74,
        "surroundingCode": "      if (Mode.IsAssertion) AssertLength(sizeof(UInt64));\n\n      var x = (UInt64*)myPtr;\n      myPtr = (byte*)(x + 1);\n      return *x;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "49ba59aa8d60d3f9d609fdd09e9e1af124e30498cd24c0cc778f577c5130d5d6"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 204,
      "offset": 12,
      "length": 5,
      "code": {
        "startLine": 202,
        "length": 5,
        "offset": 75,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public Int64 ReadInt64()\n    {\n      if (Mode.IsAssertion) AssertLength(sizeof(Int64));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "512d5f0a5c22cd5c9c6b93d3942f954124d8eda094aafe2c91c80c6b6ce5df74"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 184,
      "offset": 19,
      "length": 5,
      "code": {
        "startLine": 182,
        "length": 5,
        "offset": 25,
        "surroundingCode": "    }\n\n    public static Int32 ReadInt32FromBytes(byte[] bytes, int offset = 0)\n    {\n      fixed (byte* bb = bytes)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "59b9957bd620dfff0a024542585c8701518bdaf5b9c341984a7356321ddbdc92"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 171,
      "offset": 49,
      "length": 5,
      "code": {
        "startLine": 169,
        "length": 5,
        "offset": 83,
        "surroundingCode": "    public Int32 ReadInt32()\n    {\n      if (Mode.IsAssertion) AssertLength(sizeof(Int32));\n\n      var x = (Int32*)myPtr;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "5f5907ff6dc35c828b52929c29e0b846b7590505b3c02bd2589149c8b1ab8e5f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 280,
      "offset": 89,
      "length": 5,
      "code": {
        "startLine": 278,
        "length": 5,
        "offset": 103,
        "surroundingCode": "            }\n\n            Int64 seqN = UnsafeReader.ReadInt64FromBytes(myPkgHeaderBuffer.Data, sizeof(Int32));\n            if (len == ACK_MSG_LEN)\n            {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "6851e10b554f88a9db301b1b3357661abb04423d3df412e712209fa29a0ccc3a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 228,
      "offset": 12,
      "length": 6,
      "code": {
        "startLine": 226,
        "length": 6,
        "offset": 75,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public UInt16 ReadUInt16()\n    {\n      if (Mode.IsAssertion) AssertLength(sizeof(UInt16));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "6d34f73426f9e9baff39d1ba3068e37258d8c0c5c9757d38bc46f8ad3930f859"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 259,
      "offset": 115,
      "length": 5,
      "code": {
        "startLine": 257,
        "length": 5,
        "offset": 240,
        "surroundingCode": "            {\n              Int32 receivedTimestamp = UnsafeReader.ReadInt32FromBytes(myPkgHeaderBuffer.Data, sizeof(Int32));\n              Int32 receivedCounterpartTimestamp = UnsafeReader.ReadInt32FromBytes(myPkgHeaderBuffer.Data, sizeof(Int32) + sizeof(Int32));\n              myCounterpartTimestamp = receivedTimestamp;\n              myCounterpartNotionTimestamp = receivedCounterpartTimestamp;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "720ef0849381bca7d8a86f2137922a67878c12daf6727ef2353c457b545294a6"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 169,
      "offset": 12,
      "length": 5,
      "code": {
        "startLine": 167,
        "length": 5,
        "offset": 75,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public Int32 ReadInt32()\n    {\n      if (Mode.IsAssertion) AssertLength(sizeof(Int32));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "795a99ceaeeea499f8cfa8393be53df1d12dc3ee9bd8e5e566dfe54bcdc2ce50"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 563,
      "offset": 42,
      "length": 6,
      "code": {
        "startLine": 561,
        "length": 6,
        "offset": 233,
        "surroundingCode": "    public static readonly WriteDelegate<Int32> Int32Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Int64> Int64Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<UInt16> UInt16Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<UInt32> UInt32Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<UInt64> UInt64Delegate = (writer, x) => writer.Write(x);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "7960e6abaf37d9a05fbc1099b110deb1763407b97b85f8083926d894111315f0"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 413,
      "offset": 22,
      "length": 5,
      "code": {
        "startLine": 411,
        "length": 5,
        "offset": 62,
        "surroundingCode": "    public void Write(Int64 value)\n    {\n      Prepare(sizeof(Int64));\n      var x = (Int64*)myPtr;\n      myPtr = (byte*)(x + 1);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "7f14e61fea829ef0c8dffe93c3ce7053de0e0bf6ef8194356e555ba8ddde43b4"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 334,
      "offset": 41,
      "length": 5,
      "code": {
        "startLine": 332,
        "length": 5,
        "offset": 234,
        "surroundingCode": "    public static readonly ReadDelegate<Int16> Int16Delegate = reader => reader.ReadInt16();\n    public static readonly ReadDelegate<short> ShortDelegate = reader => reader.ReadInt16(); //alias\n    public static readonly ReadDelegate<Int32> Int32Delegate = reader => reader.ReadInt32();\n    public static readonly ReadDelegate<int> IntDelegate = reader => reader.ReadInt32(); //alias\n    public static readonly ReadDelegate<Int64> Int64Delegate = reader => reader.ReadInt64();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "81f210f515139008519d8ec0abafce089f588a670b4377be6d469a15e82c1ddd"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 340,
      "offset": 41,
      "length": 6,
      "code": {
        "startLine": 338,
        "length": 6,
        "offset": 232,
        "surroundingCode": "    public static readonly ReadDelegate<UInt16> UInt16Delegate = reader => reader.ReadUInt16();\n    public static readonly ReadDelegate<UInt32> UInt32Delegate = reader => reader.ReadUInt32();\n    public static readonly ReadDelegate<UInt64> UInt64Delegate = reader => reader.ReadUInt64();\n    public static readonly ReadDelegate<DateTime> DateTimeDelegate = reader => reader.ReadDateTime();\n    public static readonly ReadDelegate<Uri> UriDelegate = reader => reader.ReadUri();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "87e75a457e4b61ca17742b2da1442bff98391e95eaeecf649e4f30ba76f1fdc8"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 414,
      "offset": 16,
      "length": 5,
      "code": {
        "startLine": 412,
        "length": 5,
        "offset": 51,
        "surroundingCode": "    {\n      Prepare(sizeof(Int64));\n      var x = (Int64*)myPtr;\n      myPtr = (byte*)(x + 1);\n      *x = value;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "8dc35623d03091e4871b3b5090d1c17fc4b5ffba3896a4f37a3f428dadd75ab7"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 259,
      "offset": 131,
      "length": 5,
      "code": {
        "startLine": 257,
        "length": 5,
        "offset": 256,
        "surroundingCode": "            {\n              Int32 receivedTimestamp = UnsafeReader.ReadInt32FromBytes(myPkgHeaderBuffer.Data, sizeof(Int32));\n              Int32 receivedCounterpartTimestamp = UnsafeReader.ReadInt32FromBytes(myPkgHeaderBuffer.Data, sizeof(Int32) + sizeof(Int32));\n              myCounterpartTimestamp = receivedTimestamp;\n              myCounterpartNotionTimestamp = receivedCounterpartTimestamp;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "8deec7bc3465b107ab26568c71a77f8ce269bcc2889329c2c209dd8581324554"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 193,
      "offset": 18,
      "length": 5,
      "code": {
        "startLine": 191,
        "length": 5,
        "offset": 54,
        "surroundingCode": "    {\n      fixed (byte* bb = bytes)\n        return *(Int64*) (bb + offset);\n    }\n    "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "9407c09f5bc967fed75d4b18b02c14c4d563019958d781606ccc71e740faf7ac"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 173,
      "offset": 16,
      "length": 5,
      "code": {
        "startLine": 171,
        "length": 5,
        "offset": 73,
        "surroundingCode": "      if (Mode.IsAssertion) AssertLength(sizeof(Int32));\n\n      var x = (Int32*)myPtr;\n      myPtr = (byte*)(x + 1);\n      return *x;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "952d0c3a1719ecb3b390b5c1386996da231cc180641e01792911e07a8b626a6e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 199,
      "offset": 18,
      "length": 6,
      "code": {
        "startLine": 197,
        "length": 6,
        "offset": 54,
        "surroundingCode": "    {\n      fixed (byte* bb = bytes)\n        return *(UInt64*) bb;\n    }\n    "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "9755f43a5147e3ac31bcfa2e3a46d27fd2414b982446e657ed90546f9d3b425f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 395,
      "offset": 23,
      "length": 5,
      "code": {
        "startLine": 393,
        "length": 5,
        "offset": 86,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public void Write(Int32 value)\n    {\n      Prepare(sizeof(Int32));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "984f7a92201b0f7e24c21cf6cf8bffdd7ec9b264b91762878cbaa376f24d3b97"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 187,
      "offset": 18,
      "length": 5,
      "code": {
        "startLine": 185,
        "length": 5,
        "offset": 54,
        "surroundingCode": "    {\n      fixed (byte* bb = bytes)\n        return *(Int32*) (bb + offset);\n    }\n    "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "992b0dcb59cc9d4cc375d2998b1f9a2b62734d611bf65caf8f576f7a07806a55"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 411,
      "offset": 23,
      "length": 5,
      "code": {
        "startLine": 409,
        "length": 5,
        "offset": 86,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public void Write(Int64 value)\n    {\n      Prepare(sizeof(Int64));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "9ab2712be19bb83c6d5999c4d3e4e511359ffa29f5e3ab0cd95ad759aadf6fe8"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 560,
      "offset": 42,
      "length": 5,
      "code": {
        "startLine": 558,
        "length": 5,
        "offset": 235,
        "surroundingCode": "    public static readonly WriteDelegate<double> DoubleDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<float> FloatDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Int16> Int16Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Int32> Int32Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Int64> Int64Delegate = (writer, x) => writer.Write(x);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "9c44888819451f76ce12b9de71d499e76eee04881ccd8abc2b00d0f2c5d380fc"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 157,
      "offset": 16,
      "length": 5,
      "code": {
        "startLine": 155,
        "length": 5,
        "offset": 73,
        "surroundingCode": "      if (Mode.IsAssertion) AssertLength(sizeof(Int16));\n\n      var x = (Int16*)myPtr;\n      myPtr = (byte*)(x + 1);\n      return *x;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "9cd49c5c21d6b2bb3efb1fbc9c7dc43e4553be5fd751897e229b0d79756f8152"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 336,
      "offset": 41,
      "length": 5,
      "code": {
        "startLine": 334,
        "length": 5,
        "offset": 230,
        "surroundingCode": "    public static readonly ReadDelegate<Int32> Int32Delegate = reader => reader.ReadInt32();\n    public static readonly ReadDelegate<int> IntDelegate = reader => reader.ReadInt32(); //alias\n    public static readonly ReadDelegate<Int64> Int64Delegate = reader => reader.ReadInt64();\n    public static readonly ReadDelegate<long> LongDelegate = reader => reader.ReadInt64(); //alias\n    public static readonly ReadDelegate<UInt16> UInt16Delegate = reader => reader.ReadUInt16();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "a0b5bc543de41fbab53942d2737464c1901460e416df14070b5ead10a42247d2"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 432,
      "offset": 16,
      "length": 6,
      "code": {
        "startLine": 430,
        "length": 6,
        "offset": 52,
        "surroundingCode": "    {\n      Prepare(sizeof(UInt32));\n      var x = (UInt32*)myPtr;\n      myPtr = (byte*)(x + 1);\n      *x = value;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "a2ff89e5f2da026cc0241d19161e5d2e227ee23590ede4abd425682d4e939d6b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 153,
      "offset": 12,
      "length": 5,
      "code": {
        "startLine": 151,
        "length": 5,
        "offset": 75,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public Int16 ReadInt16()\n    {\n      if (Mode.IsAssertion) AssertLength(sizeof(Int16));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "a32349274d15378916ed6b2e9df947eed1c5550739d0237f329231f1a2dd10a3"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 238,
      "offset": 12,
      "length": 6,
      "code": {
        "startLine": 236,
        "length": 6,
        "offset": 75,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public UInt32 ReadUInt32()\n    {\n      if (Mode.IsAssertion) AssertLength(sizeof(UInt32));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "a3abc671976e0ba310d63731e38ce6104fb1bdc9d08c5bc38b1ce06b454c39ab"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 339,
      "offset": 41,
      "length": 6,
      "code": {
        "startLine": 337,
        "length": 6,
        "offset": 235,
        "surroundingCode": "    public static readonly ReadDelegate<long> LongDelegate = reader => reader.ReadInt64(); //alias\n    public static readonly ReadDelegate<UInt16> UInt16Delegate = reader => reader.ReadUInt16();\n    public static readonly ReadDelegate<UInt32> UInt32Delegate = reader => reader.ReadUInt32();\n    public static readonly ReadDelegate<UInt64> UInt64Delegate = reader => reader.ReadUInt64();\n    public static readonly ReadDelegate<DateTime> DateTimeDelegate = reader => reader.ReadDateTime();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "a6153beb0a330770e825f1a5d78321820cb9dfb6dbb73567292a29618681d8e9"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 440,
      "offset": 22,
      "length": 6,
      "code": {
        "startLine": 438,
        "length": 6,
        "offset": 63,
        "surroundingCode": "    public void Write(UInt64 value)\n    {\n      Prepare(sizeof(UInt64));\n      var x = (UInt64*)myPtr;\n      myPtr = (byte*)(x + 1);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "aa38b5205c178f2f15ea6518753838173ec866916ea3dd55a91bfad914ba6104"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 232,
      "offset": 16,
      "length": 6,
      "code": {
        "startLine": 230,
        "length": 6,
        "offset": 74,
        "surroundingCode": "      if (Mode.IsAssertion) AssertLength(sizeof(UInt16));\n\n      var x = (UInt16*)myPtr;\n      myPtr = (byte*)(x + 1);\n      return *x;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "adb808f2a2d824e69b33f680378c612a39901c03264cf6f5f12744827d9fc164"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 429,
      "offset": 23,
      "length": 6,
      "code": {
        "startLine": 427,
        "length": 6,
        "offset": 86,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public void Write(UInt32 value)\n    {\n      Prepare(sizeof(UInt32));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "afa8244f7e0deb26fe2d6e7c5dbfab76d7491fd74a9bbc63c2d4d67c9526b22c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 248,
      "offset": 12,
      "length": 6,
      "code": {
        "startLine": 246,
        "length": 6,
        "offset": 75,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public UInt64 ReadUInt64()\n    {\n      if (Mode.IsAssertion) AssertLength(sizeof(UInt64));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "b26daf7ccbe0321dc67607dc4db4cf99dd7750ddab8b47e9115119eab03fe16c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 389,
      "offset": 16,
      "length": 5,
      "code": {
        "startLine": 387,
        "length": 5,
        "offset": 51,
        "surroundingCode": "    {\n      Prepare(sizeof(Int16));\n      var x = (Int16*)myPtr;\n      myPtr = (byte*)(x + 1);\n      *x = value;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "b59cdf22cc437bb1d7c0c3c20fcec05a3823bc3a99c51f58ad6cb484eab1f1bf"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 398,
      "offset": 16,
      "length": 5,
      "code": {
        "startLine": 396,
        "length": 5,
        "offset": 51,
        "surroundingCode": "    {\n      Prepare(sizeof(Int32));\n      var x = (Int32*)myPtr;\n      myPtr = (byte*)(x + 1);\n      *x = value;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "b5eb227d48ba6541f8573d168b5e26a62e5db84a58eb69d15749acb1445d98a9"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 441,
      "offset": 16,
      "length": 6,
      "code": {
        "startLine": 439,
        "length": 6,
        "offset": 52,
        "surroundingCode": "    {\n      Prepare(sizeof(UInt64));\n      var x = (UInt64*)myPtr;\n      myPtr = (byte*)(x + 1);\n      *x = value;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "bd6a62c3156328c6ef231e1a9fd8408baeb68323e4a5fb81cdcf89404bd56c41"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 242,
      "offset": 16,
      "length": 6,
      "code": {
        "startLine": 240,
        "length": 6,
        "offset": 74,
        "surroundingCode": "      if (Mode.IsAssertion) AssertLength(sizeof(UInt32));\n\n      var x = (UInt32*)myPtr;\n      myPtr = (byte*)(x + 1);\n      return *x;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "c2082207619b929bf10d94339bc374dc1f503621fcda3579b33eba9aa018d967"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 240,
      "offset": 49,
      "length": 6,
      "code": {
        "startLine": 238,
        "length": 6,
        "offset": 85,
        "surroundingCode": "    public UInt32 ReadUInt32()\n    {\n      if (Mode.IsAssertion) AssertLength(sizeof(UInt32));\n\n      var x = (UInt32*)myPtr;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "c437e0b046fbaf54de93edab56fb2780cb354c96d3832ff607839eb272149ef4"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 250,
      "offset": 49,
      "length": 6,
      "code": {
        "startLine": 248,
        "length": 6,
        "offset": 85,
        "surroundingCode": "    public UInt64 ReadUInt64()\n    {\n      if (Mode.IsAssertion) AssertLength(sizeof(UInt64));\n\n      var x = (UInt64*)myPtr;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "c820ed064d49655d8330c69765a4d86a39c0eb1e37f71a64f338e681f72ee611"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 562,
      "offset": 42,
      "length": 5,
      "code": {
        "startLine": 560,
        "length": 5,
        "offset": 233,
        "surroundingCode": "    public static readonly WriteDelegate<Int16> Int16Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Int32> Int32Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Int64> Int64Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<UInt16> UInt16Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<UInt32> UInt32Delegate = (writer, x) => writer.Write(x);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "cea8dd24df7a1cc1c927f61bc91d00bf804d96add3e3a2597acb6d44f86697df"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 397,
      "offset": 22,
      "length": 5,
      "code": {
        "startLine": 395,
        "length": 5,
        "offset": 62,
        "surroundingCode": "    public void Write(Int32 value)\n    {\n      Prepare(sizeof(Int32));\n      var x = (Int32*)myPtr;\n      myPtr = (byte*)(x + 1);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "cebfc13566a35f8ae12a706b7d82129a6fcd09b508f0dc4051a277510c8bed2d"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 196,
      "offset": 19,
      "length": 6,
      "code": {
        "startLine": 194,
        "length": 6,
        "offset": 29,
        "surroundingCode": "    }\n    \n    public static UInt64 ReadUInt64FromBytes(byte[] bytes)\n    {\n      fixed (byte* bb = bytes)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "d97f3bda38bc7a38b05bdaf36ca2639d3330f97239e6f1f4af8f93eee972c2c3"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 178,
      "offset": 19,
      "length": 6,
      "code": {
        "startLine": 176,
        "length": 6,
        "offset": 29,
        "surroundingCode": "    }\n    \n    public static UInt16 ReadUInt16FromBytes(byte[] bytes)\n    {\n      fixed (byte* bb = bytes)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "d9abb63e3e47272358114a1fef2ac3df0cdbb77cfb7e795b42edf2ef35c31577"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 404,
      "offset": 42,
      "length": 5,
      "code": {
        "startLine": 402,
        "length": 5,
        "offset": 105,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public static void WriteInt32ToBytes(Int32 value, byte[] data, int offset)\n    {\n      fixed (byte* bb = data)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "dce0722b05edb4cfdcab52c5da930ba308d5f56e3e7d645768d813e6d3e9e415"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 386,
      "offset": 23,
      "length": 5,
      "code": {
        "startLine": 384,
        "length": 5,
        "offset": 86,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public void Write(Int16 value)\n    {\n      Prepare(sizeof(Int16));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "ea3033e3082bbff92038621edc9d701b687955a60502edf8c1c3fff9a0bbc384"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 181,
      "offset": 18,
      "length": 6,
      "code": {
        "startLine": 179,
        "length": 6,
        "offset": 54,
        "surroundingCode": "    {\n      fixed (byte* bb = bytes)\n        return *(UInt16*) bb;\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "efc776dc7fd36ce5f288495c6a21670dea5e1a2baefc08cb9af854b9276d42de"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdPerContextMap.cs",
      "language": "C#",
      "line": 15,
      "offset": 31,
      "length": 7,
      "code": {
        "startLine": 13,
        "length": 7,
        "offset": 81,
        "surroundingCode": "    {\n        public RdContext<K> Context { get; }\n        private readonly Func<Boolean, V> myValueFactory;\n        private readonly IViewableMap<K, V> myMap;\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "f370bc35931c3b6ae3c1cb7fdfaa7c6872129e0e1b563ed7e26b2b36bdb1d86f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 561,
      "offset": 42,
      "length": 5,
      "code": {
        "startLine": 559,
        "length": 5,
        "offset": 233,
        "surroundingCode": "    public static readonly WriteDelegate<float> FloatDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Int16> Int16Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Int32> Int32Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Int64> Int64Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<UInt16> UInt16Delegate = (writer, x) => writer.Write(x);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "f3c30a0b3f805eeeda3d0837e22eb2ccde8d77e224e9705a9f4ecaf53d13c8c5"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 231,
      "offset": 40,
      "length": 5,
      "code": {
        "startLine": 229,
        "length": 5,
        "offset": 73,
        "surroundingCode": "\n        Receive(msgBuffer.Data);\n        ReadBytesCount += len + sizeof(Int32 /*len*/);\n        return true;\n      }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "f3cc871ba7068384d8acb1e3f238a5bab837edf712820a7880b48d5ed74b1f04"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 422,
      "offset": 22,
      "length": 6,
      "code": {
        "startLine": 420,
        "length": 6,
        "offset": 63,
        "surroundingCode": "    public void Write(UInt16 value)\n    {\n      Prepare(sizeof(UInt16));\n      var x = (UInt16*)myPtr;\n      myPtr = (byte*)(x + 1);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "f3d0d61bc3d1f4d985fa1b31a02a239da0a6f548684e3efea22903673f669bf2"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 431,
      "offset": 22,
      "length": 6,
      "code": {
        "startLine": 429,
        "length": 6,
        "offset": 63,
        "surroundingCode": "    public void Write(UInt32 value)\n    {\n      Prepare(sizeof(UInt32));\n      var x = (UInt32*)myPtr;\n      myPtr = (byte*)(x + 1);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyle"
  },
  "hash": "f6afcec286dc2a26c6c3fa4b8418f3ccc78ddea4711b2be210ce91166b701212"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword in static member access expressions",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyleForMemberAccess.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/SerializerReflectionUtil.cs",
      "language": "C#",
      "line": 106,
      "offset": 126,
      "length": 6,
      "code": {
        "startLine": 104,
        "length": 6,
        "offset": 163,
        "surroundingCode": "      if (methodInfo == null)\n      {\n        Assertion.Fail($\"Unable to found method in {typeInfo.ToString(true)} with requested signature : public static Write({String.Join(\", \", types.Select(t => t.ToString(true)).ToArray())})\");\n      }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "BuiltInTypeReferenceStyleForMemberAccess"
  },
  "hash": "02996841341f9e7af9b3cec523344738c39557fd051a26286def66e0602b6ed4"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword in static member access expressions",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyleForMemberAccess.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/SerializerReflectionUtil.cs",
      "language": "C#",
      "line": 67,
      "offset": 125,
      "length": 6,
      "code": {
        "startLine": 65,
        "length": 6,
        "offset": 162,
        "surroundingCode": "      if (methodInfo == null)\n      {\n        Assertion.Fail($\"Unable to found method in {typeInfo.ToString(true)} with requested signature : public static Read({String.Join(\", \", types.Select(t=>t.ToString(true)).ToArray())})\");\n      }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "BuiltInTypeReferenceStyleForMemberAccess"
  },
  "hash": "1211e4eb8d7a89d8f76407a69006b9db5dd85187d506b415329623c6735fa5eb"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword in static member access expressions",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyleForMemberAccess.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/SerializerReflectionUtil.cs",
      "language": "C#",
      "line": 88,
      "offset": 125,
      "length": 6,
      "code": {
        "startLine": 86,
        "length": 6,
        "offset": 162,
        "surroundingCode": "      if (methodInfo == null)\n      {\n        Assertion.Fail($\"Unable to found method in {typeInfo.ToString(true)} with requested signature : public static Read({String.Join(\", \", types.Select(t => t.ToString(true)).ToArray())})\");\n      }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "BuiltInTypeReferenceStyleForMemberAccess"
  },
  "hash": "16cac0004ec88a88702db3ae149f4192138785db456421129b0a8c0bbfa2efce"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword in static member access expressions",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyleForMemberAccess.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IRdBindable.cs",
      "language": "C#",
      "line": 246,
      "offset": 69,
      "length": 5,
      "code": {
        "startLine": 244,
        "length": 5,
        "offset": 138,
        "surroundingCode": "    public static string PrintToStringNoLimits(this object? me)\n    {\n      var prettyPrinter = new PrettyPrinter { CollectionMaxLength = Int32.MaxValue };\n      me.PrintEx(prettyPrinter);\n      return prettyPrinter.ToString();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "BuiltInTypeReferenceStyleForMemberAccess"
  },
  "hash": "29317bcbdd9ee035143121ee94f2be979bb0f03a882167a608add21126b6ffce"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword in static member access expressions",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyleForMemberAccess.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 64,
      "offset": 65,
      "length": 5,
      "code": {
        "startLine": 62,
        "length": 5,
        "offset": 214,
        "surroundingCode": "    void SetCanceledIsolated<TResult>(TaskCompletionSource<TResult> tcs) { try { tcs.SetCanceled(); } catch (Exception e) { Log.Root.Error(e);}}\n    \n    public AsyncChannel(Lifetime lifetime, int sendBufferSize = Int32.MaxValue)\n    {\n      "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyleForMemberAccess"
  },
  "hash": "5ae42458a73082da009b532d01b89ee1c556a04f8cf47f25834bbe8db9f59f0f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword in static member access expressions",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyleForMemberAccess.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/OuterLifetime.cs",
      "language": "C#",
      "line": 105,
      "offset": 10,
      "length": 6,
      "code": {
        "startLine": 103,
        "length": 6,
        "offset": 40,
        "surroundingCode": "\n      // Fallback to defaults\n      if(String.IsNullOrEmpty(id))\n        id = LifetimeDefinition.AnonymousLifetimeId;\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "BuiltInTypeReferenceStyleForMemberAccess"
  },
  "hash": "d6d0a3d77a6593703e0c37c17c360d3cb913d27ef9c5d6053ca082285b95e793"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Replace built-in type reference with a CLR type name or a keyword in static member access expressions",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Built-in type reference is inconsistent with code style settings",
  "detailsInfo": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyleForMemberAccess.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 212,
      "offset": 126,
      "length": 6,
      "code": {
        "startLine": 210,
        "length": 6,
        "offset": 167,
        "surroundingCode": "        {\n          if (Mode.IsAssertion)\n            Assertion.Fail($\"Unable to create serializer for {serializerType.ToString(true)}: circular dependency detected: {String.Join(\" -> \", myCurrentSerializersChain.Select(t => t.ToString(true)).ToArray())}\");\n          throw new Assertion.AssertionException($\"Undetected circular dependency during serializing {serializerType.ToString(true)}. Enable Assertion mode to get detailed information.\");\n        }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "BuiltInTypeReferenceStyleForMemberAccess"
  },
  "hash": "ed1527e281aaaea1ef543113b66650f3816c253d8a3d86291d0255795839cf98"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Converting null literal or possible null value to non-nullable type.",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Converting null literal or possible null value into non-nullable type",
  "detailsInfo": "",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 129,
      "offset": 28,
      "length": 4,
      "code": {
        "startLine": 127,
        "length": 4,
        "offset": 77,
        "surroundingCode": "        {\n          foreach (var pkg in Packages)\n          foreach (XmlNode node in doc.SelectNodes($\"/packages/package[@id='{pkg}']\"))\n          {\n            node.Attributes[\"version\"].Value = RdVersion;"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "CSharpWarnings__CS8600"
  },
  "hash": "0f47fb0ab12c7e88db19d3531c36419a865771eacae7acc04f2ce20b613f9121"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Converting null literal or possible null value to non-nullable type.",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Converting null literal or possible null value into non-nullable type",
  "detailsInfo": "",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 154,
      "offset": 30,
      "length": 4,
      "code": {
        "startLine": 152,
        "length": 4,
        "offset": 44,
        "surroundingCode": "            }\n\n            foreach (XmlNode node in doc.SelectNodes($\"//x:Import[contains(@Project, \\\"{pkg}\\\")]\", namespaceManager))\n            {\n              node.Attributes[\"Project\"].Value = Regex.Replace(node.Attributes[\"Project\"].Value, $\"{pkg}.*.\\\\\\\\build\", $\"{pkg}.{RdVersion}\\\\build\");"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "CSharpWarnings__CS8600"
  },
  "hash": "2a92eea7e47e424d70df3b8b9a0a73a52aea52ffc92e50edeb7054c029f10aea"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Converting null literal or possible null value to non-nullable type.",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Converting null literal or possible null value into non-nullable type",
  "detailsInfo": "",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 148,
      "offset": 30,
      "length": 4,
      "code": {
        "startLine": 146,
        "length": 4,
        "offset": 42,
        "surroundingCode": "          {\n\n            foreach (XmlNode node in doc.SelectNodes($\"//x:HintPath[contains(text(), \\\"{pkg}\\\")]\", namespaceManager))\n            {\n              var text = (XmlText) node.FirstChild;"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "CSharpWarnings__CS8600"
  },
  "hash": "b181a21ade92cb311dc643ddedbeb467c332c4e13758cd762ce42a639756376b"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Dereference of a possibly null reference.",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Dereference of a possibly null reference",
  "detailsInfo": "",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 156,
      "offset": 15,
      "length": 4,
      "code": {
        "startLine": 154,
        "length": 4,
        "offset": 146,
        "surroundingCode": "            foreach (XmlNode node in doc.SelectNodes($\"//x:Import[contains(@Project, \\\"{pkg}\\\")]\", namespaceManager))\n            {\n              node.Attributes[\"Project\"].Value = Regex.Replace(node.Attributes[\"Project\"].Value, $\"{pkg}.*.\\\\\\\\build\", $\"{pkg}.{RdVersion}\\\\build\");\n            }\n          }"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "CSharpWarnings__CS8602"
  },
  "hash": "44f5fa13822b395a43247fe4cdaee5d3b0327411513aa6a2b62702f72b56b865"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Dereference of a possibly null reference.",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Dereference of a possibly null reference",
  "detailsInfo": "",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 150,
      "offset": 36,
      "length": 4,
      "code": {
        "startLine": 148,
        "length": 4,
        "offset": 167,
        "surroundingCode": "            foreach (XmlNode node in doc.SelectNodes($\"//x:HintPath[contains(text(), \\\"{pkg}\\\")]\", namespaceManager))\n            {\n              var text = (XmlText) node.FirstChild;\n              text.Value = Regex.Replace(text.Value, $\"{pkg}.*.\\\\\\\\lib\", $\"{pkg}.{RdVersion}\\\\lib\");\n            }"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "CSharpWarnings__CS8602"
  },
  "hash": "6fdf588f78f2f852940f2a3739e8dfdbe1a2d1138b75cb8634080626731e1e9e"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Dereference of a possibly null reference.",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Dereference of a possibly null reference",
  "detailsInfo": "",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 131,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 129,
        "length": 4,
        "offset": 111,
        "surroundingCode": "          foreach (XmlNode node in doc.SelectNodes($\"/packages/package[@id='{pkg}']\"))\n          {\n            node.Attributes[\"version\"].Value = RdVersion;\n          }\n        });"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "CSharpWarnings__CS8602"
  },
  "hash": "edb91bb87fe8b571d8193de88ea508cf4bcb477263e048ceb0501abd277254e3"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "The annotation for nullable reference types should only be used in code within a '#nullable' annotations context",
  "detailsInfo": "",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Diagnostics/InterpolatedStringHandlerTests.cs",
      "language": "C#",
      "line": 393,
      "offset": 56,
      "length": 1,
      "code": {
        "startLine": 391,
        "length": 1,
        "offset": 62,
        "surroundingCode": "    }\n\n    public override void Log(LoggingLevel level, string? message, Exception? exception = null)\n    {\n      if (!IsEnabled(level))"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "CSharpWarnings__CS8632"
  },
  "hash": "12e89cc00571049ff41e57909fdc606ee29db9fc58862c770ed5348d3e835d52"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "The annotation for nullable reference types should only be used in code within a '#nullable' annotations context",
  "detailsInfo": "",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Diagnostics/InterpolatedStringHandlerTests.cs",
      "language": "C#",
      "line": 393,
      "offset": 76,
      "length": 1,
      "code": {
        "startLine": 391,
        "length": 1,
        "offset": 82,
        "surroundingCode": "    }\n\n    public override void Log(LoggingLevel level, string? message, Exception? exception = null)\n    {\n      if (!IsEnabled(level))"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "CSharpWarnings__CS8632"
  },
  "hash": "141dbf338f4198fe6880989eaab9c3a69d0838d0c7244aefa0eb328d7673dc4c"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "The annotation for nullable reference types should only be used in code within a '#nullable' annotations context",
  "detailsInfo": "",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Diagnostics/InterpolatedStringHandlerTests.cs",
      "language": "C#",
      "line": 400,
      "offset": 64,
      "length": 1,
      "code": {
        "startLine": 398,
        "length": 1,
        "offset": 70,
        "surroundingCode": "    }\n\n    protected override string Format(LoggingLevel level, string? message, Exception? exception)\n    {\n      if (exception != null)"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "CSharpWarnings__CS8632"
  },
  "hash": "a491cabe050f219ad29ac32367db58a93679200b46812546737784a0f05a7945"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "The annotation for nullable reference types should only be used in code within a '#nullable' annotations context",
  "detailsInfo": "",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Diagnostics/InterpolatedStringHandlerTests.cs",
      "language": "C#",
      "line": 400,
      "offset": 84,
      "length": 1,
      "code": {
        "startLine": 398,
        "length": 1,
        "offset": 90,
        "surroundingCode": "    }\n\n    protected override string Format(LoggingLevel level, string? message, Exception? exception)\n    {\n      if (exception != null)"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "CSharpWarnings__CS8632"
  },
  "hash": "c6acf51095207114ce2ba56ef373201f2fb4c13827adcb305f64026593586f24"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Namespace does not correspond to file location",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Namespace does not correspond to file location, must be: 'Test.RdFramework.Reflection.CornerCase'",
  "detailsInfo": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/CornerCase/NoBaseType.cs",
      "language": "C#",
      "line": 3,
      "offset": 11,
      "length": 27,
      "code": {
        "startLine": 1,
        "length": 27,
        "offset": 42,
        "surroundingCode": "using JetBrains.Rd.Reflection;\n\nnamespace Test.RdFramework.Reflection\n{\n  [RdExt]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "CheckNamespace"
  },
  "hash": "124a1e530d1faab2798fa524680d001aa47b552f07a73534dbe8d89b0b68a512"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Namespace does not correspond to file location",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Namespace does not correspond to file location, must be: 'Test.RdFramework.Reflection.Example'",
  "detailsInfo": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/Example/CustomReactive.cs",
      "language": "C#",
      "line": 6,
      "offset": 11,
      "length": 27,
      "code": {
        "startLine": 4,
        "length": 27,
        "offset": 42,
        "surroundingCode": "using JetBrains.Serialization;\n\nnamespace Test.RdFramework.Reflection\n{\n  public sealed class CustomReactive<T1, T2> : RdReactiveBase"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "CheckNamespace"
  },
  "hash": "128ddeef76e9ae886dfba643807f3a2d963658b2c0dab303aad9cb800341ee93"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Namespace does not correspond to file location",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Namespace does not correspond to file location, must be: 'Scripts'",
  "detailsInfo": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 13,
      "offset": 11,
      "length": 20,
      "code": {
        "startLine": 11,
        "length": 20,
        "offset": 29,
        "surroundingCode": "using System.Xml;\n\nnamespace JetBrains.Rd.Scripts\n{\n  internal class Program"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "CheckNamespace"
  },
  "hash": "15ed64b6eb6015a0497944eff966fce7af5d651aa4f33ad6afe245268f2ac67d"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Namespace does not correspond to file location",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Namespace does not correspond to file location, must be: 'JetBrains.Util'",
  "detailsInfo": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 4,
      "offset": 11,
      "length": 23,
      "code": {
        "startLine": 2,
        "length": 23,
        "offset": 35,
        "surroundingCode": "using System.Threading;\n\nnamespace JetBrains.Util.Internal\n{\n  public class Memory"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "CheckNamespace"
  },
  "hash": "1849d4b0b0f22f767e5910cac3505b01735400432817a816a77c3dcf117f9004"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Namespace does not correspond to file location",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Namespace does not correspond to file location, must be: 'JetBrains.Annotations'",
  "detailsInfo": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/NullableAttributes.cs",
      "language": "C#",
      "line": 7,
      "offset": 11,
      "length": 31,
      "code": {
        "startLine": 5,
        "length": 31,
        "offset": 75,
        "surroundingCode": "// and updated to have the scope of the attributes be internal.\n\nnamespace System.Diagnostics.CodeAnalysis\n{\n#if !NETCOREAPP"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "CheckNamespace"
  },
  "hash": "25c608c83fa7d7c587ae33ff64e2ec6b29e4558e2bd5f5ea709c4dec220ecead"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Namespace does not correspond to file location",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Namespace does not correspond to file location, must be: 'Test.RdFramework.Reflection.CornerCase'",
  "detailsInfo": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/CornerCase/NotRdModelData.cs",
      "language": "C#",
      "line": 1,
      "offset": 11,
      "length": 27,
      "code": {
        "startLine": 1,
        "length": 27,
        "offset": 10,
        "surroundingCode": "namespace Test.RdFramework.Reflection\n{\n  public class NotRdModelData { }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "CheckNamespace"
  },
  "hash": "3696a82a05decc286f5c5e87d047723efd53fb2e7e5b514ab5e0be5f51a3c6c7"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Namespace does not correspond to file location",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Namespace does not correspond to file location, must be: 'Test.RdFramework.Reflection.Example'",
  "detailsInfo": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/Example/Animals.cs",
      "language": "C#",
      "line": 6,
      "offset": 11,
      "length": 27,
      "code": {
        "startLine": 4,
        "length": 27,
        "offset": 42,
        "surroundingCode": "using JetBrains.Rd.Reflection;\n\nnamespace Test.RdFramework.Reflection\n{\n  [RdModel]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "CheckNamespace"
  },
  "hash": "43fefeece237c2dddd27f7bf3a359aedf6ae4bc270796a387051bfa3bf05e160"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Namespace does not correspond to file location",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Namespace does not correspond to file location, must be: 'JetBrains.Util'",
  "detailsInfo": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Types.cs",
      "language": "C#",
      "line": 8,
      "offset": 11,
      "length": 19,
      "code": {
        "startLine": 6,
        "length": 19,
        "offset": 40,
        "surroundingCode": "using JetBrains.Annotations;\n\nnamespace JetBrains.Util.Util\n{\n  /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "CheckNamespace"
  },
  "hash": "4bea423b956eadc3b223052dfa1ee530aaa588f19182f50800c3b962bf011bec"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Namespace does not correspond to file location",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Namespace does not correspond to file location, must be: 'Test.RdFramework.Reflection.CornerCase'",
  "detailsInfo": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/CornerCase/CircularDependencyInModelError.cs",
      "language": "C#",
      "line": 4,
      "offset": 11,
      "length": 27,
      "code": {
        "startLine": 2,
        "length": 27,
        "offset": 42,
        "surroundingCode": "using JetBrains.Rd.Reflection;\n\nnamespace Test.RdFramework.Reflection\n{\n  [RdExt]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "CheckNamespace"
  },
  "hash": "5522d6c9eb0ff424871af495e9dbfb762d1aecf3e54a28bba4fe060ff4a86d1d"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Namespace does not correspond to file location",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Namespace does not correspond to file location, must be: 'JetBrains.Collections'",
  "detailsInfo": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/DictionaryEx.cs",
      "language": "C#",
      "line": 9,
      "offset": 11,
      "length": 17,
      "code": {
        "startLine": 7,
        "length": 17,
        "offset": 38,
        "surroundingCode": "using JetBrains.Lifetimes;\n\nnamespace JetBrains.Rd.Util\n{\n  static class DictionaryEx"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "CheckNamespace"
  },
  "hash": "5769202af2345dd558a8817943f42a9229b4c0a6faafca4402500a6abaa41a17"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Namespace does not correspond to file location",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Namespace does not correspond to file location, must be: 'JetBrains.Annotations'",
  "detailsInfo": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/InterpolatedStringHandlerArgumentAttribute.cs",
      "language": "C#",
      "line": 7,
      "offset": 11,
      "length": 31,
      "code": {
        "startLine": 5,
        "length": 31,
        "offset": 75,
        "surroundingCode": "// and updated to have the scope of the attributes be internal.\n\nnamespace System.Runtime.CompilerServices\n{\n  /// <summary>Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.</summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "CheckNamespace"
  },
  "hash": "76931587e58f4b5f8588781099cbbf2bd15136422cf8335f74906ca6bf889465"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Namespace does not correspond to file location",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Namespace does not correspond to file location, must be: 'Test.RdFramework.Reflection.Example'",
  "detailsInfo": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/Example/ModelCalls.cs",
      "language": "C#",
      "line": 5,
      "offset": 11,
      "length": 27,
      "code": {
        "startLine": 3,
        "length": 27,
        "offset": 37,
        "surroundingCode": "using JetBrains.Rd.Tasks;\n\nnamespace Test.RdFramework.Reflection\n{\n  [RdExt]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "CheckNamespace"
  },
  "hash": "7dc641db72a15f0d937ccd89b7310afb67e6beb83c623282a611dbc7bf2c4760"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Namespace does not correspond to file location",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Namespace does not correspond to file location, must be: 'JetBrains.Util'",
  "detailsInfo": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/BitSlice.cs",
      "language": "C#",
      "line": 9,
      "offset": 11,
      "length": 19,
      "code": {
        "startLine": 7,
        "length": 19,
        "offset": 40,
        "surroundingCode": "using JetBrains.Diagnostics;\n\nnamespace JetBrains.Util.Util\n{\n  public class BitSlice"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "CheckNamespace"
  },
  "hash": "84b40ad8a96d6380e709d522fd4d7f1bfa47882b283b5becec2c052415b61519"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Namespace does not correspond to file location",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Namespace does not correspond to file location, must be: 'Test.RdFramework.Reflection.CornerCase'",
  "detailsInfo": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/CornerCase/EmptyOK.cs",
      "language": "C#",
      "line": 3,
      "offset": 11,
      "length": 27,
      "code": {
        "startLine": 1,
        "length": 27,
        "offset": 42,
        "surroundingCode": "using JetBrains.Rd.Reflection;\n\nnamespace Test.RdFramework.Reflection\n{\n  [RdModel]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "CheckNamespace"
  },
  "hash": "88e3201cf2bb958dad7dcd55b3d76acec1b1a7ae550405f250b383eb24c10c2c"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Namespace does not correspond to file location",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Namespace does not correspond to file location, must be: 'Test.RdFramework.Reflection.Example'",
  "detailsInfo": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/Example/RootModel.cs",
      "language": "C#",
      "line": 5,
      "offset": 11,
      "length": 27,
      "code": {
        "startLine": 3,
        "length": 27,
        "offset": 42,
        "surroundingCode": "using JetBrains.Rd.Reflection;\n\nnamespace Test.RdFramework.Reflection\n{\n  [RdExt]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "CheckNamespace"
  },
  "hash": "8d3ad2edd1c6a6452ddcd82d3846043dc9933194eec55728d0d3235a4ed98d39"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Namespace does not correspond to file location",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Namespace does not correspond to file location, must be: 'Test.Reflection.App.Common'",
  "detailsInfo": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Reflection.App/Common/Util.cs",
      "language": "C#",
      "line": 4,
      "offset": 11,
      "length": 17,
      "code": {
        "startLine": 2,
        "length": 17,
        "offset": 37,
        "surroundingCode": "using System.Diagnostics;\n\nnamespace SampleGame.Common\n{\n  internal static class Util"
      }
    }
  ],
  "attributes": {
    "module": "Test.Reflection.App",
    "inspectionName": "CheckNamespace"
  },
  "hash": "90359354c9f259d56feab6ae29f79bd7d3e5cf5eb11780e1a03f711e6f6319fe"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Namespace does not correspond to file location",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Namespace does not correspond to file location, must be: 'Test.RdFramework.Reflection.Example'",
  "detailsInfo": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/Example/PropertiesNotNullOk.cs",
      "language": "C#",
      "line": 4,
      "offset": 11,
      "length": 27,
      "code": {
        "startLine": 2,
        "length": 27,
        "offset": 42,
        "surroundingCode": "using JetBrains.Rd.Reflection;\n\nnamespace Test.RdFramework.Reflection\n{\n  [RdScalar] // not required"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "CheckNamespace"
  },
  "hash": "92fbc96edd98ccf3f41c8427bb263b4fd84418f7d0e97b7853bf7c534f96d6a6"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Namespace does not correspond to file location",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Namespace does not correspond to file location, must be: 'Test.RdFramework.Reflection.Example'",
  "detailsInfo": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/Example/ModelSample.cs",
      "language": "C#",
      "line": 6,
      "offset": 11,
      "length": 27,
      "code": {
        "startLine": 4,
        "length": 27,
        "offset": 42,
        "surroundingCode": "using JetBrains.Rd.Reflection;\n\nnamespace Test.RdFramework.Reflection\n{\n  [RdModel]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "CheckNamespace"
  },
  "hash": "9dc878556e1bacbdcea693a05120d74a0108c678e8c2d9250acf0c91613343e0"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Namespace does not correspond to file location",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Namespace does not correspond to file location, must be: 'JetBrains.Util'",
  "detailsInfo": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Statics.cs",
      "language": "C#",
      "line": 7,
      "offset": 11,
      "length": 19,
      "code": {
        "startLine": 5,
        "length": 19,
        "offset": 40,
        "surroundingCode": "using JetBrains.Diagnostics;\n\nnamespace JetBrains.Util.Util\n{\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "CheckNamespace"
  },
  "hash": "b5ab8412bd53069ccaa46fe976ac7c1f09438c8c8323ec398e1bc396c5470abf"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Namespace does not correspond to file location",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Namespace does not correspond to file location, must be: 'Scripts'",
  "detailsInfo": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/LineEndingUtil.cs",
      "language": "C#",
      "line": 4,
      "offset": 11,
      "length": 20,
      "code": {
        "startLine": 2,
        "length": 20,
        "offset": 28,
        "surroundingCode": "using System.IO;\n\nnamespace JetBrains.Rd.Scripts\n{\n    public static class LineEndingUtil"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "CheckNamespace"
  },
  "hash": "b751b141b39a8a3510dce08d0a65e65017b718d08efefcd6fbc1176d414f010b"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Namespace does not correspond to file location",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Namespace does not correspond to file location, must be: 'JetBrains.Collections'",
  "detailsInfo": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/EmptyArray.cs",
      "language": "C#",
      "line": 4,
      "offset": 11,
      "length": 14,
      "code": {
        "startLine": 2,
        "length": 14,
        "offset": 40,
        "surroundingCode": "using JetBrains.Annotations;\n\nnamespace JetBrains.Util\n{\n  /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "CheckNamespace"
  },
  "hash": "b90990af4991b8b80e1c34a8a4db079181fc52a1cc5b09996409c26ceae1afd7"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Namespace does not correspond to file location",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Namespace does not correspond to file location, must be: 'JetBrains.Util'",
  "detailsInfo": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/CastTo.cs",
      "language": "C#",
      "line": 5,
      "offset": 11,
      "length": 19,
      "code": {
        "startLine": 3,
        "length": 19,
        "offset": 40,
        "surroundingCode": "using JetBrains.Annotations;\n\nnamespace JetBrains.Util.Util\n{\n  #if !NET35"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "CheckNamespace"
  },
  "hash": "ca84169688c5d6e286d40f71397447869e0a6a7ca0f422f4c181bd42a3f66690"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Namespace does not correspond to file location",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Namespace does not correspond to file location, must be: 'JetBrains.Annotations'",
  "detailsInfo": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/InterpolatedStringHandlerAttribute.cs",
      "language": "C#",
      "line": 6,
      "offset": 11,
      "length": 31,
      "code": {
        "startLine": 4,
        "length": 31,
        "offset": 289,
        "surroundingCode": "// This was copied from https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/InterpolatedStringHandlerAttribute.cs\n// and updated to have the scope of the attributes be internal.\nnamespace System.Runtime.CompilerServices\n{\n  /// <summary>Indicates the attributed type is to be used as an interpolated string handler.</summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "CheckNamespace"
  },
  "hash": "e06319d25f7aad43519db5dcb311794e708a5e3668cc74be6798b06a1fb43383"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Namespace does not correspond to file location",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Namespace does not correspond to file location, must be: 'Test.RdFramework.Reflection.CornerCase'",
  "detailsInfo": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/CornerCase/CantHavePrivateFieldError.cs",
      "language": "C#",
      "line": 5,
      "offset": 11,
      "length": 27,
      "code": {
        "startLine": 3,
        "length": 27,
        "offset": 40,
        "surroundingCode": "#pragma warning disable 0169\n\nnamespace Test.RdFramework.Reflection\n{\n  [RdModel]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "CheckNamespace"
  },
  "hash": "e4347125f5e7f02a8c65061c4bf01e6d9f0799a0c89251859282d56481fa6a8a"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Namespace does not correspond to file location",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Namespace does not correspond to file location, must be: 'Test.RdFramework.Reflection.Example'",
  "detailsInfo": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/Example/FieldsNullableOk.cs",
      "language": "C#",
      "line": 4,
      "offset": 11,
      "length": 27,
      "code": {
        "startLine": 2,
        "length": 27,
        "offset": 42,
        "surroundingCode": "using JetBrains.Rd.Reflection;\n\nnamespace Test.RdFramework.Reflection\n{\n  [RdScalar] // Not required"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "CheckNamespace"
  },
  "hash": "ec00e55eae77ce265a3b3d7a0a50ff76493446a9592f878e0f9c7b0525dbc405"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Class is never instantiated (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Class 'CustomProperty' is never instantiated",
  "detailsInfo": "Non-static class is never instantiated [Learn more...](https://www.jetbrains.com/help/rider/ClassNeverInstantiated.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorCustomSignalTest.cs",
      "language": "C#",
      "line": 46,
      "offset": 25,
      "length": 14,
      "code": {
        "startLine": 44,
        "length": 14,
        "offset": 31,
        "surroundingCode": "    }\n\n    public sealed class CustomProperty<T> : ISignal<T>, IRdBindable\n    {\n      private readonly string myId;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ClassNeverInstantiated.Global"
  },
  "hash": "15aaabc8fa6cda4e68d0028a28a5d8667cefbf3086c3c3108201e0b40f190696"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Class is never instantiated (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Class 'Signal' is never instantiated",
  "detailsInfo": "Non-static class is never instantiated [Learn more...](https://www.jetbrains.com/help/rider/ClassNeverInstantiated.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/Signal.cs",
      "language": "C#",
      "line": 9,
      "offset": 18,
      "length": 6,
      "code": {
        "startLine": 7,
        "length": 6,
        "offset": 60,
        "surroundingCode": "namespace JetBrains.Collections.Viewable\n{\n    public class Signal\n    {\n        [ThreadStatic] private static int ourPriorityCookie;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ClassNeverInstantiated.Global"
  },
  "hash": "6506130ace39d75ff7d172e9526de3055ea805ad0be33f2cd57553c0bec89eda"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Class is never instantiated (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Class 'RdModelAttribute' is never instantiated",
  "detailsInfo": "Non-static class is never instantiated [Learn more...](https://www.jetbrains.com/help/rider/ClassNeverInstantiated.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 52,
      "offset": 16,
      "length": 16,
      "code": {
        "startLine": 50,
        "length": 16,
        "offset": 156,
        "surroundingCode": "  [AttributeUsage(AttributeTargets.Class | AttributeTargets.Enum, Inherited = false)]\n  [BaseTypeRequired(typeof(RdReflectionBindableBase))]\n  public class RdModelAttribute : Attribute { }\n\n  /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ClassNeverInstantiated.Global"
  },
  "hash": "ac158424d8d58d8a90c396ceca29541a59f7367a3325bb5fb1159ef3c3585781"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Class is never instantiated (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Class 'Memory' is never instantiated",
  "detailsInfo": "Non-static class is never instantiated [Learn more...](https://www.jetbrains.com/help/rider/ClassNeverInstantiated.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 6,
      "offset": 16,
      "length": 6,
      "code": {
        "startLine": 4,
        "length": 6,
        "offset": 51,
        "surroundingCode": "namespace JetBrains.Util.Internal\n{\n  public class Memory\n  {\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ClassNeverInstantiated.Global"
  },
  "hash": "b1378e9df49a41e3638aaa7ad42fb68bb5f238f8d95799b3ab0282d0c2c0d419"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Class is never instantiated (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Class 'RdScalarAttribute' is never instantiated",
  "detailsInfo": "Non-static class is never instantiated [Learn more...](https://www.jetbrains.com/help/rider/ClassNeverInstantiated.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 59,
      "offset": 16,
      "length": 17,
      "code": {
        "startLine": 57,
        "length": 17,
        "offset": 213,
        "surroundingCode": "  [MeansImplicitUse(ImplicitUseTargetFlags.WithMembers)]\n  [AttributeUsage(AttributeTargets.Class | AttributeTargets.Enum | AttributeTargets.Struct | AttributeTargets.Interface, Inherited = false)]\n  public class RdScalarAttribute : Attribute\n  {\n    public Type? Marshaller { get; }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ClassNeverInstantiated.Global"
  },
  "hash": "ef9ab019dbf625069b5d6dc9bcc3bf9efa78212d5dddf0dd92f56abe29b216dd"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Class is never instantiated (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Class 'Scalar2' is never instantiated",
  "detailsInfo": "Non-static class is never instantiated [Learn more...](https://www.jetbrains.com/help/rider/ClassNeverInstantiated.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 410,
      "offset": 18,
      "length": 7,
      "code": {
        "startLine": 408,
        "length": 7,
        "offset": 24,
        "surroundingCode": "    }\n\n    public class Scalar2\n    {\n      public Scalar2(long value, int only)"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ClassNeverInstantiated.Global"
  },
  "hash": "f267219bc46ed1fc38e30408f3f6e2bbed2c8ab9f283eeb9623333ff40e0ab98"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Class is never instantiated (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Class 'Log' is never instantiated",
  "detailsInfo": "Non-static class is never instantiated [Learn more...](https://www.jetbrains.com/help/rider/ClassNeverInstantiated.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Log.cs",
      "language": "C#",
      "line": 22,
      "offset": 16,
      "length": 3,
      "code": {
        "startLine": 20,
        "length": 3,
        "offset": 169,
        "surroundingCode": "  /// by implementing <see cref=\"ILog\"/> and <see cref=\"ILogFactory\"/> and setting them as default by <see cref=\"set_DefaultFactory\"/>. \n  /// </summary>\n  public class Log\n  {\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ClassNeverInstantiated.Global"
  },
  "hash": "f6564adf25faf04041152a947600845b1787128874c800d16773fb4ab1665773"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Class with virtual (overridable) members never inherited (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Class 'RdReflectionBindableBase' has some virtual members but no inheritors",
  "detailsInfo": "Non-abstract class has virtual (overridable) members but has no inheritors",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/RdReflectionBindableBase.cs",
      "language": "C#",
      "line": 8,
      "offset": 16,
      "length": 24,
      "code": {
        "startLine": 6,
        "length": 24,
        "offset": 51,
        "surroundingCode": "namespace JetBrains.Rd.Reflection\n{\n  public class RdReflectionBindableBase : RdBindableBase, IReflectionBindable\n  {\n    List<KeyValuePair<string, object>> IReflectionBindable.BindableChildren => BindableChildren;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ClassWithVirtualMembersNeverInherited.Global"
  },
  "hash": "6bc9ab802b50cfd5077a7740bdde7ab2cc7de60a921204ab71c2ae113c479de0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Class with virtual (overridable) members never inherited (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Class 'ViewableProperty' has some virtual members but no inheritors",
  "detailsInfo": "Non-abstract class has virtual (overridable) members but has no inheritors",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ViewableProperty.cs",
      "language": "C#",
      "line": 13,
      "offset": 16,
      "length": 16,
      "code": {
        "startLine": 11,
        "length": 16,
        "offset": 71,
        "surroundingCode": "  /// </summary>\n  /// <typeparam name=\"T\"></typeparam>\n  public class ViewableProperty<T> : IViewableProperty<T>\n  {\n    private readonly Signal<T> myChange = new Signal<T>();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ClassWithVirtualMembersNeverInherited.Global"
  },
  "hash": "795abccd6e0a5b684743a61dc4f3d029e65067fed8c6bb28ab125ec90ebc5fbc"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Class with virtual (overridable) members never inherited (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Class 'RdExtReflectionBindableBase' has some virtual members but no inheritors",
  "detailsInfo": "Non-abstract class has virtual (overridable) members but has no inheritors",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/RdExtReflectionBindableBase.cs",
      "language": "C#",
      "line": 9,
      "offset": 16,
      "length": 27,
      "code": {
        "startLine": 7,
        "length": 27,
        "offset": 51,
        "surroundingCode": "namespace JetBrains.Rd.Reflection\n{\n  public class RdExtReflectionBindableBase : RdExtBase, IReflectionBindable\n  {\n    List<KeyValuePair<string, object>> IReflectionBindable.BindableChildren => BindableChildren;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ClassWithVirtualMembersNeverInherited.Global"
  },
  "hash": "8d0585af175d856046770c0678a640e7d598ef59383eba0b256b1148536b99a1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Class with virtual (overridable) members never inherited (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Class 'RdSimpleDispatcher' has some virtual members but no inheritors",
  "detailsInfo": "Non-abstract class has virtual (overridable) members but has no inheritors",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSimpleDispatcher.cs",
      "language": "C#",
      "line": 10,
      "offset": 16,
      "length": 18,
      "code": {
        "startLine": 8,
        "length": 18,
        "offset": 45,
        "surroundingCode": "namespace JetBrains.Rd.Impl\n{\n  public class RdSimpleDispatcher : IScheduler\n  {\n    private readonly Lifetime myLifetime;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ClassWithVirtualMembersNeverInherited.Global"
  },
  "hash": "ed3f37a565e8dd1edb374991255d7ca7c703f9fe988012dac182a160ad801948"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Collection is never updated (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Content of collection 'q' is never updated",
  "detailsInfo": "New elements are never added to the collection [Learn more...](https://www.jetbrains.com/help/rider/CollectionNeverUpdated.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/PriorityQueueTest.cs",
      "language": "C#",
      "line": 17,
      "offset": 11,
      "length": 1,
      "code": {
        "startLine": 15,
        "length": 1,
        "offset": 51,
        "surroundingCode": "    public void TestEnumerator01()\n    {\n      var q = new JetPriorityQueue<int>();\n      Assert.IsTrue(EmptyArray<int>.Instance.SequenceEqual(q), \"EmptyArray<int>.Instance.SequenceEqual(q)\");\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "CollectionNeverUpdated.Local"
  },
  "hash": "4e9bffb92be5801cbb71a3db5cc6a2379e63f64552515f1664e59b9b668e88ef"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Expression is always 'true' or always 'false'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Expression is always true",
  "detailsInfo": "Value of a boolean expression is always the same at this point [Learn more...](https://www.jetbrains.com/help/rider/ConditionIsAlwaysTrueOrFalse.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdPerContextMapTest.cs",
      "language": "C#",
      "line": 71,
      "offset": 69,
      "length": 11,
      "code": {
        "startLine": 69,
        "length": 11,
        "offset": 138,
        "surroundingCode": "      BindToServer(LifetimeDefinition.Lifetime, serverMap, 1);\n      \n      Assert.True(clientMap.TryGetValue(server1Cid, out var map) && map != null);\n      Assert.AreEqual(\"test\", clientMap[server1Cid][1]);\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConditionIsAlwaysTrueOrFalse"
  },
  "hash": "219dc59809c6197ee62b2ff75e41fe2e13ab2715b8a47507edb483e223dd8ad1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Expression is always 'true' or always 'false'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Expression is always true",
  "detailsInfo": "Value of a boolean expression is always the same at this point [Learn more...](https://www.jetbrains.com/help/rider/ConditionIsAlwaysTrueOrFalse.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdPerContextMapTest.cs",
      "language": "C#",
      "line": 39,
      "offset": 69,
      "length": 11,
      "code": {
        "startLine": 37,
        "length": 11,
        "offset": 116,
        "surroundingCode": "      serverMap[server1Cid][1] = \"test\";\n      \n      Assert.True(clientMap.TryGetValue(server1Cid, out var map) && map != null);\n      Assert.AreEqual(\"test\", clientMap[server1Cid][1]);\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConditionIsAlwaysTrueOrFalse"
  },
  "hash": "2969fce10c87a9f40815964de42a2c85d21dd81ee65e0815ba388e9c7ca0bf6f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Expression is always 'true' or always 'false'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Expression is always true",
  "detailsInfo": "Value of a boolean expression is always the same at this point [Learn more...](https://www.jetbrains.com/help/rider/ConditionIsAlwaysTrueOrFalse.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdPerContextMapTest.cs",
      "language": "C#",
      "line": 44,
      "offset": 70,
      "length": 12,
      "code": {
        "startLine": 42,
        "length": 12,
        "offset": 140,
        "surroundingCode": "      ClientProtocol.Contexts.GetValueSet(key).Add(client1Cid);\n      \n      Assert.True(serverMap.TryGetValue(client1Cid, out var map1) && map1 != null);\n      Assert.False(serverMap[client1Cid].ContainsKey(1));\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConditionIsAlwaysTrueOrFalse"
  },
  "hash": "9bf04ac69c0dcc30b2f77eee290802f140a2d6c550082d76c6fcaf573c509083"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Expression is always 'true' or always 'false'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Expression is always true",
  "detailsInfo": "Value of a boolean expression is always the same at this point [Learn more...](https://www.jetbrains.com/help/rider/ConditionIsAlwaysTrueOrFalse.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdPerContextMapTest.cs",
      "language": "C#",
      "line": 74,
      "offset": 70,
      "length": 12,
      "code": {
        "startLine": 72,
        "length": 12,
        "offset": 127,
        "surroundingCode": "      Assert.AreEqual(\"test\", clientMap[server1Cid][1]);\n\n      Assert.True(serverMap.TryGetValue(client1Cid, out var map1) && map1 != null);\n      Assert.False(serverMap[client1Cid].ContainsKey(1));\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConditionIsAlwaysTrueOrFalse"
  },
  "hash": "bc2388112437eece3ff532cb5b9152107863717256e5f85d27cd3075646d11bc"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Expression is always 'true' or 'false' according to nullable reference types' annotations",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Expression is always false according to nullable reference types' annotations",
  "detailsInfo": "Expression is always 'true' or 'false' according to nullable reference types' annotations [Learn more...](https://www.jetbrains.com/help/rider/ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/WireEx.cs",
      "language": "C#",
      "line": 25,
      "offset": 10,
      "length": 22,
      "code": {
        "startLine": 23,
        "length": 22,
        "offset": 57,
        "surroundingCode": "    {\n      var contextHandler = wire.Contexts;\n      if(contextHandler == null)\n        ProtocolContexts.WriteEmptyContexts(writer);\n      else"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract"
  },
  "hash": "0743a71e17ae94aa334554b84e3f65cfc979a96db00e719700a1e172b7bf5efd"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Expression is always 'true' or 'false' according to nullable reference types' annotations",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Expression is always false according to nullable reference types' annotations",
  "detailsInfo": "Expression is always 'true' or 'false' according to nullable reference types' annotations [Learn more...](https://www.jetbrains.com/help/rider/ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 687,
      "offset": 11,
      "length": 13,
      "code": {
        "startLine": 685,
        "length": 13,
        "offset": 174,
        "surroundingCode": "    public void Write<TK, TV, TDict>(WriteDelegate<TK> writeKeyDelegate, WriteDelegate<TV> writeValueDelegate, TDict value) where TDict : IDictionary<TK, TV>\n    {\n      if (value == null) Write(-1);\n      else\n      {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract"
  },
  "hash": "4795d2ff3fc483ce760cf817a864f627304f059354e66286ead7719335ad4e68"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Expression is always 'true' or 'false' according to nullable reference types' annotations",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Expression is always false according to nullable reference types' annotations",
  "detailsInfo": "Expression is always 'true' or 'false' according to nullable reference types' annotations [Learn more...](https://www.jetbrains.com/help/rider/ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SerializersEx.cs",
      "language": "C#",
      "line": 43,
      "offset": 11,
      "length": 13,
      "code": {
        "startLine": 41,
        "length": 13,
        "offset": 160,
        "surroundingCode": "    public static void WriteEnumerable<T>(this UnsafeWriter writer, CtxWriteDelegate<T> itemWriter, SerializationCtx ctx, IEnumerable<T> value)\n    {\n      if (value == null)\n      {\n        writer.Write(-1);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract"
  },
  "hash": "5d26e3222f723ebb5245983ae915720d68cf2b404b282fefbf92b5f8dbe0fc44"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Expression is always 'true' or 'false' according to nullable reference types' annotations",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Expression is always false according to nullable reference types' annotations",
  "detailsInfo": "Expression is always 'true' or 'false' according to nullable reference types' annotations [Learn more...](https://www.jetbrains.com/help/rider/ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimedList.cs",
      "language": "C#",
      "line": 216,
      "offset": 11,
      "length": 13,
      "code": {
        "startLine": 214,
        "length": 13,
        "offset": 145,
        "surroundingCode": "      // no need to take lock because it doesn't affect the addition of new items.\n      var items = Memory.VolatileRead(ref myItems);\n      if (items == null) return;\n      \n      var size = Math.Min(Memory.VolatileRead(ref mySize), items.Length);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract"
  },
  "hash": "f252d1b8ea2de5e88b606ce5734984ce9dfaed0413a0e72500cc836b6a837c2f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Conditional access qualifier expression is not null according to nullable reference types' annotations",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Conditional access qualifier expression is never null according to nullable reference types' annotations",
  "detailsInfo": "Conditional access qualifier expression is not null according to nullable reference types' annotations",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGeneratorCache.cs",
      "language": "C#",
      "line": 18,
      "offset": 89,
      "length": 1,
      "code": {
        "startLine": 16,
        "length": 1,
        "offset": 182,
        "surroundingCode": "    {\n      public static IComparer<MethodInfo> Instance { get; } = new MethodNameComparer();\n      public int Compare(MethodInfo x, MethodInfo y) => StringComparer.Ordinal.Compare(x?.Name, y?.Name);\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConditionalAccessQualifierIsNonNullableAccordingToAPIContract"
  },
  "hash": "697248c866828ec00a2c20f2c6021481aa26eee452b2fb1fb625c56ec8fe8fb1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Conditional access qualifier expression is not null according to nullable reference types' annotations",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Conditional access qualifier expression is never null according to nullable reference types' annotations",
  "detailsInfo": "Conditional access qualifier expression is not null according to nullable reference types' annotations",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGeneratorCache.cs",
      "language": "C#",
      "line": 18,
      "offset": 98,
      "length": 1,
      "code": {
        "startLine": 16,
        "length": 1,
        "offset": 191,
        "surroundingCode": "    {\n      public static IComparer<MethodInfo> Instance { get; } = new MethodNameComparer();\n      public int Compare(MethodInfo x, MethodInfo y) => StringComparer.Ordinal.Compare(x?.Name, y?.Name);\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConditionalAccessQualifierIsNonNullableAccordingToAPIContract"
  },
  "hash": "918e9e8a461c453edaf2b602e8834088a3902d9448db9a1340184f4d93d4d3ee"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert constructor into member initializers",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert constructor into member initializers",
  "detailsInfo": "Replace constructor with members initialized inline",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorCornerCasesTests.cs",
      "language": "C#",
      "line": 163,
      "offset": 7,
      "length": 108,
      "code": {
        "startLine": 161,
        "length": 108,
        "offset": 72,
        "surroundingCode": "      public IViewableProperty<string> ViewableProperty { get; }\n\n      public WrongInitializedTypeTest()\n      {\n        ViewableProperty = new ViewableProperty<string>();\n      }\n    }\n    [RdRpc]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertConstructorToMemberInitializers"
  },
  "hash": "443ba84fef20da1d70a50a80ce9b5aa30f74f7aa7dbdd0f767f22e17d4f225a9"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert constructor into member initializers",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert constructor into member initializers",
  "detailsInfo": "Replace constructor with members initialized inline",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorPropertiesTest.cs",
      "language": "C#",
      "line": 39,
      "offset": 7,
      "length": 129,
      "code": {
        "startLine": 37,
        "length": 129,
        "offset": 67,
        "surroundingCode": "      public IViewableProperty<string> StrProperty { get; }\n\n      public LifeModel()\n      {\n        StrProperty = new RdProperty<string>(Serializers.ReadString, Serializers.WriteString);\n      }\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertConstructorToMemberInitializers"
  },
  "hash": "e486717e8a144f71a23855eceb5b35f1e660f8023b5ac11e6c22fe139ce3d824"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if' statement can be rewritten as '?:' expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into '?:' expression",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) x = expr1;\r\n  else x = expr2;\r\n```\n\nTo:\n\n```\n\r\n  x = condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToConditionalTernaryExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Reflection.App/Program.cs",
      "language": "C#",
      "line": 103,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 101,
        "length": 2,
        "offset": 33,
        "surroundingCode": "    {\n      IRootExt root;\n      if (isServer)\n      {\n        root = facade.ActivateProxy<IRootExt>(lifetime, protocol);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Reflection.App",
    "inspectionName": "ConvertIfStatementToConditionalTernaryExpression"
  },
  "hash": "2fe5c04b305bf5d2ac783c26f33ba471c85315d204265d5a4d81b3d416b26b1d"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if' statement can be rewritten as '?:' expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into '?:' expression",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) x = expr1;\r\n  else x = expr2;\r\n```\n\nTo:\n\n```\n\r\n  x = condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToConditionalTernaryExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 304,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 302,
        "length": 2,
        "offset": 34,
        "surroundingCode": "\n        object instance;\n        if (isScalar)\n        {\n          instance = FormatterServices.GetUninitializedObject(type);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertIfStatementToConditionalTernaryExpression"
  },
  "hash": "5eba95aec2d3500988d3ad850214d08ce05719a936fc3c50248b23d6aa53284f"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if' statement can be rewritten as '?:' expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into '?:' expression",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) x = expr1;\r\n  else x = expr2;\r\n```\n\nTo:\n\n```\n\r\n  x = condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToConditionalTernaryExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 86,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 84,
        "length": 2,
        "offset": 231,
        "surroundingCode": "#else\n      myAssemblyBuilder = new Lazy<AssemblyBuilder>(() => AppDomain.CurrentDomain.DefineDynamicAssembly(new AssemblyName(DynamicAssemblyName), allowSave ? AssemblyBuilderAccess.RunAndSave : AssemblyBuilderAccess.Run));\n      if (allowSave)\n        myModuleBuilder = new Lazy<ModuleBuilder>(() => myAssemblyBuilder.Value.DefineDynamicModule(DynamicAssemblyName, \"RdProxy.dll\"));\n      else"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertIfStatementToConditionalTernaryExpression"
  },
  "hash": "74ccd5a36688ca3b6ce53afa1338597ad67b442e127c8def38e7c4e7964432c2"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if' statement can be rewritten as '?:' expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into '?:' expression",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) x = expr1;\r\n  else x = expr2;\r\n```\n\nTo:\n\n```\n\r\n  x = condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToConditionalTernaryExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 166,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 164,
        "length": 2,
        "offset": 98,
        "surroundingCode": "      var responseType = GetResponseType(method, unwrapTask: false);\n      Type returnType;\n      if (IsSync(method))\n      {\n        returnType = typeof(RdTask<>).MakeGenericType(responseType);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertIfStatementToConditionalTernaryExpression"
  },
  "hash": "a2289f2756f75294c3b6da8963cfd7cae70c7da06109729f923481f6dba41da0"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if' statement can be rewritten as '?:' expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into '?:' expression",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) x = expr1;\r\n  else x = expr2;\r\n```\n\nTo:\n\n```\n\r\n  x = condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToConditionalTernaryExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 181,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 179,
        "length": 2,
        "offset": 77,
        "surroundingCode": "      il.Emit(OpCodes.Ldarg_0); // this/self\n      FieldInfo[] fields;\n      if (requestType == typeof(Unit))\n      {\n        fields = new FieldInfo[0];"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertIfStatementToConditionalTernaryExpression"
  },
  "hash": "a3c7901400185a61ec323aa9dba78b43d9a2ebc0ca5db6054832dbb0bbcd9794"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if' statement can be rewritten as '??=' assignment",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into '??='",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (x = null) x = expr;\r\n```\n\nTo:\n\n```\n\r\n   x ??= expr;\r\n```",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/FirstChanceExceptionInterceptor.cs",
      "language": "C#",
      "line": 45,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 43,
        "length": 2,
        "offset": 68,
        "surroundingCode": "      public ThreadLocalDebugInfo(object debugInfo)\n      {\n        if (ourThreadLocalDebugInfo == null)\n          ourThreadLocalDebugInfo = new Stack();\n        "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertIfStatementToNullCoalescingAssignment"
  },
  "hash": "183d8976c3c3dabed7619adb672e20129db13801d11764c0a19c88799e44f568"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 327,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 325,
        "length": 2,
        "offset": 109,
        "surroundingCode": "      if (ReferenceEquals(null, obj)) return false;\n      if (ReferenceEquals(this, obj)) return true;\n      if (obj.GetType() != GetType()) return false;\n      return Equals((InterningNestedTestStringModel) obj);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "0a863f09bce4e2bf4270265af329bae9843c622b7fb0b9026572956164bcd19d"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdBindableBase.cs",
      "language": "C#",
      "line": 131,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 129,
        "length": 2,
        "offset": 34,
        "surroundingCode": "        return null;\n      \n      if (rootName == rName)\n        return child;\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "1a6f7a96acc76347f7004c287b9848258e4c5d10a42660ebf14ad7890b377a10"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/SimpleTypesCatalog.cs",
      "language": "C#",
      "line": 12,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 10,
        "length": 2,
        "offset": 46,
        "surroundingCode": "    public Type? GetById(RdId id)\n    {\n      if (myRdIdToTypeMapping.TryGetValue(id, out var type))\n      {\n        return type;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "2089c8de43875291fadbea3e8a0d7a2bc9c71db173e68fb3d51315fc3de65489"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/InternRoot.cs",
      "language": "C#",
      "line": 30,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 28,
        "length": 2,
        "offset": 80,
        "surroundingCode": "    {\n      var hasValue = myInverseMap.TryGetValue(value, out var pair);\n      if (hasValue)\n        return pair.Id;\n      return InternId.Invalid;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "22051591fef21f7b29a201e0dd3b6658e7d976df367b944afdf1ef678ceaf383"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 550,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 548,
        "length": 2,
        "offset": 109,
        "surroundingCode": "      if (ReferenceEquals(null, obj)) return false;\n      if (ReferenceEquals(this, obj)) return true;\n      if (obj.GetType() != GetType()) return false;\n      return Equals((ProtocolWrappedStringModel) obj);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "45b59521469a0e3c9fded0ccf85dc7fc8e109ecdbb8aaf13b0728322e875c7d4"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/SerializationCtx.cs",
      "language": "C#",
      "line": 44,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 42,
        "length": 2,
        "offset": 45,
        "surroundingCode": "\n      var id = InternId.Read(stream);\n      if (id.IsValid)\n        return interningRoot.UnIntern<T>(id);\n      return readValueDelegate(this, stream);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "46cc2388e702cce9dfbbaa975aba4acb786c5d9c7cbae97c6112c4def3b1f4fb"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/LightSingleContextHandler.cs",
      "language": "C#",
      "line": 36,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 34,
        "length": 2,
        "offset": 52,
        "surroundingCode": "    {\n      var hasValue = reader.ReadBool();\n      if (!hasValue)\n        return default;\n      return Context.ReadDelegate(context, reader);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "490e7435eade1e96ba22b0645c5cbcfa2ec49f9ebbdcb3ab20d9c3b5f2166cb1"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 394,
      "offset": 11,
      "length": 2,
      "code": {
        "startLine": 392,
        "length": 2,
        "offset": 121,
        "surroundingCode": "          if (ReferenceEquals(null, obj)) return false;\n          if (ReferenceEquals(this, obj)) return true;\n          if (obj.GetType() != GetType()) return false;\n          return Equals((ColorFields) obj);\n        }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "646b0e9e10e9aed791ff3b883d9ce57dd60705e7ad5e63a4d99c2326ac8eb610"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/RdContext.cs",
      "language": "C#",
      "line": 45,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 43,
        "length": 2,
        "offset": 109,
        "surroundingCode": "      if (ReferenceEquals(null, obj)) return false;\n      if (ReferenceEquals(this, obj)) return true;\n      if (obj.GetType() != GetType()) return false;\n      return Equals((RdContextBase) obj);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "695d8b46d9fa79d48f5dd3c5b027b27a87b6ad521603d882f21534b0fd108b36"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 625,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 623,
        "length": 2,
        "offset": 109,
        "surroundingCode": "      if (ReferenceEquals(null, obj)) return false;\n      if (ReferenceEquals(this, obj)) return true;\n      if (obj.GetType() != GetType()) return false;\n      return Equals((WrappedStringModel) obj);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "6af75fb5cda009665f7f9508f395f64d23d005a63cde2227b79b0fbc3c85ffd4"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 243,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 241,
        "length": 2,
        "offset": 109,
        "surroundingCode": "      if (ReferenceEquals(null, obj)) return false;\n      if (ReferenceEquals(this, obj)) return true;\n      if (obj.GetType() != GetType()) return false;\n      return Equals((InterningNestedTestModel) obj);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "80d377a0f2f37c764a643221783eb3e86d849f30f7361a0c2660dd120d2517c0"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 378,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 376,
        "length": 2,
        "offset": 136,
        "surroundingCode": "      if (genericDefinition == typeof(IViewableMap<,>)) return typeof(RdMap<,>).MakeGenericType(typeInfo.GetGenericArguments());\n\n      if (genericDefinition == typeof(IRdCall<,>)) return typeof(RdCall<,>).MakeGenericType(typeInfo.GetGenericArguments());\n\n      return typeInfo.AsType();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "81e791b92d0b142d033251b6f2500f128f82062d9d7b40cc06f075c867d32b68"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdMap.cs",
      "language": "C#",
      "line": 381,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 379,
        "length": 2,
        "offset": 26,
        "surroundingCode": "          break;\n\n        if (rootName == rName)\n          return bindableValue;\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "8ca35049668dc13798f163f932ed376802e56c8297910d6709ce12991c636717"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdAssertion.cs",
      "language": "C#",
      "line": 53,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 51,
        "length": 2,
        "offset": 109,
        "surroundingCode": "      if (ReferenceEquals(null, obj)) return false;\n      if (ReferenceEquals(this, obj)) return true;\n      if (obj.GetType() != GetType()) return false;\n      return Equals((RdAssertion) obj);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "9a24c7ca4ad6f60989f5434bb2fb9f94387ea1ee4eb58f1da3875c0fd6cb845d"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/LineEndingUtil.cs",
      "language": "C#",
      "line": 22,
      "offset": 25,
      "length": 2,
      "code": {
        "startLine": 20,
        "length": 2,
        "offset": 88,
        "surroundingCode": "                    if (curChar == '\\n' )\n                    {\n                        if (prevChar == '\\r')\n                            return \"\\r\\n\";\n                        return  \"\\n\";"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "9c577fc7c7d464c6bcbd59b64b81e87dab9f9305511a7e2955e54f858727ac06"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSimpleDispatcher.cs",
      "language": "C#",
      "line": 88,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 86,
        "length": 2,
        "offset": 64,
        "surroundingCode": "    private string FormatLogMessage(string message)\n    {\n      if (myId == null) return message;\n      return $\"{myId}: {message}\";\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "9d489c1525b2fc432eccd186a9946c8f4690ff69a444c99bda451f16c9c62272"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 689,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 687,
        "length": 2,
        "offset": 89,
        "surroundingCode": "      if (lifetime1.IsEternal || lifetime1 == lifetime2)\n        return lifetime2;\n      if (lifetime2.IsEternal)\n        return lifetime1;\n      "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "9e717e3b0d86bb8bfbd2314490077cfaa12d8007f1422ed13e5601619965c479"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/HeavySingleContextHandler.cs",
      "language": "C#",
      "line": 109,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 107,
        "length": 2,
        "offset": 58,
        "surroundingCode": "      {\n        var hasValue = reader.ReadBool();\n        if (hasValue)\n          return Context.ReadDelegate(context, reader);\n        return default;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "a91b1ccfe13a8a69f9860b17fb0200c6c3b9de598eec812f215281d0f9a98d9d"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdList.cs",
      "language": "C#",
      "line": 329,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 327,
        "length": 2,
        "offset": 28,
        "surroundingCode": "        return null;\n\n      if (rootName == rName)\n        return element;\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "b39d76feb44057004ca96094addd9fcb3e5c26ed7b37fe07c63812b7e27e23a5"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Core/TestResult.cs",
      "language": "C#",
      "line": 72,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 70,
        "length": 2,
        "offset": 73,
        "surroundingCode": "      Result<TestResultInnerClass> CalcFoo(bool success)\n      {\n        if (success)\n          return Result.Success(new TestResultInnerClass {Number = 1});\n        return Result.Fail(\"Fail\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "b84322ff36c1edfcb6b835cf68b1a0e4cc904e71482de65de83a68854092bed3"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 631,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 629,
        "length": 2,
        "offset": 66,
        "surroundingCode": "    {\n      if (ReferenceEquals(null, other)) return false;\n      if (ReferenceEquals(this, other)) return true;\n      return Equals(Text, other.Text);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "bca482862b05c35a4929a445556db16b0c07a5d69a38a40b6e76624e51d999aa"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 323,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 321,
        "length": 2,
        "offset": 15,
        "surroundingCode": "      }\n\n      if (list.Count == 0)\n        return new[] {typeof(Unit)};\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "cd4fb5a57758fd39b1534f66db4cfff2c662ffb716380cfafdb18c4a8e834942"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdProperty.cs",
      "language": "C#",
      "line": 215,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 213,
        "length": 2,
        "offset": 28,
        "surroundingCode": "        return null;\n\n      if (rootName == rName)\n        return value;\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "ce7785f65c6a4e4128d261465733668341f1e8e87253ebacfe366aab07d4e129"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Maybe.cs",
      "language": "C#",
      "line": 53,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 51,
        "length": 2,
        "offset": 56,
        "surroundingCode": "    public override bool Equals(object obj)\n    {\n      if (!(obj is Maybe<T>)) return false;\n      return Equals((Maybe<T>)obj);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "d1d5560e97e9733df496defd24df336bef0fc70a4dee4a18279082c6f316c1e5"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SerializersEx.cs",
      "language": "C#",
      "line": 119,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 117,
        "length": 2,
        "offset": 49,
        "surroundingCode": "    {\n      var str = reader.ReadString();\n      if (str == null) return default;\n      return new RdSecureString(str);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "d7b5b636e6c21e5e8bc78711e758bc5f4658bc73271f0072b28829d50028dd1f"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 131,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 129,
        "length": 2,
        "offset": 28,
        "surroundingCode": "        return true;\n\n      if (returnTypeInfo.IsValueType)\n        return false;\n/*"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "db1575f4d9e78835dfb4ef06a53170cc91cd55d2accd5044db17884be271d8d8"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 201,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 199,
        "length": 2,
        "offset": 87,
        "surroundingCode": "\n      var hasRdModel = typeInfo.GetCustomAttribute<RdModelAttribute>() != null;\n      if (hasRdModel)\n        return true;\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "dfc11f2e575d8a960bf5d54a8a383bf0d83f2e119508661ec31a86c971235313"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ViewableMap.cs",
      "language": "C#",
      "line": 83,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 81,
        "length": 2,
        "offset": 62,
        "surroundingCode": "    public bool Remove(KeyValuePair<TK, TV> item)\n    {\n      if (!Contains(item)) return false;\n      return Remove(item.Key);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "ec28721d312be763fe3b8531becf2ac9742f3ca5b9366145514e44e4f9d89774"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "'if-return' statement can be rewritten as 'return' statement",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'return' statement",
  "detailsInfo": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 556,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 554,
        "length": 2,
        "offset": 66,
        "surroundingCode": "    {\n      if (ReferenceEquals(null, other)) return false;\n      if (ReferenceEquals(this, other)) return true;\n      return Equals(Text, other.Text);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertIfStatementToReturnStatement"
  },
  "hash": "ee84a1bb16ce00f1819aff8fde62a89d7a2aa6374360efe20989b35a70a6bacc"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert 'if' statement into 'switch'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert 'if' statement into 'switch' statement",
  "detailsInfo": "Convert series of 'if' statements into single 'switch'",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 309,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 307,
        "length": 2,
        "offset": 36,
        "surroundingCode": "      int len = ReadInt32();\n\n      if (len < 0) return null;\n      if (len == 0) return string.Empty;\n      "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertIfStatementToSwitchStatement"
  },
  "hash": "099e6bf86968b4e8f28d371be95aef3dd6fc240d6afe862b19221b480b7f42ef"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert 'if' statement into 'switch'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert 'if' statement into 'switch' statement",
  "detailsInfo": "Convert series of 'if' statements into single 'switch'",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/RdTextBuffer.cs",
      "language": "C#",
      "line": 263,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 261,
        "length": 2,
        "offset": 67,
        "surroundingCode": "      {\n        if (myState != State.Opened) return false;\n        if (!myBuffer.IsMaster && change.Version.Master <= myVersionBeforeOpening.Master) return false;\n        if (myBuffer.IsMaster && CompareVersions(change.Version, myVersionBeforeOpening) <= 0) return false;\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ConvertIfStatementToSwitchStatement"
  },
  "hash": "131ecec5738cd1695fed2a2715df9b38b080526d4ad6b5044dc4ec0e8b20e7cb"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert 'if' statement into 'switch'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert 'if' statement into 'switch' statement",
  "detailsInfo": "Convert series of 'if' statements into single 'switch'",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/RdTextBuffer.cs",
      "language": "C#",
      "line": 86,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 84,
        "length": 2,
        "offset": 56,
        "surroundingCode": "      var slaveVersionRemote = newVersion.Slave;\n\n      if (change.Kind == RdTextChangeKind.Reset)\n      {\n        ClearState();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ConvertIfStatementToSwitchStatement"
  },
  "hash": "3b50a5e66fc7f617b75a8e1456662f9e3efb79198456aece06ed861e5bf211ae"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert 'if' statement into 'switch'",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert 'if' statement into 'switch' statement",
  "detailsInfo": "Convert series of 'if' statements into single 'switch'",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 386,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 384,
        "length": 2,
        "offset": 41,
        "surroundingCode": "    {\n      int len = ReadInt32();\n      if (len < 0) return null;\n      if (len == 0) return EmptyArray<byte>.Instance;\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertIfStatementToSwitchStatement"
  },
  "hash": "6b4632671bd02a1eec09532c65ceaf2f616dfb7ef982427470e8187272099e74"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert 'if' statement into 'switch'",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert 'if' statement into 'switch' statement",
  "detailsInfo": "Convert series of 'if' statements into single 'switch'",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 230,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 228,
        "length": 2,
        "offset": 91,
        "surroundingCode": "        .Where(propertyInfo => propertyInfo.PropertyType == type)\n        .ToList();\n      if (members.Count > 1)\n        throw new InvalidOperationException($\"{type} has several static public properties declaring instance\");\n      if (members.Count == 0)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertIfStatementToSwitchStatement"
  },
  "hash": "740c5cdc8f613146ccee22afd49ee90b663e6a04184847a298e0e9cce2da4f4a"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert 'if' statement into 'switch'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert 'if' statement into 'switch'",
  "detailsInfo": "Convert series of 'if' statements into single 'switch'",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/RName.cs",
      "language": "C#",
      "line": 39,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 37,
        "length": 2,
        "offset": 73,
        "surroundingCode": "    public RName Sub(object localName, string separator=\".\")\n    {\n      if (localName == null) throw new ArgumentNullException(nameof(localName));\n      if (localName is string s && s.Length == 0) \n        return this; //special case for empty string"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertIfStatementToSwitchStatement"
  },
  "hash": "965d1225847121fee6d6aff7a2d51efbe3683d006eb6d04cb4ab530a8eb8e90a"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert 'if' statement into 'switch'",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert 'if' statement into 'switch' statement",
  "detailsInfo": "Convert series of 'if' statements into single 'switch'",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/CollectionSerializers.cs",
      "language": "C#",
      "line": 25,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 23,
        "length": 2,
        "offset": 99,
        "surroundingCode": "      CtxWriteDelegate<IDictionary<TKey, TValue>?> write = (ctx, writer, value) =>\n      {\n        if (value is Dictionary<TKey, TValue> val && !Equals(val.Comparer, EqualityComparer<TKey>.Default))\n          throw new Exception($\"Unable to serialize {value.GetType().ToString(true)}. Custom equality comparers are not supported\");\n        if (value == null)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertIfStatementToSwitchStatement"
  },
  "hash": "b20629a6f04b506c7fe7e43bcaaaed031dd1ae79b8f342b539a1fb004d51c5a4"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert 'if' statement into 'switch'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert 'if' statement into 'switch' statement",
  "detailsInfo": "Convert series of 'if' statements into single 'switch'",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 274,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 272,
        "length": 2,
        "offset": 36,
        "surroundingCode": "      int len = ReadInt32();\n\n      if (len < 0) return null;\n      if (len == 0) return string.Empty;      \n      "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertIfStatementToSwitchStatement"
  },
  "hash": "c0ee81e390461ce5f02281c07223f51581e09802351deac84583c659648cb4fd"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert 'if' statement into 'switch'",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert 'if' statement into 'switch' statement",
  "detailsInfo": "Convert series of 'if' statements into single 'switch'",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 427,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 425,
        "length": 2,
        "offset": 94,
        "surroundingCode": "    private static void SetOptimizeNested1<T>(object container) where T : notnull\n    {\n      if (container is RdProperty<T> property)\n      {\n        property.OptimizeNested = true;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertIfStatementToSwitchStatement"
  },
  "hash": "c34e2c7b40a140e3b6cad59f32df2fc598996127a10dcfbb6337ebdb48509011"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert 'if' statement into 'switch'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert 'if' statement into 'switch' statement",
  "detailsInfo": "Convert series of 'if' statements into single 'switch'",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/CollectionSerializers.cs",
      "language": "C#",
      "line": 52,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 50,
        "length": 2,
        "offset": 107,
        "surroundingCode": "      CtxWriteDelegate<IReadOnlyDictionary<TKey, TValue>?> write = (ctx, writer, value) =>\n      {\n        if (value is Dictionary<TKey, TValue> val && !Equals(val.Comparer, EqualityComparer<TKey>.Default))\n          throw new Exception($\"Unable to serialize {value.GetType().ToString(true)}. Custom equality comparers are not supported\");\n        if (value == null)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertIfStatementToSwitchStatement"
  },
  "hash": "c63062fdec349808fcb161d5a33fa5af469ca6572b2418f10d0290a22d47fc80"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert 'if' statement into 'switch'",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert 'if' statement into 'switch' statement",
  "detailsInfo": "Convert series of 'if' statements into single 'switch'",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 358,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 356,
        "length": 2,
        "offset": 41,
        "surroundingCode": "    {\n      int len = ReadInt32();\n      if (len < 0) return null;\n      if (len == 0) return EmptyArray<T>.Instance;\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertIfStatementToSwitchStatement"
  },
  "hash": "d16f06a9540eb20a103dea125721534dfe5b872fa4891a30161ac1aa8e3875ee"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert 'if' statement into 'switch'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert 'if' statement into 'switch' statement",
  "detailsInfo": "Convert series of 'if' statements into single 'switch'",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetDefaultInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 81,
      "offset": 5,
      "length": 2,
      "code": {
        "startLine": 79,
        "length": 2,
        "offset": 43,
        "surroundingCode": "    myBuffer ??= new StringBuilder();\n\n    if (alignment == 0)\n    {\n      AppendFormatted(value, format);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertIfStatementToSwitchStatement"
  },
  "hash": "d50bdb5301c526018b723d3ca55bb5b915d3161b63325c51b1e731d8d8aa5965"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert 'if' statement into 'switch'",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert 'if' statement into 'switch'",
  "detailsInfo": "Convert series of 'if' statements into single 'switch'",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/BitHacks.cs",
      "language": "C#",
      "line": 31,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 29,
        "length": 2,
        "offset": 51,
        "surroundingCode": "    public static int Log2Floor(int x)\n    {\n      if (x < 0) throw new ArgumentException(\"x must be greater than 0\");\n      \n      if (x >= 1 << 16)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertIfStatementToSwitchStatement"
  },
  "hash": "dc252e8457af226621b8b857a09082fa6b20ad9e8885e1cc90500102e28c5d7e"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert 'if' statement into 'switch'",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert 'if' statement into 'switch' statement",
  "detailsInfo": "Convert series of 'if' statements into single 'switch'",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdTaskResult.cs",
      "language": "C#",
      "line": 84,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 82,
        "length": 2,
        "offset": 47,
        "surroundingCode": "      {\n        printer.Print(\" :: \");\n        if (Status == RdTaskStatus.Success)\n        {\n          Result.PrintEx(printer);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ConvertIfStatementToSwitchStatement"
  },
  "hash": "e4f9974c920a7c577db59fec88947e110af7493de52829603fa3712b84d505d2"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert 'if' statement into 'switch'",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert 'if' statement into 'switch' statement",
  "detailsInfo": "Convert series of 'if' statements into single 'switch'",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 370,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 368,
        "length": 2,
        "offset": 41,
        "surroundingCode": "    {\n      int len = ReadInt32();\n      if (len < 0) return null;\n      if (len == 0) return EmptyArray<int>.Instance;\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertIfStatementToSwitchStatement"
  },
  "hash": "f2fc6078193544292514fa47772ec8e1300e7332223e2c3032d1e35cec49382c"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Replace 'switch' statement with 'switch' expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert 'switch' statement to 'switch' expression",
  "detailsInfo": "Replace 'switch' statement with 'switch' expression",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdTaskResult.cs",
      "language": "C#",
      "line": 33,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 31,
        "length": 6,
        "offset": 34,
        "surroundingCode": "    public T Unwrap()\n    {\n      switch (Status)\n      {\n        case RdTaskStatus.Success: return Result;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ConvertSwitchStatementToSwitchExpression"
  },
  "hash": "30a37011444dd507fa16729bbce438bf5ffa80e45ad68b8bf6898ed0840e5c50"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Replace 'switch' statement with 'switch' expression",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert 'switch' statement to 'switch' expression",
  "detailsInfo": "Replace 'switch' statement with 'switch' expression",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 67,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 65,
        "length": 6,
        "offset": 77,
        "surroundingCode": "    public static Func<object, object?> GetGetter(MemberInfo mi)\n    {\n      switch (mi)\n      {\n        case PropertyInfo propInfo:"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertSwitchStatementToSwitchExpression"
  },
  "hash": "31742ffb35722993bb53ed9ee6b7281ede7b279e951f663a628593de34e76194"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Replace 'switch' statement with 'switch' expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert 'switch' statement to 'switch' expression",
  "detailsInfo": "Replace 'switch' statement with 'switch' expression",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdTaskResult.cs",
      "language": "C#",
      "line": 48,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 46,
        "length": 6,
        "offset": 59,
        "surroundingCode": "      var status = (RdTaskStatus) reader.ReadInt();\n\n      switch (status)\n      {\n        case RdTaskStatus.Success: return Success(readDelegate(ctx, reader));"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ConvertSwitchStatementToSwitchExpression"
  },
  "hash": "4abf1c9df59c0bf3d63b39589c6844bc7b4458cf360b1b0a5e45e057a411aa40"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Replace 'switch' statement with 'switch' expression",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert 'switch' statement to 'switch' expression",
  "detailsInfo": "Replace 'switch' statement with 'switch' expression",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 83,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 81,
        "length": 6,
        "offset": 64,
        "surroundingCode": "    public static Type GetReturnType(MemberInfo mi)\n    {\n      switch (mi)\n      {\n        case PropertyInfo propInfo:"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertSwitchStatementToSwitchExpression"
  },
  "hash": "74afa9bdfaf01485f877ae79cf1fecb7914bc7a314daf4cd7a6e6d7352ee08c6"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Replace 'switch' statement with 'switch' expression",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert 'switch' statement to 'switch' expression",
  "detailsInfo": "Replace 'switch' statement with 'switch' expression",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/RdTextChange.cs",
      "language": "C#",
      "line": 59,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 57,
        "length": 6,
        "offset": 80,
        "surroundingCode": "\n    private static RdTextChangeKind ReverseKind(RdTextChangeKind kind) {\n      switch (kind)\n      {\n        case RdTextChangeKind.Insert: return RdTextChangeKind.Remove;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ConvertSwitchStatementToSwitchExpression"
  },
  "hash": "86c34aecfd4eed0883ee9b7e500f0c444de7af8c604d5db34f87e9f7c7b494c5"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert property into auto-property",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into auto-property",
  "detailsInfo": "Converts property declaration into C# auto-property syntax [Learn more...](https://www.jetbrains.com/help/rider/ConvertToAutoProperty.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Components/TestWire.cs",
      "language": "C#",
      "line": 28,
      "offset": 17,
      "length": 8,
      "code": {
        "startLine": 26,
        "length": 8,
        "offset": 62,
        "surroundingCode": "    public TestWire Connection { get; set; }\n\n    public bool IsMaster\n    {\n      get { return myIsMaster; }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToAutoProperty"
  },
  "hash": "007f08f0fa1c561675cf03ddec653ba4da903753735ddf67650726484e76f662"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert property into auto-property",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into auto-property",
  "detailsInfo": "Converts property declaration into C# auto-property syntax [Learn more...](https://www.jetbrains.com/help/rider/ConvertToAutoProperty.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/TextBufferVersion.cs",
      "language": "C#",
      "line": 57,
      "offset": 56,
      "length": 33,
      "code": {
        "startLine": 55,
        "length": 33,
        "offset": 111,
        "surroundingCode": "      new MasterVersionSlaveVersionEqualityComparer();\n\n    public static IEqualityComparer<TextBufferVersion> MasterVersionSlaveVersionComparer\n    {\n      get { return ourMasterVersionSlaveVersionComparerInstance; }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ConvertToAutoProperty"
  },
  "hash": "a0078e369c42618b3c2b9f1870207af1fdaef535e801970583be262f98acdf43"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert property into auto-property (when possible)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into auto-property",
  "detailsInfo": "Converts property declaration into C# auto-property syntax",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorAsyncCallsTest.cs",
      "language": "C#",
      "line": 98,
      "offset": 23,
      "length": 4,
      "code": {
        "startLine": 96,
        "length": 4,
        "offset": 54,
        "surroundingCode": "        private string myPath;\n\n        public string Path => myPath;\n\n        public FileSystemPath(string path)"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToAutoPropertyWhenPossible"
  },
  "hash": "12f1968d32ddc0bfeeb411626a38c9afe4a0fcbfc594ddceb8bfa7c87fa0dd12"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert property into auto-property (when possible)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into auto-property",
  "detailsInfo": "Converts property declaration into C# auto-property syntax",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 43,
      "offset": 27,
      "length": 12,
      "code": {
        "startLine": 41,
        "length": 12,
        "offset": 85,
        "surroundingCode": "    public IProxyGenerator Generator => myProxyGenerator;\n\n    public ITypesCatalog? TypesCatalog => myTypesCatalog;\n\n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertToAutoPropertyWhenPossible"
  },
  "hash": "502bd5a13352fcdc33a4b2eb5b4bf254c2825a3c30b1c66dd97513239829fec5"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert property into auto-property (when possible)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into auto-property",
  "detailsInfo": "Converts property declaration into C# auto-property syntax",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 41,
      "offset": 27,
      "length": 6,
      "code": {
        "startLine": 39,
        "length": 6,
        "offset": 35,
        "surroundingCode": "      }\n\n      public UnsafeWriter Writer\n      {\n        [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToAutoPropertyWhenPossible"
  },
  "hash": "8627d650e07a7cf9fa95c3dea53aa3128709bd59cdf407a83319c0c82e8f9392"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert property into auto-property (when possible)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into auto-property",
  "detailsInfo": "Converts property declaration into C# auto-property syntax",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 117,
      "offset": 31,
      "length": 7,
      "code": {
        "startLine": 115,
        "length": 7,
        "offset": 111,
        "surroundingCode": "    private readonly Queue<Type> myCurrentSerializersChain = new Queue<Type>();\n\n    public IScalarSerializers Scalars => myScalars;\n\n    public ISerializersContainer Cache { get; }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertToAutoPropertyWhenPossible"
  },
  "hash": "c67f234c5f45a9e5591308583043707e9b8679f904f6bc83b4ff858a98c96517"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert property into auto-property (when possible)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into auto-property",
  "detailsInfo": "Converts property declaration into C# auto-property syntax",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 407,
      "offset": 19,
      "length": 6,
      "code": {
        "startLine": 405,
        "length": 6,
        "offset": 57,
        "surroundingCode": "    private readonly object myWriter;\n\n    public object Reader => myReader;\n\n    public object Writer => myWriter;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertToAutoPropertyWhenPossible"
  },
  "hash": "c9a9eb316913121131619ce6ab125982893010890bb74b64a1473fd8dc7af415"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert property into auto-property (when possible)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into auto-property",
  "detailsInfo": "Converts property declaration into C# auto-property syntax",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/RdId.cs",
      "language": "C#",
      "line": 78,
      "offset": 17,
      "length": 5,
      "code": {
        "startLine": 76,
        "length": 5,
        "offset": 66,
        "surroundingCode": "    public bool IsNil => myValue == Nil.myValue;\n\n    public long Value => myValue;\n\n    public bool Equals(RdId other)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ConvertToAutoPropertyWhenPossible"
  },
  "hash": "d0899e9dc0bb19fc14ab050077c9b776b14063b2e0a50d2ecffe9354f73582f1"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert property into auto-property (when possible)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into auto-property",
  "detailsInfo": "Converts property declaration into C# auto-property syntax",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 409,
      "offset": 19,
      "length": 6,
      "code": {
        "startLine": 407,
        "length": 6,
        "offset": 57,
        "surroundingCode": "    public object Reader => myReader;\n\n    public object Writer => myWriter;\n\n    public bool IsPolymorphic"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertToAutoPropertyWhenPossible"
  },
  "hash": "d438379adb79e801670ca8e55aec0c79e082f194986a8489d9c099ef59782c8f"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert property into auto-property (when possible)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into auto-property",
  "detailsInfo": "Converts property declaration into C# auto-property syntax",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 41,
      "offset": 28,
      "length": 9,
      "code": {
        "startLine": 39,
        "length": 9,
        "offset": 112,
        "surroundingCode": "    public ReflectionSerializersFactory SerializersFactory => mySerializersFactory;\n\n    public IProxyGenerator Generator => myProxyGenerator;\n\n    public ITypesCatalog? TypesCatalog => myTypesCatalog;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertToAutoPropertyWhenPossible"
  },
  "hash": "d78149e6de6c7eaa42e5cfb128784e997f51d29f36c4db8884978cf303d594ef"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert property into auto-property (when possible)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into auto-property",
  "detailsInfo": "Converts property declaration into C# auto-property syntax",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 39,
      "offset": 41,
      "length": 18,
      "code": {
        "startLine": 37,
        "length": 18,
        "offset": 93,
        "surroundingCode": "    private readonly ITypesCatalog? myTypesCatalog;\n\n    public ReflectionSerializersFactory SerializersFactory => mySerializersFactory;\n\n    public IProxyGenerator Generator => myProxyGenerator;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertToAutoPropertyWhenPossible"
  },
  "hash": "e40acd46eff6bc426234fdc4290be0bb881ce7669fbec164d2ccd6a78d2b93e4"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert property into auto-property with private setter",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into auto-property with private setter",
  "detailsInfo": "Converts property declaration into C# auto-property syntax with private setter declared",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 262,
      "offset": 17,
      "length": 5,
      "code": {
        "startLine": 260,
        "length": 5,
        "offset": 23,
        "surroundingCode": "    }\n\n    private int Count\n    {\n      [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToAutoPropertyWithPrivateSetter"
  },
  "hash": "1c68862c00517db6975ab2e17f8393c9265fddb7493de140eb5b1706e572fd8c"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert property into auto-property with private setter",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into auto-property with private setter",
  "detailsInfo": "Converts property declaration into C# auto-property syntax with private setter declared",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 271,
      "offset": 19,
      "length": 4,
      "code": {
        "startLine": 269,
        "length": 4,
        "offset": 25,
        "surroundingCode": "    }\n\n    private byte* Data\n    {\n      [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToAutoPropertyWithPrivateSetter"
  },
  "hash": "1d52b8ec451d62b150134849491bfd28708d9a9c9dff4a9044b159b531da231b"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert property into auto-property with private setter",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into auto-property with private setter",
  "detailsInfo": "Converts property declaration into C# auto-property syntax with private setter declared",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 164,
      "offset": 15,
      "length": 7,
      "code": {
        "startLine": 162,
        "length": 7,
        "offset": 67,
        "surroundingCode": "    object? IEnumerator.Current => myCurrent;\n      \n    public T? Current => myCurrent;\n\n    public bool MoveNext()"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToAutoPropertyWithPrivateSetter"
  },
  "hash": "9d659e068686bcfbba80b02ea27cf07d81126fc49b7779a4c2f4ae0848b50d00"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert property into auto-property with private setter",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into auto-property with private setter",
  "detailsInfo": "Converts property declaration into C# auto-property syntax with private setter declared",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/SpinWaitLock.cs",
      "language": "C#",
      "line": 17,
      "offset": 23,
      "length": 22,
      "code": {
        "startLine": 15,
        "length": 22,
        "offset": 83,
        "surroundingCode": "    static SpinWaitLock() { CalcApprovedProcessorCount(); }\n\n    public static int ApprovedProcessorCount\n    {\n      get { return _processorCount; }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToAutoPropertyWithPrivateSetter"
  },
  "hash": "acf6c05531560dc1c1278c8738b6f2b2234d7051cf896a6fd8415b3f64aa336b"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert property into auto-property with private setter",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into auto-property with private setter",
  "detailsInfo": "Converts property declaration into C# auto-property syntax with private setter declared",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 277,
      "offset": 18,
      "length": 3,
      "code": {
        "startLine": 275,
        "length": 3,
        "offset": 24,
        "surroundingCode": "    }\n\n    public byte* Ptr\n    {\n      [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToAutoPropertyWithPrivateSetter"
  },
  "hash": "fab74ce3eb05cafeb864c521798c2eaf4457ad05b39d5767d9579b31cb4cfbf5"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use compound assignment",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into compound assignment",
  "detailsInfo": "Replace assignment with compound assignment",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/BitHacks.cs",
      "language": "C#",
      "line": 75,
      "offset": 13,
      "length": 1,
      "code": {
        "startLine": 73,
        "length": 1,
        "offset": 36,
        "surroundingCode": "      unchecked\n      {\n        x = x - ((x >> 1) & 0x55555555);\n        x = (x & 0x33333333) + ((x >> 2) & 0x33333333); \n        return ((x + (x >> 4) & 0xF0F0F0F) * 0x1010101) >> 24;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToCompoundAssignment"
  },
  "hash": "e5d96fefc5ed68c73c02a5c393cc7b40c21721e83cdcaae4b1c7916d70d88c1c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/CastToTest.cs",
      "language": "C#",
      "line": 25,
      "offset": 17,
      "length": 13,
      "code": {
        "startLine": 23,
        "length": 13,
        "offset": 63,
        "surroundingCode": "        public void CastEnum32Test()\n        {\n            int updateOrdinal = (int) AddUpdateRemove.Update;\n            int removeOrdinal = (int) AddUpdateRemove.Remove;\n            "
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "005f2db52b1126b24a71f38199836a1ee1c3dfee9cb2a54a2dba6121746a7573"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextEarlyDeliveryTest.cs",
      "language": "C#",
      "line": 106,
      "offset": 11,
      "length": 10,
      "code": {
        "startLine": 104,
        "length": 10,
        "offset": 85,
        "surroundingCode": "      myServerWire = (myServerProtocol.Wire as TestWire).NotNull();\n      \n      var clientIdea = \"Client (IDEA)\";\n      var clientWire = new TestWire(clientDispatcher, clientIdea, false);\n      myClientWire = clientWire;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "00bb29f0f00bb38a017656c0cc10191a882fc1817444f34d9541e260d18f5122"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SocketWireTest.cs",
      "language": "C#",
      "line": 56,
      "offset": 11,
      "length": 2,
      "code": {
        "startLine": 54,
        "length": 2,
        "offset": 90,
        "surroundingCode": "    internal static IProtocol Server(Lifetime lifetime, int? port = null)\n    {\n      var id = \"TestServer\";\n      var server = new SocketWire.Server(lifetime, SynchronousScheduler.Instance, new IPEndPoint(IPAddress.Loopback, port ?? 0), id);\n      return new Protocol(id, new Serializers(), new Identities(IdKind.Server), SynchronousScheduler.Instance, server, lifetime);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "01252b77ad3e42b4f3ed54b5c180f83470057f43cf73435284921b68538145f3"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdPerContextMapTest.cs",
      "language": "C#",
      "line": 57,
      "offset": 11,
      "length": 10,
      "code": {
        "startLine": 55,
        "length": 10,
        "offset": 46,
        "surroundingCode": "\n      var server1Cid = \"Server-1\";\n      var client1Cid = \"Client-1\";\n      \n      key.RegisterOn(ClientProtocol.Serializers);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "01945037947a298f60621802828c0c39d29bcdb0ad73019facad30ac48a40228"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdPropertyTest.cs",
      "language": "C#",
      "line": 56,
      "offset": 11,
      "length": 12,
      "code": {
        "startLine": 54,
        "length": 12,
        "offset": 97,
        "surroundingCode": "\n      // Server -> Client one more time (client already dirty, but should be updated)\n      var serverValue2 = \"Server value 2\";\n      serverProperty.SetValue(serverValue2);\n      ServerWire.TransmitOneMessage();"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "12bf341aedd6016ad88a3a34d66cea197af45f4d5759dfc7053d1dd65c900ffe"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/BitSliceTest.cs",
      "language": "C#",
      "line": 67,
      "offset": 11,
      "length": 1,
      "code": {
        "startLine": 65,
        "length": 1,
        "offset": 41,
        "surroundingCode": "    public void Test16()\n    {\n      var x = 16;\n      Assert.AreEqual(0, mySliceInt[x]);\n      Assert.AreEqual(E4.One, mySliceEnum[x]);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "1a0a4ad153561f4a2406408796aaf0700eb05360c57935f7a3bf4cde60370f83"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdFrameworkTestBase.cs",
      "language": "C#",
      "line": 34,
      "offset": 11,
      "length": 10,
      "code": {
        "startLine": 32,
        "length": 10,
        "offset": 222,
        "surroundingCode": "      var serverR = \"Server (R#)\";\n      ServerProtocol = new Protocol(serverR, CreateSerializers(true), identities, serverDispatcher, new TestWire(serverDispatcher, serverR, true), LifetimeDefinition.Lifetime);\n      var clientIdea = \"Client (IDEA)\";\n      ClientProtocol = new Protocol(clientIdea, CreateSerializers(false), identities, clientDispatcher, new TestWire(clientDispatcher, clientIdea, false), LifetimeDefinition.Lifetime);\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "1fc29328946ea4b94bfdb4bf81283cabfbb428bafce9c6a9b41ddb82b8f5b12d"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdPerContextMapTest.cs",
      "language": "C#",
      "line": 252,
      "offset": 11,
      "length": 10,
      "code": {
        "startLine": 250,
        "length": 10,
        "offset": 80,
        "surroundingCode": "      var server1Cid = \"Server-1\";\n      var server2Cid = \"Server-2\";\n      var server3Cid = \"Server-3\";\n      var server4Cid = \"Server-4\";\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "203a9dc00225843ec7c92f2bc3913a186740c9d118076f80db99bae6358c7926"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdFrameworkTestBase.cs",
      "language": "C#",
      "line": 32,
      "offset": 11,
      "length": 7,
      "code": {
        "startLine": 30,
        "length": 7,
        "offset": 115,
        "surroundingCode": "      var serverDispatcher = CreateScheduler(true);\n      var clientDispatcher = CreateScheduler(false);\n      var serverR = \"Server (R#)\";\n      ServerProtocol = new Protocol(serverR, CreateSerializers(true), identities, serverDispatcher, new TestWire(serverDispatcher, serverR, true), LifetimeDefinition.Lifetime);\n      var clientIdea = \"Client (IDEA)\";"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "2bdd845fd3e05fdb73a88ca951d44b481141bc5a7bfb406e33a3156f8c21f52b"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/NativeMemoryPoolTests.cs",
      "language": "C#",
      "line": 55,
      "offset": 11,
      "length": 5,
      "code": {
        "startLine": 53,
        "length": 5,
        "offset": 62,
        "surroundingCode": "      while (NativeMemoryPool.TryFreeMemory()) { }\n\n      var count = 33;\n      var cookies = Enumerable.Range(0, count).Select(i => NativeMemoryPool.Reserve()).ToList();\n      Assert.AreEqual(count, NativeMemoryPool.SampleCount());"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "3cfcbe3a7e0c229887a532287be4f7ce7c00c69ab8722cf51ddd85ba20048520"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdPerContextMapTest.cs",
      "language": "C#",
      "line": 253,
      "offset": 11,
      "length": 10,
      "code": {
        "startLine": 251,
        "length": 10,
        "offset": 80,
        "surroundingCode": "      var server2Cid = \"Server-2\";\n      var server3Cid = \"Server-3\";\n      var server4Cid = \"Server-4\";\n\n      var log = new List<string>();"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "3dce0dfeeaeca3bead324c5e45e8bf6549420f99ded70587fb74b2c5657734e5"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/CastToTest.cs",
      "language": "C#",
      "line": 26,
      "offset": 17,
      "length": 13,
      "code": {
        "startLine": 24,
        "length": 13,
        "offset": 88,
        "surroundingCode": "        {\n            int updateOrdinal = (int) AddUpdateRemove.Update;\n            int removeOrdinal = (int) AddUpdateRemove.Remove;\n            \n            Assert.AreEqual(AddUpdateRemove.Update, Cast32BitEnum<AddUpdateRemove>.FromInt(updateOrdinal));"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "402aaa3346c9eb66e7efe3876ce454d0ae6e3401d0ad234e0d994b1d4a9c7a07"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdTaskTest.cs",
      "language": "C#",
      "line": 24,
      "offset": 33,
      "length": 6,
      "code": {
        "startLine": 22,
        "length": 6,
        "offset": 44,
        "surroundingCode": "    #endif\n\n    private static readonly int ourKey = 1;\n\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "41bb417556a2558b294165f594810d819d5a1f0c598576d2b9740fe5c48f7e8a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdMapTest.cs",
      "language": "C#",
      "line": 15,
      "offset": 33,
      "length": 6,
      "code": {
        "startLine": 13,
        "length": 6,
        "offset": 83,
        "surroundingCode": "  public class RdMapTest : RdFrameworkTestBase\n  {\n    private static readonly int ourKey = 1;\n\n    [Test]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "42857f193d1cf1d26847bf8ccf3238df454ad443a2de78a7bd7392acc76c3b3a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/BitSliceTest.cs",
      "language": "C#",
      "line": 58,
      "offset": 11,
      "length": 1,
      "code": {
        "startLine": 56,
        "length": 1,
        "offset": 41,
        "surroundingCode": "    public void Test15()\n    {\n      var x = 15;\n      Assert.AreEqual(15, mySliceInt[x]);\n      Assert.AreEqual(E4.Zero, mySliceEnum[x]);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "4d465a48942d29d44fdaeecf154a2ee7bfd7988a6ffaa32f3c2d27879ee22cba"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdSetTest.cs",
      "language": "C#",
      "line": 14,
      "offset": 33,
      "length": 6,
      "code": {
        "startLine": 12,
        "length": 6,
        "offset": 83,
        "surroundingCode": "  public class RdSetTest : RdFrameworkTestBase\n  {\n    private static readonly int ourKey = 1;\n\n    [Test]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "5128842742164cf603296c0cf38e0851c3588c74cb8a875e366b40088cb340b2"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SocketWireTest.cs",
      "language": "C#",
      "line": 63,
      "offset": 11,
      "length": 2,
      "code": {
        "startLine": 61,
        "length": 2,
        "offset": 82,
        "surroundingCode": "    internal static IProtocol Client(Lifetime lifetime, int port)\n    {\n      var id = \"TestClient\";\n      var client = new SocketWire.Client(lifetime, SynchronousScheduler.Instance, port, id);\n      return new Protocol(id, new Serializers(), new Identities(IdKind.Server), SynchronousScheduler.Instance, client, lifetime);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "54bab83000696177755d8216f07b9b3d71e2db3281f94c828dde69ba53a24c25"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdIdHierarchyGuardTest.cs",
      "language": "C#",
      "line": 15,
      "offset": 33,
      "length": 9,
      "code": {
        "startLine": 13,
        "length": 9,
        "offset": 96,
        "surroundingCode": "  public class RdIdHierarchyGuardTest : RdFrameworkTestBase\n  {\n    private static readonly int ourMapKey = 1;\n\n    [Test]    "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "584d0cd35b518223ee4050615269ebd2a68f11f497437614ff847d152b796a88"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/CastToTest.cs",
      "language": "C#",
      "line": 15,
      "offset": 17,
      "length": 13,
      "code": {
        "startLine": 13,
        "length": 13,
        "offset": 88,
        "surroundingCode": "        {\n            int updateOrdinal = (int) AddUpdateRemove.Update;\n            int removeOrdinal = (int) AddUpdateRemove.Remove;\n            \n            Assert.AreEqual(AddUpdateRemove.Update, CastTo<AddUpdateRemove>.From(updateOrdinal));"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "5addcea43251c24f56844c9696a7817b83cac0e3875bff6af0e6cdadd7ced22a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdPerContextMapTest.cs",
      "language": "C#",
      "line": 87,
      "offset": 11,
      "length": 10,
      "code": {
        "startLine": 85,
        "length": 10,
        "offset": 46,
        "surroundingCode": "\n      var server1Cid = \"Server-1\";\n      var client1Cid = \"Client-1\";\n      \n      key.RegisterOn(ClientProtocol.Serializers);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "62ffbdf3b323d2d68e41a09456c9db394d82abdab028fc651e0cc6b7aafb94a1"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdSignalTest.cs",
      "language": "C#",
      "line": 12,
      "offset": 33,
      "length": 6,
      "code": {
        "startLine": 10,
        "length": 6,
        "offset": 86,
        "surroundingCode": "  public class RdSignalTest : RdFrameworkTestBase\n  {\n    private static readonly int ourKey = 1;\n\n    [Test]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "68f02814d297c9d306c4e20775d3afdecc867691c44e64fb44854832650f9bd3"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdPerContextMapTest.cs",
      "language": "C#",
      "line": 113,
      "offset": 11,
      "length": 10,
      "code": {
        "startLine": 111,
        "length": 10,
        "offset": 117,
        "surroundingCode": "      var clientMap = new RdPerContextMap<string, RdMap<int, string>>(key, _ => NewRdMap<int, string>());\n\n      var server1Cid = \"Server-1\";\n      var client1Cid = \"Client-1\";\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "69a861fa4e922abf6041801983897db5407db67fd001f5f97d8085f112b04a72"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdListTest.cs",
      "language": "C#",
      "line": 14,
      "offset": 33,
      "length": 6,
      "code": {
        "startLine": 12,
        "length": 6,
        "offset": 84,
        "surroundingCode": "  public class RdListTest : RdFrameworkTestBase\n  {\n    private static readonly int ourKey = 1;\n\n    [Test]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "6a31f2774f7c74130499629b2aa59b172a98f36db4f663901e9580cc5f224d28"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdPropertyTest.cs",
      "language": "C#",
      "line": 25,
      "offset": 11,
      "length": 12,
      "code": {
        "startLine": 23,
        "length": 12,
        "offset": 32,
        "surroundingCode": "\n      // Init server\n      var serverValue1 = \"Server value 1\";\n      serverProperty.SetValue(serverValue1);\n      Assert.AreEqual(serverValue1, serverProperty.Value);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "73a5436d378634afd1901805f402590ea21dea247fc6cadcab551e154d55f382"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdPerContextMapTest.cs",
      "language": "C#",
      "line": 182,
      "offset": 11,
      "length": 10,
      "code": {
        "startLine": 180,
        "length": 10,
        "offset": 117,
        "surroundingCode": "      var clientMap = new RdPerContextMap<string, RdMap<int, string>>(key, _ => NewRdMap<int, string>());\n\n      var server1Cid = \"Server-1\";\n\n      key.RegisterOn(ClientProtocol.Serializers);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "75310ef2ccef64d36e68bc549f6ea95579b9c427d60afce64d1a0e39a5c221c7"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 88,
      "offset": 11,
      "length": 7,
      "code": {
        "startLine": 86,
        "length": 7,
        "offset": 183,
        "surroundingCode": "      int x = 0;\n      var buffer = new ByteBufferAsyncProcessor(\"TestAsyncProcessor\", 1, delegate(byte[] data, int offset, int len, ref long seqN) { x += data[offset]; });\n      var reason1 = \"reason1\";\n      var reason2 = \"reason2\";\n      Assert.True(buffer.Pause(reason1));"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "76078b70148fe4aa750a3151cc091c2d5c3562173a96772004eee224e27f434e"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdPerContextMapTest.cs",
      "language": "C#",
      "line": 114,
      "offset": 11,
      "length": 10,
      "code": {
        "startLine": 112,
        "length": 10,
        "offset": 46,
        "surroundingCode": "\n      var server1Cid = \"Server-1\";\n      var client1Cid = \"Client-1\";\n      \n      key.RegisterOn(ClientProtocol.Serializers);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "795b620124e4ce302a65ce7e6f244a956a9ca09d7bf5ff4aa45fee16e6aeb4bf"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdPerContextMapTest.cs",
      "language": "C#",
      "line": 26,
      "offset": 11,
      "length": 10,
      "code": {
        "startLine": 24,
        "length": 10,
        "offset": 46,
        "surroundingCode": "\n      var server1Cid = \"Server-1\";\n      var client1Cid = \"Client-1\";\n      \n      key.RegisterOn(ClientProtocol.Serializers);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "7cca60f8857dfbafd43749b19b52e972ad16cf062fbf221a3a8c0336fd452a07"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 89,
      "offset": 11,
      "length": 7,
      "code": {
        "startLine": 87,
        "length": 7,
        "offset": 197,
        "surroundingCode": "      var buffer = new ByteBufferAsyncProcessor(\"TestAsyncProcessor\", 1, delegate(byte[] data, int offset, int len, ref long seqN) { x += data[offset]; });\n      var reason1 = \"reason1\";\n      var reason2 = \"reason2\";\n      Assert.True(buffer.Pause(reason1));\n      Assert.False(buffer.Pause(reason1));"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "7f263497b3db36f0f6b9b6eeb0495e26cb9cfa3c0b78850800faed5b645d202d"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdPerContextMapTest.cs",
      "language": "C#",
      "line": 251,
      "offset": 11,
      "length": 10,
      "code": {
        "startLine": 249,
        "length": 10,
        "offset": 46,
        "surroundingCode": "\n      var server1Cid = \"Server-1\";\n      var server2Cid = \"Server-2\";\n      var server3Cid = \"Server-3\";\n      var server4Cid = \"Server-4\";"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "873856746cd07216dfa88890135ba7b2ef01b1a8c93e1dfddf1cf91578686a8d"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdPerContextMapTest.cs",
      "language": "C#",
      "line": 25,
      "offset": 11,
      "length": 10,
      "code": {
        "startLine": 23,
        "length": 10,
        "offset": 117,
        "surroundingCode": "      var clientMap = new RdPerContextMap<string, RdMap<int, string>>(key, _ => NewRdMap<int, string>());\n\n      var server1Cid = \"Server-1\";\n      var client1Cid = \"Client-1\";\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "8897fd5e7884ff148281d037aba726204f27ce19928ae078dbfc5014dbf7aeec"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTest.cs",
      "language": "C#",
      "line": 118,
      "offset": 11,
      "length": 11,
      "code": {
        "startLine": 116,
        "length": 11,
        "offset": 47,
        "surroundingCode": "      if (!thenSwitchSides) return;\n\n      var extraString = \"again\";\n\n      var thirdBytesWritten = MeasureBytes(secondSenderProtocol, () =>"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "8adb9c1e10e7a2bdbda536597f3f66afd0f0947d4ac036330bdbd1cccbeadfa4"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdPropertyTest.cs",
      "language": "C#",
      "line": 78,
      "offset": 11,
      "length": 12,
      "code": {
        "startLine": 76,
        "length": 12,
        "offset": 34,
        "surroundingCode": "\n      // Change server\n      var serverValue1 = \"Server value 1\";\n      serverProperty.SetValue(serverValue1);\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "8d8d6a20755568376ba4f785457636abd194dd6880a61dfec74652933f9c138f"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdPerContextMapTest.cs",
      "language": "C#",
      "line": 86,
      "offset": 11,
      "length": 10,
      "code": {
        "startLine": 84,
        "length": 10,
        "offset": 117,
        "surroundingCode": "      var clientMap = new RdPerContextMap<string, RdMap<int, string>>(key, _ => NewRdMap<int, string>());\n\n      var server1Cid = \"Server-1\";\n      var client1Cid = \"Client-1\";\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "8f3dd22915a82e75a717ac30790f472f473333daa7e4909f9989e64434ed5999"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdPerContextMapTest.cs",
      "language": "C#",
      "line": 56,
      "offset": 11,
      "length": 10,
      "code": {
        "startLine": 54,
        "length": 10,
        "offset": 117,
        "surroundingCode": "      var clientMap = new RdPerContextMap<string, RdMap<int, string>>(key, _ => NewRdMap<int, string>());\n\n      var server1Cid = \"Server-1\";\n      var client1Cid = \"Client-1\";\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "92a0b646220a129ced41eeaea9198560d9b09527028303e019de7e497a879e32"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextEarlyDeliveryTest.cs",
      "language": "C#",
      "line": 102,
      "offset": 11,
      "length": 7,
      "code": {
        "startLine": 100,
        "length": 7,
        "offset": 106,
        "surroundingCode": "      var serverDispatcher = CreateScheduler();\n      var clientDispatcher = CreateScheduler();\n      var serverR = \"Server (R#)\";\n      myServerProtocol = new Protocol(serverR, CreateSerializers(), identities, serverDispatcher, new TestWire(serverDispatcher, serverR, true), LifetimeDefinition.Lifetime, key);\n      myServerWire = (myServerProtocol.Wire as TestWire).NotNull();"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "ac7386bdd2b01514a4d14eeac964cadc356764d1d6015e8cc809054ef98587e2"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdPerContextMapTest.cs",
      "language": "C#",
      "line": 148,
      "offset": 11,
      "length": 10,
      "code": {
        "startLine": 146,
        "length": 10,
        "offset": 117,
        "surroundingCode": "      var clientMap = new RdPerContextMap<string, RdMap<int, string>>(key, _ => NewRdMap<int, string>());\n\n      var server1Cid = \"Server-1\";\n      var client1Cid = \"Client-1\";\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "b7737029ad62ad58062131cf4c6b850505eba59285f658a19f27ab5148e11956"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdPerContextMapTest.cs",
      "language": "C#",
      "line": 250,
      "offset": 11,
      "length": 10,
      "code": {
        "startLine": 248,
        "length": 10,
        "offset": 118,
        "surroundingCode": "      var clientMap = new RdPerContextMap<string, RdMap<int, string>>(key1, _ => NewRdMap<int, string>());\n\n      var server1Cid = \"Server-1\";\n      var server2Cid = \"Server-2\";\n      var server3Cid = \"Server-3\";"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "bcabb28cd759b6ff0bd2999d9508729822fafda063aa3c507ea9027de54b3c93"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdPerContextMapTest.cs",
      "language": "C#",
      "line": 214,
      "offset": 11,
      "length": 10,
      "code": {
        "startLine": 212,
        "length": 10,
        "offset": 117,
        "surroundingCode": "      var clientMap = new RdPerContextMap<string, RdMap<int, string>>(key, _ => NewRdMap<int, string>());\n\n      var server1Cid = \"Server-1\";\n\n      var log = new List<string>();"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "c0718c4a120c3111833d3c6a9ed77afe0fb8a2508a6e659db82f5fd990fa67ed"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/CastToTest.cs",
      "language": "C#",
      "line": 14,
      "offset": 17,
      "length": 13,
      "code": {
        "startLine": 12,
        "length": 13,
        "offset": 67,
        "surroundingCode": "        public void TestCastValueTypes()\n        {\n            int updateOrdinal = (int) AddUpdateRemove.Update;\n            int removeOrdinal = (int) AddUpdateRemove.Remove;\n            "
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "cdd88afd85761a8f5b7e52e1293fa573b2e2e1512f989ea63e09be84310fdecf"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ProactiveLazyTest.cs",
      "language": "C#",
      "line": 31,
      "offset": 17,
      "length": 1,
      "code": {
        "startLine": 29,
        "length": 1,
        "offset": 76,
        "surroundingCode": "        public void TestOceOnTerminatedLifetime()\n        {\n            var n = 100_000_000L;\n            long expected = n * (n - 1) / 2;\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "d0afe9f3ac171e395178a85276d51bb0ee5ebcf7ac1bd511132fa82eee855628"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/BitSliceTest.cs",
      "language": "C#",
      "line": 49,
      "offset": 11,
      "length": 1,
      "code": {
        "startLine": 47,
        "length": 1,
        "offset": 43,
        "surroundingCode": "    public void TestZero()\n    {\n      var x = 0;\n      Assert.AreEqual(0, mySliceInt[x]);\n      Assert.AreEqual(E4.Zero, mySliceEnum[x]);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "d172be3ed24c15df2ce621c9e167a1f012e0ac0383e83e47b6934921d2fba0f2"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdPropertyTest.cs",
      "language": "C#",
      "line": 35,
      "offset": 11,
      "length": 12,
      "code": {
        "startLine": 33,
        "length": 12,
        "offset": 37,
        "surroundingCode": "\n      // Client -> Server\n      var clientValue1 = \"Client value 1\";\n      clientProperty.SetValue(clientValue1);\n      ClientWire.TransmitOneMessage();"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "d880bf46305d47be0d87d627941ac8f0e1f51c49aa8189a7bbc09fa55d419be7"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ProactiveLazyTest.cs",
      "language": "C#",
      "line": 15,
      "offset": 17,
      "length": 1,
      "code": {
        "startLine": 13,
        "length": 1,
        "offset": 57,
        "surroundingCode": "        public void TestSync()\n        {\n            var n = 100_000_000L;\n            long expected = n * (n - 1) / 2;\n            var lazy = new ProactiveLazy<long>(Lifetime.Eternal, () =>"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "e3910d1b8a79f269e508135a40283a74522a6a45978653de2afe80645a7906aa"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdPropertyTest.cs",
      "language": "C#",
      "line": 12,
      "offset": 33,
      "length": 6,
      "code": {
        "startLine": 10,
        "length": 6,
        "offset": 88,
        "surroundingCode": "  public class RdPropertyTest : RdFrameworkTestBase\n  {\n    private static readonly int ourKey = 1;\n\n    [Test]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "f7cd76551a648676d9dccef616715b6d1b314b211c11122231c2558222d4fb7a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTest.cs",
      "language": "C#",
      "line": 214,
      "offset": 11,
      "length": 12,
      "code": {
        "startLine": 212,
        "length": 12,
        "offset": 86,
        "surroundingCode": "      rootClient.Bind(LifetimeDefinition.Lifetime, ClientProtocol, \"top\");\n\n      var stringToSend = \"This string is nice and long enough to overshadow any interning overheads\";\n\n      IProtocol Proto(bool server) => server ? ServerProtocol : ClientProtocol;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "faf4bdaac149cb3d13f9057f3e8c1e2fd795ff07977287ab9af54eca04e1ae43"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Convert local variable or field into constant (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into constant",
  "detailsInfo": "Convert local variable or field into constant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdPerContextMapTest.cs",
      "language": "C#",
      "line": 149,
      "offset": 11,
      "length": 10,
      "code": {
        "startLine": 147,
        "length": 10,
        "offset": 46,
        "surroundingCode": "\n      var server1Cid = \"Server-1\";\n      var client1Cid = \"Client-1\";\n      \n      key.RegisterOn(ClientProtocol.Serializers);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToConstant.Local"
  },
  "hash": "fb3e2f2e5aaa76b76b4141f9ce6aa26927adf2456dce49b746954540cb3a759f"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert delegate variable into local function",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use local function",
  "detailsInfo": "Replace delegate variable with local function [Learn more...](https://www.jetbrains.com/help/rider/ConvertToLocalFunction.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/CollectionSerializers.cs",
      "language": "C#",
      "line": 23,
      "offset": 52,
      "length": 5,
      "code": {
        "startLine": 21,
        "length": 5,
        "offset": 142,
        "surroundingCode": "    {\n      var read = CreateReadDictionary<TKey, TValue>(keySerializer, valueSerializer);\n      CtxWriteDelegate<IDictionary<TKey, TValue>?> write = (ctx, writer, value) =>\n      {\n        if (value is Dictionary<TKey, TValue> val && !Equals(val.Comparer, EqualityComparer<TKey>.Default))"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertToLocalFunction"
  },
  "hash": "00ba9490befe04f1d45b5c6d7a02d1bc3bfe3642b8101c9faf93ea52241b4b7b"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert delegate variable into local function",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use local function",
  "detailsInfo": "Replace delegate variable with local function [Learn more...](https://www.jetbrains.com/help/rider/ConvertToLocalFunction.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/CollectionSerializers.cs",
      "language": "C#",
      "line": 16,
      "offset": 40,
      "length": 19,
      "code": {
        "startLine": 14,
        "length": 19,
        "offset": 168,
        "surroundingCode": "    {\n      CtxReadDelegate<List<T>?> readListSerializer = (ctx, reader) => reader.ReadList(itemSerializer.GetReader<T>(), ctx);\n      CtxWriteDelegate<IEnumerable<T>> writeListSerializer =(ctx, writer, value) => writer.WriteEnumerable(itemSerializer.GetWriter<T>(), ctx, value);\n      return new SerializerPair(readListSerializer, writeListSerializer);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertToLocalFunction"
  },
  "hash": "086dd3ad6a935ca9bb79b39495a272a7cc6af460aefce1c5cd690f384ea9b75a"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert delegate variable into local function",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use local function",
  "detailsInfo": "Replace delegate variable with local function [Learn more...](https://www.jetbrains.com/help/rider/ConvertToLocalFunction.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 351,
      "offset": 27,
      "length": 14,
      "code": {
        "startLine": 349,
        "length": 14,
        "offset": 36,
        "surroundingCode": "      };\n\n      CtxWriteDelegate<T> writerDelegate = (ctx, unsafeWriter, value) =>\n      {\n        // nrt suppression: value tuple cannot be null"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertToLocalFunction"
  },
  "hash": "09835a3cbaf2ed2343ceccaaecc6367eb01c22b696010cfaf2e8fb9a20a2c1ba"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert delegate variable into local function",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use local function",
  "detailsInfo": "Replace delegate variable with local function [Learn more...](https://www.jetbrains.com/help/rider/ConvertToLocalFunction.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 283,
      "offset": 29,
      "length": 6,
      "code": {
        "startLine": 281,
        "length": 6,
        "offset": 80,
        "surroundingCode": "      var itemWriter = serializers.GetWriter<T>();\n\n      CtxReadDelegate<T[]?> reader = (ctx, unsafeReader) => unsafeReader.ReadArray(itemReader, ctx);\n      CtxWriteDelegate<T[]> writer = (ctx, unsafeWriter, value) => unsafeWriter.WriteArray(itemWriter, ctx, value);\n      return new SerializerPair(reader, writer);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertToLocalFunction"
  },
  "hash": "29e464da044d108ae1a48cc1aa006fbb7523441245f977f72c08ac202845bac8"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert delegate variable into local function",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use local function",
  "detailsInfo": "Replace delegate variable with local function [Learn more...](https://www.jetbrains.com/help/rider/ConvertToLocalFunction.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 228,
      "offset": 27,
      "length": 14,
      "code": {
        "startLine": 226,
        "length": 14,
        "offset": 36,
        "surroundingCode": "      };\n\n      CtxWriteDelegate<T> writerDelegate = (ctx, unsafeWriter, value) =>\n      {\n        if (allowNullable)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertToLocalFunction"
  },
  "hash": "2b7aeddbabb1717b509a25ae0f043a19007b22842f086ad3a415e9beeee84d8b"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert delegate variable into local function",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use local function",
  "detailsInfo": "Replace delegate variable with local function [Learn more...](https://www.jetbrains.com/help/rider/ConvertToLocalFunction.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 284,
      "offset": 29,
      "length": 6,
      "code": {
        "startLine": 282,
        "length": 6,
        "offset": 130,
        "surroundingCode": "\n      CtxReadDelegate<T[]?> reader = (ctx, unsafeReader) => unsafeReader.ReadArray(itemReader, ctx);\n      CtxWriteDelegate<T[]> writer = (ctx, unsafeWriter, value) => unsafeWriter.WriteArray(itemWriter, ctx, value);\n      return new SerializerPair(reader, writer);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertToLocalFunction"
  },
  "hash": "2d89b905866fe14b701bc2018b4c238d88dc5805a0a75665f4ec4509e1bcb418"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert delegate variable into local function",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use local function",
  "detailsInfo": "Replace delegate variable with local function [Learn more...](https://www.jetbrains.com/help/rider/ConvertToLocalFunction.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 329,
      "offset": 28,
      "length": 14,
      "code": {
        "startLine": 327,
        "length": 14,
        "offset": 37,
        "surroundingCode": "      };\n\n      CtxWriteDelegate<T?> writerDelegate = (ctx, unsafeWriter, value) =>\n      {\n        if (allowNullable)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertToLocalFunction"
  },
  "hash": "3f146161cdb4ff62e12c489c3a6770ba9bef21c060b92f23562a98fdc8b9263c"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert delegate variable into local function",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use local function",
  "detailsInfo": "Replace delegate variable with local function [Learn more...](https://www.jetbrains.com/help/rider/ConvertToLocalFunction.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 337,
      "offset": 26,
      "length": 14,
      "code": {
        "startLine": 335,
        "length": 14,
        "offset": 62,
        "surroundingCode": "\n      var type = typeInfo.AsType();\n      CtxReadDelegate<T> readerDelegate = (ctx, unsafeReader) =>\n      {\n        // todo: consider using IL emit"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertToLocalFunction"
  },
  "hash": "7f8c4fe97dbc8aa9ecbec2613d99aac1b44bd35ff1c59338e04a3ebef452bb2e"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert delegate variable into local function",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use local function",
  "detailsInfo": "Replace delegate variable with local function [Learn more...](https://www.jetbrains.com/help/rider/ConvertToLocalFunction.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/CollectionSerializers.cs",
      "language": "C#",
      "line": 50,
      "offset": 60,
      "length": 5,
      "code": {
        "startLine": 48,
        "length": 5,
        "offset": 150,
        "surroundingCode": "#else\n      var read = CreateReadDictionary<TKey, TValue>(keySerializer, valueSerializer);\n      CtxWriteDelegate<IReadOnlyDictionary<TKey, TValue>?> write = (ctx, writer, value) =>\n      {\n        if (value is Dictionary<TKey, TValue> val && !Equals(val.Comparer, EqualityComparer<TKey>.Default))"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertToLocalFunction"
  },
  "hash": "85a285ea67a6825faf2fd29e6c82514529b215d3ef8f62df9b02803ed147e53f"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert delegate variable into local function",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use local function",
  "detailsInfo": "Replace delegate variable with local function [Learn more...](https://www.jetbrains.com/help/rider/ConvertToLocalFunction.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 298,
      "offset": 27,
      "length": 14,
      "code": {
        "startLine": 296,
        "length": 14,
        "offset": 63,
        "surroundingCode": "      var type = typeInfo.AsType();\n\n      CtxReadDelegate<T?> readerDelegate = (ctx, unsafeReader) =>\n      {\n        if (allowNullable && !unsafeReader.ReadNullness())"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertToLocalFunction"
  },
  "hash": "b293a791c912d22a45703bf7e35f15a0888c6a37794b3db5bcbdd67bf60d8a95"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert delegate variable into local function",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use local function",
  "detailsInfo": "Replace delegate variable with local function [Learn more...](https://www.jetbrains.com/help/rider/ConvertToLocalFunction.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/CollectionSerializers.cs",
      "language": "C#",
      "line": 75,
      "offset": 50,
      "length": 4,
      "code": {
        "startLine": 73,
        "length": 4,
        "offset": 214,
        "surroundingCode": "    private static CtxReadDelegate<Dictionary<TKey, TValue>?> CreateReadDictionary<TKey, TValue>(SerializerPair keySerializer, SerializerPair valueSerializer)\n    {\n      CtxReadDelegate<Dictionary<TKey, TValue>?> read = (ctx, reader) =>\n      {\n        int count = reader.ReadInt();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertToLocalFunction"
  },
  "hash": "c2c6ef6bd14b7b7ea5ff4d8020e3675e9d91564dfe969b431910a060c1cadfa7"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert delegate variable into local function",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use local function",
  "detailsInfo": "Replace delegate variable with local function [Learn more...](https://www.jetbrains.com/help/rider/ConvertToLocalFunction.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 213,
      "offset": 27,
      "length": 14,
      "code": {
        "startLine": 211,
        "length": 14,
        "offset": 108,
        "surroundingCode": "      var memberSerializers = new CtxWriteDelegate<object?>[memberInfos.Length];\n\n      CtxReadDelegate<T?> readerDelegate = (ctx, unsafeReader) =>\n      {\n        if (allowNullable && !unsafeReader.ReadNullness())"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertToLocalFunction"
  },
  "hash": "ce75c38eda602d5704db79222d2ab4e81601ae83a00d9a0a66a16c177c8adf32"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert delegate variable into local function",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use local function",
  "detailsInfo": "Replace delegate variable with local function [Learn more...](https://www.jetbrains.com/help/rider/ConvertToLocalFunction.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1066,
      "offset": 20,
      "length": 10,
      "code": {
        "startLine": 1064,
        "length": 10,
        "offset": 37,
        "surroundingCode": "      int x= 0 ;\n\n      Func<Action> FMakeAdder = () => { var a = x++; return () => entries.Add(a); };  // Fixes the X value at the moment of FMakeAdder call.\n\n      bool flag = false;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ConvertToLocalFunction"
  },
  "hash": "d540027da8afe31d89fa36dbdc1391dd67317a367a3e098eba4ac876fb3239a9"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert delegate variable into local function",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use local function",
  "detailsInfo": "Replace delegate variable with local function [Learn more...](https://www.jetbrains.com/help/rider/ConvertToLocalFunction.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/CollectionSerializers.cs",
      "language": "C#",
      "line": 15,
      "offset": 33,
      "length": 18,
      "code": {
        "startLine": 13,
        "length": 18,
        "offset": 130,
        "surroundingCode": "    public static SerializerPair CreateListSerializerPair<T>(SerializerPair itemSerializer)\n    {\n      CtxReadDelegate<List<T>?> readListSerializer = (ctx, reader) => reader.ReadList(itemSerializer.GetReader<T>(), ctx);\n      CtxWriteDelegate<IEnumerable<T>> writeListSerializer =(ctx, writer, value) => writer.WriteEnumerable(itemSerializer.GetWriter<T>(), ctx, value);\n      return new SerializerPair(readListSerializer, writeListSerializer);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertToLocalFunction"
  },
  "hash": "da7a20483919ed5f53f534e3ebbadb8eb265fa801e529a526b3f4ca0c049a84a"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use compound assignment",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into compound assignment",
  "detailsInfo": "Replace null-coalescing expression with compound assignment [Learn more...](https://www.jetbrains.com/help/rider/ConvertToNullCoalescingCompoundAssignment.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 114,
      "offset": 36,
      "length": 24,
      "code": {
        "startLine": 112,
        "length": 24,
        "offset": 71,
        "surroundingCode": "      if (Mode.IsAssertion)\n      {\n        myCurrentActivationChain = myCurrentActivationChain ?? new Queue<Type>();\n        myCurrentActivationChain.Clear(); // clear previous attempts to activate different types\n      }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertToNullCoalescingCompoundAssignment"
  },
  "hash": "42a6f398167deb613b5ccbed78b38ad2e64a1e8447f07602f5aa975e253df1fd"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use compound assignment",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into compound assignment",
  "detailsInfo": "Replace null-coalescing expression with compound assignment [Learn more...](https://www.jetbrains.com/help/rider/ConvertToNullCoalescingCompoundAssignment.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 649,
      "offset": 20,
      "length": 8,
      "code": {
        "startLine": 647,
        "length": 8,
        "offset": 60,
        "surroundingCode": "        SetSocketOptions(serverSocket);\n\n        endPoint = endPoint ?? new IPEndPoint(IPAddress.Loopback, 0);\n        serverSocket.Bind(endPoint);\n        serverSocket.Listen(1);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ConvertToNullCoalescingCompoundAssignment"
  },
  "hash": "52e122cf62499250f8b51ddd5866c46334a5bde855ba70dc0b3d09959bf28119"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use compound assignment",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into compound assignment",
  "detailsInfo": "Replace null-coalescing expression with compound assignment [Learn more...](https://www.jetbrains.com/help/rider/ConvertToNullCoalescingCompoundAssignment.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Types.cs",
      "language": "C#",
      "line": 63,
      "offset": 28,
      "length": 16,
      "code": {
        "startLine": 61,
        "length": 16,
        "offset": 51,
        "surroundingCode": "          return null;\n\n        genericArguments = genericArguments ?? type.GetGenericArguments();\n\n        if (type.IsArray)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToNullCoalescingCompoundAssignment"
  },
  "hash": "bfcb4943c29e24d4b918b27e1fb30ca2d8ebb4f9426602d76eacd1f40813096d"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use compound assignment",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into compound assignment",
  "detailsInfo": "Replace null-coalescing expression with compound assignment [Learn more...](https://www.jetbrains.com/help/rider/ConvertToNullCoalescingCompoundAssignment.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 170,
      "offset": 36,
      "length": 24,
      "code": {
        "startLine": 168,
        "length": 24,
        "offset": 71,
        "surroundingCode": "      if (Mode.IsAssertion)\n      {\n        myCurrentActivationChain = myCurrentActivationChain ?? new Queue<Type>();\n        myCurrentActivationChain.Clear(); // clear previous attempts to activate different types\n      }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertToNullCoalescingCompoundAssignment"
  },
  "hash": "d74e3b26ad163497fad853f2e3689089aa5cd0f954a146601934aef3739d9e21"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use compound assignment",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into compound assignment",
  "detailsInfo": "Replace null-coalescing expression with compound assignment [Learn more...](https://www.jetbrains.com/help/rider/ConvertToNullCoalescingCompoundAssignment.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorAsyncNestedCallsTest.cs",
      "language": "C#",
      "line": 20,
      "offset": 14,
      "length": 73,
      "code": {
        "startLine": 18,
        "length": 73,
        "offset": 84,
        "surroundingCode": "    protected override IScheduler CreateScheduler(bool isServer)\n    {\n      return myCommonScheduler ?? (myCommonScheduler = base.CreateScheduler(isServer));\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToNullCoalescingCompoundAssignment"
  },
  "hash": "fd7967db77e17126029b8c20a02b70b986ec7bd6209d79cf2cf2ed11b8025d9f"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 452,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 450,
        "length": 5,
        "offset": 88,
        "surroundingCode": "      if (action == null) throw new ArgumentNullException(nameof(action));\n      \n      using (var def = new LifetimeDefinition())\n        return action(def.Lifetime);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "035e80b6758aac4599aa8c94481e33ec1ec206aee84d077b032b50fde5da884d"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 809,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 807,
        "length": 5,
        "offset": 41,
        "surroundingCode": "      CheckNotNull(action);\n      \n      using (var cookie = UsingExecuteIfAlive())\n      {\n        return cookie.Succeed ? WrapOrThrow(action, wrapExceptions) : CanceledResult();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "0fbd8f9d688a311ecebcc9e7536232ddf28478c233048e38e379d347928cbe80"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 164,
      "offset": 15,
      "length": 5,
      "code": {
        "startLine": 162,
        "length": 5,
        "offset": 53,
        "surroundingCode": "            lock (tasks)\n            {\n              using (var cookie = UnsafeWriter.NewThreadLocalWriter())\n              {\n                cookie.Writer.Write(++next);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "116dd485c808a498033bc6ff3ca2f79f42ef3703fc11c68fd24882d37279367a"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 834,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 832,
        "length": 5,
        "offset": 41,
        "surroundingCode": "      CheckNotNull(action);\n      \n      using (var cookie = UsingExecuteIfAlive())\n      {\n        return cookie.Succeed ? action() : throw CanceledException();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "22d58799cb0929f3dda7cd467c0b5c2de49e19647823c42c27339a85ffe69204"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 240,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 238,
        "length": 5,
        "offset": 78,
        "surroundingCode": "    private void PutLong(ByteBufferAsyncProcessor buffer, long l)\n    {\n      using (var cookie = UnsafeWriter.NewThreadLocalWriter())\n      {\n        cookie.Writer.Write(l);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "2e438e349139baa3404a79c0a664590f449dff9402508f009f8be00af906a35a"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 931,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 929,
        "length": 5,
        "offset": 51,
        "surroundingCode": "      CheckNotNull(opening, closing);\n      \n      using (var cookie = UsingExecuteIfAlive())\n      {\n        if (!cookie.Succeed)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "3d0a522958772501bbc0e0712b916da1c0f88a301ea497a8fb2cebb26184bb11"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 575,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 573,
        "length": 5,
        "offset": 81,
        "surroundingCode": "      if(action == null) throw new ArgumentNullException(nameof(action));\n\n      using (var def = CreateNested())\n        await action(def.Lifetime);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "42e0cada5ac6719d7a2b098e9103f59547d71d997f257a0340a7bfd31f87e8d3"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 887,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 885,
        "length": 5,
        "offset": 51,
        "surroundingCode": "      CheckNotNull(opening, closing);\n      \n      using (var cookie = UsingExecuteIfAlive())\n      {\n        if (!cookie.Succeed) return CanceledResult();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "45b9287bc79057fe7f9e7ed7bf2eff8fb311d303ab6402b830c0c54b9dbc0f9d"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 899,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 897,
        "length": 5,
        "offset": 51,
        "surroundingCode": "      CheckNotNull(opening, closing);\n      \n      using (var cookie = UsingExecuteIfAlive())\n      {\n        if (!cookie.Succeed) return CanceledResult();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "4a3fe4b6b1136493aa38063f5de907062ce2168fd077352d08f920ba56d2ffe8"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetimed.cs",
      "language": "C#",
      "line": 26,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 24,
        "length": 5,
        "offset": 34,
        "surroundingCode": "      Lifetime = lifetime;\n\n      using (var cookie = lifetime.UsingExecuteIfAlive())\n      {\n        if (!cookie.Succeed) return;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "50c15e36edb9109acabc18c2f83172a8aee695ecb1a95a57b7d73e9661a7c201"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 949,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 947,
        "length": 5,
        "offset": 51,
        "surroundingCode": "      CheckNotNull(opening, closing);\n      \n      using (var cookie = UsingExecuteIfAlive())\n      {\n        if (!cookie.Succeed)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "5105cc451ea556d3ccc539b7d440a5d9bc4b0f1c8fe38206261cc3b4f431b379"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/NativeMemoryPoolTests.cs",
      "language": "C#",
      "line": 107,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 105,
        "length": 5,
        "offset": 32,
        "surroundingCode": "    public void M()\n    {\n      using (var y = UnsafeWriter.NewThreadLocalWriter())\n      {\n        y.Writer.Write(\"hhhhdd\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "5add8af6266343f576a6a444d10a3e087b96148beb662754e2cd14fb6ae35096"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 485,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 483,
        "length": 5,
        "offset": 88,
        "surroundingCode": "      if (action == null) throw new ArgumentNullException(nameof(action));\n      \n      using (var def = CreateNested())\n        return action(def.Lifetime);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "5f4caaf566c157433f750ca4caca4141345c7dbe4f15b4868f4c459f43b26c20"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 914,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 912,
        "length": 5,
        "offset": 51,
        "surroundingCode": "      CheckNotNull(opening, closing);\n      \n      using (var cookie = UsingExecuteIfAlive())\n      {\n        if (!cookie.Succeed)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "6787dd4afd348edf88728a32e386e9e2f1cfab8cb0667576268496c44a5eb9f2"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 300,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 298,
        "length": 5,
        "offset": 26,
        "surroundingCode": "      try\n      {\n        using (var cookie = UsingExecuteIfAlive(true))\n        {\n          if (cookie.Succeed) "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "6aa40241b88b47227878246a0bdf53f282a252a5d82b1ce8a22f49df7fa22248"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 1088,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 1086,
        "length": 5,
        "offset": 51,
        "surroundingCode": "\n      var task = taskCompletionSource.Task;\n      using (var cookie = UsingExecuteIfAlive(true))\n      {\n        if (!cookie.Succeed)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "6c02d7c1319b6d43dc1dd4f287cfc8a2c772b37587cae29c21f8fa4819d43b82"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/IWire.cs",
      "language": "C#",
      "line": 103,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 101,
        "length": 5,
        "offset": 64,
        "surroundingCode": "      Assertion.AssertNotNull(writer, \"writer != null\");\n\n      using (var cookie = UnsafeWriter.NewThreadLocalWriter())\n      {\n        var bookmark = new UnsafeWriter.Bookmark(cookie.Writer);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "6e947294bc392bbe5273445e36684f2721c8904751c7aac5094e521d1455df1e"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 247,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 245,
        "length": 5,
        "offset": 106,
        "surroundingCode": "      var reader = serializerPair.GetReader<T>();\n      var writer = serializerPair.GetWriter<T>();\n      using (var cookie = UnsafeWriter.NewThreadLocalWriter())\n      {\n        unsafe"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "73d1a13a5ccc2071e77bc2b00c2dafd846141360f6eeb8f1cc0830e73d97ec2c"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/SignalTest.cs",
      "language": "C#",
      "line": 27,
      "offset": 11,
      "length": 5,
      "code": {
        "startLine": 25,
        "length": 5,
        "offset": 57,
        "surroundingCode": "        Parallel.For(0, 100000, i =>\n        {\n          using (var ld = new LifetimeDefinition())\n            sig.Advise(ld.Lifetime, x => { });\n        });"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "8da402d8a83e022db6b503186601de89335b403d29dd8e1ca4dc4ac70c539afe"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 1011,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 1009,
        "length": 5,
        "offset": 68,
        "surroundingCode": "          return Terminated.ToCancellationToken();\n        \n        using (var mutex = new UnderMutexCookie(this, LifetimeStatus.Alive))\n        {\n          if (!mutex.Success)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "948b88e03392a926f002bfe6bb7aeae1181f987f1034084ad39a4b6e01aafbb7"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 438,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 436,
        "length": 5,
        "offset": 88,
        "surroundingCode": "      if (action == null) throw new ArgumentNullException(nameof(action));\n      \n      using (var def = new LifetimeDefinition())\n        action(def.Lifetime);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "96843db72fc72208e99ea06faf3edf43f8946c3789ae8495c368c7221f131ef0"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/SignalTest.cs",
      "language": "C#",
      "line": 16,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 14,
        "length": 5,
        "offset": 48,
        "surroundingCode": "    {\n      var sig = new Signal<bool>();\n      using (var run = new LifetimeDefinition())\n      {\n        var lt = run.Lifetime;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "9b192b8b546c9268ee9d26d4150dfba3d9e86b5334c0777a95c76c2058d979ac"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 517,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 515,
        "length": 5,
        "offset": 64,
        "surroundingCode": "        throw new ArgumentNullException(nameof(action));\n\n      using(var def = new LifetimeDefinition())\n        return await action(def.Lifetime);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "a37fd493f0c0b29511591d5e962617e1fc41315aa1607e139c76d04a06a9c900"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 874,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 872,
        "length": 5,
        "offset": 51,
        "surroundingCode": "      CheckNotNull(opening, closing);\n      \n      using (var cookie = UsingExecuteIfAlive())\n      {\n        if (!cookie.Succeed) return CanceledResult();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "a9b16d77e6fc6553e536530296f5fb22f3de117fbe05124c64fe391c855ff078"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 503,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 501,
        "length": 5,
        "offset": 64,
        "surroundingCode": "        throw new ArgumentNullException(nameof(action));\n\n      using(var def = new LifetimeDefinition())\n        await action(def.Lifetime);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "aaa986b3d5f6d1861b811d023aa9d5b1ba4e5d382c6667324585b6e6230bfcfb"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 561,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 559,
        "length": 5,
        "offset": 81,
        "surroundingCode": "      if(action == null) throw new ArgumentNullException(nameof(action));\n\n      using (var def = CreateNested())\n        return await action(def.Lifetime);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "b345893886402cc199ae55402b31bd263198e83db02170e4a3365bc145b95029"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 585,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 583,
        "length": 5,
        "offset": 28,
        "surroundingCode": "        return true;\n\n      using (var mutex = new UnderMutexCookie(this, LifetimeStatus.Canceling))\n      {\n        if (!mutex.Success)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "c25c0b1a0c9c67eab4a72f5e0d705add34a444bd799d0e9d0b5ea92137161c6a"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Test.Reflection.App/Program.cs",
      "language": "C#",
      "line": 47,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 45,
        "length": 5,
        "offset": 48,
        "surroundingCode": "    static void Main(string[] args)\n    {\n      using (var lifetimeDefinition = new LifetimeDefinition())\n        MainLifetime(args, lifetimeDefinition);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Reflection.App",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "c50b5890829599b1fb78db14e027f698fb72b255a4f26c113a1ce1bda940860a"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 844,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 842,
        "length": 5,
        "offset": 41,
        "surroundingCode": "      CheckNotNull(action);\n      \n      using (var cookie = UsingExecuteIfAlive())\n      {\n        if (cookie.Succeed)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "cf303075abb66fbd15e96762974915e4910c62397dd7e0f9beb43ecfab4dc0ba"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdExtBase.cs",
      "language": "C#",
      "line": 233,
      "offset": 11,
      "length": 5,
      "code": {
        "startLine": 231,
        "length": 5,
        "offset": 71,
        "surroundingCode": "        if (mySendQ.Count > 0 || !Connected.Value)\n        {\n          using (var cookie = UnsafeWriter.NewThreadLocalWriter())\n          {\n            writer(param, cookie.Writer);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "e4448212dd9cb3635922146374b663548401352d3136a76bb8941e90b439af8a"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 280,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 278,
        "length": 5,
        "offset": 26,
        "surroundingCode": "      try\n      {\n        using (var cookie = UsingExecuteIfAlive(true))\n        {\n          if (cookie.Succeed) "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "e484a01cbf8d715d51a6e0491ebbb91865049a156b4467d5b9749a8a7d1d6715"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/NativeMemoryPoolTests.cs",
      "language": "C#",
      "line": 80,
      "offset": 11,
      "length": 5,
      "code": {
        "startLine": 78,
        "length": 5,
        "offset": 66,
        "surroundingCode": "        for (int a = 0; a < 100_000_000; a++)\n        {\n          using (var y = UnsafeWriter.NewThreadLocalWriter())\n          {\n            y.Writer.Write(\"hhhhdd\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "e7e6a49fe63cfc557504f237fdda3dac03551407cd4c5d5ecb735a4374d56512"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 819,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 817,
        "length": 5,
        "offset": 41,
        "surroundingCode": "      CheckNotNull(action);\n      \n      using (var cookie = UsingExecuteIfAlive())\n      {\n        return cookie.Succeed ? WrapOrThrow(action, wrapExceptions) : CanceledResult();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "f94205071d856453db3b7cac82f079ba6b039f1eb68f98aac8a68a5e837bea9f"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert into 'using' declaration",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Convert into 'using' declaration",
  "detailsInfo": "Replace 'using' statement with 'using' declaration",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 469,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 467,
        "length": 5,
        "offset": 88,
        "surroundingCode": "      if (action == null) throw new ArgumentNullException(nameof(action));\n      \n      using (var def = CreateNested())\n        action(def.Lifetime);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ConvertToUsingDeclaration"
  },
  "hash": "fde50e618af6371e2f2371e1a1aae036a2a1ca9527b6def22feb341f1b8b2414"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Use null check pattern instead of a type check succeeding on any not-null value",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Use not null pattern instead of a type check succeeding on any not-null value",
  "detailsInfo": "The source expression is always of pattern's type, matches on all non-null values",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 444,
      "offset": 57,
      "length": 17,
      "code": {
        "startLine": 442,
        "length": 17,
        "offset": 121,
        "surroundingCode": "    public static Type? GetRpcInterface(TypeInfo typeInfo)\n    {\n      if (typeInfo.GetCustomAttribute<RdExtAttribute>() is RdExtAttribute rdExt && rdExt.RdRpcInterface != null)\n        return rdExt.RdRpcInterface;\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "ConvertTypeCheckPatternToNullCheck"
  },
  "hash": "dd7a0663d27c20542d4800ae5add3b89a8b1dfede57053539289f9c0def9b0b4"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Empty general catch clause",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Empty general catch clause suppresses any errors",
  "detailsInfo": "A catch clause that catches System.Exception and has an empty body [Learn more...](https://www.jetbrains.com/help/rider/EmptyGeneralCatchClause.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 212,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 210,
        "length": 5,
        "offset": 24,
        "surroundingCode": "        }\n      }\n      catch (Exception)\n      {\n      }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "EmptyGeneralCatchClause"
  },
  "hash": "b454e32a3948d2189e8b624e38ca3435f000a92bb69dc12475fa98bc8f92705d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Empty namespace declaration",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Empty namespace declaration is redundant",
  "detailsInfo": "Empty namespace declaration is redundant [Learn more...](https://www.jetbrains.com/help/rider/EmptyNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ScopedAsyncLocal.cs",
      "language": "C#",
      "line": 4,
      "offset": 11,
      "length": 19,
      "code": {
        "startLine": 2,
        "length": 19,
        "offset": 35,
        "surroundingCode": "using System.Threading;\n\nnamespace JetBrains.Threading\n{\n  #if !NET35"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "EmptyNamespace"
  },
  "hash": "0f6646b0c0f87cadb70bdab2b26c60dea10376584e6983d41e1b346583648893"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Empty namespace declaration",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Empty namespace declaration is redundant",
  "detailsInfo": "Empty namespace declaration is redundant [Learn more...](https://www.jetbrains.com/help/rider/EmptyNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/BlockingPriorityQueueTest.cs",
      "language": "C#",
      "line": 11,
      "offset": 11,
      "length": 26,
      "code": {
        "startLine": 9,
        "length": 26,
        "offset": 58,
        "surroundingCode": "using Lifetime = JetBrains.Lifetimes.Lifetime;\n\nnamespace Test.Lifetimes.Collections\n{\n#if !NET35"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "EmptyNamespace"
  },
  "hash": "138170411f0a2c6b8fc721484e8c4282a2c3d6f3ea1a4f99e2bb6a47f99b3d8e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Empty namespace declaration",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Empty namespace declaration is redundant",
  "detailsInfo": "Empty namespace declaration is redundant [Learn more...](https://www.jetbrains.com/help/rider/EmptyNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/SchedulerWrapperTest.cs",
      "language": "C#",
      "line": 8,
      "offset": 11,
      "length": 35,
      "code": {
        "startLine": 6,
        "length": 35,
        "offset": 34,
        "surroundingCode": "using NUnit.Framework;\n\nnamespace Test.Lifetimes.Collections.Viewable\n{\n#if !NET35"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "EmptyNamespace"
  },
  "hash": "1ca2f8868cd8f06c18516e063cc57c4ce03547ceba7402af617b0f8ecd2e3475"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Empty namespace declaration",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Empty namespace declaration is redundant",
  "detailsInfo": "Empty namespace declaration is redundant [Learn more...](https://www.jetbrains.com/help/rider/EmptyNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ChannelTest.cs",
      "language": "C#",
      "line": 7,
      "offset": 11,
      "length": 24,
      "code": {
        "startLine": 5,
        "length": 24,
        "offset": 34,
        "surroundingCode": "using NUnit.Framework;\n\nnamespace Test.Lifetimes.Threading\n{\n#if !NET35"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "EmptyNamespace"
  },
  "hash": "1e3ca5322d89411ed1a6877c9fc12381e0a571704a483a71d5e2dd1e4008dcaf"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Empty namespace declaration",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Empty namespace declaration is redundant",
  "detailsInfo": "Empty namespace declaration is redundant [Learn more...](https://www.jetbrains.com/help/rider/EmptyNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ActorTest.cs",
      "language": "C#",
      "line": 12,
      "offset": 11,
      "length": 24,
      "code": {
        "startLine": 10,
        "length": 24,
        "offset": 34,
        "surroundingCode": "using NUnit.Framework;\n\nnamespace Test.Lifetimes.Threading\n{\n#if !NET35"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "EmptyNamespace"
  },
  "hash": "91c8f43bb6c9bf79b65e6e296266fc9dd1a2c1129c412190f5a657ec0d072243"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Empty namespace declaration",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Empty namespace declaration is redundant",
  "detailsInfo": "Empty namespace declaration is redundant [Learn more...](https://www.jetbrains.com/help/rider/EmptyNamespace.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Synchronized/SynchronizedSet.cs",
      "language": "C#",
      "line": 7,
      "offset": 11,
      "length": 34,
      "code": {
        "startLine": 5,
        "length": 34,
        "offset": 40,
        "surroundingCode": "using JetBrains.Annotations;\n\nnamespace JetBrains.Collections.Synchronized\n{\n  #if !NET35"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "EmptyNamespace"
  },
  "hash": "cd3fa04da124a59f60930176f35634c3c3051f8b38d4af5d373240e2a30aa0d0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Empty region",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "This region is empty",
  "detailsInfo": "Region doesn't contain any code and can be removed",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdReactiveBase.cs",
      "language": "C#",
      "line": 21,
      "offset": 5,
      "length": 38,
      "code": {
        "startLine": 19,
        "length": 38,
        "offset": 6,
        "surroundingCode": "\n\n    #region Identification\n\n    #endregion\n\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "EmptyRegion"
  },
  "hash": "9116a6ee83a045882b332a769b1d79a405d3512545188ac8764e6455c75f0e84"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Event is never subscribed to (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Event 'Handlers' is never subscribed to",
  "detailsInfo": "Event is never subscribed to",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Internal/LogBase.cs",
      "language": "C#",
      "line": 53,
      "offset": 42,
      "length": 8,
      "code": {
        "startLine": 51,
        "length": 8,
        "offset": 98,
        "surroundingCode": "  public abstract class LogFactoryBase : ILogFactory\n  {\n    public event Action<LeveledMessage>? Handlers;\n\n    public ILog GetLog(string category)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "EventNeverSubscribedTo.Global"
  },
  "hash": "128b1354da7e37a895408a51934fe22d99ac3a9474d29614c06a80db67023d33"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Expression is always 'null'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Expression is always null",
  "detailsInfo": "The expression is always evaluated to 'null' at this point",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Diagnostics/InterpolatedStringHandlerTests.cs",
      "language": "C#",
      "line": 238,
      "offset": 17,
      "length": 9,
      "code": {
        "startLine": 236,
        "length": 9,
        "offset": 65,
        "surroundingCode": "      Assert.Throws<TestException>(() =>\n      {\n        var _ = nullValue.NotNull($\"{ThrowTestException()}\");\n      });\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ExpressionIsAlwaysNull"
  },
  "hash": "62dfba9c3071dc4523193d862840eb5cceae3bcae047ab5fb6d6cbb4d2dce26f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Expression is always 'null'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Expression is always null",
  "detailsInfo": "The expression is always evaluated to 'null' at this point",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Diagnostics/InterpolatedStringHandlerTests.cs",
      "language": "C#",
      "line": 227,
      "offset": 17,
      "length": 9,
      "code": {
        "startLine": 225,
        "length": 9,
        "offset": 65,
        "surroundingCode": "      Assert.Throws<TestException>(() =>\n      {\n        var _ = nullValue.NotNull($\"{ThrowTestException()}\");\n      });\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ExpressionIsAlwaysNull"
  },
  "hash": "662e66d8c4d86aba95330ef5895edf61714c04c3cf055bdd928160cf6f2f5278"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 154,
      "offset": 44,
      "length": 29,
      "code": {
        "startLine": 152,
        "length": 29,
        "offset": 165,
        "surroundingCode": "    };\n    public static CtxWriteDelegate<string> WriteStringInternedAtInExt = Serializers.WriteString.Interned(\"InExt\");\n    public static CtxWriteDelegate<string> WriteStringInternedAtOutOfExt = Serializers.WriteString.Interned(\"OutOfExt\");\n    public static CtxWriteDelegate<string> WriteStringInternedAtProtocol = Serializers.WriteString.Interned(\"Protocol\");\n    //custom body"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "0076ed5b754e6b55b04e0e792629770375ce7f3e1a8ca319b036f198e85e422e"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 26,
      "offset": 25,
      "length": 9,
      "code": {
        "startLine": 24,
        "length": 9,
        "offset": 174,
        "surroundingCode": "      /// lead to exception thrown by <see cref=\"System.Net.Sockets.Socket.Receive(byte[],int,System.Net.Sockets.SocketFlags)\"/>\n      /// </summary>\n      public static int TimeoutMs = 500;\n\n      private const int ACK_MSG_LEN = -1;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "10a135efea08a2c1271eff09aba67ae8194d89eec2c14cb7dda7b7e5732e5673"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 229,
      "offset": 61,
      "length": 44,
      "code": {
        "startLine": 227,
        "length": 44,
        "offset": 89,
        "surroundingCode": "      return _result;\n    };\n    public static CtxReadDelegate<InterningNestedTestModel> ReadInterningNestedTestModelInternedNullable = InterningNestedTestModel.Read.Interned(\"Test\").NullableClass();\n    \n    public static CtxWriteDelegate<InterningNestedTestModel> Write = (ctx, writer, value) => "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "1c7dcb46e2b8f417df85393f8806740b3cca0279158b9f053a3df0a5732ce1cf"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 539,
      "offset": 64,
      "length": 5,
      "code": {
        "startLine": 537,
        "length": 5,
        "offset": 186,
        "surroundingCode": "    public static CtxReadDelegate<string> ReadStringInternedAtProtocol = Serializers.ReadString.Interned(\"Protocol\");\n    \n    public static CtxWriteDelegate<ProtocolWrappedStringModel> Write = (ctx, writer, value) => \n    {\n      ctx.WriteInterned(writer, value.Text, \"Protocol\", Serializers.WriteString);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "1ef4245fdc177c2c120c3eac9c23e9332aac414fc2bf5c4865aba59786a6a397"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 142,
      "offset": 43,
      "length": 28,
      "code": {
        "startLine": 140,
        "length": 28,
        "offset": 161,
        "surroundingCode": "    };\n    public static CtxReadDelegate<string> ReadStringInternedAtInExt = Serializers.ReadString.Interned(\"InExt\");\n    public static CtxReadDelegate<string> ReadStringInternedAtOutOfExt = Serializers.ReadString.Interned(\"OutOfExt\");\n    public static CtxReadDelegate<string> ReadStringInternedAtProtocol = Serializers.ReadString.Interned(\"Protocol\");\n    "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "27c705a05ee6cece19e7bf075c874405912a2e2f253b1d6eeea1935b91ba208c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorCustomSignalTest.cs",
      "language": "C#",
      "line": 100,
      "offset": 19,
      "length": 2,
      "code": {
        "startLine": 98,
        "length": 2,
        "offset": 45,
        "surroundingCode": "  public class Payload\n  {\n    public string v1;\n    public string v2;\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "2cb81317cb4165311887c45f3bfd006626254d294a1c8e144d8019ba6424f2bb"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 320,
      "offset": 68,
      "length": 43,
      "code": {
        "startLine": 318,
        "length": 43,
        "offset": 187,
        "surroundingCode": "    };\n    public static CtxWriteDelegate<string> WriteStringInternedAtTest = Serializers.WriteString.Interned(\"Test\");\n    public static CtxWriteDelegate<InterningNestedTestStringModel> WriteInterningNestedTestStringModelNullable = InterningNestedTestStringModel.Write.NullableClass();\n    //custom body\n    //equals trait"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "2f7942d29889f99d41e38a48eb6d0dfdc9f802c564abdc57bdae22903394b280"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 65,
      "offset": 57,
      "length": 31,
      "code": {
        "startLine": 63,
        "length": 31,
        "offset": 194,
        "surroundingCode": "\n    public static CtxReadDelegate<RdTextBufferChange?> ReadRdTextBufferChangeNullable = RdTextBufferChange.ReadDelegate.NullableClass();\n    public static CtxWriteDelegate<RdTextBufferChange?> WriteRdTextBufferChangeNullable = RdTextBufferChange.WriteDelegate.NullableClass();\n\n    public static CtxReadDelegate<RdTextBufferState> Read = (ctx, reader) =>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "471aaa7f6d4728068adae7e5c3659fced37e4a2b4711f61089f7b3b1b3c4fdc9"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/ExtCreationInfo.cs",
      "language": "C#",
      "line": 8,
      "offset": 18,
      "length": 4,
      "code": {
        "startLine": 6,
        "length": 4,
        "offset": 53,
        "surroundingCode": "  public struct ExtCreationInfo\n  {\n    public RName Name;\n    public RdId? Id;\n    public long Hash;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "55d5bfe74065baaee92e1a3a796c1efff2faeb0a781a588a585bd43e0e513b06"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 155,
      "offset": 44,
      "length": 29,
      "code": {
        "startLine": 153,
        "length": 29,
        "offset": 279,
        "surroundingCode": "    public static CtxWriteDelegate<string> WriteStringInternedAtInExt = Serializers.WriteString.Interned(\"InExt\");\n    public static CtxWriteDelegate<string> WriteStringInternedAtOutOfExt = Serializers.WriteString.Interned(\"OutOfExt\");\n    public static CtxWriteDelegate<string> WriteStringInternedAtProtocol = Serializers.WriteString.Interned(\"Protocol\");\n    //custom body\n    //equals trait"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "594e115d4fd18f6b98e20036f6d46d5bb23c8cd97174799b9b202bdbaf927196"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 143,
      "offset": 43,
      "length": 28,
      "code": {
        "startLine": 141,
        "length": 28,
        "offset": 272,
        "surroundingCode": "    public static CtxReadDelegate<string> ReadStringInternedAtInExt = Serializers.ReadString.Interned(\"InExt\");\n    public static CtxReadDelegate<string> ReadStringInternedAtOutOfExt = Serializers.ReadString.Interned(\"OutOfExt\");\n    public static CtxReadDelegate<string> ReadStringInternedAtProtocol = Serializers.ReadString.Interned(\"Protocol\");\n    \n    public static CtxWriteDelegate<InterningExtRootModel> Write = (ctx, writer, value) => "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "5eeadd7c74f7b904afcb5beea1d42f0107dc09e7375efa365c59bf89b7ffafbc"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RpcTimeouts.cs",
      "language": "C#",
      "line": 28,
      "offset": 24,
      "length": 18,
      "code": {
        "startLine": 26,
        "length": 18,
        "offset": 99,
        "surroundingCode": "    /// <see cref=\"RdCall{TReq,TRes}.Sync\"/> by default.\n    /// </summary>\n    public static bool RespectRpcTimeouts = true;\n\n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "613e5bddc54c8acc5780deba6ef287f05e308b2c9c39cc56eabccc5dff9b33b9"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 141,
      "offset": 43,
      "length": 25,
      "code": {
        "startLine": 139,
        "length": 25,
        "offset": 71,
        "surroundingCode": "      return _result;\n    };\n    public static CtxReadDelegate<string> ReadStringInternedAtInExt = Serializers.ReadString.Interned(\"InExt\");\n    public static CtxReadDelegate<string> ReadStringInternedAtOutOfExt = Serializers.ReadString.Interned(\"OutOfExt\");\n    public static CtxReadDelegate<string> ReadStringInternedAtProtocol = Serializers.ReadString.Interned(\"Protocol\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "622fafa314892002b17babd400c74f086c828ce62fd106b8d9cdae28734c4b95"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdMap.cs",
      "language": "C#",
      "line": 73,
      "offset": 17,
      "length": 8,
      "code": {
        "startLine": 71,
        "length": 8,
        "offset": 82,
        "surroundingCode": "    private const int Ack = (int)AddUpdateRemove.Remove + 1;\n    \n    public bool IsMaster = false;\n    private long myNextVersion;\n    private readonly Dictionary<K, long> myPendingForAck = new Dictionary<K, long>();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "628a9d3fc2d3a177102f9c23436e01bc2d84a77ffe070751428b852f2f3e26b9"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 158,
      "offset": 53,
      "length": 4,
      "code": {
        "startLine": 156,
        "length": 4,
        "offset": 71,
        "surroundingCode": "    //statics\n    \n    public static CtxReadDelegate<InterningMtModel> Read = (ctx, reader) => \n    {\n      var _id = RdId.Read(reader);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "6395bcac7a0b0f66ae46d98cfa7b08aef5c34a13aafad3a372d596b98af226ee"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 482,
      "offset": 56,
      "length": 5,
      "code": {
        "startLine": 480,
        "length": 5,
        "offset": 67,
        "surroundingCode": "    };\n    \n    public static CtxWriteDelegate<InterningTestModel> Write = (ctx, writer, value) => \n    {\n      value.RdId.Write(writer);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "6a62a63ccf17e807a1b8503ffe7e88b0ab9259b6568ddd15a9d4b9a88e57202a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 304,
      "offset": 67,
      "length": 4,
      "code": {
        "startLine": 302,
        "length": 4,
        "offset": 85,
        "surroundingCode": "    //statics\n    \n    public static CtxReadDelegate<InterningNestedTestStringModel> Read = (ctx, reader) => \n    {\n      var value = ctx.ReadInterned(reader, \"Test\", Serializers.ReadString);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "73d5b272185db51c3b3b097c9abe52c19e0b1911783d42ec2691dc07155c741c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 167,
      "offset": 43,
      "length": 24,
      "code": {
        "startLine": 165,
        "length": 24,
        "offset": 71,
        "surroundingCode": "      return _result;\n    };\n    public static CtxReadDelegate<string> ReadStringInternedAtTest = Serializers.ReadString.Interned(\"Test\");\n    \n    public static CtxWriteDelegate<InterningMtModel> Write = (ctx, writer, value) => "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "7cf1d79e97c2f98cfa2aa4c0af30c19b295b7c38367835e38e5af526f68df7a9"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferChange.cs",
      "language": "C#",
      "line": 20,
      "offset": 55,
      "length": 12,
      "code": {
        "startLine": 18,
        "length": 12,
        "offset": 61,
        "surroundingCode": "    }\n\n    public static CtxReadDelegate<RdTextBufferChange> ReadDelegate = (ctx, stream) =>\n    {\n      var masterVersionRemote = stream.ReadInt();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "7fef4cd0dc28a431b01ac3ae546db5cb7838e35f9dbffc5fe512b8c0bb1e3e1d"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdAssertion.cs",
      "language": "C#",
      "line": 41,
      "offset": 49,
      "length": 5,
      "code": {
        "startLine": 39,
        "length": 5,
        "offset": 60,
        "surroundingCode": "    };\n    \n    public static CtxWriteDelegate<RdAssertion> Write = (ctx, writer, value) => \n    {\n      writer.Write(value.MasterVersion);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "810b816e12ff4f155052d872dff5111352507de3df51decf412216df08a3011f"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 145,
      "offset": 59,
      "length": 5,
      "code": {
        "startLine": 143,
        "length": 5,
        "offset": 181,
        "surroundingCode": "    public static CtxReadDelegate<string> ReadStringInternedAtProtocol = Serializers.ReadString.Interned(\"Protocol\");\n    \n    public static CtxWriteDelegate<InterningExtRootModel> Write = (ctx, writer, value) => \n    {\n      value.RdId.Write(writer);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "8983f5867c4a85e96a8e25dcfab0201a1749d8c750364a44394bf9b1ff749b3b"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 399,
      "offset": 64,
      "length": 4,
      "code": {
        "startLine": 397,
        "length": 4,
        "offset": 82,
        "surroundingCode": "    //statics\n    \n    public static CtxReadDelegate<InterningProtocolLevelModel> Read = (ctx, reader) => \n    {\n      var _id = RdId.Read(reader);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "8ed53fdb0e781cc4af6ce7ad41bb51057df69e834743bcfab35dc74eea571222"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 131,
      "offset": 58,
      "length": 4,
      "code": {
        "startLine": 129,
        "length": 4,
        "offset": 76,
        "surroundingCode": "    //statics\n    \n    public static CtxReadDelegate<InterningExtRootModel> Read = (ctx, reader) => \n    {\n      var _id = RdId.Read(reader);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "97be6988e50f4d38c82b7611f6c8c115e6fc604aff7670c60aa20861779eb044"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 472,
      "offset": 55,
      "length": 4,
      "code": {
        "startLine": 470,
        "length": 4,
        "offset": 73,
        "surroundingCode": "    //statics\n    \n    public static CtxReadDelegate<InterningTestModel> Read = (ctx, reader) => \n    {\n      var _id = RdId.Read(reader);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "9a4a7e6d9171c0c0a48dd554b0a67c718b872394cddff0adb0a69d76207c1200"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 153,
      "offset": 44,
      "length": 26,
      "code": {
        "startLine": 151,
        "length": 26,
        "offset": 128,
        "surroundingCode": "      value.mySerializationContext = ctx.WithInternRootsHere(value, \"InExt\");\n    };\n    public static CtxWriteDelegate<string> WriteStringInternedAtInExt = Serializers.WriteString.Interned(\"InExt\");\n    public static CtxWriteDelegate<string> WriteStringInternedAtOutOfExt = Serializers.WriteString.Interned(\"OutOfExt\");\n    public static CtxWriteDelegate<string> WriteStringInternedAtProtocol = Serializers.WriteString.Interned(\"Protocol\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "9c1c06741679b22d067cb5870d3975b024e11c5225215eabbd479e159f5126e0"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/RuntimeInfo.cs",
      "language": "C#",
      "line": 10,
      "offset": 28,
      "length": 18,
      "code": {
        "startLine": 8,
        "length": 18,
        "offset": 65,
        "surroundingCode": "  public static class RuntimeInfo\n  {\n    public static Version? CurrentMonoVersion;\n    public static readonly bool IsRunningOnMono; \n    public static readonly bool IsRunningUnderWindows;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "9c209cfb6a469119a89e8ed43eb7789f478da3049e5853b5b4671b35f5406620"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdProperty.cs",
      "language": "C#",
      "line": 82,
      "offset": 17,
      "length": 8,
      "code": {
        "startLine": 80,
        "length": 8,
        "offset": 39,
        "surroundingCode": "    #region Mastering\n\n    public bool IsMaster = false;\n    private int myMasterVersion;\n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "9e629d1bba895984e64fe4cb3eb64abb352714bbfde2e7ff3860789d5ca9777a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/TextBufferVersionSerializer.cs",
      "language": "C#",
      "line": 5,
      "offset": 54,
      "length": 12,
      "code": {
        "startLine": 3,
        "length": 12,
        "offset": 107,
        "surroundingCode": "  public static class TextBufferVersionSerializer\n  {\n    public static CtxReadDelegate<TextBufferVersion> ReadDelegate = (ctx, stream) =>\n    {\n      var masterVersion = stream.ReadInt();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "a044297a228d5a1f825a05e351aa2419f8796bbe8bce56295016511427e36ff9"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 314,
      "offset": 68,
      "length": 5,
      "code": {
        "startLine": 312,
        "length": 5,
        "offset": 236,
        "surroundingCode": "    public static CtxReadDelegate<InterningNestedTestStringModel> ReadInterningNestedTestStringModelNullable = InterningNestedTestStringModel.Read.NullableClass();\n    \n    public static CtxWriteDelegate<InterningNestedTestStringModel> Write = (ctx, writer, value) => \n    {\n      ctx.WriteInterned(writer, value.Value, \"Test\", Serializers.WriteString);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "a2856dadc79824d42ed75c080a26211a560cdc8233540880e62e632f624f32ea"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdAssertion.cs",
      "language": "C#",
      "line": 33,
      "offset": 48,
      "length": 4,
      "code": {
        "startLine": 31,
        "length": 4,
        "offset": 66,
        "surroundingCode": "    //statics\n    \n    public static CtxReadDelegate<RdAssertion> Read = (ctx, reader) => \n    {\n      var masterVersion = reader.ReadInt();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "ace13c812c7b4c27e53c1ae8580cba8a42ed6951586ad7ae1cf35415b0fa432c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/ExtCreationInfo.cs",
      "language": "C#",
      "line": 10,
      "offset": 17,
      "length": 4,
      "code": {
        "startLine": 8,
        "length": 4,
        "offset": 60,
        "surroundingCode": "    public RName Name;\n    public RdId? Id;\n    public long Hash;\n    public RdExtBase? Ext;\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "b6476372f480ed2c2c4477e7f5fe9ed7d471454ebecfaeef7b07af875ba667b2"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 176,
      "offset": 44,
      "length": 25,
      "code": {
        "startLine": 174,
        "length": 25,
        "offset": 127,
        "surroundingCode": "      value.mySerializationContext = ctx.WithInternRootsHere(value, \"Test\");\n    };\n    public static CtxWriteDelegate<string> WriteStringInternedAtTest = Serializers.WriteString.Interned(\"Test\");\n    //custom body\n    //equals trait"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "bd1c8d0f3155661bad11aeb5f5bd33dbe09287ca88f1ac028d349bdbb49289b6"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 23,
      "offset": 28,
      "length": 8,
      "code": {
        "startLine": 21,
        "length": 8,
        "offset": 87,
        "surroundingCode": "    public static string RiderFolderPath = \"c:/work/Uber\";\n\n    public static string[] Packages = {\"JetBrains.Lifetimes\", \"JetBrains.RdFramework\", \"JetBrains.RdFramework.Reflection\", \"JetBrains.RdGen\"};\n    \n    static readonly Type t = typeof(Program);"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "bd56fde39832d6c3a671014815977cab9f6c54534cafdc340de1cc5b6b28f2f0"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 614,
      "offset": 56,
      "length": 5,
      "code": {
        "startLine": 612,
        "length": 5,
        "offset": 170,
        "surroundingCode": "    public static CtxReadDelegate<string> ReadStringInternedAtTest = Serializers.ReadString.Interned(\"Test\");\n    \n    public static CtxWriteDelegate<WrappedStringModel> Write = (ctx, writer, value) => \n    {\n      ctx.WriteInterned(writer, value.Text, \"Test\", Serializers.WriteString);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "c4956ddd63054d387ff66260ce9101cab96b19f11fb799e06004429c5a863e0c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 169,
      "offset": 54,
      "length": 5,
      "code": {
        "startLine": 167,
        "length": 5,
        "offset": 168,
        "surroundingCode": "    public static CtxReadDelegate<string> ReadStringInternedAtTest = Serializers.ReadString.Interned(\"Test\");\n    \n    public static CtxWriteDelegate<InterningMtModel> Write = (ctx, writer, value) => \n    {\n      value.RdId.Write(writer);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "c7a4326f4f5321cc6ef4f794e42134605f4631dd7985452af2c4919aa2344245"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/TextBufferVersionSerializer.cs",
      "language": "C#",
      "line": 12,
      "offset": 55,
      "length": 13,
      "code": {
        "startLine": 10,
        "length": 13,
        "offset": 62,
        "surroundingCode": "    };\n\n    public static CtxWriteDelegate<TextBufferVersion> WriteDelegate = (ctx, writer, value) =>\n    {\n      writer.Write(value.Master);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "ce389c9c3b6c87f98f0b240f9359a84d30a541f29c99cce30ee9997019da8326"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 99,
      "offset": 62,
      "length": 5,
      "code": {
        "startLine": 97,
        "length": 5,
        "offset": 73,
        "surroundingCode": "    };\n    \n    public static CtxWriteDelegate<InterningExtensionHolder> Write = (ctx, writer, value) => \n    {\n      value.RdId.Write(writer);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "d0aeb2eda2ba5e2f0539f4764638be5dddfc558c3fe773b4fd2ce7ada0fe2187"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 408,
      "offset": 65,
      "length": 5,
      "code": {
        "startLine": 406,
        "length": 5,
        "offset": 76,
        "surroundingCode": "    };\n    \n    public static CtxWriteDelegate<InterningProtocolLevelModel> Write = (ctx, writer, value) => \n    {\n      value.RdId.Write(writer);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "d9b80ce4ef465b82d25917eb482b4e808e7a31c365d2a5a9ba03bf1c208fe362"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/RdTextChangeSerializer.cs",
      "language": "C#",
      "line": 7,
      "offset": 49,
      "length": 12,
      "code": {
        "startLine": 5,
        "length": 12,
        "offset": 97,
        "surroundingCode": "  public static class RdTextChangeSerializer\n  {\n    public static CtxReadDelegate<RdTextChange> ReadDelegate = (ctx, stream) =>\n    {\n      var kind = (RdTextChangeKind)stream.ReadInt();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "dabc87ef497b30e60dd0f5731216f685f32d55b311478358d341ad7e02f0414f"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 231,
      "offset": 62,
      "length": 5,
      "code": {
        "startLine": 229,
        "length": 5,
        "offset": 237,
        "surroundingCode": "    public static CtxReadDelegate<InterningNestedTestModel> ReadInterningNestedTestModelInternedNullable = InterningNestedTestModel.Read.Interned(\"Test\").NullableClass();\n    \n    public static CtxWriteDelegate<InterningNestedTestModel> Write = (ctx, writer, value) => \n    {\n      writer.Write(value.Value);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "dd75e79e916f207cfc76c9ded0cd4615411ada5ad442f3d0a9747d3fbf4064a1"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferChange.cs",
      "language": "C#",
      "line": 30,
      "offset": 56,
      "length": 13,
      "code": {
        "startLine": 28,
        "length": 13,
        "offset": 63,
        "surroundingCode": "    };\n\n    public static CtxWriteDelegate<RdTextBufferChange> WriteDelegate = (ctx, writer, value) =>\n    {\n      var version = value.Version;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "e4c4aa26bd61574f38ca495668809a2ade1aa8937c826fbdd5f87a77e9fc915e"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 222,
      "offset": 61,
      "length": 4,
      "code": {
        "startLine": 220,
        "length": 4,
        "offset": 79,
        "surroundingCode": "    //statics\n    \n    public static CtxReadDelegate<InterningNestedTestModel> Read = (ctx, reader) => \n    {\n      var value = reader.ReadString();"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "e4f80a558f3ec5e87a65966f49ba8831b22def9391e1dda48468044c43f4a83c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 236,
      "offset": 62,
      "length": 45,
      "code": {
        "startLine": 234,
        "length": 45,
        "offset": 147,
        "surroundingCode": "      WriteInterningNestedTestModelInternedNullable(ctx, writer, value.Inner);\n    };\n    public static CtxWriteDelegate<InterningNestedTestModel> WriteInterningNestedTestModelInternedNullable = InterningNestedTestModel.Write.Interned(\"Test\").NullableClass();\n    //custom body\n    //equals trait"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "e65213057c11a91c245e42f3cd94d9690577fbb3c1ed790fb1e19d452dce97de"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 606,
      "offset": 55,
      "length": 4,
      "code": {
        "startLine": 604,
        "length": 4,
        "offset": 73,
        "surroundingCode": "    //statics\n    \n    public static CtxReadDelegate<WrappedStringModel> Read = (ctx, reader) => \n    {\n      var text = ctx.ReadInterned(reader, \"Test\", Serializers.ReadString);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "e94cc5d46e0eec0789e540dbf056239ccde192c2c4c7ec4c8f160d8402946a1f"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 531,
      "offset": 63,
      "length": 4,
      "code": {
        "startLine": 529,
        "length": 4,
        "offset": 81,
        "surroundingCode": "    //statics\n    \n    public static CtxReadDelegate<ProtocolWrappedStringModel> Read = (ctx, reader) => \n    {\n      var text = ctx.ReadInterned(reader, \"Protocol\", Serializers.ReadString);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "eabc155e2a5f74dd0df9d4c683784df1f0e701c333f36f7deeebe2731a5b4a92"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 91,
      "offset": 61,
      "length": 4,
      "code": {
        "startLine": 89,
        "length": 4,
        "offset": 79,
        "surroundingCode": "    //statics\n    \n    public static CtxReadDelegate<InterningExtensionHolder> Read = (ctx, reader) => \n    {\n      var _id = RdId.Read(reader);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "ec5d76eec67cb053a8d3a9caf29335d76bd0a322c7c64b6c2dc3c00b4eb0c274"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 312,
      "offset": 67,
      "length": 42,
      "code": {
        "startLine": 310,
        "length": 42,
        "offset": 183,
        "surroundingCode": "    };\n    public static CtxReadDelegate<string> ReadStringInternedAtTest = Serializers.ReadString.Interned(\"Test\");\n    public static CtxReadDelegate<InterningNestedTestStringModel> ReadInterningNestedTestStringModelNullable = InterningNestedTestStringModel.Read.NullableClass();\n    \n    public static CtxWriteDelegate<InterningNestedTestStringModel> Write = (ctx, writer, value) => "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "ef1f50acc8584272ffcf6188ec4b17072683eff43d822a21b7cb6839fe68484f"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 64,
      "offset": 56,
      "length": 30,
      "code": {
        "startLine": 62,
        "length": 30,
        "offset": 70,
        "surroundingCode": "    //statics\n\n    public static CtxReadDelegate<RdTextBufferChange?> ReadRdTextBufferChangeNullable = RdTextBufferChange.ReadDelegate.NullableClass();\n    public static CtxWriteDelegate<RdTextBufferChange?> WriteRdTextBufferChangeNullable = RdTextBufferChange.WriteDelegate.NullableClass();\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "f16555e503c5a678d54cbebdaf96b1752d17ad2e487df7497524e992d0f5a120"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/RdTextChangeSerializer.cs",
      "language": "C#",
      "line": 17,
      "offset": 50,
      "length": 13,
      "code": {
        "startLine": 15,
        "length": 13,
        "offset": 57,
        "surroundingCode": "    };\n\n    public static CtxWriteDelegate<RdTextChange> WriteDelegate = (ctx, writer, value) =>\n    {\n      writer.Write((int)value.Kind);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Global"
  },
  "hash": "f9765fc5169d7ac0e9a6ddf8b6fd6383c65ef14f5c48e903631c4675d2cd9ce5"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/Example/CustomReactive.cs",
      "language": "C#",
      "line": 10,
      "offset": 18,
      "length": 17,
      "code": {
        "startLine": 8,
        "length": 17,
        "offset": 83,
        "surroundingCode": "  public sealed class CustomReactive<T1, T2> : RdReactiveBase\n  {\n    private bool myCreatedFromRead = false;\n    public T1 t1;\n    public T2 t2;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Local"
  },
  "hash": "13a44eee41faf3c62f5025e88f6ca76aac64d27aec27a8748fa197de35221d94"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SingleThreadScheduler.cs",
      "language": "C#",
      "line": 64,
      "offset": 25,
      "length": 7,
      "code": {
        "startLine": 62,
        "length": 7,
        "offset": 81,
        "surroundingCode": "    public Thread Thread { get; private set; } = null!;\n\n    private ActionQueue myQueue;\n\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "FieldCanBeMadeReadOnly.Local"
  },
  "hash": "1b5987d2dda6a488216ef7356f2f6c0ddc1dd3e69476f95870b02c567c83cdc1"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SerializersTest.cs",
      "language": "C#",
      "line": 44,
      "offset": 52,
      "length": 5,
      "code": {
        "startLine": 42,
        "length": 5,
        "offset": 61,
        "surroundingCode": "      };\n\n      public static CtxWriteDelegate<MyTestObject> Write = (ctx, writer, value) => { writer.Write(value.Data); };\n    }\n  }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Local"
  },
  "hash": "323f2b7c4993098a7ff662a334391701abff551e63510877eb75cd082e97efae"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SerializersTest.cs",
      "language": "C#",
      "line": 34,
      "offset": 21,
      "length": 4,
      "code": {
        "startLine": 32,
        "length": 4,
        "offset": 57,
        "surroundingCode": "    private class MyTestObject\n    {\n      public string Data;\n      \n      public MyTestObject(string data) { Data = data; }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Local"
  },
  "hash": "3b9ad7e897deb872e753cacef956f207dd1e022c8b07a2cb8b8a38c8e494faed"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Disposable.cs",
      "language": "C#",
      "line": 7,
      "offset": 24,
      "length": 8,
      "code": {
        "startLine": 5,
        "length": 8,
        "offset": 71,
        "surroundingCode": "    public class Disposable : IDisposable\n    {\n        private Action myAction;\n\n        public Disposable(Action action)"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "FieldCanBeMadeReadOnly.Local"
  },
  "hash": "86bf558b6ce685215bea569b3d067e8ba9009aba0ec3d3d97497f953de4769e3"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SerializersTest.cs",
      "language": "C#",
      "line": 38,
      "offset": 51,
      "length": 4,
      "code": {
        "startLine": 36,
        "length": 4,
        "offset": 107,
        "surroundingCode": "      public MyTestObject(string data) { Data = data; }\n\n      public static CtxReadDelegate<MyTestObject> Read = (ctx, reader) =>\n      {\n        var data = reader.ReadString();"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "FieldCanBeMadeReadOnly.Local"
  },
  "hash": "8a536b952f0fcd036365e83a1f6e48e333b6a1622974258c6e8d976c5a4b8647"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Field can be made readonly (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field can be made readonly",
  "detailsInfo": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Reflection.App/Program.cs",
      "language": "C#",
      "line": 35,
      "offset": 24,
      "length": 7,
      "code": {
        "startLine": 33,
        "length": 7,
        "offset": 50,
        "surroundingCode": "  static class Program\n  {\n    private static int ourPort = 5000;\n\n    public static event Action<char> OnChar;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Reflection.App",
    "inspectionName": "FieldCanBeMadeReadOnly.Local"
  },
  "hash": "f2ee107795cc9cc872552f2315a6486485f41067b33c5f2818326594aa52a72d"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Part of foreach loop can be converted into LINQ-expression but another 'GetEnumerator' method will be used",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Part of loop's body can be converted into LINQ-expression but another 'GetEnumerator' method will be used",
  "detailsInfo": "Part of 'foreach' ('For Each' for VB.NET) statement's body can be converted into a LINQ-expression but another 'GetEnumerator' method will be used",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/TestLogger.cs",
      "language": "C#",
      "line": 51,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 49,
        "length": 7,
        "offset": 41,
        "surroundingCode": "    {\n      //not very thread safe\n      foreach (var rec in LogLog.StoredRecords)\n      {\n        if (rec.Severity == LoggingLevel.ERROR || rec.Severity == LoggingLevel.FATAL)"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "ForeachCanBePartlyConvertedToQueryUsingAnotherGetEnumerator"
  },
  "hash": "3bf6a49af92b89cf628f48fc7123724a03c3ccb49eb5f1fcd663b76beffd5f3b"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Function never returns",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Function never returns",
  "detailsInfo": "Function does not reach its end or a 'return' statement by any of possible execution paths [Learn more...](https://www.jetbrains.com/help/rider/FunctionNeverReturns.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1104,
      "offset": 7,
      "length": 1,
      "code": {
        "startLine": 1102,
        "length": 1,
        "offset": 41,
        "surroundingCode": "          sw.SpinOnce();\n        }\n      }, def.Lifetime);\n      \n      Thread.Sleep(100);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "FunctionNeverReturns"
  },
  "hash": "6027cdde352d5bbcefc62601c6b6199197a7f9590af10b07b8e2f2350fb5083a"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Inconsistent synchronization on field",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "The field is sometimes used inside synchronized block and sometimes used without synchronization",
  "detailsInfo": "The field is sometimes used inside synchronized block and sometimes used without synchronization [Learn more...](https://www.jetbrains.com/help/rider/InconsistentlySynchronizedField.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ViewableProperty.cs",
      "language": "C#",
      "line": 17,
      "offset": 33,
      "length": 8,
      "code": {
        "startLine": 15,
        "length": 8,
        "offset": 92,
        "surroundingCode": "    private readonly Signal<T> myChange = new Signal<T>();\n\n    public ISource<T> Change => myChange;\n\n    public Maybe<T> Maybe { get; private set; }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InconsistentlySynchronizedField"
  },
  "hash": "396566e1207e5bc610502749ebba8668bff6bde6b9401e71138fca984565bbb6"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Inconsistent synchronization on field",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "The field is sometimes used inside synchronized block and sometimes used without synchronization",
  "detailsInfo": "The field is sometimes used inside synchronized block and sometimes used without synchronization [Learn more...](https://www.jetbrains.com/help/rider/InconsistentlySynchronizedField.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGeneratorCache.cs",
      "language": "C#",
      "line": 28,
      "offset": 59,
      "length": 11,
      "code": {
        "startLine": 26,
        "length": 11,
        "offset": 111,
        "surroundingCode": "    public Type CreateType(Type interfaceType)\n    {\n      return myTypesCache.GetOrAdd(interfaceType, type => myGenerator.CreateType(interfaceType));\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "InconsistentlySynchronizedField"
  },
  "hash": "3b9673a97e2651660188c23bdcb3b3abd2e80cfa29cd7bc7ca0822c207580654"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Inline 'out' variable declaration",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Inline 'out' variable declaration",
  "detailsInfo": "Replace ordinary variable declaration with inline variable declaration under 'out' argument",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdBindableBase.cs",
      "language": "C#",
      "line": 188,
      "offset": 16,
      "length": 8,
      "code": {
        "startLine": 186,
        "length": 8,
        "offset": 49,
        "surroundingCode": "      lock (myExtensions)\n      {\n        object existing;\n        T res;\n        if (myExtensions.TryGetValue(name, out existing))"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "InlineOutVariableDeclaration"
  },
  "hash": "7323057aaa04fa2c439b83d5e78beb3d76d0d3a3ff1f46d3274fd27d31f874b5"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Inline 'out' variable declaration",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Inline 'out' variable declaration",
  "detailsInfo": "Replace ordinary variable declaration with inline variable declaration under 'out' argument",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/NativeMemoryPool.cs",
      "language": "C#",
      "line": 91,
      "offset": 27,
      "length": 1,
      "code": {
        "startLine": 89,
        "length": 1,
        "offset": 89,
        "surroundingCode": "    {\n      // try to search in the array of all memory blocks\n      ThreadMemoryHolder? h;\n      if (SearchAndReserve(out h))\n        return new Cookie(h);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InlineOutVariableDeclaration"
  },
  "hash": "91ed61f535d4e335876b13f397a4197cbd9e3fb72dfe980c12c9eccc61986b2a"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Inline 'out' variable declaration",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Inline 'out' variable declaration",
  "detailsInfo": "Replace ordinary variable declaration with inline variable declaration under 'out' argument",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/InternRoot.cs",
      "language": "C#",
      "line": 37,
      "offset": 14,
      "length": 4,
      "code": {
        "startLine": 35,
        "length": 4,
        "offset": 59,
        "surroundingCode": "    public InternId Intern(TBase value)\n    {\n      IdPair pair;\n      if (myInverseMap.TryGetValue(value, out pair))\n        return pair.Id;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "InlineOutVariableDeclaration"
  },
  "hash": "9669fb1dab2c4be58e56974722b80f6f2360d246648c6ea640b9e7c0a07873fb"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Inline 'out' variable declaration",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Inline 'out' variable declaration",
  "detailsInfo": "Replace ordinary variable declaration with inline variable declaration under 'out' argument",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Statics.cs",
      "language": "C#",
      "line": 124,
      "offset": 16,
      "length": 1,
      "code": {
        "startLine": 122,
        "length": 1,
        "offset": 57,
        "surroundingCode": "      {\n        StaticsForType<T> result;\n        object o;\n        if (!ourPerTypeStatics.TryGetValue(typeof(T), out o))\n        {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InlineOutVariableDeclaration"
  },
  "hash": "c037a41481acc2453c2021586ff11780b102ff125550e86c65995160b945d132"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Inline 'out' variable declaration",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Inline 'out' variable declaration",
  "detailsInfo": "Replace ordinary variable declaration with inline variable declaration under 'out' argument",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/PriorityQueueTest.cs",
      "language": "C#",
      "line": 150,
      "offset": 18,
      "length": 3,
      "code": {
        "startLine": 148,
        "length": 3,
        "offset": 64,
        "surroundingCode": "\n        var lastDateTime = DateTime.MinValue;\n        DateTime res;\n        while (queue.TryPeek(out res))\n        {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "InlineOutVariableDeclaration"
  },
  "hash": "d26fa63237941631d36bc564904d94bc7cd490c46680151ecbad91837677c87d"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Inline 'out' variable declaration",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Inline 'out' variable declaration",
  "detailsInfo": "Replace ordinary variable declaration with inline variable declaration under 'out' argument",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/PriorityQueueTest.cs",
      "language": "C#",
      "line": 253,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 251,
        "length": 2,
        "offset": 74,
        "surroundingCode": "    private void AssertExtract<T>(T x, IPriorityQueue<T> q)\n    {\n      T xx;\n      Assert.True(q.TryPeek(out xx));\n      Assert.AreEqual(x, xx);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "InlineOutVariableDeclaration"
  },
  "hash": "d8ec0db87ab451dc600199a5589087717883f46f8e7a9b2e60b104cc7acfbfb4"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Inline 'out' variable declaration",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Inline 'out' variable declaration",
  "detailsInfo": "Replace ordinary variable declaration with inline variable declaration under 'out' argument",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 230,
      "offset": 14,
      "length": 8,
      "code": {
        "startLine": 228,
        "length": 8,
        "offset": 72,
        "surroundingCode": "      {\n        var typeId = RdId.Define<T>(predefinedId);\n        RdId existing;\n        if (myTypeMapping.TryGetValue(typeof(T), out existing))\n        {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "InlineOutVariableDeclaration"
  },
  "hash": "f38db13f9654d51a867367ddeddd42bdaca99847a187f2cb9a34296ec1f0db08"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Inline temporary variable",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Inline temporary variable",
  "detailsInfo": "Inline temporary variable initialized with a value of other variable/parameter to reduce the amount of different names used to reference the same value",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 125,
      "offset": 11,
      "length": 10,
      "code": {
        "startLine": 123,
        "length": 10,
        "offset": 60,
        "surroundingCode": "    public static bool CanBeNull(Type type)\n    {\n      var returnType = type;\n\n      var returnTypeInfo = returnType.GetTypeInfo();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "InlineTemporaryVariable"
  },
  "hash": "054bccac446ca8b056612bd9157d9f24a14eaddb22f1115493c962c013b9c74b"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Inline temporary variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Inline temporary variable",
  "detailsInfo": "Inline temporary variable initialized with a value of other variable/parameter to reduce the amount of different names used to reference the same value",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/SingleThreadObjectPool.cs",
      "language": "C#",
      "line": 43,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 41,
        "length": 4,
        "offset": 58,
        "surroundingCode": "    Assertion.AssertCurrentThread(myThread);\n    \n    var pool = myPool;\n    if (pool.Count < myMaxCapacity)\n    {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InlineTemporaryVariable"
  },
  "hash": "4f36510f9589c1d00bd0b5787829db87b338cd5e663c726e1fc16ae33b847569"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Inline temporary variable",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Inline temporary variable",
  "detailsInfo": "Inline temporary variable initialized with a value of other variable/parameter to reduce the amount of different names used to reference the same value",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/SingleThreadObjectPool.cs",
      "language": "C#",
      "line": 33,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 31,
        "length": 4,
        "offset": 58,
        "surroundingCode": "    Assertion.AssertCurrentThread(myThread);\n    \n    var pool = myPool;\n    return pool.Count > 0 ? pool.Pop() : myFactory();\n  }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InlineTemporaryVariable"
  },
  "hash": "97c05f2c2dec085d6b0e4884cb57490be44b05d39783473b9d9730f0498e5c7e"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Inline temporary variable",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Inline temporary variable",
  "detailsInfo": "Inline temporary variable initialized with a value of other variable/parameter to reduce the amount of different names used to reference the same value",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/BindableChildrenUtil.cs",
      "language": "C#",
      "line": 76,
      "offset": 13,
      "length": 1,
      "code": {
        "startLine": 74,
        "length": 1,
        "offset": 58,
        "surroundingCode": "      if (fillBindableFields == null)\n      {\n        var t = type;\n        var bindableMembers = SerializerReflectionUtil.GetBindableFields(t.GetTypeInfo()).ToArray();\n        var getters = bindableMembers.Select(ReflectionUtil.GetGetter).ToArray();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "InlineTemporaryVariable"
  },
  "hash": "bf8587054a2fa9e2f21335409e51d2d4a8a1ce89902f66ab152a14699f932229"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Inline temporary variable",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Inline temporary variable",
  "detailsInfo": "Inline temporary variable initialized with a value of other variable/parameter to reduce the amount of different names used to reference the same value",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CopyOnWriteList.cs",
      "language": "C#",
      "line": 145,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 143,
        "length": 12,
        "offset": 64,
        "surroundingCode": "      Modify(index, (currentArray, arg2) =>\n      {\n        var indexOfEntry = arg2;\n        var newArray = new T[currentArray.Length - 1];\n        Array.Copy(currentArray, newArray, indexOfEntry);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InlineTemporaryVariable"
  },
  "hash": "dda93084785883ea32eb6b51441be218ed6c588cc00d2af465f323ce30a4d155"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Introduce optional parameters (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Introduce optional parameter(s) for method 'object Activate(Type, string)'",
  "detailsInfo": "Introduce optional parameters to overload method",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 129,
      "offset": 29,
      "length": 11,
      "code": {
        "startLine": 127,
        "length": 11,
        "offset": 72,
        "surroundingCode": "    public object Activate(Type type)\n    {\n      return Activate(type, \"Anonymous\");\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "IntroduceOptionalParameters.Global"
  },
  "hash": "7002d9a93610ace792ffb4197d591e6fe826b542ca7388207b22bbee2055dd4f"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Introduce optional parameters (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Introduce optional parameter(s) for constructor 'SynchronizedSet(IEnumerable?, IEqualityComparer?)'",
  "detailsInfo": "Introduce optional parameters to overload method",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Synchronized/SynchronizedSet.cs",
      "language": "C#",
      "line": 31,
      "offset": 66,
      "length": 4,
      "code": {
        "startLine": 29,
        "length": 4,
        "offset": 117,
        "surroundingCode": "\n    public SynchronizedSet() : this(null, null) {}\n    public SynchronizedSet(IEnumerable<T> values) : this(values, null) {}\n    public SynchronizedSet(IEqualityComparer<T> comparer) : this(null, comparer) {}\n    public SynchronizedSet(IEnumerable<T>? values, IEqualityComparer<T>? comparer)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "IntroduceOptionalParameters.Global"
  },
  "hash": "7375ad4e47908b3cd61ec065ca59c135769942e831a493af496bd5effe1152fa"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Introduce optional parameters (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Introduce optional parameter(s) for constructor 'RdSet(CtxReadDelegate, CtxWriteDelegate, IViewableSet?)'",
  "detailsInfo": "Introduce optional parameters to overload method",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSet.cs",
      "language": "C#",
      "line": 27,
      "offset": 110,
      "length": 4,
      "code": {
        "startLine": 25,
        "length": 4,
        "offset": 116,
        "surroundingCode": "    }\n\n    public RdSet(CtxReadDelegate<T> readValue, CtxWriteDelegate<T> writeValue) : this(readValue, writeValue, null) { }\n\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "IntroduceOptionalParameters.Global"
  },
  "hash": "85b21a7c61d9e0ba2c462a29a425ad7bdba097d2c4fc452aafb62bb9dbcf4b8d"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdBindableBase.cs",
      "language": "C#",
      "line": 204,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 202,
        "length": 2,
        "offset": 163,
        "surroundingCode": "          {\n            BindableChildren.Insert(highPriorityExtension ? 0 : BindableChildren.Count, new KeyValuePair<string, object>(name, bindable));\n            if (myBindLifetime != Lifetime.Terminated)\n            {\n              bindable.Identify(Proto.Identities, RdId.Mix(\".\" + name));"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "InvertIf"
  },
  "hash": "0151b5c459e41e1dd65fa91ea90d2c4415c12bb61dab34906e25e90fd3ff51c1"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 291,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 289,
        "length": 2,
        "offset": 47,
        "surroundingCode": "\n        ext.SymmetricExceptWith(rpc);\n        if (ext.Count > 0)\n        {\n          var msg = new StringBuilder(\"The list of BindableChildren available in RdExt and exposed by the RdRpc interface are different. Some of the members will not be connected to the counterpart during execution: \");"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "InvertIf"
  },
  "hash": "05ef3fe610e1ba34506f3b65a5006c17e8261d2f876e9a0dc7d6fdd62f02a38b"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ActorTest.cs",
      "language": "C#",
      "line": 122,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 120,
        "length": 2,
        "offset": 77,
        "surroundingCode": "      actor = new Actor<int>(\"TestActor\", TestLifetime, x =>\n      {\n        if (count -- > 0)\n        {\n          actor.SendOrExecuteInline(x+1).NoAwait();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "08f8273a8e402900ded44ce91e0d40c8867cc3295e7541da7d133995dfb22ee8"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1284,
      "offset": 11,
      "length": 2,
      "code": {
        "startLine": 1282,
        "length": 2,
        "offset": 68,
        "surroundingCode": "        while (!cancel.IsCancellationRequested)\n        {\n          if (def != cache)\n          {\n            cache = def;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "1289b0d78998d38af5a4e314282eff115a666fe8cade8c1e187a9efff7fcd2d6"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/NativeMemoryPool.cs",
      "language": "C#",
      "line": 134,
      "offset": 11,
      "length": 2,
      "code": {
        "startLine": 132,
        "length": 2,
        "offset": 62,
        "surroundingCode": "          if (candidate == null)\n            break;\n          if (candidate.TryReserve())\n          {\n            ourThreadMemory = holder = candidate;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "1ae938458db71750c01c980a474b073c62f564d7dbd63f51109744cc321f899f"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ByteBufferAsyncProcessor.cs",
      "language": "C#",
      "line": 507,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 505,
        "length": 2,
        "offset": 19,
        "surroundingCode": "        }\n\n        if (myAllDataProcessed) //speedup\n        {\n          myAllDataProcessed = false;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "277c30e893f585f54e3f53848a6d70dd44d87c5c3c8878910ed0574e36209207"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdPerContextMap.cs",
      "language": "C#",
      "line": 71,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 69,
        "length": 2,
        "offset": 38,
        "surroundingCode": "          get\n          {\n            if (!IsBound)\n            {\n              if (!myMap.ContainsKey(key))"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "InvertIf"
  },
  "hash": "31982d92cb4b1a11ad4731a89fbf4840185a212727dea9d424c57438ea1656d7"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/InternRoot.cs",
      "language": "C#",
      "line": 43,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 41,
        "length": 2,
        "offset": 56,
        "surroundingCode": "      pair.Id = pair.ExtraId = InternId.Invalid;\n\n      if (myInverseMap.TryAdd(value, pair))\n      {\n        InternId allocatedId = new InternId(Interlocked.Increment(ref myInternedIdCounter) * 2);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "InvertIf"
  },
  "hash": "3418e6007ced76f958f7788ea50e1bea5a7f205f4bb1dbfc2962e99dd7d49a35"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/RdTextChangeEx.cs",
      "language": "C#",
      "line": 12,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 10,
        "length": 2,
        "offset": 96,
        "surroundingCode": "    public static void AssertDocumentLength(this RdTextChange that, int currentLen)\n    {\n      if (that.Kind != RdTextChangeKind.Reset && that.FullTextLength != -1)\n      {\n        var actual = currentLen + that.GetDelta();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "InvertIf"
  },
  "hash": "391831c74a2d72ab961842c9ae1d0fdc349b6f597fe3695596ad6d7fd82ed26e"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/MessageBroker.cs",
      "language": "C#",
      "line": 158,
      "offset": 17,
      "length": 2,
      "code": {
        "startLine": 156,
        "length": 2,
        "offset": 101,
        "surroundingCode": "              if (currentBroker.DefaultSchedulerMessages.Count == 0)\n              {\n                if (myBroker.Remove(id))\n                {\n                  if (subscription != null)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "InvertIf"
  },
  "hash": "3d2cb5771bb9aa06df8946ffd7c3d7098887e7d8d256ff3081941d899fd10fe2"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 1013,
      "offset": 11,
      "length": 2,
      "code": {
        "startLine": 1011,
        "length": 2,
        "offset": 97,
        "surroundingCode": "        using (var mutex = new UnderMutexCookie(this, LifetimeStatus.Alive))\n        {\n          if (!mutex.Success)\n          {\n            Assertion.Assert(!ReferenceEquals(this, Terminated), \"Mustn't reach this point on lifetime `Terminated`\");"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "3e349a254a50b571bda74b3f4221d224eb4ddbbb139f1ee946a869cdcd09cb1a"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 790,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 788,
        "length": 2,
        "offset": 68,
        "surroundingCode": "          ourAllowTerminationUnderExecutionThreadStatic--;\n\n        if (ourLogErrorAfterExecution[myDef.myState])\n        {\n          var terminationTimeoutMs = GetTerminationTimeoutMs(myDef.TerminationTimeoutKind);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "3e777da63354e6a44d12db6cf619d4886104ddd9cd17f4805df34b9cab09dcc4"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 25,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 23,
        "length": 2,
        "offset": 54,
        "surroundingCode": "        } while((len -= 0x10) >= 0x10);\n      }\n      if(len > 0)\n      {\n        if((len & 8) != 0)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "46d90aa7ca5711559ee94c89cc2ceec2d5b41ee35114183899b121802bdf36a9"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdMap.cs",
      "language": "C#",
      "line": 221,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 219,
        "length": 2,
        "offset": 19,
        "surroundingCode": "        }\n\n        if (msgVersioned)\n        {\n          Wire.Send(RdId, (innerWriter) =>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "InvertIf"
  },
  "hash": "497d1004c4e296020e5ef88e8bcba7368f8dd809493dc723186f2e7d1775bc2f"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/Intrinsic.cs",
      "language": "C#",
      "line": 29,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 27,
        "length": 2,
        "offset": 29,
        "surroundingCode": "        }\n        */\n        if (genericArguments.Length == 0)\n        {\n          var staticRead = SerializerReflectionUtil.GetReadStaticNonProtocolSerializer(typeInfo);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "InvertIf"
  },
  "hash": "49d04e5e06e472681bc30dd750941b8d947d812eae1e54c4fc09ff0473836295"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 310,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 308,
        "length": 2,
        "offset": 146,
        "surroundingCode": "      {\n        LogLog.Verbose(LogCategory, \"Realloc UnsafeWriter, current: {0:N0} bytes, new: {1:N0}\", myCurrentAllocSize, reallocSize);\n        if (myStartPtr != null) //already terminated\n        {\n          Assertion.Assert(myMemory != null, \"myMemory != null\");"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "4e003232a900f3b4656bd0aa02be4f153663ab88ba60d0f155d8d274b1d7f3b4"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/SpinWaitLock.cs",
      "language": "C#",
      "line": 30,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 28,
        "length": 2,
        "offset": 76,
        "surroundingCode": "    {\n      int currentThreadId = Thread.CurrentThread.GetHashCode();\n      if (!TryEnter(currentThreadId))\n      {\n        if (_processorCount == 1)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "6441228eb75b10bb7c7e0dbdea7be23e20d5b922f187f131ace0f8570403f900"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/HeavySingleContextHandler.cs",
      "language": "C#",
      "line": 106,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 104,
        "length": 2,
        "offset": 50,
        "surroundingCode": "    {\n      var id = InternId.Read(reader);\n      if (!id.IsValid)\n      {\n        var hasValue = reader.ReadBool();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "InvertIf"
  },
  "hash": "6607043f0d94cdb01e398921c4b20e8d33db558df9c2b25980eea0087d2937e5"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 404,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 402,
        "length": 2,
        "offset": 45,
        "surroundingCode": "\n      // hack for UProperty & USignal\n      if (genericArguments.Length == 1 && typeof(IRdBindable).IsAssignableFrom(implementingType) && implementingType.IsClass)\n      {\n        foreach (var ctor in implementingType.GetTypeInfo().GetConstructors(BindingFlags.Public | BindingFlags.Instance))"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "InvertIf"
  },
  "hash": "6790dfefa168228d89a969d61c92b1f3a548919d6419ab62eea866c5e9fc75b6"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 381,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 379,
        "length": 2,
        "offset": 66,
        "surroundingCode": "      for (int i = 0; i < parameters.Length; i++)\n      {\n        if (parameters[i].ParameterType == typeof(Lifetime))\n        {\n          Assertion.Assert(lifetimeArgument == -1, \"Only one lifetime parameter is allowed\");"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "InvertIf"
  },
  "hash": "6e1928e1469a4bc380f5ffa1816bc70bfa39e598f2a5ae279375de402fb54c19"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 1006,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 1004,
        "length": 2,
        "offset": 92,
        "surroundingCode": "    internal CancellationToken ToCancellationToken(bool doNotCreateCts = false)\n    {\n      if (myCts == null)\n      {\n        if (doNotCreateCts)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "7a6b86d8db6b611af610149ab06f3345c64f3c9aef63a04633d106717782479e"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/NativeMemoryPool.cs",
      "language": "C#",
      "line": 123,
      "offset": 11,
      "length": 2,
      "code": {
        "startLine": 121,
        "length": 2,
        "offset": 62,
        "surroundingCode": "          if (candidate == null)\n            break;\n          if (candidate.TryReserve())\n          {\n            ourThreadMemory = holder = candidate;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "85b37cdf62c5f6a4b07675392c14f6ee9be55cd975e861faf988964d9bc13524"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdExtBase.cs",
      "language": "C#",
      "line": 103,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 101,
        "length": 2,
        "offset": 73,
        "surroundingCode": "      \n      var counterpartSerializationHash = reader.ReadLong();\n      if (counterpartSerializationHash != SerializationHash)\n      {                                    \n        base.Proto.Scheduler.Queue(() => { base.Proto.OutOfSyncModels.Add(this); } );"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "InvertIf"
  },
  "hash": "85fd69b59ef00417efca144bd475a121684ed415a88b61dea1bec590de85b0ba"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/MessageBroker.cs",
      "language": "C#",
      "line": 160,
      "offset": 19,
      "length": 2,
      "code": {
        "startLine": 158,
        "length": 2,
        "offset": 77,
        "surroundingCode": "                if (myBroker.Remove(id))\n                {\n                  if (subscription != null)\n                  {\n                    foreach (var m in currentBroker.CustomSchedulerMessages)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "InvertIf"
  },
  "hash": "87374998b6a32ce00b33265ff0e7741dd9b92f3b59e1730c06a35c350b8fa966"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 227,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 225,
        "length": 2,
        "offset": 15,
        "surroundingCode": "      }\n\n      if (!mySerializers.TryGetValue(serializerType, out var serializerPair))\n      {\n        using (new FirstChanceExceptionInterceptor.ThreadLocalDebugInfo(serializerType.FullName))"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "InvertIf"
  },
  "hash": "87742cb1653bd4e7f2a271aa9ad1229ed4c3ea3b479625dbf63e51dc4c037e64"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 209,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 207,
        "length": 2,
        "offset": 234,
        "surroundingCode": "        var serializerPair = GetOrRegisterStaticSerializerInternal(serializerType, instanceSerializer);\n        Assertion.AssertNotNull(serializerPair, $\"Unable to Create serializer for type {serializerType.ToString(true)}\");\n        if (serializerPair == null)\n        {\n          if (Mode.IsAssertion)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "InvertIf"
  },
  "hash": "88394880c04c3a8b7301aef33ae02f6b74b632de0b969965e6705f7ff15bfea0"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/TestLogger.cs",
      "language": "C#",
      "line": 31,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 29,
        "length": 2,
        "offset": 106,
        "surroundingCode": "    protected override string Format(LoggingLevel level, string message, Exception exception)\n    {\n      if (level.IsSeriousError())\n      {\n        lock (myMonitor)"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "892d680fb45426e70451fc1d5a5261b845307c8a265a09745efa8373964bcb2b"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/NativeMemoryPool.cs",
      "language": "C#",
      "line": 64,
      "offset": 11,
      "length": 2,
      "code": {
        "startLine": 62,
        "length": 2,
        "offset": 56,
        "surroundingCode": "        {\n          var block = ourBlocks[i];\n          if (block != null && block.TryReserve())\n          {\n            block.Dispose();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "8e4b2dfe64b86530a9a7454ef307385e8da6b89b9d3d85545d6e52fdd349a2b8"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 359,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 357,
        "length": 2,
        "offset": 142,
        "surroundingCode": "    {\n      var intrinsic = Intrinsic.TryGetIntrinsicSerializer(implementingInfo, t => GetOrRegisterStaticSerializerInternal(t, true));\n      if (intrinsic != null)\n      {\n        if (typeInfo != implementingInfo)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "InvertIf"
  },
  "hash": "8e79f7ccaca533507d82a217a7abeafff5ce1b6f13b63c85c101511dba3f6564"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 451,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 449,
        "length": 2,
        "offset": 48,
        "surroundingCode": "    {\n      var typename = type.FullName;\n      if (typeof(RdExtReflectionBindableBase).IsAssignableFrom(type))\n      {\n        var rpcInterface = ReflectionSerializerVerifier.GetRpcInterface(type.GetTypeInfo());"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "InvertIf"
  },
  "hash": "8ee9834858e621ed9b1c2ddf04413bd19f2df14c591639b4600f47b4c97eba3f"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 168,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 166,
        "length": 2,
        "offset": 62,
        "surroundingCode": "    public object ReflectionInit(object instance)\n    {\n      if (Mode.IsAssertion)\n      {\n        myCurrentActivationChain = myCurrentActivationChain ?? new Queue<Type>();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "InvertIf"
  },
  "hash": "90c05e33b2e248f32524dbf6f382e3e2426dd46923bfe45e51978c8df7956f63"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdTaskResult.cs",
      "language": "C#",
      "line": 81,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 79,
        "length": 2,
        "offset": 52,
        "surroundingCode": "    {\n      printer.Print(Status.ToString());\n      if (Status != RdTaskStatus.Canceled)\n      {\n        printer.Print(\" :: \");"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "InvertIf"
  },
  "hash": "90e3ab463683f8d6e8208852ec4d4ad9014565ea3e0827e3882641d633ff3116"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 289,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 287,
        "length": 2,
        "offset": 15,
        "surroundingCode": "      }\n\n      if (propertyInfo.GetGetMethod() != null)\n      {\n        var getMethod = typebuilder.DefineMethod(propertyInfo.GetGetMethod().Name, MethodAttributes.Final | MethodAttributes.Virtual | MethodAttributes.Private, type, EmptyArray<Type>.Instance);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "InvertIf"
  },
  "hash": "92b8a92b7036fd790c7d77b5605aa28d4f5084e40ba1a61bb07a700f27962189"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/HeavySingleContextHandler.cs",
      "language": "C#",
      "line": 78,
      "offset": 11,
      "length": 2,
      "code": {
        "startLine": 76,
        "length": 2,
        "offset": 111,
        "surroundingCode": "          var internedId = myInternRoot.Intern(value);\n          InternId.Write(writer, internedId);\n          if (!internedId.IsValid)\n          {\n            writer.Write(true);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "InvertIf"
  },
  "hash": "95f94a1bcc2b9350fa675a7e4500282b67962f029f8d4a2ad18931ed9e38837e"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/SequentialLifetimesTest.cs",
      "language": "C#",
      "line": 38,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 36,
        "length": 2,
        "offset": 49,
        "surroundingCode": "        expected.AppendLine($\"in {i}\");\n\n        if (i != max - 1)\n        {\n          expected.AppendLine($\"before {i+1}\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "9706ec6429db1042a0278f6417d9f7bac5aa11bce836074cda01529592e59bf7"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/ProtocolContexts.cs",
      "language": "C#",
      "line": 75,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 73,
        "length": 2,
        "offset": 101,
        "surroundingCode": "    private void DoAddHandler<T>(RdContext<T> context, ISingleContextHandler<T> handler)\n    {\n      if (myHandlersMap.TryAdd(context, handler))\n      {\n        context.RegisterOn(SerializationContext.Serializers);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "InvertIf"
  },
  "hash": "9a11d4c8dd0d6c73e7d073086d9e0ec58169aad425cd86663cfbca98fa16be6e"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/NativeMemoryPool.cs",
      "language": "C#",
      "line": 73,
      "offset": 15,
      "length": 2,
      "code": {
        "startLine": 71,
        "length": 2,
        "offset": 87,
        "surroundingCode": "            for (int j = ourBlocks.Length - 1; j > i; j--)\n            {\n              if (ourBlocks[j] != null)\n              {\n                ourBlocks[i] = ourBlocks[j];"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "9a5d47da503fd9888536163f9be382a26014e1b20015c6ae29f21f4131107902"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 268,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 266,
        "length": 2,
        "offset": 76,
        "surroundingCode": "\n      // Allow initialize to setup bindings to composite properties.\n      if (instance is IReflectionBindable reflectionBindable)\n      {\n        reflectionBindable.EnsureBindableChildren();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "InvertIf"
  },
  "hash": "a50998808a9af92e147ffc22ef6090db016a5ce1e47606bbf8533309f21e9d2f"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 203,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 201,
        "length": 2,
        "offset": 42,
        "surroundingCode": "    private void Initialize()\n    {\n      if (myRecursionLevel++ == 0)\n      {\n        if (myMemory != null && myMemory.TryReserve())"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "a6be15656fa4799f8c1b4cf611423b5acf52116cb8ab25dc5bec8c3d1c0fa656"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/InternRoot.cs",
      "language": "C#",
      "line": 92,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 90,
        "length": 2,
        "offset": 48,
        "surroundingCode": "    public void Remove(TBase value)\n    {\n      if (myInverseMap.TryRemove(value, out var pair))\n      {\n        myDirectMap.TryRemove(pair.Id, out _);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "InvertIf"
  },
  "hash": "a819081956915b78369e9a7f4362c587b6089b3ca115b061f2aba0eadfdd3d85"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/SingleThreadObjectPool.cs",
      "language": "C#",
      "line": 44,
      "offset": 5,
      "length": 2,
      "code": {
        "startLine": 42,
        "length": 2,
        "offset": 32,
        "surroundingCode": "    \n    var pool = myPool;\n    if (pool.Count < myMaxCapacity)\n    {\n      myClear?.Invoke(value);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "b1f072bf735f4e95b5bd01a3703c0209f6714585329f25b5692e6c32932ab313"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 283,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 281,
        "length": 2,
        "offset": 55,
        "surroundingCode": "\n      var rpcInterface = GetRpcInterface(type);\n      if (rpcInterface != null)\n      {\n        var rpc = new HashSet<string>(ProxyGenerator.GetBindableFieldsNames(rpcInterface), StringComparer.Ordinal);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "InvertIf"
  },
  "hash": "bf47e7d8e312a7cf4781526c6139541b48e02af63dede430ec612a02b7d7c426"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/ProtocolContexts.cs",
      "language": "C#",
      "line": 85,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 83,
        "length": 2,
        "offset": 103,
        "surroundingCode": "    private void BindHandler(Lifetime lifetime, string key, ISingleContextHandler handler)\n    {\n      if (handler is RdBindableBase bindableHandler)\n      {\n        bindableHandler.RdId = RdId.Mix(key);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "InvertIf"
  },
  "hash": "c53c3bc79feb2f80691f60bfa0da08d59405418f2d54cbb6b4afbc272c772347"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/NativeMemoryPool.cs",
      "language": "C#",
      "line": 281,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 279,
        "length": 2,
        "offset": 41,
        "surroundingCode": "      {\n        var ptr = myPtr;\n        if (Interlocked.CompareExchange(ref myPtr, IntPtr.Zero, ptr) == ptr)\n        {\n          Marshal.FreeHGlobal(ptr);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "c5444c6b8c07d1b3a8e0b808342c9b8636ad6161db985c8c187cf69f5d9eb972"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/InternRoot.cs",
      "language": "C#",
      "line": 185,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 183,
        "length": 2,
        "offset": 108,
        "surroundingCode": "      myDirectMap[id] = value;\n      var pair = new IdPair() { Id = id, ExtraId = InternId.Invalid };\n      if (!myInverseMap.TryAdd(value, pair))\n      {\n        while (true)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "InvertIf"
  },
  "hash": "ca31b5a26dcccda03ea9f58e8b0e71540985b0bb2085ba8535a336f54e6ec203"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 334,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 332,
        "length": 2,
        "offset": 36,
        "surroundingCode": "        return typeof(Unit);\n\n      if (unwrapTask && !IsSync(method))\n      {\n        if (method.ReturnType == typeof(Task))"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "InvertIf"
  },
  "hash": "cbfd0a102723666ec21c6af15c5e1726e7e369a4e2ec05cb44c3ba3b53863855"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogLog.cs",
      "language": "C#",
      "line": 49,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 47,
        "length": 2,
        "offset": 53,
        "surroundingCode": "      {\n        var old = ourSeverityFilter;\n        if (old != value)\n        {\n          ourSeverityFilter = value;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "cd4deef288a2e0db3ceca09292c63fa19923f3f9205786b32fbcc4805935185b"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 65,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 63,
        "length": 2,
        "offset": 44,
        "surroundingCode": "      public void Dispose()\n      {\n        if (myDisposeThread != null)\n        {\n          if (myDisposeThread != Thread.CurrentThread)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "d4fdf854f6a5f789758fbf276eeb11d9fa877d066a1db34de8288f88805a37a9"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdBindableBase.cs",
      "language": "C#",
      "line": 201,
      "offset": 11,
      "length": 2,
      "code": {
        "startLine": 199,
        "length": 2,
        "offset": 57,
        "surroundingCode": "          \n          myExtensions[name] = res;\n          if (res is IRdBindable bindable)\n          {\n            BindableChildren.Insert(highPriorityExtension ? 0 : BindableChildren.Count, new KeyValuePair<string, object>(name, bindable));"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "InvertIf"
  },
  "hash": "d9c759e9d339367e9eec503036a34c83913e433d2fb79487582c610e055cf0d1"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/SequentialLifetimesTest.cs",
      "language": "C#",
      "line": 81,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 79,
        "length": 2,
        "offset": 49,
        "surroundingCode": "        expected.AppendLine($\"in {i}\");\n\n        if (i != max - 1)\n        {\n          expected.AppendLine($\"before {i+1}\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "e2bd88a9686eabebfa2a873df1e15db5a2a19977de8cc613e437ba41a6c95291"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 171,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 169,
        "length": 2,
        "offset": 38,
        "surroundingCode": "          try\n          {\n            if (!ReadMsg())\n            {\n              Log.Verbose(\"{0} Connection was gracefully shutdown\", Id);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "InvertIf"
  },
  "hash": "e3f7f9d3e969111e3ddfcd8e20a1e85575f2524c30093629ae2bcd1f5b991479"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 255,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 253,
        "length": 2,
        "offset": 63,
        "surroundingCode": "      myPtr = myStartPtr + start;\n      myCount = start;\n      if (myCurrentAllocSize > myInitialAllocSize)\n      {\n        if (start == 0) Realloc(myCount);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "e78792a700be94746e8fc704f2e3c2c8b506645d589adbf1c51214ca8cc0a6d7"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdPerContextMap.cs",
      "language": "C#",
      "line": 82,
      "offset": 11,
      "length": 2,
      "code": {
        "startLine": 80,
        "length": 2,
        "offset": 72,
        "surroundingCode": "        public bool TryGetValue(K key, out V value)\n        {\n          if (!IsBound)\n          {\n            if (!myMap.ContainsKey(key))"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "InvertIf"
  },
  "hash": "e78bc601a1446c9fc201cd8de0113c4001fe2da921e862b180f20aeca6db12d9"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/SwitchingScheduler.cs",
      "language": "C#",
      "line": 72,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 70,
        "length": 2,
        "offset": 44,
        "surroundingCode": "      public void Dispose()\n      {\n        if (myIsValid)\n        {\n          lock (ourLock)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "InvertIf"
  },
  "hash": "e7fb5d77a868fb98458daf72555f6f6783cb2998b6a21829ed542dc7178931ea"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/NativeMemoryPool.cs",
      "language": "C#",
      "line": 42,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 40,
        "length": 2,
        "offset": 95,
        "surroundingCode": "    {\n      // try to reuse the block which was used previous time by the current thread\n      if (ourThreadMemory != null)\n      {\n        if (ourThreadMemory.TryReserve())"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "ea9c31f22b7dfc5698a854408dcf05cc322ab068e0ba0a1adba4fbe0af5bf8c8"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/MessageBroker.cs",
      "language": "C#",
      "line": 217,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 215,
        "length": 2,
        "offset": 47,
        "surroundingCode": "        {\n          lock(myLock) {\n            if (myBroker.TryGetValue(reactive.RdId, out var mq))\n            {\n              myBroker.Remove(reactive.RdId);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "InvertIf"
  },
  "hash": "ed0eb9b693a60e6f5ce0e18cc898ac65b1a4232ceaf3e46d7517e789f97e65df"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/ProcessWatchdog.cs",
      "language": "C#",
      "line": 140,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 138,
        "length": 2,
        "offset": 122,
        "surroundingCode": "      {\n        handle = Kernel32.OpenProcess(ProcessAccessRights.PROCESS_QUERY_LIMITED_INFORMATION, false, pid);\n        if (handle == IntPtr.Zero)\n        {\n          var errorCode = Marshal.GetLastWin32Error();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "f0c087fe1e07985ab4abc0673aa8505f69e2819a74026d2c32df82f00db438ff"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 46,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 44,
        "length": 2,
        "offset": 38,
        "surroundingCode": "          src += 2;\n        }\n        if((len & 1) != 0)\n        {\n          dest[0] = src[0];"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "f76bec7b7d1d09af08a2f5fe51a185e031632def6d4c9d0e94dae1e9673de6dd"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/MessageBroker.cs",
      "language": "C#",
      "line": 156,
      "offset": 15,
      "length": 2,
      "code": {
        "startLine": 154,
        "length": 2,
        "offset": 55,
        "surroundingCode": "            lock (myLock)\n            { \n              if (currentBroker.DefaultSchedulerMessages.Count == 0)\n              {\n                if (myBroker.Remove(id))"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "InvertIf"
  },
  "hash": "fb8cde0c1a02a35c9c905d730994d465a9b44dc1cca46b4dcfff3625ca513f17"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Invert 'if' statement to reduce nesting",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Invert 'if' statement to reduce nesting",
  "detailsInfo": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ActorTest.cs",
      "language": "C#",
      "line": 105,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 103,
        "length": 2,
        "offset": 77,
        "surroundingCode": "      actor = new Actor<int>(\"TestActor\", TestLifetime, x =>\n      {\n        if (count -- > 0)\n        {\n          actor.SendBlocking(x+1);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "InvertIf"
  },
  "hash": "ffe28d3109f19f2592b083d6e9ed1fac74884f27febbe41c49d29be47ceb739e"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Join null check with assignment",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Join null check with assignment",
  "detailsInfo": "Replaces if statement with code using ?? operator and throw expression [Learn more...](https://www.jetbrains.com/help/rider/JoinNullCheckWithUsage.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 33,
      "offset": 16,
      "length": 7,
      "code": {
        "startLine": 31,
        "length": 7,
        "offset": 27,
        "surroundingCode": "    )\n    {\n      if (root == null) throw new ArgumentNullException(\"root\");\n      \n      _Root = root;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "JoinNullCheckWithUsage"
  },
  "hash": "09bd2be26513df2361b6379e3988e63bef7c95714da3adc6364afafaa9118897"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Join null check with assignment",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Join null check with assignment",
  "detailsInfo": "Replaces if statement with code using ?? operator and throw expression [Learn more...](https://www.jetbrains.com/help/rider/JoinNullCheckWithUsage.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 110,
      "offset": 30,
      "length": 7,
      "code": {
        "startLine": 108,
        "length": 7,
        "offset": 209,
        "surroundingCode": "      if (internedLocally == null) throw new ArgumentNullException(\"internedLocally\");\n      if (internedExternally == null) throw new ArgumentNullException(\"internedExternally\");\n      if (internedInProtocol == null) throw new ArgumentNullException(\"internedInProtocol\");\n      \n      _InternedLocally = internedLocally;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "JoinNullCheckWithUsage"
  },
  "hash": "0c5da14ee9c99b099da2fec823068aacd1826d9799829a2a55f85ec5fabf36cc"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Join null check with assignment",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Join null check with assignment",
  "detailsInfo": "Replaces if statement with code using ?? operator and throw expression [Learn more...](https://www.jetbrains.com/help/rider/JoinNullCheckWithUsage.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 37,
      "offset": 30,
      "length": 7,
      "code": {
        "startLine": 35,
        "length": 7,
        "offset": 209,
        "surroundingCode": "      if (changes == null) throw new ArgumentNullException(\"changes\");\n      if (versionBeforeTypingSession == null) throw new ArgumentNullException(\"versionBeforeTypingSession\");\n      if (assertedMasterText == null) throw new ArgumentNullException(\"assertedMasterText\");\n      if (assertedSlaveText == null) throw new ArgumentNullException(\"assertedSlaveText\");\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "JoinNullCheckWithUsage"
  },
  "hash": "15ccb2e0f382cf7cbbb64cd825d87667e2ccb878a66cd5ce64a491acda2a6dbe"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Join null check with assignment",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Join null check with assignment",
  "detailsInfo": "Replaces if statement with code using ?? operator and throw expression [Learn more...](https://www.jetbrains.com/help/rider/JoinNullCheckWithUsage.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 383,
      "offset": 18,
      "length": 7,
      "code": {
        "startLine": 381,
        "length": 7,
        "offset": 102,
        "surroundingCode": "    {\n      if (searchLabel == null) throw new ArgumentNullException(\"searchLabel\");\n      if (issues == null) throw new ArgumentNullException(\"issues\");\n      \n      SearchLabel = searchLabel;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "JoinNullCheckWithUsage"
  },
  "hash": "179ea1dd6e1ac51c53c9f6fb45ed2eb86b2989e011fb76fcbebdc48320d1aa39"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Join null check with assignment",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Join null check with assignment",
  "detailsInfo": "Replaces if statement with code using ?? operator and throw expression [Learn more...](https://www.jetbrains.com/help/rider/JoinNullCheckWithUsage.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 524,
      "offset": 16,
      "length": 7,
      "code": {
        "startLine": 522,
        "length": 7,
        "offset": 27,
        "surroundingCode": "    )\n    {\n      if (text == null) throw new ArgumentNullException(\"text\");\n      \n      Text = text;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "JoinNullCheckWithUsage"
  },
  "hash": "1954cb2213bbc3449efe5645ede200f3138df0a9b6aa24ba5ad3c82483237e97"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Join null check with assignment",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Join null check with assignment",
  "detailsInfo": "Replaces if statement with code using ?? operator and throw expression [Learn more...](https://www.jetbrains.com/help/rider/JoinNullCheckWithUsage.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 109,
      "offset": 30,
      "length": 7,
      "code": {
        "startLine": 107,
        "length": 7,
        "offset": 122,
        "surroundingCode": "    {\n      if (internedLocally == null) throw new ArgumentNullException(\"internedLocally\");\n      if (internedExternally == null) throw new ArgumentNullException(\"internedExternally\");\n      if (internedInProtocol == null) throw new ArgumentNullException(\"internedInProtocol\");\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "JoinNullCheckWithUsage"
  },
  "hash": "31402e928f3c2f2a45d95005e7e8f609ee197b24b267c64c6f6d5f261df0cd3f"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Join null check with assignment",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Join null check with assignment",
  "detailsInfo": "Replaces if statement with code using ?? operator and throw expression [Learn more...](https://www.jetbrains.com/help/rider/JoinNullCheckWithUsage.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 214,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 212,
        "length": 7,
        "offset": 28,
        "surroundingCode": "    )\n    {\n      if (value == null) throw new ArgumentNullException(\"value\");\n      \n      Value = value;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "JoinNullCheckWithUsage"
  },
  "hash": "45150c46890dce31b6bb709c31c881e1969d3cbce284b99218a0fcc750f9ad7d"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Join null check with assignment",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Join null check with assignment",
  "detailsInfo": "Replaces if statement with code using ?? operator and throw expression [Learn more...](https://www.jetbrains.com/help/rider/JoinNullCheckWithUsage.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 36,
      "offset": 38,
      "length": 7,
      "code": {
        "startLine": 34,
        "length": 7,
        "offset": 114,
        "surroundingCode": "    {\n      if (changes == null) throw new ArgumentNullException(\"changes\");\n      if (versionBeforeTypingSession == null) throw new ArgumentNullException(\"versionBeforeTypingSession\");\n      if (assertedMasterText == null) throw new ArgumentNullException(\"assertedMasterText\");\n      if (assertedSlaveText == null) throw new ArgumentNullException(\"assertedSlaveText\");"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "JoinNullCheckWithUsage"
  },
  "hash": "627190a24eb1c56b80b030d6785345b07d0d4abecae390f1573a3147e572621b"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Join null check with assignment",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Join null check with assignment",
  "detailsInfo": "Replaces if statement with code using ?? operator and throw expression [Learn more...](https://www.jetbrains.com/help/rider/JoinNullCheckWithUsage.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 38,
      "offset": 29,
      "length": 7,
      "code": {
        "startLine": 36,
        "length": 7,
        "offset": 230,
        "surroundingCode": "      if (versionBeforeTypingSession == null) throw new ArgumentNullException(\"versionBeforeTypingSession\");\n      if (assertedMasterText == null) throw new ArgumentNullException(\"assertedMasterText\");\n      if (assertedSlaveText == null) throw new ArgumentNullException(\"assertedSlaveText\");\n\n      _Changes = changes;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "JoinNullCheckWithUsage"
  },
  "hash": "6ab480f4a1bb13964a51f458a9a1ea4776f6786e6522493dcc3119db85efd172"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Join null check with assignment",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Join null check with assignment",
  "detailsInfo": "Replaces if statement with code using ?? operator and throw expression [Learn more...](https://www.jetbrains.com/help/rider/JoinNullCheckWithUsage.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 382,
      "offset": 23,
      "length": 7,
      "code": {
        "startLine": 380,
        "length": 7,
        "offset": 34,
        "surroundingCode": "    )\n    {\n      if (searchLabel == null) throw new ArgumentNullException(\"searchLabel\");\n      if (issues == null) throw new ArgumentNullException(\"issues\");\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "JoinNullCheckWithUsage"
  },
  "hash": "ab6b0b2dac56b4cc5d7c8cf4f451909887983e8e09782bb3112b7d77ffdcb9fe"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Join null check with assignment",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Join null check with assignment",
  "detailsInfo": "Replaces if statement with code using ?? operator and throw expression [Learn more...](https://www.jetbrains.com/help/rider/JoinNullCheckWithUsage.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 296,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 294,
        "length": 7,
        "offset": 28,
        "surroundingCode": "    )\n    {\n      if (value == null) throw new ArgumentNullException(\"value\");\n      \n      Value = value;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "JoinNullCheckWithUsage"
  },
  "hash": "aba2481bf6f7aa8a70ff330357f36c7c33a4c005377a7ee143b0536538444b6b"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Join null check with assignment",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Join null check with assignment",
  "detailsInfo": "Replaces if statement with code using ?? operator and throw expression [Learn more...](https://www.jetbrains.com/help/rider/JoinNullCheckWithUsage.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 35,
      "offset": 19,
      "length": 7,
      "code": {
        "startLine": 33,
        "length": 7,
        "offset": 30,
        "surroundingCode": "    )\n    {\n      if (changes == null) throw new ArgumentNullException(\"changes\");\n      if (versionBeforeTypingSession == null) throw new ArgumentNullException(\"versionBeforeTypingSession\");\n      if (assertedMasterText == null) throw new ArgumentNullException(\"assertedMasterText\");"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "JoinNullCheckWithUsage"
  },
  "hash": "ac8e0e6ab9284a929a7a81827efe564d24032bf432ed5c8d721a22947e11bf10"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Join null check with assignment",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Join null check with assignment",
  "detailsInfo": "Replaces if statement with code using ?? operator and throw expression [Learn more...](https://www.jetbrains.com/help/rider/JoinNullCheckWithUsage.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 108,
      "offset": 27,
      "length": 7,
      "code": {
        "startLine": 106,
        "length": 7,
        "offset": 38,
        "surroundingCode": "    )\n    {\n      if (internedLocally == null) throw new ArgumentNullException(\"internedLocally\");\n      if (internedExternally == null) throw new ArgumentNullException(\"internedExternally\");\n      if (internedInProtocol == null) throw new ArgumentNullException(\"internedInProtocol\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "JoinNullCheckWithUsage"
  },
  "hash": "ade2c93b44d4b729bf048600ed305cd9f874c78d49b377b74ec2cd841b38b601"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Join null check with assignment",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Join null check with assignment",
  "detailsInfo": "Replaces if statement with code using ?? operator and throw expression [Learn more...](https://www.jetbrains.com/help/rider/JoinNullCheckWithUsage.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 455,
      "offset": 23,
      "length": 7,
      "code": {
        "startLine": 453,
        "length": 7,
        "offset": 34,
        "surroundingCode": "    )\n    {\n      if (searchLabel == null) throw new ArgumentNullException(\"searchLabel\");\n      if (issues == null) throw new ArgumentNullException(\"issues\");\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "JoinNullCheckWithUsage"
  },
  "hash": "d1a2493d31198ac5c05a66489424deaa3ac7a57d86d6ab018d35e4e72ef0bb28"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Join null check with assignment",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Join null check with assignment",
  "detailsInfo": "Replaces if statement with code using ?? operator and throw expression [Learn more...](https://www.jetbrains.com/help/rider/JoinNullCheckWithUsage.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 456,
      "offset": 18,
      "length": 7,
      "code": {
        "startLine": 454,
        "length": 7,
        "offset": 102,
        "surroundingCode": "    {\n      if (searchLabel == null) throw new ArgumentNullException(\"searchLabel\");\n      if (issues == null) throw new ArgumentNullException(\"issues\");\n      \n      SearchLabel = searchLabel;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "JoinNullCheckWithUsage"
  },
  "hash": "d65e3f7a67574a685c2f29ef6fdf3be2ff1dcb43c166f2dcd6bc11c354e6fd7b"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Join null check with assignment",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Join null check with assignment",
  "detailsInfo": "Replaces if statement with code using ?? operator and throw expression [Learn more...](https://www.jetbrains.com/help/rider/JoinNullCheckWithUsage.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdAssertion.cs",
      "language": "C#",
      "line": 24,
      "offset": 16,
      "length": 7,
      "code": {
        "startLine": 22,
        "length": 7,
        "offset": 27,
        "surroundingCode": "    )\n    {\n      if (text == null) throw new ArgumentNullException(\"text\");\n      \n      MasterVersion = masterVersion;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "JoinNullCheckWithUsage"
  },
  "hash": "e46e331222f4bcf1093c5a1cb4e7bd1f29af64a5deaa7e3dcd7a9c01675840d4"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Join null check with assignment",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Join null check with assignment",
  "detailsInfo": "Replaces if statement with code using ?? operator and throw expression [Learn more...](https://www.jetbrains.com/help/rider/JoinNullCheckWithUsage.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 141,
      "offset": 23,
      "length": 7,
      "code": {
        "startLine": 139,
        "length": 7,
        "offset": 34,
        "surroundingCode": "    )\n    {\n      if (searchLabel == null) throw new ArgumentNullException(\"searchLabel\");\n      if (signaller == null) throw new ArgumentNullException(\"signaller\");\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "JoinNullCheckWithUsage"
  },
  "hash": "e55d1336777a8124e88ada7d015de05ec7c73adcbba18841373e1e93d09e4008"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Join null check with assignment",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Join null check with assignment",
  "detailsInfo": "Replaces if statement with code using ?? operator and throw expression [Learn more...](https://www.jetbrains.com/help/rider/JoinNullCheckWithUsage.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 142,
      "offset": 21,
      "length": 7,
      "code": {
        "startLine": 140,
        "length": 7,
        "offset": 105,
        "surroundingCode": "    {\n      if (searchLabel == null) throw new ArgumentNullException(\"searchLabel\");\n      if (signaller == null) throw new ArgumentNullException(\"signaller\");\n      \n      SearchLabel = searchLabel;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "JoinNullCheckWithUsage"
  },
  "hash": "e5961ba6f605c152b229bda84b1a24d1dbab48a4f4ab7d663344b23bdb0f1abc"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Join null check with assignment",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Join null check with assignment",
  "detailsInfo": "Replaces if statement with code using ?? operator and throw expression [Learn more...](https://www.jetbrains.com/help/rider/JoinNullCheckWithUsage.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/IWire.cs",
      "language": "C#",
      "line": 71,
      "offset": 21,
      "length": 7,
      "code": {
        "startLine": 69,
        "length": 7,
        "offset": 105,
        "surroundingCode": "      // contexts is initialized when protocol is created.\n      myContexts = null!;\n      if (scheduler == null) throw new ArgumentNullException(nameof(scheduler));\n\n      Scheduler = scheduler;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "JoinNullCheckWithUsage"
  },
  "hash": "f4edc5ff24c25ebf1dae8f3f6bdb096073c5b25b32ba5ba9b80c93cb1fe3b8ab"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Join null check with assignment",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Join null check with assignment",
  "detailsInfo": "Replaces if statement with code using ?? operator and throw expression [Learn more...](https://www.jetbrains.com/help/rider/JoinNullCheckWithUsage.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 599,
      "offset": 16,
      "length": 7,
      "code": {
        "startLine": 597,
        "length": 7,
        "offset": 27,
        "surroundingCode": "    )\n    {\n      if (text == null) throw new ArgumentNullException(\"text\");\n      \n      Text = text;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "JoinNullCheckWithUsage"
  },
  "hash": "f674381372ab6acb4ff36d482f375b203eec58206fcce1f81e47b2b87905d504"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Local variable hides member",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Local variable 'def' hides field 'LifetimeDefinition Test.Lifetimes.Lifetimes.LifetimeTest.def'",
  "detailsInfo": "Local variable has the same name as a field/property and hides it [Learn more...](https://www.jetbrains.com/help/rider/LocalVariableHidesMember.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1258,
      "offset": 11,
      "length": 3,
      "code": {
        "startLine": 1256,
        "length": 3,
        "offset": 36,
        "surroundingCode": "      \n      var sum = 0;\n      var def = Lifetime.Define();\n      Task.WaitAll(\n        Task.Run(() =>"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "LocalVariableHidesMember"
  },
  "hash": "21b81f2c760c39f8327806a085b74b2f2224a9e175b7f6c0d3b7e639232dd77c"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Local variable hides member",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Local variable 'def' hides field 'LifetimeDefinition Test.Lifetimes.Lifetimes.LifetimeTest.def'",
  "detailsInfo": "Local variable has the same name as a field/property and hides it [Learn more...](https://www.jetbrains.com/help/rider/LocalVariableHidesMember.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1094,
      "offset": 11,
      "length": 3,
      "code": {
        "startLine": 1092,
        "length": 3,
        "offset": 56,
        "surroundingCode": "    public void CancellationTokenTest()\n    {\n      var def = Lifetime.Define();      \n      \n      var sw = new SpinWait();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "LocalVariableHidesMember"
  },
  "hash": "5481a124dc46f083da05cb5207288dc28fadfe931cf2b2017afab01b2ac8b7fe"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Local variable hides member",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Local variable 'def' hides field 'LifetimeDefinition Test.Lifetimes.Lifetimes.LifetimeTest.def'",
  "detailsInfo": "Local variable has the same name as a field/property and hides it [Learn more...](https://www.jetbrains.com/help/rider/LocalVariableHidesMember.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1127,
      "offset": 11,
      "length": 3,
      "code": {
        "startLine": 1125,
        "length": 3,
        "offset": 72,
        "surroundingCode": "    public void CancellationTokenTestAlreadyCancelled()\n    {\n      var def = Lifetime.Define();\n      def.Terminate();\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "LocalVariableHidesMember"
  },
  "hash": "77660770eeb732e2cbeb33698f8e951058f85f2e8f1cbf827f97f607c5b0ec73"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Local variable hides member",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Local variable 'def' hides field 'LifetimeDefinition Test.Lifetimes.Lifetimes.LifetimeTest.def'",
  "detailsInfo": "Local variable has the same name as a field/property and hides it [Learn more...](https://www.jetbrains.com/help/rider/LocalVariableHidesMember.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1308,
      "offset": 13,
      "length": 3,
      "code": {
        "startLine": 1306,
        "length": 3,
        "offset": 56,
        "surroundingCode": "        var count = 0;\n        var sum = 0;\n        var def = TestLifetime.CreateNested();\n        var creatorTask = Task.Run(Creator);\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "LocalVariableHidesMember"
  },
  "hash": "9420b7ee3fdb57e332c45f28e986e5e01e319ac4d6d54a38eff320cd83e67c2d"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Local variable hides member",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Local variable 'lt' hides property 'Lifetime Test.Lifetimes.Lifetimes.LifetimeTest.lt'",
  "detailsInfo": "Local variable has the same name as a field/property and hides it [Learn more...](https://www.jetbrains.com/help/rider/LocalVariableHidesMember.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1143,
      "offset": 11,
      "length": 2,
      "code": {
        "startLine": 1141,
        "length": 2,
        "offset": 66,
        "surroundingCode": "    public void TestCancellationEternalLifetime()\n    {\n      var lt = Lifetime.Eternal;\n      \n      var task = Task.Run(() =>"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "LocalVariableHidesMember"
  },
  "hash": "9d7c258c5361facd2596a53de195691d7022618d473685b7a1ae084517667576"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Local variable hides member",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Local variable 'def' hides field 'LifetimeDefinition Test.Lifetimes.Lifetimes.LifetimeTest.def'",
  "detailsInfo": "Local variable has the same name as a field/property and hides it [Learn more...](https://www.jetbrains.com/help/rider/LocalVariableHidesMember.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1234,
      "offset": 11,
      "length": 3,
      "code": {
        "startLine": 1232,
        "length": 3,
        "offset": 77,
        "surroundingCode": "      var cancel = new CancellationTokenSource(1000).Token;\n      \n      var def = new LifetimeDefinition();\n      Task.WaitAll(\n        Task.Run(() =>"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "LocalVariableHidesMember"
  },
  "hash": "c28cf0d58f6ac06e330723ef5f88dc89b5515be2e1e98d5c243b6003b9a04e5b"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Loop can be converted into LINQ-expression",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Loop can be converted into LINQ-expression",
  "detailsInfo": "A 'foreach' ('For Each' for VB.NET) or 'for' statement can be converted into a LINQ-expression [Learn more...](https://www.jetbrains.com/help/rider/LoopCanBeConvertedToQuery.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CollectionEx.cs",
      "language": "C#",
      "line": 30,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 28,
        "length": 7,
        "offset": 87,
        "surroundingCode": "      comparer ??= EqualityComparer<T>.Default;\n      var hashCode = 0x2D2816FE;\n      foreach (var item in collection)\n      {\n        hashCode = hashCode * 31 + (item == null ? 0 : comparer.GetHashCode(item));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "LoopCanBeConvertedToQuery"
  },
  "hash": "1f214a0f892b5135944ba188e38cd2894d2ef9aeb096694936417317505c8536"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Loop can be converted into LINQ-expression",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Loop can be converted into LINQ-expression",
  "detailsInfo": "A 'foreach' ('For Each' for VB.NET) or 'for' statement can be converted into a LINQ-expression [Learn more...](https://www.jetbrains.com/help/rider/LoopCanBeConvertedToQuery.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 447,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 445,
        "length": 7,
        "offset": 44,
        "surroundingCode": "        return rdExt.RdRpcInterface;\n\n      foreach (var @interface in typeInfo.GetInterfaces()) \n        if (IsRpcAttributeDefined(@interface)) \n          return @interface;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "LoopCanBeConvertedToQuery"
  },
  "hash": "2884b4896b12bd3fd2fd6e2571e88eceadc349fd5928da20c7d5ec602e82b7a6"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Loop can be converted into LINQ-expression",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Loop can be converted into LINQ-expression",
  "detailsInfo": "A 'foreach' ('For Each' for VB.NET) or 'for' statement can be converted into a LINQ-expression [Learn more...](https://www.jetbrains.com/help/rider/LoopCanBeConvertedToQuery.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 316,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 314,
        "length": 7,
        "offset": 122,
        "surroundingCode": "      Assertion.Assert(parameters.Length <= 7, \"parameters.Length <= 7\");\n      List<Type> list = new List<Type>();\n      foreach (var p in parameters)\n      {\n        // Lifetime treated as cancellation token"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "LoopCanBeConvertedToQuery"
  },
  "hash": "3ce6ccf987498750dab078e886ea176c3c01fbcbed6b289a6a343e6d71d15d8c"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Loop can be converted into LINQ-expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Loop can be converted into LINQ-expression",
  "detailsInfo": "A 'foreach' ('For Each' for VB.NET) or 'for' statement can be converted into a LINQ-expression [Learn more...](https://www.jetbrains.com/help/rider/LoopCanBeConvertedToQuery.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 426,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 424,
        "length": 7,
        "offset": 75,
        "surroundingCode": "    public static bool HasIntrinsicProtocolMethods(TypeInfo t)\n    {\n      foreach (var method in t.GetMethods(BindingFlags.Static | BindingFlags.Public))\n      {\n        if (method.Name == \"Read\" || method.Name == \"Write\" && method.GetParameters().Any(p => p.ParameterType == typeof(SerializationCtx)))"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "LoopCanBeConvertedToQuery"
  },
  "hash": "8d62d6a4384c34f35a49c920a512b89183cf4e3dfc3973a255e104b10db0fb6b"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Loop can be converted into LINQ-expression",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Loop can be converted into LINQ-expression",
  "detailsInfo": "A 'foreach' ('For Each' for VB.NET) or 'for' statement can be converted into a LINQ-expression [Learn more...](https://www.jetbrains.com/help/rider/LoopCanBeConvertedToQuery.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 406,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 404,
        "length": 7,
        "offset": 142,
        "surroundingCode": "      if (genericArguments.Length == 1 && typeof(IRdBindable).IsAssignableFrom(implementingType) && implementingType.IsClass)\n      {\n        foreach (var ctor in implementingType.GetTypeInfo().GetConstructors(BindingFlags.Public | BindingFlags.Instance))\n        {\n          var parameters = ctor.GetParameters();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "LoopCanBeConvertedToQuery"
  },
  "hash": "adb337958da68beaa08bd321eee32010da2d4a558c8a829b9106764aeec39cb4"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Loop can be converted into LINQ-expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Loop can be converted into LINQ-expression",
  "detailsInfo": "A 'foreach' ('For Each' for VB.NET) or 'for' statement can be converted into a LINQ-expression [Learn more...](https://www.jetbrains.com/help/rider/LoopCanBeConvertedToQuery.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 175,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 173,
        "length": 7,
        "offset": 70,
        "surroundingCode": "    public static IEnumerable<T> EnumerateEnumValues<T>()\n    {\n      foreach (var value in Enum.GetValues(typeof (T)))\n        yield return (T) value;\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "LoopCanBeConvertedToQuery"
  },
  "hash": "c5cb853f71fae2df4a03df4d004393a414dcb7d1a6df9547f386e50cc6d1d5bc"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Loop can be converted into LINQ-expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Loop can be converted into LINQ-expression",
  "detailsInfo": "A 'foreach' ('For Each' for VB.NET) or 'for' statement can be converted into a LINQ-expression [Learn more...](https://www.jetbrains.com/help/rider/LoopCanBeConvertedToQuery.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 397,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 395,
        "length": 7,
        "offset": 66,
        "surroundingCode": "    public static bool HasIntrinsicFields(TypeInfo t)\n    {\n      foreach (var member in t.GetFields(BindingFlags.Static | BindingFlags.Public))\n      {\n        if (member.Name == \"Read\" || member.Name == \"Write\")"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "LoopCanBeConvertedToQuery"
  },
  "hash": "ed7afc279be6cd9dd408237a61e6e2107601c5ef74521a72d9c90d6a527bf1ea"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made static (shared) (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'SaveGeneratedAssembly' can be made static",
  "detailsInfo": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/RdReflectionTestBase.cs",
      "language": "C#",
      "line": 78,
      "offset": 20,
      "length": 21,
      "code": {
        "startLine": 76,
        "length": 21,
        "offset": 26,
        "surroundingCode": "    }\n\n    protected void SaveGeneratedAssembly()\n    {\n#if NET35 || NETCOREAPP"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBeMadeStatic.Global"
  },
  "hash": "12a0a3afa3f4d595d97d6af2ae06261001b08b0ce053b2cb6ff05d2642ce37e8"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made static (shared) (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AssertNotNull' can be made static",
  "detailsInfo": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/OuterLifetime.cs",
      "language": "C#",
      "line": 71,
      "offset": 17,
      "length": 13,
      "code": {
        "startLine": 69,
        "length": 13,
        "offset": 23,
        "surroundingCode": "    }\n\n    public void AssertNotNull()\n    {\n//      if(myLifetime == null)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBeMadeStatic.Global"
  },
  "hash": "2f4d013374d1b19d06f350950c43530bb968387ff00fb5449667c723638e305f"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made static (shared) (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'ThrowLoggedExceptions' can be made static",
  "detailsInfo": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/LifetimesTestBase.cs",
      "language": "C#",
      "line": 40,
      "offset": 20,
      "length": 21,
      "code": {
        "startLine": 38,
        "length": 21,
        "offset": 25,
        "surroundingCode": "    \n\n    protected void ThrowLoggedExceptions()\n    {\n      TestLogger.ExceptionLogger.ThrowLoggedExceptions();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MemberCanBeMadeStatic.Global"
  },
  "hash": "ab65774a6b64bd2bd156fd4a211ba70f237e5b5c3bcda2865d9be85973375f3e"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made static (shared) (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'SetActive' can be made static",
  "detailsInfo": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SynchronousScheduler.cs",
      "language": "C#",
      "line": 19,
      "offset": 17,
      "length": 9,
      "code": {
        "startLine": 17,
        "length": 9,
        "offset": 66,
        "surroundingCode": "    [ThreadStatic] private static int ourActive;\n\n    public void SetActive(Lifetime lifetime)\n    {      \n      lifetime.Bracket(() => { ourActive++; }, () => { ourActive--; });"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBeMadeStatic.Global"
  },
  "hash": "f777cb0ed687cf859425f14ffee3c7d3f34243f96a0413ae9e6c4c36e57337f1"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made static (shared) (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'WriteMessage' can be made static",
  "detailsInfo": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/TestLogger.cs",
      "language": "C#",
      "line": 24,
      "offset": 18,
      "length": 12,
      "code": {
        "startLine": 22,
        "length": 12,
        "offset": 24,
        "surroundingCode": "    }\n\n    private void WriteMessage(LeveledMessage message)\n    {\n      TestContext.Progress.WriteLine(message.FormattedMessage);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MemberCanBeMadeStatic.Local"
  },
  "hash": "0078641fd0df4419990f2ca23819dd115c7ba4c9601492befe48007b22385384"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made static (shared) (private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'ImplementMethod' can be made static",
  "detailsInfo": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 347,
      "offset": 18,
      "length": 15,
      "code": {
        "startLine": 345,
        "length": 15,
        "offset": 24,
        "surroundingCode": "    }\n\n    private void ImplementMethod(TypeBuilder typebuilder, MethodInfo method)\n    {\n      // add field for IRdCall instance"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBeMadeStatic.Local"
  },
  "hash": "13ec7992cfd661a29063e29b44abe3b2bc4048c0dfbe92dd73602a25e3efb0c5"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made static (shared) (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Fail' can be made static",
  "detailsInfo": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 39,
      "offset": 15,
      "length": 4,
      "code": {
        "startLine": 37,
        "length": 4,
        "offset": 56,
        "surroundingCode": "      throw new FailureException();\n    }\n    private T Fail<T>()\n    {\n      throw new FailureException();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MemberCanBeMadeStatic.Local"
  },
  "hash": "33b9c4496fee2565f6c699a9bb5a820d1bf2e2adf0e139d7064b2bf53647042e"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made static (shared) (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'GetPolymorphic' can be made static",
  "detailsInfo": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 243,
      "offset": 28,
      "length": 14,
      "code": {
        "startLine": 241,
        "length": 14,
        "offset": 34,
        "surroundingCode": "    }\n\n    private SerializerPair GetPolymorphic(Type type)\n    {\n      var polymorphicClass = typeof(Polymorphic<>).MakeGenericType(type);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBeMadeStatic.Local"
  },
  "hash": "39ab0d7798f79d12e28c9816785a0740043feeefbb738a4f74b35ec1e8a0dae8"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made static (shared) (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'RNameEquals' can be made static",
  "detailsInfo": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/SerializersTest.cs",
      "language": "C#",
      "line": 38,
      "offset": 18,
      "length": 11,
      "code": {
        "startLine": 36,
        "length": 11,
        "offset": 28,
        "surroundingCode": "    }\n    \n    private bool RNameEquals(RName a, RName b)\n    {\n      if (a == RName.Empty || b == RName.Empty)"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBeMadeStatic.Local"
  },
  "hash": "41f708c16a7a50202f3492c2ef33b6ea754fedaa70fac41c5e26f0eded36dcbe"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made static (shared) (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'CreateProtocolInternRoot' can be made static",
  "detailsInfo": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Protocol.cs",
      "language": "C#",
      "line": 73,
      "offset": 32,
      "length": 24,
      "code": {
        "startLine": 71,
        "length": 24,
        "offset": 38,
        "surroundingCode": "    }\n\n    private InternRoot<object> CreateProtocolInternRoot(Lifetime lifetime)\n    {\n      var root = new InternRoot<object>();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBeMadeStatic.Local"
  },
  "hash": "57a613b864b8da5a8aed2221d7c37dff6f4f6748817a65d864c56442c36f8210"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made static (shared) (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'PutLong' can be made static",
  "detailsInfo": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 238,
      "offset": 18,
      "length": 7,
      "code": {
        "startLine": 236,
        "length": 7,
        "offset": 24,
        "surroundingCode": "    }\n\n    private void PutLong(ByteBufferAsyncProcessor buffer, long l)\n    {\n      using (var cookie = UnsafeWriter.NewThreadLocalWriter())"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MemberCanBeMadeStatic.Local"
  },
  "hash": "59093e2ffee1fe309650ee37fdffec90d49d2d7551e486bd149dcc8cb83a7273"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made static (shared) (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'CreateEndpoint' can be made static",
  "detailsInfo": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdTaskTest.cs",
      "language": "C#",
      "line": 27,
      "offset": 31,
      "length": 14,
      "code": {
        "startLine": 25,
        "length": 14,
        "offset": 32,
        "surroundingCode": "\n\n    private RdCall<TIn, TOut> CreateEndpoint<TIn, TOut>(Func<TIn, TOut> handler, IScheduler cancellationScheduler = null, IScheduler handlerScheduler = null)\n    {\n      var res = NewRdCall<TIn, TOut>();"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBeMadeStatic.Local"
  },
  "hash": "72eb9cc5380c8c18fb90899ada486fa2110f97d4e9dc4f328459389179a7c643"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made static (shared) (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Fail' can be made static",
  "detailsInfo": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 35,
      "offset": 18,
      "length": 4,
      "code": {
        "startLine": 33,
        "length": 4,
        "offset": 63,
        "surroundingCode": "    class FailureException : Exception\n    {}\n    private void Fail()\n    {\n      throw new FailureException();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MemberCanBeMadeStatic.Local"
  },
  "hash": "8884a4f12d4292185e711c98ab708a91c2fdedb744b3b8b7f0609888484f83ca"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made static (shared) (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'SetCanceledIsolated' can be made static",
  "detailsInfo": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 62,
      "offset": 10,
      "length": 19,
      "code": {
        "startLine": 60,
        "length": 19,
        "offset": 16,
        "surroundingCode": "    }\n\n    void SetCanceledIsolated<TResult>(TaskCompletionSource<TResult> tcs) { try { tcs.SetCanceled(); } catch (Exception e) { Log.Root.Error(e);}}\n    \n    public AsyncChannel(Lifetime lifetime, int sendBufferSize = Int32.MaxValue)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBeMadeStatic.Local"
  },
  "hash": "a16ada71535eea51879e41dd3ce377cd2eb3acf7561a98184532024236548b03"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made static (shared) (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'AssertExtract' can be made static",
  "detailsInfo": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/PriorityQueueTest.cs",
      "language": "C#",
      "line": 251,
      "offset": 18,
      "length": 13,
      "code": {
        "startLine": 249,
        "length": 13,
        "offset": 24,
        "surroundingCode": "    }\n\n    private void AssertExtract<T>(T x, IPriorityQueue<T> q)\n    {\n      T xx;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MemberCanBeMadeStatic.Local"
  },
  "hash": "a37039cd044c347419f5e2877572245124fb9bb6983c4a295a68cb76b1713258"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made static (shared) (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'MeasureBytes' can be made static",
  "detailsInfo": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTest.cs",
      "language": "C#",
      "line": 47,
      "offset": 18,
      "length": 12,
      "code": {
        "startLine": 45,
        "length": 12,
        "offset": 108,
        "surroundingCode": "    public void TestServerThenClientMixedAndReversed() { DoTest(false, true, true); }\n    \n    private long MeasureBytes(IProtocol protocol, Action action)\n    {\n      var pre = ((TestWire) protocol.Wire).BytesSent;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBeMadeStatic.Local"
  },
  "hash": "ad18561e9e6221ba2c907f2cbd09432c47d518bb66cbd17f11712d0893d15351"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made static (shared) (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'ToStringFormatted' can be made static",
  "detailsInfo": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetDefaultInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 36,
      "offset": 19,
      "length": 17,
      "code": {
        "startLine": 34,
        "length": 17,
        "offset": 72,
        "surroundingCode": "\n  [MethodImpl(MethodImplOptions.AggressiveInlining)]\n  private string? ToStringFormatted<T>(T value, string? format)\n  {\n    // ReSharper disable once MergeCastWithTypeCheck"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBeMadeStatic.Local"
  },
  "hash": "b52b327de5bf0f322cd5d041761854490c22ac2c401a2960130979ab5c49a947"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made static (shared) (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'CreateSerializers' can be made static",
  "detailsInfo": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextEarlyDeliveryTest.cs",
      "language": "C#",
      "line": 38,
      "offset": 25,
      "length": 17,
      "code": {
        "startLine": 36,
        "length": 17,
        "offset": 31,
        "surroundingCode": "    }\n\n    private Serializers CreateSerializers()\n    {\n      return new Serializers();"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBeMadeStatic.Local"
  },
  "hash": "b81d13e40adc9a02134d76318520a4dc46a47a605a3c78edff8d5dbc56d79eb3"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made static (shared) (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'CheckNotNull' can be made static",
  "detailsInfo": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 864,
      "offset": 18,
      "length": 12,
      "code": {
        "startLine": 862,
        "length": 12,
        "offset": 81,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    private void CheckNotNull(object opening, object closing)\n    {\n      if (opening == null) throw new ArgumentNullException(nameof(opening));      "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBeMadeStatic.Local"
  },
  "hash": "c92654e242c527e89023eb247dea2ef83ffb3bd3905c5da6216ac6f753697726"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made static (shared) (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'WaitAndAssert' can be made static",
  "detailsInfo": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SocketWireTest.cs",
      "language": "C#",
      "line": 33,
      "offset": 18,
      "length": 13,
      "code": {
        "startLine": 31,
        "length": 13,
        "offset": 19,
        "surroundingCode": "\n\n    private void WaitAndAssert<T>(RdProperty<T> property, T expected, Maybe<T> prev = default(Maybe<T>))\n    {\n      var start = Environment.TickCount;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBeMadeStatic.Local"
  },
  "hash": "ca128222bf0d9f611a65c2dc31de25290344b349a38a7274ded5c4f0033cb453"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made static (shared) (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'CheckNotNull' can be made static",
  "detailsInfo": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 716,
      "offset": 18,
      "length": 12,
      "code": {
        "startLine": 714,
        "length": 12,
        "offset": 85,
        "surroundingCode": "    \n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    private void CheckNotNull(object action)\n    {\n      if (action == null) throw new ArgumentNullException(nameof(action));      "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBeMadeStatic.Local"
  },
  "hash": "daeef4dcb4a118c84ed398e591ba16de3adaaa45054963686bf54021698631e8"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made static (shared) (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'TestDisconnectBase' can be made static",
  "detailsInfo": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SocketWireTest.cs",
      "language": "C#",
      "line": 274,
      "offset": 18,
      "length": 18,
      "code": {
        "startLine": 272,
        "length": 18,
        "offset": 26,
        "surroundingCode": "    });\n\n    private void TestDisconnectBase(Action<List<int>, int> advise)\n    {\n      var timeout = TimeSpan.FromSeconds(1);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBeMadeStatic.Local"
  },
  "hash": "eee4ba55917e0751b68b6e0ea9cbba93dd85512e368a6f5acc2cafe436e60a74"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made static (shared) (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'ImplementProperty' can be made static",
  "detailsInfo": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 276,
      "offset": 18,
      "length": 17,
      "code": {
        "startLine": 274,
        "length": 17,
        "offset": 24,
        "surroundingCode": "    }\n\n    private void ImplementProperty(TypeBuilder typebuilder, PropertyInfo propertyInfo)\n    {\n      var type = propertyInfo.PropertyType;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBeMadeStatic.Local"
  },
  "hash": "f5bccc5353dc78ea258687a42986b772901e39d36cd2eaa7debadb81ee9699cd"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'SearchLabel' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 127,
      "offset": 15,
      "length": 6,
      "code": {
        "startLine": 125,
        "length": 6,
        "offset": 47,
        "surroundingCode": "    //fields\n    //public fields\n    [NotNull] public string SearchLabel {get; private set;}\n    [NotNull] public ISignal<string> Signaller { get { return _Signaller; }}\n    "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "0072ade7f92ce684eea7f6f7f39eb1228201684eadc5a1e60c6cb2c65384c664"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteFloat' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 117,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 115,
        "length": 6,
        "offset": 216,
        "surroundingCode": "    public static readonly CtxWriteDelegate<int> WriteInt = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<long> WriteLong = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<float> WriteFloat = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<double> WriteDouble = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<char> WriteChar = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "02dd39f3121bab3edbf0a6d0694ddb7f7c4a286596280e84d6bd271c30dea8a2"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'WriteValueDelegate' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSignal.cs",
      "language": "C#",
      "line": 15,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 13,
        "length": 6,
        "offset": 62,
        "surroundingCode": "\n    public CtxReadDelegate<T> ReadValueDelegate { get; }\n    public CtxWriteDelegate<T> WriteValueDelegate { get; }\n\n    public static RdSignal<T> Read(SerializationCtx ctx, UnsafeReader reader)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "03e0b3b909a47d2f86afad7b4c2855773fd022474e4013bf7796c0e4acc737b4"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'Activate' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 110,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 108,
        "length": 6,
        "offset": 119,
        "surroundingCode": "    /// Activate <see cref=\"RdExtAttribute\"/> or <see cref=\"RdModelAttribute\"/> or its members.\n    /// </summary>\n    public object Activate(Type type, string name)\n    {\n      if (Mode.IsAssertion)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "03f07b7ca6db8d00fc430922ccd58873e2d479faa62037b39b5da00e2171c18c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'WriteList' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SerializersEx.cs",
      "language": "C#",
      "line": 24,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 22,
        "length": 6,
        "offset": 68,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public static void WriteList<T>(this UnsafeWriter writer, CtxWriteDelegate<T> itemWriter, SerializationCtx ctx, List<T>? value)\n    {\n      if (value == null)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "074d297abba9894c9115f30891ed83dac883339eeda4c3af99b893e4a91366a6"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'Client' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 527,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 525,
        "length": 6,
        "offset": 93,
        "surroundingCode": "        this(lifetime, scheduler, new IPEndPoint(IPAddress.Loopback, port), optId) {}\n\n      public Client(Lifetime lifetime, IScheduler scheduler, IPEndPoint endPoint, string? optId = null) :\n        base(\"ClientSocket-\"+(optId ?? \"<noname>\"), lifetime, scheduler)\n      {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "081905b6c6160af453ffd09b7f08342a806925d38cf27c8db5f24c3deb46581a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteByte' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 113,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 111,
        "length": 6,
        "offset": 19,
        "surroundingCode": "\n    //writers\n    public static readonly CtxWriteDelegate<byte> WriteByte = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<short> WriteShort = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<int> WriteInt = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "08c5630c9045bc84b00e19e19faee917230dd22a2da8b458ee95b8db333b45bf"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Struct 'FakeTuple' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 44,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 42,
        "length": 6,
        "offset": 162,
        "surroundingCode": "      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; }\n    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "09386ae6a3a0509cf0fa309ee8eda4b5d600b7233749576cc70fb50d2fc3f793"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Activate' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 127,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 125,
        "length": 6,
        "offset": 119,
        "surroundingCode": "    /// Activate <see cref=\"RdExtAttribute\"/> or <see cref=\"RdModelAttribute\"/> or its members.\n    /// </summary>\n    public object Activate(Type type)\n    {\n      return Activate(type, \"Anonymous\");"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "0a799c3f3bcbbdf6980485be447a2af4b6724934c83b5c0e7ec761723c2958c7"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteInt' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 115,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 113,
        "length": 6,
        "offset": 220,
        "surroundingCode": "    public static readonly CtxWriteDelegate<byte> WriteByte = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<short> WriteShort = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<int> WriteInt = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<long> WriteLong = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<float> WriteFloat = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "0b0b14f39d9fc95342e56c6c64dbf33d9e8f0a0fce5f55d56d00d15d026e4cef"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'CopyTo' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 71,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 69,
        "length": 6,
        "offset": 15,
        "surroundingCode": "      }\n\n      public void CopyTo(byte[] dst, int dstOffset, int count)\n      {\n        CopyTo(dst, 0, dstOffset, count);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "0b234c3e8ae5b3c04a4b51ebbca9e90f1ecb2645a0ec2e9f4fb9e4187b11ee0f"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'ToRdTask' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdTaskEx.cs",
      "language": "C#",
      "line": 21,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 19,
        "length": 6,
        "offset": 10,
        "surroundingCode": "    \n\n    public static RdTask<T> ToRdTask<T>(this Task<T> task)\n    {\n      var res = new RdTask<T>();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "0edab10a5b71ec65909a545c0e32c38a49131945cb128fc2935e64058e309e88"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Constant 'MaxAllocSize' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/NativeMemoryPool.cs",
      "language": "C#",
      "line": 15,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 13,
        "length": 6,
        "offset": 50,
        "surroundingCode": "  {\n    public const int AllocSize = 1 << 20;\n    public const int MaxAllocSize = 1 << 30;\n\n    private const string LogCategory = nameof(NativeMemoryPool);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "10198e588478983838e5f75ad17a573466a89b3faceb7214538f69cfad36336a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Advise' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ReactiveEx.cs",
      "language": "C#",
      "line": 158,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 156,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public static void Advise<T>(this IViewableSet<T> me, Lifetime lifetime, Action<AddRemove, T> handler) where T: notnull\n    {\n      me.Advise(lifetime, e => handler(e.Kind, e.Value));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "10b1cd875c80398eaf0b7926fa3632a91160748fa529a436cb34a0649fd880ae"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'Writer' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Cross/Util/Logging.cs",
      "language": "C#",
      "line": 114,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 112,
        "length": 6,
        "offset": 54,
        "surroundingCode": "  {\n    public LoggingLevel EnabledLevel { get; }\n    public TextWriter Writer { get; }\n\n    public CrossTestsLogFactory([NotNull] TextWriter writer)"
      }
    }
  ],
  "attributes": {
    "module": "Test.Cross",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "10dddbe3864c57797204a293473044587a8b6253af21c9cf4618a128e70fa7c7"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'Equals' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/TextBufferVersion.cs",
      "language": "C#",
      "line": 21,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 19,
        "length": 6,
        "offset": 27,
        "surroundingCode": "    #region Overrides\n\n    public bool Equals(TextBufferVersion other)\n    {\n      return Master == other.Master && Slave == other.Slave;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "112e84b4610b382e4c43c9e62a748b284eafdfc404a1970d9b541f10779d44b9"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Property 'Count' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 29,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 27,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public int Count {\n      [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n      get"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "12b1f1e0662675a5c73c61b56e7c005084ffd4296b18043518855d46fa433a5b"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'LogFormat' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogEx.cs",
      "language": "C#",
      "line": 33,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 31,
        "length": 6,
        "offset": 41,
        "surroundingCode": "\n    [StringFormatMethod(\"message\")]\n    public static void LogFormat<T1>(this ILog @this, LoggingLevel level, string message, T1 t1)\n    {\n      if (@this.IsEnabled(level))"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "14a4ab8a3dfb2fd8982b1de8e7a5aa5a8180499a3e0a9669672bd1480f43e1aa"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReleaseResources' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 183,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 181,
        "length": 8,
        "offset": 135,
        "surroundingCode": "    /// Indicates whether the UnsafeWriter should try to cleanup used memory in <see cref=\"NativeMemoryPool\"/> \n    /// </summary>\n    internal int ReleaseResources;\n\n    private UnsafeWriter()"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "1502c8f9d563acb4a829f0d4aecbc33fc967161074857c8e35ed69b3f3d5ef90"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteInterningNestedTestStringModelNullable' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 320,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 318,
        "length": 6,
        "offset": 124,
        "surroundingCode": "    };\n    public static CtxWriteDelegate<string> WriteStringInternedAtTest = Serializers.WriteString.Interned(\"Test\");\n    public static CtxWriteDelegate<InterningNestedTestStringModel> WriteInterningNestedTestStringModelNullable = InterningNestedTestStringModel.Write.NullableClass();\n    //custom body\n    //equals trait"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "151d5fc1e593ebe5399903d2d8f54b3fd3f72298190e2be7cee395561785f5b9"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteDoubleArray' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 136,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 134,
        "length": 6,
        "offset": 279,
        "surroundingCode": "    public static readonly CtxWriteDelegate<long[]?> WriteLongArray = (ctx, writer, value) => writer.WriteArray(WriteLong, ctx, value);\n    public static readonly CtxWriteDelegate<float[]?> WriteFloatArray = (ctx, writer, value) => writer.WriteArray(WriteFloat, ctx, value);\n    public static readonly CtxWriteDelegate<double[]?> WriteDoubleArray = (ctx, writer, value) => writer.WriteArray(WriteDouble, ctx, value);\n    public static readonly CtxWriteDelegate<char[]?> WriteCharArray = (ctx, writer, value) => writer.WriteArray(WriteChar, ctx, value);\n    public static readonly CtxWriteDelegate<bool[]?> WriteBoolArray = (ctx, writer, value) => writer.WriteArray(WriteBool, ctx, value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "1539a25b49eaff9c54cfe33e700043182b1ec14371ba9c0298fb537c89ec754d"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteDouble' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 118,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 116,
        "length": 6,
        "offset": 220,
        "surroundingCode": "    public static readonly CtxWriteDelegate<long> WriteLong = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<float> WriteFloat = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<double> WriteDouble = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<char> WriteChar = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<bool> WriteBool = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "15523676c3bdede109b45d617076757262cc1c955058797de6e207d305b8369a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Interface 'IInvalid10' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorCornerCasesTests.cs",
      "language": "C#",
      "line": 61,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 59,
        "length": 6,
        "offset": 131,
        "surroundingCode": "    [RdRpc] public interface IInvalid8 { string X { set; } }\n    [RdRpc] public interface IInvalid9 { string X { get; set; } }\n    public interface IInvalid10 {  } // no RdRpcAttribute\n    [RdRpc] public interface IInvalid11 { void M(Action x); }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "1633320618e6c6e212895c1b72980ff56e8dcfb07cc0589367ad15720f793f42"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteUri' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 126,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 124,
        "length": 6,
        "offset": 226,
        "surroundingCode": "    public static readonly CtxWriteDelegate<Guid> WriteGuid = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<DateTime> WriteDateTime = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<Uri> WriteUri = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<RdId> WriteRdId = (ctx, writer, value) => writer.Write(value);\n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "16cceed2ed531b539c6702efb6334c2a85366f679d4d86bf672a65880ef27a4f"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Class 'DefectiveScheduler' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/TestStealingWorker.cs",
      "language": "C#",
      "line": 58,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 56,
        "length": 6,
        "offset": 82,
        "surroundingCode": "    /// Scheduler which works only limited number of times\n    /// </summary>\n    public class DefectiveScheduler : TaskScheduler\n    {\n      private int myRunCount;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "185089ce80ecf140370437c45002982fec0b88dcb354fb13ec91d19cc58e2be2"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'ReadValueDelegate' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSet.cs",
      "language": "C#",
      "line": 32,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 30,
        "length": 6,
        "offset": 29,
        "surroundingCode": "    #region Serializers\n\n    public CtxReadDelegate<T> ReadValueDelegate { get; private set; }\n    public CtxWriteDelegate<T> WriteValueDelegate { get; private set; }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "19f5ca7e33baeecf0cafd5c19b310d29b5b5006518d611636b11432fb1884fae"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteUShortArray' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 147,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 145,
        "length": 6,
        "offset": 146,
        "surroundingCode": "    \n    public static readonly CtxWriteDelegate<byte[]?> WriteUByteArray = (ctx, writer, value) => writer.WriteArray(WriteByte, ctx, value);\n    public static readonly CtxWriteDelegate<ushort[]?> WriteUShortArray = (ctx, writer, value) => writer.WriteArray(WriteUShort, ctx, value);\n    public static readonly CtxWriteDelegate<uint[]?> WriteUIntArray = (ctx, writer, value) => writer.WriteArray(WriteUInt, ctx, value);\n    public static readonly CtxWriteDelegate<ulong[]?> WriteULongArray = (ctx, writer, value) => writer.WriteArray(WriteULong, ctx, value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "1b534316a463e4d2946e96511545ed62d1312cd6c8623a9bea1a2867b9e4452c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadUIntArray' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 107,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 105,
        "length": 6,
        "offset": 247,
        "surroundingCode": "    public static readonly CtxReadDelegate<byte[]?> ReadUByteArray = (ctx, reader) => reader.ReadArray(ReadByte, ctx);\n    public static readonly CtxReadDelegate<ushort[]?> ReadUShortArray = (ctx, reader) => reader.ReadArray(ReadUShort, ctx);\n    public static readonly CtxReadDelegate<uint[]?> ReadUIntArray = (ctx, reader) => reader.ReadArray(ReadUInt, ctx);\n    public static readonly CtxReadDelegate<ulong[]?> ReadULongArray = (ctx, reader) => reader.ReadArray(ReadULong, ctx);\n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "1b9a33bde8d7bad031d3bf7096171eea02fc632332bedb5352fe9a053c7ee04c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'NotBound' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdBindableBase.cs",
      "language": "C#",
      "line": 20,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 18,
        "length": 8,
        "offset": 40,
        "surroundingCode": "    public RdId RdId { get; set; }\n\n    internal static readonly RName NotBound = new RName(\"<<not bound>>\");\n    public RName Location { get; private set; } = NotBound;   \n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "1c442ee616c9c420884d6314c9cfc5158806a6ceeb4a88f557edc825ea0d392c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteIntArray' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 133,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 131,
        "length": 6,
        "offset": 279,
        "surroundingCode": "    public static readonly CtxWriteDelegate<byte[]?> WriteByteArray = (ctx, writer, value) => writer.WriteArray(WriteByte, ctx, value);\n    public static readonly CtxWriteDelegate<short[]?> WriteShortArray = (ctx, writer, value) => writer.WriteArray(WriteShort, ctx, value);\n    public static readonly CtxWriteDelegate<int[]?> WriteIntArray = (ctx, writer, value) => writer.WriteArray(WriteInt, ctx, value);\n    public static readonly CtxWriteDelegate<long[]?> WriteLongArray = (ctx, writer, value) => writer.WriteArray(WriteLong, ctx, value);\n    public static readonly CtxWriteDelegate<float[]?> WriteFloatArray = (ctx, writer, value) => writer.WriteArray(WriteFloat, ctx, value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "1e4d037d9f842d6e4c2103b08761738606a5a60485125c3f0b87c4cf368364a4"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Packages' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 23,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 21,
        "length": 6,
        "offset": 64,
        "surroundingCode": "    public static string RiderFolderPath = \"c:/work/Uber\";\n\n    public static string[] Packages = {\"JetBrains.Lifetimes\", \"JetBrains.RdFramework\", \"JetBrains.RdFramework.Reflection\", \"JetBrains.RdGen\"};\n    \n    static readonly Type t = typeof(Program);"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "1f4c34ee576a04b49cf1feacde4be2200fd2887cdd213f46a14ddeef51d53073"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Class 'TestLogFactory' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/TestLogger.cs",
      "language": "C#",
      "line": 85,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 83,
        "length": 8,
        "offset": 11,
        "surroundingCode": "    }\n\n    internal class TestLogFactory : LogFactoryBase\n    {\n      protected override LogBase GetLogBase(string category)"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "1fab7b9cddf680065af53e835296341e2a0f4bc252ea531f27504e030313d757"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'IsPrimitive' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 110,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 108,
        "length": 6,
        "offset": 131,
        "surroundingCode": "    private static readonly string ourFakeTupleFullName = typeof(ProxyGenerator.FakeTuple<>).FullName.NotNull().TrimEnd('1');\n\n    public static bool IsPrimitive(Type typeInfo)\n    {\n      return ourPrimitiveTypes.Contains(typeInfo);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "20710a046a981d00d0f4735e421b61ac8301951a36ae17d3557227b77bc60e78"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Class 'MyImpl1' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorScalarInterfaceSerializerTest.cs",
      "language": "C#",
      "line": 59,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 57,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public class MyImpl1 : IMyInterface\n    {\n      // this filed makes MyImpl1 serialization unpossible"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "20a108e2086bb220a08afc56e432f12aee9e993b89c3778d3e439c143c7cb5b4"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'Info' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogEx.cs",
      "language": "C#",
      "line": 339,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 337,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public static void Info(this ILog @this, Exception ex, string? message = null)\n    {\n      @this.Log(LoggingLevel.INFO, message, ex);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "215dd70b6e10b08912275bacd53bfd059c1948c23ddefafe5b25b98ecff65aea"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Maximal' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RpcTimeouts.cs",
      "language": "C#",
      "line": 22,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 20,
        "length": 6,
        "offset": 171,
        "surroundingCode": "    /// This timeout is used by <see cref=\"RdCall{TReq,TRes}.Sync\"/> if no timeouts specified and <see cref=\"RespectRpcTimeouts\"/> is <c>false</c>.\n    /// </summary>\n    public static readonly RpcTimeouts Maximal = new RpcTimeouts(TimeSpan.FromMilliseconds(30000), TimeSpan.FromMilliseconds(30000));\n\n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "224d8b00756785db521cba31f11c0463ac5005e081a418cdbbe97eecacb09ae6"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'IsMaster' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdProperty.cs",
      "language": "C#",
      "line": 82,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 80,
        "length": 6,
        "offset": 27,
        "surroundingCode": "    #region Mastering\n\n    public bool IsMaster = false;\n    private int myMasterVersion;\n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "22f62bc62b5fa1419c5ea065fc146d135afd0b7aebeaea8ffcf722bd361c4c0a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadLongArray' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 92,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 90,
        "length": 6,
        "offset": 240,
        "surroundingCode": "    public static readonly CtxReadDelegate<short[]?> ReadShortArray = (ctx, reader) => reader.ReadArray(ReadShort, ctx);\n    public static readonly CtxReadDelegate<int[]?> ReadIntArray = (ctx, reader) => reader.ReadArray(ReadInt, ctx);\n    public static readonly CtxReadDelegate<long[]?> ReadLongArray = (ctx, reader) => reader.ReadArray(ReadLong, ctx);\n    public static readonly CtxReadDelegate<float[]?> ReadFloatArray = (ctx, reader) => reader.ReadArray(ReadFloat, ctx);\n    public static readonly CtxReadDelegate<double[]?> ReadDoubleArray = (ctx, reader) => reader.ReadArray(ReadDouble, ctx);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "23479d31879284d69418f4479da10866f36dce7644fa1b846f4b1c0cd82e6594"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteLong' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 116,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 114,
        "length": 6,
        "offset": 218,
        "surroundingCode": "    public static readonly CtxWriteDelegate<short> WriteShort = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<int> WriteInt = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<long> WriteLong = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<float> WriteFloat = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<double> WriteDouble = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "23578f774af6d479326cea77fd884593e50b833f190c1413aa90828023b9f616"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadUInt' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 102,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 100,
        "length": 6,
        "offset": 204,
        "surroundingCode": "    public static readonly CtxReadDelegate<byte> ReadUByte = (ctx, reader) => reader.ReadUByte();\n    public static readonly CtxReadDelegate<ushort> ReadUShort = (ctx, reader) => reader.ReadUShort();\n    public static readonly CtxReadDelegate<uint> ReadUInt = (ctx, reader) => reader.ReadUInt();\n    public static readonly CtxReadDelegate<ulong> ReadULong = (ctx, reader) => reader.ReadULong();\n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "235e6ce494e8cc9f0284e2b906c756567e7084a9b6178463c0bd4e0c5714532c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'Cache' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 119,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 117,
        "length": 6,
        "offset": 57,
        "surroundingCode": "    public IScalarSerializers Scalars => myScalars;\n\n    public ISerializersContainer Cache { get; }\n\n    public ReflectionSerializersFactory(ITypesCatalog typeCatalog, IScalarSerializers? scalars = null, Predicate<Type>? blackListChecker = null)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "24ed9c2e11caf05e407e9e2c43fb91aa622253928a7ffb1c60fe54f1da709d90"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'Version' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferChange.cs",
      "language": "C#",
      "line": 10,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 8,
        "length": 6,
        "offset": 49,
        "surroundingCode": "  {\n    public readonly RdTextChange Change;\n    public readonly TextBufferVersion Version;\n    public readonly RdChangeOrigin Origin;\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "2528d37147a3e49cf55b95b378c59296672ac569304d562f11c9ef8fc42f4b19"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Read' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSignal.cs",
      "language": "C#",
      "line": 22,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 20,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public static RdSignal<T> Read(SerializationCtx ctx, UnsafeReader reader, CtxReadDelegate<T> readValue, CtxWriteDelegate<T> writeValue)\n    {\n      var id = reader.ReadRdId();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "258a4de819d41f374f43d7487cf6dad92902a32eb553e10cb86f0bb08e08542d"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'Writer' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Cross/Util/Logging.cs",
      "language": "C#",
      "line": 65,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 63,
        "length": 6,
        "offset": 47,
        "surroundingCode": "  public class CrossTestsLog : LogBase\n  {\n    public TextWriter Writer { get; }\n\n    private static readonly string[] ourIncludedCategories = {\"protocol.SEND\", \"protocol.RECV\"};"
      }
    }
  ],
  "attributes": {
    "module": "Test.Cross",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "26ee007fecb21b731fc1e44426354bc0e1af2495db542898c37f1fb732f8b216"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'WriteValueDelegate' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSet.cs",
      "language": "C#",
      "line": 33,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 31,
        "length": 6,
        "offset": 75,
        "surroundingCode": "\n    public CtxReadDelegate<T> ReadValueDelegate { get; private set; }\n    public CtxWriteDelegate<T> WriteValueDelegate { get; private set; }\n\n    public static RdSet<T> Read(SerializationCtx ctx, UnsafeReader reader)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "29ba2cb9099748738a2e29c8d1fb8df13afe0202b7f772f69a90003f82251dda"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Write' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 540,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 538,
        "length": 6,
        "offset": 68,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public void Write(byte* ptr, int size)\n    {\n      Prepare(size);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "2c000e7c731f4c694b005d2669b72180d6a20fc87da5a56e8233f4aad0f5ac8e"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'Origin' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferChange.cs",
      "language": "C#",
      "line": 11,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 9,
        "length": 6,
        "offset": 92,
        "surroundingCode": "    public readonly RdTextChange Change;\n    public readonly TextBufferVersion Version;\n    public readonly RdChangeOrigin Origin;\n\n    public RdTextBufferChange(TextBufferVersion version, RdChangeOrigin origin, RdTextChange change)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "2f17dddd7bfc68c0ce7295f7d74e566d66ede01b167b9089fbb25bdeafaece52"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'FinishCommitRemoteVersion' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/RdTextBuffer.cs",
      "language": "C#",
      "line": 277,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 275,
        "length": 6,
        "offset": 15,
        "surroundingCode": "      }\n\n      public void FinishCommitRemoteVersion()\n      {\n        if (!myBuffer.IsMaster)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "31db6c3622b91b01816dc208998e421df12edab1ba41a3b258ad46b915cc87b7"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadDoubleArray' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 94,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 92,
        "length": 6,
        "offset": 243,
        "surroundingCode": "    public static readonly CtxReadDelegate<long[]?> ReadLongArray = (ctx, reader) => reader.ReadArray(ReadLong, ctx);\n    public static readonly CtxReadDelegate<float[]?> ReadFloatArray = (ctx, reader) => reader.ReadArray(ReadFloat, ctx);\n    public static readonly CtxReadDelegate<double[]?> ReadDoubleArray = (ctx, reader) => reader.ReadArray(ReadDouble, ctx);\n    public static readonly CtxReadDelegate<char[]?> ReadCharArray = (ctx, reader) => reader.ReadArray(ReadChar, ctx);\n    public static readonly CtxReadDelegate<bool[]?> ReadBoolArray = (ctx, reader) => reader.ReadArray(ReadBool, ctx);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "31fc114c0edce4b2d8d9370c50e9207af92470467eaf2259365ec1a769679628"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'Serializers' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 61,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 59,
        "length": 6,
        "offset": 11,
        "surroundingCode": "\n#else\n    public Serializers() => RegisterFrameworkMarshallers(this);\n\n    public Serializers(ITypesRegistrar? registrar)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "331d3ae45f73f4ef19d2b2666fe7cbf2c4dcf8c3eb08e5a696f2cede934ee8a0"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'MasterVersion' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdAssertion.cs",
      "language": "C#",
      "line": 12,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 10,
        "length": 6,
        "offset": 37,
        "surroundingCode": "    //fields\n    //public fields\n    public int MasterVersion {get; private set;}\n    public int SlaveVersion {get; private set;}\n    public string Text {get; private set;}"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "342ff2047bb3559f814a720d4007bd57d19273ed3fe6da7be132973d03db3c95"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Struct 'FakeTuple' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 40,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 38,
        "length": 6,
        "offset": 137,
        "surroundingCode": "      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; }\n    }\n    public struct FakeTuple<T1, T2, T3, T4, T5> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "348e81bb19373f533135e5dc23cd7213cc7c6fe03ec6bf1b242ecae3a84c6411"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'HeartbeatAlive' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 48,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 46,
        "length": 6,
        "offset": 111,
        "surroundingCode": "\n      public readonly IViewableProperty<bool> Connected = new ViewableProperty<bool> { Value = false };\n      public readonly IViewableProperty<bool> HeartbeatAlive = new ViewableProperty<bool> { Value = false };\n\n      protected readonly ByteBufferAsyncProcessor SendBuffer;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "352b6006ce3dec45cc1ec0ab16836ab2b096a6563f0f1118c04b078077be63a1"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'Hash' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/RdId.cs",
      "language": "C#",
      "line": 59,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 57,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public static long Hash(string? s, long initValue = 19)\n    {\n      if (s == null) return 0;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "3631e6157d784022b7db359b6038c4406ce9254b20e45bb1011aae5968aa8f8a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Activate' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 102,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 100,
        "length": 6,
        "offset": 97,
        "surroundingCode": "    /// Creates and initializes reactive primitives, RdModels and RdExts.\n    /// </summary>\n    public T Activate<T>()\n    {\n      return (T) Activate(typeof(T));"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "37dc59ce51cc709932e94315a20fcc3679e945ec3940e55e56e5d64c09ca7ee6"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'SendBuffer' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 50,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 48,
        "length": 9,
        "offset": 116,
        "surroundingCode": "      public readonly IViewableProperty<bool> HeartbeatAlive = new ViewableProperty<bool> { Value = false };\n\n      protected readonly ByteBufferAsyncProcessor SendBuffer;\n      protected readonly object Lock = new object();\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "37ddb1b1dd1273ef6a24a852e498c78a72971ddf42c3f5ef7a15ed821724a712"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Enum 'ExtState' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdExtBase.cs",
      "language": "C#",
      "line": 19,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 17,
        "length": 6,
        "offset": 59,
        "surroundingCode": "  public abstract class RdExtBase : RdReactiveBase\n  {\n    public enum ExtState\n    {\n      Ready,"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "38eb0e474fc778dc61932b8f03029f68d2d171ed4e5b6cffb29385fac8402cf5"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Port' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Cross/Base/CrossTest_CsServer_Base.cs",
      "language": "C#",
      "line": 15,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 13,
        "length": 9,
        "offset": 76,
        "surroundingCode": "  public abstract class CrossTest_CsServer_Base : CrossTest_Cs_Base\n  {\n    protected readonly int Port;\n\n    static int FindFreePort()"
      }
    }
  ],
  "attributes": {
    "module": "Test.Cross",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "3a0b6501f694d2c2a6bb4e4fb6c7cbbf020b85e705caf637ee1fc7f8e36e204b"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteStringInternedAtInExt' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 153,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 151,
        "length": 6,
        "offset": 89,
        "surroundingCode": "      value.mySerializationContext = ctx.WithInternRootsHere(value, \"InExt\");\n    };\n    public static CtxWriteDelegate<string> WriteStringInternedAtInExt = Serializers.WriteString.Interned(\"InExt\");\n    public static CtxWriteDelegate<string> WriteStringInternedAtOutOfExt = Serializers.WriteString.Interned(\"OutOfExt\");\n    public static CtxWriteDelegate<string> WriteStringInternedAtProtocol = Serializers.WriteString.Interned(\"Protocol\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "3c3559a20f465a306c1ac034ad134b3a45b90dc73266bbb393f26fcc71c28246"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'Thread' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SingleThreadScheduler.cs",
      "language": "C#",
      "line": 62,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 60,
        "length": 6,
        "offset": 89,
        "surroundingCode": "    /// Thread is expected to be initialized from factory methods\n    /// </summary>\n    public Thread Thread { get; private set; } = null!;\n\n    private ActionQueue myQueue;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "3c9982bc44dc1d2cab8f4c7af2baa3d11bdd4361a0a1a037dfbb94a4f83a6a84"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'Mix' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/RdId.cs",
      "language": "C#",
      "line": 54,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 52,
        "length": 6,
        "offset": 16,
        "surroundingCode": "\n    [Pure]\n    public RdId Mix(long tail)\n    {\n      return new RdId(myValue * 31 + (tail + 1));"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "3d6e8911c0120938dcf2fa365b24c1b15f9647404acff1c252cdb8fff3ac818a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadULongArray' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 108,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 106,
        "length": 6,
        "offset": 246,
        "surroundingCode": "    public static readonly CtxReadDelegate<ushort[]?> ReadUShortArray = (ctx, reader) => reader.ReadArray(ReadUShort, ctx);\n    public static readonly CtxReadDelegate<uint[]?> ReadUIntArray = (ctx, reader) => reader.ReadArray(ReadUInt, ctx);\n    public static readonly CtxReadDelegate<ulong[]?> ReadULongArray = (ctx, reader) => reader.ReadArray(ReadULong, ctx);\n    \n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "3d9df4ad83135e0dd299c338031793c24269390db8cf724d14eaa4b6ebfa03b1"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AdviseAddRemove' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ReactiveEx.cs",
      "language": "C#",
      "line": 136,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 134,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public static void AdviseAddRemove<K, V>(this IViewableMap<K, V> me, Lifetime lifetime, Action<AddRemove, K, V?> handler) where K : notnull\n    {\n      me.Advise(lifetime, e =>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "3f6bc52037aee239dec94c406f3ff5794613df975f0a0e89cf4c39a79d085664"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Add' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimedList.cs",
      "language": "C#",
      "line": 78,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 76,
        "length": 6,
        "offset": 129,
        "surroundingCode": "    public void AddPriorityItem(Lifetime lifetime, T value) => AddPriorityItem(new ValueLifetimed<T>(lifetime, value));\n    \n    public void Add(ValueLifetimed<T> item)\n    {\n      bool shouldClear;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "3faac7ccf7d3a7cfb67c36e74835dd60e18ece93a75b14a77d606ca5fb31a4ef"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Default' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RpcTimeouts.cs",
      "language": "C#",
      "line": 17,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 15,
        "length": 6,
        "offset": 164,
        "surroundingCode": "    /// If request lasts more than 3000 ms it's considered as hang. <c>Sync</c> request interrupts and <see cref=\"ILog.Error\"/> is reported.\n    /// </summary>\n    public static readonly RpcTimeouts Default = new RpcTimeouts(TimeSpan.FromMilliseconds(200), TimeSpan.FromMilliseconds(3000));\n    \n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "40b1cd352f2aad114b8584d587adef161f857ebd6251b7daa2c2162a9ee10443"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Struct 'FakeTuple' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 36,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 34,
        "length": 6,
        "offset": 112,
        "surroundingCode": "      public FakeTuple(T1 item1, T2 item2, T3 item3) { Item1 = item1; Item2 = item2; Item3 = item3; }\n    }\n    public struct FakeTuple<T1, T2, T3, T4> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "41029f589d9c83ad869f1f37e7e4c2cdf455674cc7b2c92813ffa2b7b1d1e8a7"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteStringInternedAtOutOfExt' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 154,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 152,
        "length": 6,
        "offset": 126,
        "surroundingCode": "    };\n    public static CtxWriteDelegate<string> WriteStringInternedAtInExt = Serializers.WriteString.Interned(\"InExt\");\n    public static CtxWriteDelegate<string> WriteStringInternedAtOutOfExt = Serializers.WriteString.Interned(\"OutOfExt\");\n    public static CtxWriteDelegate<string> WriteStringInternedAtProtocol = Serializers.WriteString.Interned(\"Protocol\");\n    //custom body"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "41769f29b98a311052dc778ee381c00d45b5747728ffdceb53829ce8b08dcbe4"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'IsModelMemberDeclaration' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 115,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 113,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public static bool IsModelMemberDeclaration(MemberInfo memberInfo)\n    {\n      var returnType = ReflectionUtil.GetReturnType(memberInfo);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "4223a13c19085416579f875053102bd919d56885e1a170cc3397ee6a0ba04a32"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'GetOrCreateScalar' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 220,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 218,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public SerializerPair GetOrCreateScalar(Type serializerType, bool instanceSerializer)\n    {\n      if (instanceSerializer && myScalars.CanBePolymorphic(serializerType))"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "4266f27e0254d44abd4508041bfe2b99612d7481028151c30a8b20d9855cde5c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadInterningNestedTestModelInternedNullable' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 229,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 227,
        "length": 6,
        "offset": 33,
        "surroundingCode": "      return _result;\n    };\n    public static CtxReadDelegate<InterningNestedTestModel> ReadInterningNestedTestModelInternedNullable = InterningNestedTestModel.Read.Interned(\"Test\").NullableClass();\n    \n    public static CtxWriteDelegate<InterningNestedTestModel> Write = (ctx, writer, value) => "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "42d2f1da71d4efd27f8bd0db85ae613106ae89f3dad292d777b444c4af1ec1d9"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadRdTextBufferChangeNullable' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 64,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 62,
        "length": 6,
        "offset": 19,
        "surroundingCode": "    //statics\n\n    public static CtxReadDelegate<RdTextBufferChange?> ReadRdTextBufferChangeNullable = RdTextBufferChange.ReadDelegate.NullableClass();\n    public static CtxWriteDelegate<RdTextBufferChange?> WriteRdTextBufferChangeNullable = RdTextBufferChange.WriteDelegate.NullableClass();\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "43274e603463cb5b8449ac2221d44344178d5a40b9945de26cd77aed71e87868"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'TryGetSetter' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 33,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 31,
        "length": 6,
        "offset": 105,
        "surroundingCode": "    /// Return setter for either field or property info, or null if can't be set.\n    /// </summary>\n    public static SetValueDelegate? TryGetSetter(MemberInfo mi)\n    {\n      SetValueDelegate GetFieldSetter(FieldInfo backingField)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "46348486cd39e017d4ec227985d14dcbc32065fa3e766f8a2de2db479e9993e4"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'RdAssertion' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdAssertion.cs",
      "language": "C#",
      "line": 18,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 16,
        "length": 6,
        "offset": 51,
        "surroundingCode": "    //private fields\n    //primary constructor\n    public RdAssertion(\n      int masterVersion,\n      int slaveVersion,"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "46e4889c28542316e772c834cccfb602afc7820a5643b496104d59f331e6ca07"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'LogFormat' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogEx.cs",
      "language": "C#",
      "line": 51,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 49,
        "length": 6,
        "offset": 41,
        "surroundingCode": "\n    [StringFormatMethod(\"message\")]\n    public static void LogFormat<T1, T2, T3>(this ILog @this, LoggingLevel level, string message, T1 t1, T2 t2, T3 t3)\n    {\n      if (@this.IsEnabled(level))"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "47d7f56986ad26df28bf5e328d161dac7431bb94838c3b344d5e3607c249c715"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'SerializersFactory' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFacade.cs",
      "language": "C#",
      "line": 16,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 14,
        "length": 6,
        "offset": 62,
        "surroundingCode": "    public IScalarSerializers ScalarSerializers { get; }\n\n    public ReflectionSerializersFactory SerializersFactory { get; }\n\n    public IProxyGenerator ProxyGenerator { get; }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "4c4fa999780f2126c2d1419f581b177660ddbe3dc41e30e3f213598ae81d8b2b"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadShort' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 72,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 70,
        "length": 6,
        "offset": 114,
        "surroundingCode": "    //readers\n    public static readonly CtxReadDelegate<byte> ReadByte = (ctx, reader) => reader.ReadByte();\n    public static readonly CtxReadDelegate<short> ReadShort = (ctx, reader) => reader.ReadShort();\n    public static readonly CtxReadDelegate<int> ReadInt = (ctx, reader) => reader.ReadInt();\n    public static readonly CtxReadDelegate<long> ReadLong = (ctx, reader) => reader.ReadLong();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "4cd6daf3948822fed7fd504ee95fc43348db8e8ba7d8da41e42d0eb92f56fe0c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'ConsoleVerboseFactory' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Log.cs",
      "language": "C#",
      "line": 173,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 171,
        "length": 6,
        "offset": 65,
        "surroundingCode": "\n    // ReSharper disable once RedundantArgumentDefaultValue\n    public static readonly ILogFactory ConsoleVerboseFactory = new TextWriterLogFactory(Console.Out, LoggingLevel.VERBOSE);\n\n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "4e66a18daaf25a476f9473f8e7609c983c577ad62cdf8fbd1f73c2e82baff450"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteULong' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 144,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 142,
        "length": 6,
        "offset": 222,
        "surroundingCode": "    public static readonly CtxWriteDelegate<ushort> WriteUShort = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<uint> WriteUInt = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<ulong> WriteULong = (ctx, writer, value) => writer.Write(value);\n    \n    public static readonly CtxWriteDelegate<byte[]?> WriteUByteArray = (ctx, writer, value) => writer.WriteArray(WriteByte, ctx, value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "4eff6743e453fb61fc8403569d85b21103d9efc964bca2b88371622c71aa16b4"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'OnRemoteChange' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/RdTextBuffer.cs",
      "language": "C#",
      "line": 224,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 222,
        "length": 6,
        "offset": 94,
        "surroundingCode": "\n      public readonly Signal<RdTextChange> OnLocalChange = new Signal<RdTextChange>();\n      public readonly Signal<RdTextChange> OnRemoteChange = new Signal<RdTextChange>();\n\n      public TextBufferTypingSession(RdTextBuffer buffer)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "4fff273bdc3d98b332c06819b8a26fd1e117b2eab268e329486384b14aa55bbb"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'Text' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 516,
      "offset": 15,
      "length": 6,
      "code": {
        "startLine": 514,
        "length": 6,
        "offset": 47,
        "surroundingCode": "    //fields\n    //public fields\n    [NotNull] public string Text {get; private set;}\n    \n    //private fields"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "517c6f861fa578ec35bfe31c8475b4e22388152b0679b3e9e45a2ad101d3f488"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadIntArray' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 91,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 89,
        "length": 6,
        "offset": 243,
        "surroundingCode": "    public static readonly CtxReadDelegate<byte[]?> ReadByteArray = (ctx, reader) => reader.ReadArray(ReadByte, ctx);\n    public static readonly CtxReadDelegate<short[]?> ReadShortArray = (ctx, reader) => reader.ReadArray(ReadShort, ctx);\n    public static readonly CtxReadDelegate<int[]?> ReadIntArray = (ctx, reader) => reader.ReadArray(ReadInt, ctx);\n    public static readonly CtxReadDelegate<long[]?> ReadLongArray = (ctx, reader) => reader.ReadArray(ReadLong, ctx);\n    public static readonly CtxReadDelegate<float[]?> ReadFloatArray = (ctx, reader) => reader.ReadArray(ReadFloat, ctx);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "520a924ae1b7c27c13624fd3d647d823735aa2fd5784dfb4160f41b6d8ee0dcf"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadGuid' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 82,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 80,
        "length": 6,
        "offset": 108,
        "surroundingCode": "\n    public static readonly CtxReadDelegate<string?> ReadString = (ctx, reader) => reader.ReadString();\n    public static readonly CtxReadDelegate<Guid> ReadGuid = (ctx, reader) => reader.ReadGuid();\n    public static readonly CtxReadDelegate<DateTime> ReadDateTime = (ctx, reader) => reader.ReadDateTime();\n    public static readonly CtxReadDelegate<Uri> ReadUri = (ctx, reader) => reader.ReadUri();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "52144be9a61f500c80b7b34f622de3947e9f9649f0931aa6ce4479792320c071"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'IsBoundProperty' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdBindableBase.cs",
      "language": "C#",
      "line": 35,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 33,
        "length": 6,
        "offset": 52,
        "surroundingCode": "    public bool IsBound => Parent != null;\n    \n    public IViewableProperty<bool> IsBoundProperty { get; } = new ViewableProperty<bool>();\n   \n    public virtual IProtocol Proto => (Parent ?? throw new ProtocolNotBoundException(ToString())).Proto;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "5281d1ad7cda18f968de1afe0c2b32bd8da417e15b1086ead301ab302178ff33"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Struct 'FakeTuple' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 32,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 30,
        "length": 6,
        "offset": 87,
        "surroundingCode": "      public FakeTuple(T1 item1, T2 item2) { Item1 = item1; Item2 = item2; }\n    }\n    public struct FakeTuple<T1, T2, T3> {\n      public T1 Item1; public T2 Item2; public T3 Item3;\n      public FakeTuple(T1 item1, T2 item2, T3 item3) { Item1 = item1; Item2 = item2; Item3 = item3; }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "52a6a6630c04cdf45d17b6424e85531007f6bf69ff0737c7838e36d7695d428a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'WriteRName' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/ExtCreatedUtils.cs",
      "language": "C#",
      "line": 52,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 50,
        "length": 8,
        "offset": 11,
        "surroundingCode": "    }\n\n    internal static void WriteRName(UnsafeWriter writer, RName value)\n    {\n      writer.Write(value == RName.Empty);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "530f3c4a8462d127ac61e0c3b3f7522f925996315017d881e7912abaaa88edc6"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'LogFormat' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogEx.cs",
      "language": "C#",
      "line": 42,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 40,
        "length": 6,
        "offset": 41,
        "surroundingCode": "\n    [StringFormatMethod(\"message\")]\n    public static void LogFormat<T1, T2>(this ILog @this, LoggingLevel level, string message, T1 t1, T2 t2)\n    {\n      if (@this.IsEnabled(level))"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "542257405c46abfc4e7a750c8bb282dcfe7a227b965cabbb8e92942465a28d10"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Fail' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Assertion.cs",
      "language": "C#",
      "line": 129,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 127,
        "length": 6,
        "offset": 77,
        "surroundingCode": "    [AssertionMethod, StringFormatMethod(\"message\")]\n    [DoesNotReturn]\n    public static void Fail(string message, object? arg1, object? arg2)\n    {\n      Fail(string.Format(message, arg1, arg2));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "5546252e731f9c8c7d165c4b89a30b032e87b20d2e57d101cebf9eb923d8cc7c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadLong' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 74,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 72,
        "length": 6,
        "offset": 196,
        "surroundingCode": "    public static readonly CtxReadDelegate<short> ReadShort = (ctx, reader) => reader.ReadShort();\n    public static readonly CtxReadDelegate<int> ReadInt = (ctx, reader) => reader.ReadInt();\n    public static readonly CtxReadDelegate<long> ReadLong = (ctx, reader) => reader.ReadLong();\n    public static readonly CtxReadDelegate<float> ReadFloat = (ctx, reader) => reader.ReadFloat();\n    public static readonly CtxReadDelegate<double> ReadDouble = (ctx, reader) => reader.ReadDouble();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "5704cc2a10eddf66412d1977e603177e4bb28d5a3b1d879bd7b44266b74b865a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'State' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ByteBufferAsyncProcessor.cs",
      "language": "C#",
      "line": 102,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 100,
        "length": 6,
        "offset": 82,
        "surroundingCode": "    private readonly HashSet<string> myPauseReasons = new HashSet<string>();\n\n    public StateKind State { get; private set; }\n\n    private Chunk myChunkToFill;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "579d407a6f56a4837968d878c34ab29c205b0da7889d98c24ef0666440994ec9"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Interface 'IPartSync' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorPropertiesTest.cs",
      "language": "C#",
      "line": 69,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 67,
        "length": 6,
        "offset": 6,
        "surroundingCode": "\n\n    public interface IPartSync\n    {\n      IViewableProperty<string> RdProperty { get; }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "586dee57231ba0c7b2962ba234723a19832027e34a72943068f890896de99f38"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'ReadUInt32' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 238,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 236,
        "length": 6,
        "offset": 68,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public UInt32 ReadUInt32()\n    {\n      if (Mode.IsAssertion) AssertLength(sizeof(UInt32));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "5c4bd3ab696217ab40b7aedf64dae4c1e8c133ca04cf88a5063b8ac8f248ce4d"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Property 'Writer' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Internal/TextWriterLog.cs",
      "language": "C#",
      "line": 40,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 38,
        "length": 6,
        "offset": 54,
        "surroundingCode": "  {\n    public LoggingLevel EnabledLevel { get; }\n    public TextWriter Writer { get; }\n    \n    public TextWriterLogFactory(TextWriter writer, LoggingLevel enabledLevel = LoggingLevel.VERBOSE)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "5e708ebac7ae0ad629a7bdf429625e4d92956515d3322086e6875526c1a17019"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadDateTime' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 83,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 81,
        "length": 6,
        "offset": 203,
        "surroundingCode": "    public static readonly CtxReadDelegate<string?> ReadString = (ctx, reader) => reader.ReadString();\n    public static readonly CtxReadDelegate<Guid> ReadGuid = (ctx, reader) => reader.ReadGuid();\n    public static readonly CtxReadDelegate<DateTime> ReadDateTime = (ctx, reader) => reader.ReadDateTime();\n    public static readonly CtxReadDelegate<Uri> ReadUri = (ctx, reader) => reader.ReadUri();\n    public static readonly CtxReadDelegate<RdId> ReadRdId = (ctx, reader) => reader.ReadRdId();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "5e78a07692b5cb91bfe7a5148ab9083ccdd091dfc093bc6211163dc2eaa5576d"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadShortArray' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 90,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 88,
        "length": 6,
        "offset": 123,
        "surroundingCode": "\n    public static readonly CtxReadDelegate<byte[]?> ReadByteArray = (ctx, reader) => reader.ReadArray(ReadByte, ctx);\n    public static readonly CtxReadDelegate<short[]?> ReadShortArray = (ctx, reader) => reader.ReadArray(ReadShort, ctx);\n    public static readonly CtxReadDelegate<int[]?> ReadIntArray = (ctx, reader) => reader.ReadArray(ReadInt, ctx);\n    public static readonly CtxReadDelegate<long[]?> ReadLongArray = (ctx, reader) => reader.ReadArray(ReadLong, ctx);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "60e18b5311b1505389abaf7e8f59f05b1232d1072ff1074c8236a57d697fd485"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Struct 'FakeTuple' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 28,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 26,
        "length": 6,
        "offset": 62,
        "surroundingCode": "      public FakeTuple(T1 item1) { Item1 = item1; }\n    }\n    public struct FakeTuple<T1, T2> {\n      public T1 Item1; public T2 Item2;\n      public FakeTuple(T1 item1, T2 item2) { Item1 = item1; Item2 = item2; }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "6164898bfcdf12e96802393fc8759a9ecbd29a0e3f6c589d191660210e7b1329"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'SerializationContext' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSignal.cs",
      "language": "C#",
      "line": 37,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 35,
        "length": 6,
        "offset": 64,
        "surroundingCode": "    private readonly Signal<T> mySignal = new Signal<T>();\n\n    public new SerializationCtx SerializationContext { get; private set; }\n    \n    public override IScheduler WireScheduler => Scheduler ?? DefaultScheduler;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "6272b4a7711cad30c87765c98cdf8cfbead73f32e9580441d366051107ea68f0"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'AssertValidRdModel' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 315,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 313,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public static void AssertValidRdModel(TypeInfo type)\n    {\n      var isDataModel = HasRdModelAttribute(type);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "650f719dd704e4c5a016d4c4784e5302519b64c3630158cdaa5ef9deafb50b54"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Class 'NonScalarPtr' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 222,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 220,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public class NonScalarPtr\n    {\n      public Action X;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "65bdd2dea63d846b90f748395d2bf9d5623dd8f64ad6bb5d4535014125d1e4ac"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadBoolArray' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 96,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 94,
        "length": 6,
        "offset": 246,
        "surroundingCode": "    public static readonly CtxReadDelegate<double[]?> ReadDoubleArray = (ctx, reader) => reader.ReadArray(ReadDouble, ctx);\n    public static readonly CtxReadDelegate<char[]?> ReadCharArray = (ctx, reader) => reader.ReadArray(ReadChar, ctx);\n    public static readonly CtxReadDelegate<bool[]?> ReadBoolArray = (ctx, reader) => reader.ReadArray(ReadBool, ctx);\n    \n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "66bab9130a46952492b22b862eb7ba18b434046fcd551bac17bcd72f29bba1ec"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadSecureString' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 87,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 85,
        "length": 6,
        "offset": 105,
        "surroundingCode": "    public static readonly CtxReadDelegate<RdId> ReadRdId = (ctx, reader) => reader.ReadRdId();\n    \n    public static readonly CtxReadDelegate<RdSecureString> ReadSecureString = (ctx, reader) => reader.ReadSecureString();\n\n    public static readonly CtxReadDelegate<byte[]?> ReadByteArray = (ctx, reader) => reader.ReadArray(ReadByte, ctx);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "680264662ca1f47d1861ef9bb0accb9c0d3fdc86bcaf6e495d51b2490fb9f9b6"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Property 'Time' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogLog.cs",
      "language": "C#",
      "line": 23,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 21,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public DateTime Time { get; }\n    public string? Category { get; }\n    public LoggingLevel Severity { get; }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "68e7ea1492bbdbd29cfdddd8ce112efea8d070d8f450d07fff6ba3f17d8a31ec"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'Value' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 286,
      "offset": 15,
      "length": 6,
      "code": {
        "startLine": 284,
        "length": 6,
        "offset": 47,
        "surroundingCode": "    //fields\n    //public fields\n    [NotNull] public string Value {get; private set;}\n    [CanBeNull] public InterningNestedTestStringModel Inner {get; private set;}\n    "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "6b36ab8f3bbb9a5d5cded780d3a85ddde7889ce740e8f949d5e3671e7e0e7aa1"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadStringInternedAtProtocol' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 143,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 141,
        "length": 6,
        "offset": 234,
        "surroundingCode": "    public static CtxReadDelegate<string> ReadStringInternedAtInExt = Serializers.ReadString.Interned(\"InExt\");\n    public static CtxReadDelegate<string> ReadStringInternedAtOutOfExt = Serializers.ReadString.Interned(\"OutOfExt\");\n    public static CtxReadDelegate<string> ReadStringInternedAtProtocol = Serializers.ReadString.Interned(\"Protocol\");\n    \n    public static CtxWriteDelegate<InterningExtRootModel> Write = (ctx, writer, value) => "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "6b40e1679e8b6dfb3b661416eaaf40cf6ac9f2d7dea6dc2d609f2774258b5aea"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'ReadByteArray' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 383,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 381,
        "length": 6,
        "offset": 68,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public byte[]? ReadByteArray()\n    {\n      int len = ReadInt32();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "6c75ccb6e8cafd096a4b21a6d42c352539abcefcb038c8daca5e7a9e449adaf4"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'SearchLabel' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 370,
      "offset": 15,
      "length": 6,
      "code": {
        "startLine": 368,
        "length": 6,
        "offset": 47,
        "surroundingCode": "    //fields\n    //public fields\n    [NotNull] public string SearchLabel {get; private set;}\n    [NotNull] public IViewableMap<int, ProtocolWrappedStringModel> Issues { get { return _Issues; }}\n    "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "6dfc70b2d8f3e142bfee1f1b23bd5ff9ea8d26164ac9f66522e471f61b780da7"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Struct 'FakeTuple' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 52,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 50,
        "length": 6,
        "offset": 212,
        "surroundingCode": "      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; Item7 = item7; }\n    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6, T7, TRest> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6; public T7 Item7; public TRest Rest;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; Item7 = item7; Rest = rest; }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "716baa6499ed34e67300504b6560bfe9699be06e21107fe192f51258a8e96490"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'WriteValueDelegate' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdProperty.cs",
      "language": "C#",
      "line": 44,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 42,
        "length": 6,
        "offset": 75,
        "surroundingCode": "\n    public CtxReadDelegate<T> ReadValueDelegate { get; private set; }\n    public CtxWriteDelegate<T> WriteValueDelegate { get; private set; }\n\n    public static RdProperty<T> Read(SerializationCtx ctx, UnsafeReader reader)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "71ff50d39984d872a78623a96ee785dcf9263766c993a8d5d54aa8448dc13de5"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'RdTextBufferChange' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferChange.cs",
      "language": "C#",
      "line": 13,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 11,
        "length": 6,
        "offset": 48,
        "surroundingCode": "    public readonly RdChangeOrigin Origin;\n\n    public RdTextBufferChange(TextBufferVersion version, RdChangeOrigin origin, RdTextChange change)\n    {\n      Change = change;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "724567162135f2eb695fc7e3a91b4574c2efb80347fa68ae50eb15ac5590cdb0"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Class 'MyInterfaceMarshaller' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorScalarInterfaceSerializerTest.cs",
      "language": "C#",
      "line": 43,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 41,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public class MyInterfaceMarshaller : IIntrinsicMarshaller<IMyInterface>\n    {\n      public IMyInterface Read(SerializationCtx ctx, UnsafeReader reader)"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "729d2a4b038e014c1d250368a1956835a08991780c82e2e320a3d0c4433b0bf2"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadByte' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 71,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 69,
        "length": 6,
        "offset": 19,
        "surroundingCode": "\n    //readers\n    public static readonly CtxReadDelegate<byte> ReadByte = (ctx, reader) => reader.ReadByte();\n    public static readonly CtxReadDelegate<short> ReadShort = (ctx, reader) => reader.ReadShort();\n    public static readonly CtxReadDelegate<int> ReadInt = (ctx, reader) => reader.ReadInt();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "72c28d99a69628a9e3cc5088b275370c8cc89c05435032098f6cb9153778d456"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'LogFormat' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogEx.cs",
      "language": "C#",
      "line": 70,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 68,
        "length": 6,
        "offset": 82,
        "surroundingCode": "    //Universal method for many parameter\n    [StringFormatMethod(\"message\")]\n    public static void LogFormat(this ILog @this, LoggingLevel level, string message, params object?[] args)\n    {\n      if (@this.IsEnabled(level))"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "73d41041bd98315acc509a2421905059f42e4188976f834b7e0de2b413190a0f"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Class 'Marshaller' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarIntrinsicTests.cs",
      "language": "C#",
      "line": 222,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 220,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public class Marshaller : IIntrinsicMarshaller<NoRedIntrinsic3>\n    {\n      public NoRedIntrinsic3 Read(SerializationCtx ctx, UnsafeReader reader)"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "73d6a656e086ecaf89d26fc6c0edacc35cbc09b0fe21d9a7113b2ac3d0e01808"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'StartCommitRemoteVersion' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/RdTextBuffer.cs",
      "language": "C#",
      "line": 296,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 294,
        "length": 6,
        "offset": 15,
        "surroundingCode": "      }\n\n      public void StartCommitRemoteVersion()\n      {\n        Assertion.Assert(myState == State.Opened, \"myState == State.Opened\");"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "75251d338774531ebe120a9bf05e218fd199990ddc39f6875e811c4219c5eeaa"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'Client' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SocketWireTest.cs",
      "language": "C#",
      "line": 68,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 66,
        "length": 8,
        "offset": 11,
        "surroundingCode": "    }\n\n    internal static IProtocol Client(Lifetime lifetime, IProtocol serverProtocol)\n    {\n      // ReSharper disable once PossibleNullReferenceException"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "7576532c5e1082bc81603e49c063edb1ceb604d4a93da274ab1ec8c94091fe6e"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Attached' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 633,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 631,
        "length": 8,
        "offset": 15,
        "surroundingCode": "    }\n    \n    internal Task<T> Attached<T>(Task<T> task)\n    {\n      if (IsEternal || task.IsCompleted) "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "7635c7095c0449432bb030eeb294f0ac7845899fd8ab237e14c7239e0c666c60"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'GetHandlerForContext' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/ProtocolContexts.cs",
      "language": "C#",
      "line": 59,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 57,
        "length": 8,
        "offset": 85,
        "surroundingCode": "    public ICollection<RdContextBase> RegisteredContexts => myHandlersMap.Keys;\n\n    internal ISingleContextHandler<T> GetHandlerForContext<T>(RdContext<T> context)\n    {\n      return (ISingleContextHandler<T>) myHandlersMap[context];"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "77a723ae8c0a688e44179c4cd1d2d003d4a410232f272716491e2662e92a6e87"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'Log' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 32,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 30,
        "length": 8,
        "offset": 116,
        "surroundingCode": "    public static ISource<Lifetime> ExecutionWasNotCancelledByTimeout => ourExecutionWasNotCancelledByTimeout;\n\n    internal static readonly ILog Log = JetBrains.Diagnostics.Log.GetLog<Lifetime>();\n    \n    [PublicAPI] internal static readonly LifetimeDefinition Eternal;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "78b509a7da9788f777928f0e0c6165c7da38b6d94415ce7cad81094f44083912"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'IsInsideProcessing' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Actor.cs",
      "language": "C#",
      "line": 61,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 59,
        "length": 6,
        "offset": 59,
        "surroundingCode": "    /// <see cref=\"AsyncLocal{T}\"/>\n    /// </summary>\n    public bool IsInsideProcessing => myInsideProcessingFlow.Value != null;\n\n    "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "78e494f2c7ff149eb62faa87d7eda4c71130242a2b3b62a7fe6a0efc3fd05598"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Constant 'DefaultDateFormat' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Log.cs",
      "language": "C#",
      "line": 179,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 177,
        "length": 6,
        "offset": 119,
        "surroundingCode": "    /// WARNING!!! don't change it, we have code that do fast formatting according this pattern\n    /// </summary>\n    public const string DefaultDateFormat = \"HH:mm:ss.fff\";\n\n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "7a91846189527ee5e9218c3741c0d3ffa3a14b4873f4e8ccb7e66148a8a04518"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteString' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 123,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 121,
        "length": 6,
        "offset": 112,
        "surroundingCode": "    public static readonly CtxWriteDelegate<Unit> WriteVoid = (ctx, writer, value) => writer.Write(value);\n\n    public static readonly CtxWriteDelegate<string?> WriteString = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<Guid> WriteGuid = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<DateTime> WriteDateTime = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "7bcaf8a9b507deea8b0f16efc0322cd0e14adc6f7333c5b3065bc30bda62bfa2"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Accessor 'IsLocalChange.set' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdReactiveBase.cs",
      "language": "C#",
      "line": 69,
      "offset": 38,
      "length": 9,
      "code": {
        "startLine": 67,
        "length": 9,
        "offset": 67,
        "surroundingCode": "    #region Local change\n    \n    public bool IsLocalChange { get; protected set; }\n    \n    protected internal struct LocalChangeCookie : IDisposable"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "7c41e480565f69ebc3b37003f90928e9edae7e2524f7ffc007b226cc65f2bf0f"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'WriteNullableClass' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SerializersEx.cs",
      "language": "C#",
      "line": 104,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 102,
        "length": 6,
        "offset": 68,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public static void WriteNullableClass<T>(this UnsafeWriter writer, CtxWriteDelegate<T> itemWriter, SerializationCtx ctx, T? value) where T:class\n    {\n      if (writer.WriteNullness(value)) itemWriter(ctx, writer, value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "7e2130e4ff7050b0b924e74d078a7ae6d25da22811a599c53ac3f4a297fbf5aa"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteInterningNestedTestModelInternedNullable' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 236,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 234,
        "length": 6,
        "offset": 90,
        "surroundingCode": "      WriteInterningNestedTestModelInternedNullable(ctx, writer, value.Inner);\n    };\n    public static CtxWriteDelegate<InterningNestedTestModel> WriteInterningNestedTestModelInternedNullable = InterningNestedTestModel.Write.Interned(\"Test\").NullableClass();\n    //custom body\n    //equals trait"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "7e323a16055248eb992cff052b33a551baa44730a18cd5bc110f214b9582ddcb"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadBool' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 78,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 76,
        "length": 6,
        "offset": 202,
        "surroundingCode": "    public static readonly CtxReadDelegate<double> ReadDouble = (ctx, reader) => reader.ReadDouble();\n    public static readonly CtxReadDelegate<char> ReadChar = (ctx, reader) => reader.ReadChar();\n    public static readonly CtxReadDelegate<bool> ReadBool = (ctx, reader) => reader.ReadBool();\n    public static readonly CtxReadDelegate<Unit> ReadVoid = (ctx, reader) => reader.ReadVoid();\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "7e73c15e101fe13b40e3da792a02682a724d387e0baf3ca58e184c536ff9eb83"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteVoid' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 121,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 119,
        "length": 6,
        "offset": 218,
        "surroundingCode": "    public static readonly CtxWriteDelegate<char> WriteChar = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<bool> WriteBool = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<Unit> WriteVoid = (ctx, writer, value) => writer.Write(value);\n\n    public static readonly CtxWriteDelegate<string?> WriteString = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "7f47da462a6c7b9ede4f9c577b53a56866fa8668209131f79ab95f063f62d6e2"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadVoid' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 79,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 77,
        "length": 6,
        "offset": 196,
        "surroundingCode": "    public static readonly CtxReadDelegate<char> ReadChar = (ctx, reader) => reader.ReadChar();\n    public static readonly CtxReadDelegate<bool> ReadBool = (ctx, reader) => reader.ReadBool();\n    public static readonly CtxReadDelegate<Unit> ReadVoid = (ctx, reader) => reader.ReadVoid();\n\n    public static readonly CtxReadDelegate<string?> ReadString = (ctx, reader) => reader.ReadString();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "7fa506714fa4541334d4735f8ae86f36c7ce7db67e1372d1100c1547b8a770fa"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadUri' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 84,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 82,
        "length": 6,
        "offset": 208,
        "surroundingCode": "    public static readonly CtxReadDelegate<Guid> ReadGuid = (ctx, reader) => reader.ReadGuid();\n    public static readonly CtxReadDelegate<DateTime> ReadDateTime = (ctx, reader) => reader.ReadDateTime();\n    public static readonly CtxReadDelegate<Uri> ReadUri = (ctx, reader) => reader.ReadUri();\n    public static readonly CtxReadDelegate<RdId> ReadRdId = (ctx, reader) => reader.ReadRdId();\n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "803a5ba201837a21cee7cf0002a26a92808c71087a2cddc5177144f6d62f5dc8"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Fail' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Assertion.cs",
      "language": "C#",
      "line": 145,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 143,
        "length": 6,
        "offset": 77,
        "surroundingCode": "    [AssertionMethod, StringFormatMethod(\"message\")]\n    [DoesNotReturn]\n    public static void Fail(string message, params object?[] args)\n    {\n      Fail(args == null || args.Length == 0 ? message : string.Format(message, args));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "816fabb94db96f55761db18e135068db6d2ca75dc276f04483b6032c1102772c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteFloatArray' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 135,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 133,
        "length": 6,
        "offset": 273,
        "surroundingCode": "    public static readonly CtxWriteDelegate<int[]?> WriteIntArray = (ctx, writer, value) => writer.WriteArray(WriteInt, ctx, value);\n    public static readonly CtxWriteDelegate<long[]?> WriteLongArray = (ctx, writer, value) => writer.WriteArray(WriteLong, ctx, value);\n    public static readonly CtxWriteDelegate<float[]?> WriteFloatArray = (ctx, writer, value) => writer.WriteArray(WriteFloat, ctx, value);\n    public static readonly CtxWriteDelegate<double[]?> WriteDoubleArray = (ctx, writer, value) => writer.WriteArray(WriteDouble, ctx, value);\n    public static readonly CtxWriteDelegate<char[]?> WriteCharArray = (ctx, writer, value) => writer.WriteArray(WriteChar, ctx, value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "82dc0d782869af4a7eba37f7484b7cca984dff825387453c124ba22987530e4e"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'RespectRpcTimeouts' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RpcTimeouts.cs",
      "language": "C#",
      "line": 28,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 26,
        "length": 6,
        "offset": 80,
        "surroundingCode": "    /// <see cref=\"RdCall{TReq,TRes}.Sync\"/> by default.\n    /// </summary>\n    public static bool RespectRpcTimeouts = true;\n\n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "834f95f811a85f69e1ac414f978fe8eb20d1e9b3a0ee1732da1c3eb097b526bb"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadStringInternedAtTest' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 167,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 165,
        "length": 6,
        "offset": 33,
        "surroundingCode": "      return _result;\n    };\n    public static CtxReadDelegate<string> ReadStringInternedAtTest = Serializers.ReadString.Interned(\"Test\");\n    \n    public static CtxWriteDelegate<InterningMtModel> Write = (ctx, writer, value) => "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "83d6c81e9c54331d017b33b8ed55f9b371a256e1d29689b3ccf2856ed29884fb"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadByteArray' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 89,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 87,
        "length": 6,
        "offset": 127,
        "surroundingCode": "    public static readonly CtxReadDelegate<RdSecureString> ReadSecureString = (ctx, reader) => reader.ReadSecureString();\n\n    public static readonly CtxReadDelegate<byte[]?> ReadByteArray = (ctx, reader) => reader.ReadArray(ReadByte, ctx);\n    public static readonly CtxReadDelegate<short[]?> ReadShortArray = (ctx, reader) => reader.ReadArray(ReadShort, ctx);\n    public static readonly CtxReadDelegate<int[]?> ReadIntArray = (ctx, reader) => reader.ReadArray(ReadInt, ctx);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "845932e16c13f903c5812d4b5c8eacfa08c00af9d447160bf4c3aeb4897015db"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadCharArray' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 95,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 93,
        "length": 6,
        "offset": 249,
        "surroundingCode": "    public static readonly CtxReadDelegate<float[]?> ReadFloatArray = (ctx, reader) => reader.ReadArray(ReadFloat, ctx);\n    public static readonly CtxReadDelegate<double[]?> ReadDoubleArray = (ctx, reader) => reader.ReadArray(ReadDouble, ctx);\n    public static readonly CtxReadDelegate<char[]?> ReadCharArray = (ctx, reader) => reader.ReadArray(ReadChar, ctx);\n    public static readonly CtxReadDelegate<bool[]?> ReadBoolArray = (ctx, reader) => reader.ReadArray(ReadBool, ctx);\n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "851ba3272b98b5b1bf3fedc1e2d362f817a2fd7309253a6df46cfa30b984ab36"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadChar' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 77,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 75,
        "length": 6,
        "offset": 205,
        "surroundingCode": "    public static readonly CtxReadDelegate<float> ReadFloat = (ctx, reader) => reader.ReadFloat();\n    public static readonly CtxReadDelegate<double> ReadDouble = (ctx, reader) => reader.ReadDouble();\n    public static readonly CtxReadDelegate<char> ReadChar = (ctx, reader) => reader.ReadChar();\n    public static readonly CtxReadDelegate<bool> ReadBool = (ctx, reader) => reader.ReadBool();\n    public static readonly CtxReadDelegate<Unit> ReadVoid = (ctx, reader) => reader.ReadVoid();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "85e01a160d9ba37c582452bba0c47e9f1efee02fc5e1280c772ebe2c0ebeb191"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'ReadUInt64' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 248,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 246,
        "length": 6,
        "offset": 68,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public UInt64 ReadUInt64()\n    {\n      if (Mode.IsAssertion) AssertLength(sizeof(UInt64));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "8c83fc023737e44e413269dcb8238e50cf1ccce91157b69f29f873e57c48523b"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Constant 'MaximumHeartbeatDelay' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 413,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 411,
        "length": 8,
        "offset": 55,
        "surroundingCode": "      private int myCounterpartNotionTimestamp;\n\n      internal const int MaximumHeartbeatDelay = 3;\n      private readonly byte[] myPingPkgHeader = new byte[ PkgHeaderLen];\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "8d30042a8f00661ad0ca54e27ac6cad5fc0da708f476d31b016c460dad1c1f9f"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'ScalarSerializers' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFacade.cs",
      "language": "C#",
      "line": 14,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 12,
        "length": 6,
        "offset": 52,
        "surroundingCode": "    public ITypesCatalog TypesCatalog { get; }\n\n    public IScalarSerializers ScalarSerializers { get; }\n\n    public ReflectionSerializersFactory SerializersFactory { get; }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "8f8c1913a42f08eb03ab115257958cbcda606564510a3cecbb8f5ecd2b580264"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'BooleanDelegate' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 325,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 323,
        "length": 6,
        "offset": 161,
        "surroundingCode": "    public delegate T ReadDelegate<out T>(UnsafeReader reader);\n    public static readonly ReadDelegate<bool> BoolDelegate = reader => reader.ReadBoolean();\n    public static readonly ReadDelegate<bool> BooleanDelegate = reader => reader.ReadBoolean(); //alias\n    public static readonly ReadDelegate<byte> ByteDelegate = reader => reader.ReadByte();\n    public static readonly ReadDelegate<Guid> GuidDelegate = reader => reader.ReadGuid();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "90976c34ce21b8785f0b9a2a421216685ad94eba802986d6e5d390b694721b03"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadFloat' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 75,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 73,
        "length": 6,
        "offset": 193,
        "surroundingCode": "    public static readonly CtxReadDelegate<int> ReadInt = (ctx, reader) => reader.ReadInt();\n    public static readonly CtxReadDelegate<long> ReadLong = (ctx, reader) => reader.ReadLong();\n    public static readonly CtxReadDelegate<float> ReadFloat = (ctx, reader) => reader.ReadFloat();\n    public static readonly CtxReadDelegate<double> ReadDouble = (ctx, reader) => reader.ReadDouble();\n    public static readonly CtxReadDelegate<char> ReadChar = (ctx, reader) => reader.ReadChar();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "911d3c71b7eabea4dc1196ed90dbd456958ce00605d52b0d1fb4d81b2b9f0c4a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'IsMemberDeclaration' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 168,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 166,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public static bool IsMemberDeclaration(MemberInfo memberInfo)\n    {\n      var returnType = ReflectionUtil.GetReturnType(memberInfo);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "91277082a53cea336758ccb10c3eb7299bda4510acf3d021b871529f813f6d28"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteShort' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 114,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 112,
        "length": 6,
        "offset": 125,
        "surroundingCode": "    //writers\n    public static readonly CtxWriteDelegate<byte> WriteByte = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<short> WriteShort = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<int> WriteInt = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<long> WriteLong = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "97c9c41cb0c72be363ed21950681c32cd5a2f1065f0d08e8ea941f7467e69659"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteShortArray' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 132,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 130,
        "length": 6,
        "offset": 141,
        "surroundingCode": "\n    public static readonly CtxWriteDelegate<byte[]?> WriteByteArray = (ctx, writer, value) => writer.WriteArray(WriteByte, ctx, value);\n    public static readonly CtxWriteDelegate<short[]?> WriteShortArray = (ctx, writer, value) => writer.WriteArray(WriteShort, ctx, value);\n    public static readonly CtxWriteDelegate<int[]?> WriteIntArray = (ctx, writer, value) => writer.WriteArray(WriteInt, ctx, value);\n    public static readonly CtxWriteDelegate<long[]?> WriteLongArray = (ctx, writer, value) => writer.WriteArray(WriteLong, ctx, value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "97e5a06225f41e638ab2c8f784faace6747f80587119fa6efa7f610192275d52"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'IsMaster' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdMap.cs",
      "language": "C#",
      "line": 73,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 71,
        "length": 6,
        "offset": 70,
        "surroundingCode": "    private const int Ack = (int)AddUpdateRemove.Remove + 1;\n    \n    public bool IsMaster = false;\n    private long myNextVersion;\n    private readonly Dictionary<K, long> myPendingForAck = new Dictionary<K, long>();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "98afd68bafba21672f240e2c31827591604fde97ea6494999c7dadb617f0c570"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'Delegate' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdDelegateBase.cs",
      "language": "C#",
      "line": 10,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 8,
        "length": 6,
        "offset": 13,
        "surroundingCode": "  {\n    \n    public T Delegate { get; }\n\n    public RdDelegateBase(T @delegate)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "9a1760e72fb1f1541693aebe1a90b606844bfab21e67e9d1d0914a7d8ce396bf"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'IdentifyEx' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IRdBindable.cs",
      "language": "C#",
      "line": 139,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 137,
        "length": 6,
        "offset": 6,
        "surroundingCode": "\n\n    public static void IdentifyEx<T>(this T? value, IIdentities ids, RdId id) where T : IRdBindable\n    {\n      if (value != null) value.Identify(ids, id);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "9a9f0acc3c3e70110636c655a7f5972999b4801f413bbdfc1edf9e3457234413"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadStringInternedAtOutOfExt' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 142,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 140,
        "length": 6,
        "offset": 123,
        "surroundingCode": "    };\n    public static CtxReadDelegate<string> ReadStringInternedAtInExt = Serializers.ReadString.Interned(\"InExt\");\n    public static CtxReadDelegate<string> ReadStringInternedAtOutOfExt = Serializers.ReadString.Interned(\"OutOfExt\");\n    public static CtxReadDelegate<string> ReadStringInternedAtProtocol = Serializers.ReadString.Interned(\"Protocol\");\n    "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "9efe69771fe7baf51a6a646ba2ed20ad5d0479bbbf94cc92a512c24f6f616e6a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'InterningNestedTestStringModel' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 291,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 289,
        "length": 6,
        "offset": 51,
        "surroundingCode": "    //private fields\n    //primary constructor\n    public InterningNestedTestStringModel(\n      [NotNull] string value,\n      [CanBeNull] InterningNestedTestStringModel inner"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "9f923d35ed856d1c44d024e8575bd5954af0f9b7c0b74881b8ce9342298591b7"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'ReadEnum' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 197,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 195,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public static T ReadEnum<T>(SerializationCtx ctx, UnsafeReader reader) where T :\n#if !NET35\n    unmanaged,"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "a2c09ff995de77a2e4a6d32eda78048dd993916774463a0cffa94db5423700c7"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Class 'TextBufferTypingSession' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/RdTextBuffer.cs",
      "language": "C#",
      "line": 208,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 206,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public class TextBufferTypingSession : ITypingSession\n    {\n      private enum State"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "a489ded43880a0a1ac57738e417525e9935d9e8c339c33657c4b812582356bf4"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Attached' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 617,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 615,
        "length": 8,
        "offset": 10,
        "surroundingCode": "\n    \n    internal Task Attached(Task task)\n    {\n      if (IsEternal || task.IsCompleted) "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "a6d25fbd85537ca5202a4e0a8ab3bde7a0821b3a711c54daac6bde844e5bb2f4"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteLongArray' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 134,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 132,
        "length": 6,
        "offset": 276,
        "surroundingCode": "    public static readonly CtxWriteDelegate<short[]?> WriteShortArray = (ctx, writer, value) => writer.WriteArray(WriteShort, ctx, value);\n    public static readonly CtxWriteDelegate<int[]?> WriteIntArray = (ctx, writer, value) => writer.WriteArray(WriteInt, ctx, value);\n    public static readonly CtxWriteDelegate<long[]?> WriteLongArray = (ctx, writer, value) => writer.WriteArray(WriteLong, ctx, value);\n    public static readonly CtxWriteDelegate<float[]?> WriteFloatArray = (ctx, writer, value) => writer.WriteArray(WriteFloat, ctx, value);\n    public static readonly CtxWriteDelegate<double[]?> WriteDoubleArray = (ctx, writer, value) => writer.WriteArray(WriteDouble, ctx, value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "a6ea60f3bc4ad438113b78db94c16a578ed8bb07f007c4f039cdf9026aab603f"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Property 'ActionPriority' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SingleThreadScheduler.cs",
      "language": "C#",
      "line": 57,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 55,
        "length": 6,
        "offset": 49,
        "surroundingCode": "    \n    public string Name { get; }        \n    public int ActionPriority { get; }\n\n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "a6ebf3105c7af7dc571163fd4db51e3b079e3278043c773428ad6fd5737f992e"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'RdTmpDir' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Cross/Util/FileSystem.cs",
      "language": "C#",
      "line": 21,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 19,
        "length": 6,
        "offset": 27,
        "surroundingCode": "        }\n        \n        public static string RdTmpDir => Path.Combine(Path.GetTempPath(), \"rd\");\n\n        internal static string PortFile => Path.Combine(RdTmpDir, \"port.txt\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.Cross",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "a8c2b532d32c113f14671b86e1ecda7b4317e3a5e01d8ef33776e46f153f183b"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'RpcTimeouts' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RpcTimeouts.cs",
      "language": "C#",
      "line": 58,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 56,
        "length": 6,
        "offset": 235,
        "surroundingCode": "    /// <param name=\"warnAwaitTime\">Must be more than 0 ms and less or equal than <paramref name=\"errorAwaitTime\"/>.</param>\n    /// <param name=\"errorAwaitTime\">Must be more or equal than <paramref name=\"warnAwaitTime\"/></param>.\n    public RpcTimeouts(TimeSpan warnAwaitTime, TimeSpan errorAwaitTime)\n    {\n      Assertion.Require(warnAwaitTime.TotalMilliseconds > 0, \"Warn timeout should be more 0ms but was: {0}\", warnAwaitTime.TotalMilliseconds);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "a9c3b3b7730f66e28d15dd85a2a044d68a8d18a45276eb1d761aece2b506a639"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'Property' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestPropertyWrapper.cs",
      "language": "C#",
      "line": 17,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 15,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public RdProperty<T> Property { get; private set; }\n\n    public override SerializationCtx SerializationContext"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "a9d376f2fddf2cacd95f65340907a18d401addbdb2e3b5e43cc051707b085659"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'SearchLabel' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 441,
      "offset": 15,
      "length": 6,
      "code": {
        "startLine": 439,
        "length": 6,
        "offset": 47,
        "surroundingCode": "    //fields\n    //public fields\n    [NotNull] public string SearchLabel {get; private set;}\n    [NotNull] public IViewableMap<int, WrappedStringModel> Issues { get { return _Issues; }}\n    "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "aa5a4e64c35a277910b550c314049912d36b7d75562810f5663428f18cc31b4c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Property 'Data' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 108,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 106,
        "length": 6,
        "offset": 15,
        "surroundingCode": "      }\n\n      public byte* Data\n      {\n        [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "ac9ea6519351a8366d6205261530af93cd62a859db815ea81ac30152a2b136ba"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'ValueTuples' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 57,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 55,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public static readonly Type[] ValueTuples = new[]\n    {\n      typeof(FakeTuple<>),"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "aee5fb0908922b87c2e67f01abb2ee5bf2f1ca39c123fa46bb371a6800fe7940"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadRdId' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 85,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 83,
        "length": 6,
        "offset": 205,
        "surroundingCode": "    public static readonly CtxReadDelegate<DateTime> ReadDateTime = (ctx, reader) => reader.ReadDateTime();\n    public static readonly CtxReadDelegate<Uri> ReadUri = (ctx, reader) => reader.ReadUri();\n    public static readonly CtxReadDelegate<RdId> ReadRdId = (ctx, reader) => reader.ReadRdId();\n    \n    public static readonly CtxReadDelegate<RdSecureString> ReadSecureString = (ctx, reader) => reader.ReadSecureString();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "afd7886fc599f2b4ade7a8432530bc9fdb5be9f16d06d56918e30bbe81325a63"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'ActiveScheduler' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/SwitchingScheduler.cs",
      "language": "C#",
      "line": 23,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 21,
        "length": 6,
        "offset": 82,
        "surroundingCode": "    public bool OutOfOrderExecution  => ActiveScheduler.OutOfOrderExecution;\n\n    public IScheduler ActiveScheduler\n    {\n      get"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "b0d37fe2f7a2763314ca7e6aa025ae86f080412b372946e0276f77fc5ea9a9bc"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'EnabledLevel' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Internal/LogBase.cs",
      "language": "C#",
      "line": 22,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 20,
        "length": 6,
        "offset": 91,
        "surroundingCode": "    public event Action<LeveledMessage>? Handlers;\n    public string Category { get; }\n    public LoggingLevel EnabledLevel { get; set; }\n\n    protected LogBase(string category, LoggingLevel enabledLevel = LoggingLevel.INFO)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "b1fd39d7e84dfdfdf73fb83bd42e0b1c9681beb2a3e702addff05391b989c17d"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Property 'AcknowledgedSeqN' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ByteBufferAsyncProcessor.cs",
      "language": "C#",
      "line": 80,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 78,
        "length": 6,
        "offset": 119,
        "surroundingCode": "    //to be done:  more granular locking for better performance\n    private readonly object myLock = new object();\n    public long AcknowledgedSeqN { get; private set; }\n\n    private const int DefaultChunkSize = 16370; // some reserve for length + seqN"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "b274b7f6ea116821080d06dce444792adc2ea27ff0b9618f72c3e2ba988f1682"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Reset' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 44,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 42,
        "length": 6,
        "offset": 127,
        "surroundingCode": "    //allows to reuse this instance (and get rid of boxing)\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public UnsafeReader Reset(byte* ptr, int len)\n    {\n      myInitialPtr = ptr;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "b4c612d7ac7b98293cbfcb480b50057a643e8473aaca17e61706d94870784b42"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadFloatArray' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 93,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 91,
        "length": 6,
        "offset": 237,
        "surroundingCode": "    public static readonly CtxReadDelegate<int[]?> ReadIntArray = (ctx, reader) => reader.ReadArray(ReadInt, ctx);\n    public static readonly CtxReadDelegate<long[]?> ReadLongArray = (ctx, reader) => reader.ReadArray(ReadLong, ctx);\n    public static readonly CtxReadDelegate<float[]?> ReadFloatArray = (ctx, reader) => reader.ReadArray(ReadFloat, ctx);\n    public static readonly CtxReadDelegate<double[]?> ReadDoubleArray = (ctx, reader) => reader.ReadArray(ReadDouble, ctx);\n    public static readonly CtxReadDelegate<char[]?> ReadCharArray = (ctx, reader) => reader.ReadArray(ReadChar, ctx);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "b5b8a53f49ab6b48f06d89f67ca7083ddaa4edc66f02de9dbb609ce4ea1e4f69"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'ReadValueDelegate' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdProperty.cs",
      "language": "C#",
      "line": 43,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 41,
        "length": 6,
        "offset": 29,
        "surroundingCode": "    #region Serializers\n\n    public CtxReadDelegate<T> ReadValueDelegate { get; private set; }\n    public CtxWriteDelegate<T> WriteValueDelegate { get; private set; }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "b676d7c7ea6fb493127b4fc92d0b21f8c09a30f2b3ed524d2d44052e0d27175d"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteUIntArray' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 148,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 146,
        "length": 6,
        "offset": 283,
        "surroundingCode": "    public static readonly CtxWriteDelegate<byte[]?> WriteUByteArray = (ctx, writer, value) => writer.WriteArray(WriteByte, ctx, value);\n    public static readonly CtxWriteDelegate<ushort[]?> WriteUShortArray = (ctx, writer, value) => writer.WriteArray(WriteUShort, ctx, value);\n    public static readonly CtxWriteDelegate<uint[]?> WriteUIntArray = (ctx, writer, value) => writer.WriteArray(WriteUInt, ctx, value);\n    public static readonly CtxWriteDelegate<ulong[]?> WriteULongArray = (ctx, writer, value) => writer.WriteArray(WriteULong, ctx, value);\n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "b7cfff1e717c194c33347c0091f94f416cff5c710ec8f6b88c54296fdde04275"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'WriteEnum' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 207,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 205,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public static void WriteEnum<T>(SerializationCtx ctx, UnsafeWriter writer, T value) where T :\n#if !NET35\n    unmanaged,"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "b8c2adf1df4c3b56cec03e9da068e1106d882a904c7fd0b1a806a486173def78"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Class 'TypeReflectionSerializer' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/PolymorphicScalarIntrinsicTest.cs",
      "language": "C#",
      "line": 106,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 104,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public class TypeReflectionSerializer : Base\n    {\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "b966beb3f6af35f21842fb310be70563172dcfe921c53a7eb070a5354133b606"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteBoolArray' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 138,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 136,
        "length": 6,
        "offset": 282,
        "surroundingCode": "    public static readonly CtxWriteDelegate<double[]?> WriteDoubleArray = (ctx, writer, value) => writer.WriteArray(WriteDouble, ctx, value);\n    public static readonly CtxWriteDelegate<char[]?> WriteCharArray = (ctx, writer, value) => writer.WriteArray(WriteChar, ctx, value);\n    public static readonly CtxWriteDelegate<bool[]?> WriteBoolArray = (ctx, writer, value) => writer.WriteArray(WriteBool, ctx, value);\n\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "bab1d38b333674083955ee7ef13057247da4c151e339728238e31622039b6ad4"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteULongArray' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 149,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 147,
        "length": 6,
        "offset": 282,
        "surroundingCode": "    public static readonly CtxWriteDelegate<ushort[]?> WriteUShortArray = (ctx, writer, value) => writer.WriteArray(WriteUShort, ctx, value);\n    public static readonly CtxWriteDelegate<uint[]?> WriteUIntArray = (ctx, writer, value) => writer.WriteArray(WriteUInt, ctx, value);\n    public static readonly CtxWriteDelegate<ulong[]?> WriteULongArray = (ctx, writer, value) => writer.WriteArray(WriteULong, ctx, value);\n    \n    public static void RegisterFrameworkMarshallers(ISerializersContainer serializers)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "bb4d5a4589a9d0512ca46e734e53e635e11fb134421e8f6721bc1e73a386ab50"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'AsyncLocal' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 131,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 129,
        "length": 6,
        "offset": 76,
        "surroundingCode": "    /// and can be used by cooperative cancellation.\n    /// </summary>\n    public static readonly AsyncLocal<Lifetime> AsyncLocal = new AsyncLocal<Lifetime>();\n    #endif\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "bc5261f11bb98018b07d361c849a0be409fbae923d8b2f0dcf5d2f1c87ac9d3e"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Property 'Message' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogLog.cs",
      "language": "C#",
      "line": 27,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 25,
        "length": 6,
        "offset": 47,
        "surroundingCode": "    public LoggingLevel Severity { get; }\n\n    public string Message { get; }\n\n    public string Format(bool includeDate)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "bc93b6ee595dd9c42482484c9b125401d8445cdda89101045225ac17e404fb80"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteRdTextBufferChangeNullable' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 65,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 63,
        "length": 6,
        "offset": 142,
        "surroundingCode": "\n    public static CtxReadDelegate<RdTextBufferChange?> ReadRdTextBufferChangeNullable = RdTextBufferChange.ReadDelegate.NullableClass();\n    public static CtxWriteDelegate<RdTextBufferChange?> WriteRdTextBufferChangeNullable = RdTextBufferChange.WriteDelegate.NullableClass();\n\n    public static CtxReadDelegate<RdTextBufferState> Read = (ctx, reader) =>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "bced81f16bfb0c780c556ae73118fdc444f2d2d0416499cca0b30dad17fd877c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Property 'EnabledLevel' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Internal/TextWriterLog.cs",
      "language": "C#",
      "line": 39,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 37,
        "length": 6,
        "offset": 61,
        "surroundingCode": "  public class TextWriterLogFactory : LogFactoryBase\n  {\n    public LoggingLevel EnabledLevel { get; }\n    public TextWriter Writer { get; }\n    "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "bcee24e73df15d1ff78acc0be52d6bb5c4c8de8e91d979d8e5397355a6e7f82c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'RunScalarTest' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 241,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 239,
        "length": 6,
        "offset": 15,
        "surroundingCode": "    }\n    \n    public void RunScalarTest<T>(T instance, Action<T, T> checkEqual)\n    {\n      var scalar = new ScalarSerializer(CFacade.TypesCatalog);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "bd07373c882eb67e2ebbb50294d7800ecbf8b20a6729c3df5370d9795da786a9"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteUInt' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 143,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 141,
        "length": 6,
        "offset": 223,
        "surroundingCode": "    public static readonly CtxWriteDelegate<byte> WriteUByte = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<ushort> WriteUShort = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<uint> WriteUInt = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<ulong> WriteULong = (ctx, writer, value) => writer.Write(value);\n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "bd1a4cc93c0e6255aba5d2dccd962e0c34eff1e7156778829d1b6ba57eac7de1"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'Disposable' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Disposable.cs",
      "language": "C#",
      "line": 9,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 7,
        "length": 6,
        "offset": 42,
        "surroundingCode": "        private Action myAction;\n\n        public Disposable(Action action)\n        {\n            myAction = action;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "bf6552dc4b66504b37b35895273fef143555ac4dd23de297f9474c312a68d7bc"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteSecureString' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 129,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 127,
        "length": 6,
        "offset": 116,
        "surroundingCode": "    public static readonly CtxWriteDelegate<RdId> WriteRdId = (ctx, writer, value) => writer.Write(value);\n    \n    public static readonly CtxWriteDelegate<RdSecureString> WriteSecureString = (ctx, writer, value) => writer.Write(value.Contents);\n\n    public static readonly CtxWriteDelegate<byte[]?> WriteByteArray = (ctx, writer, value) => writer.WriteArray(WriteByte, ctx, value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "c044485f59301be26f0aa306757c285a1f1944ac0d09c2485cf53aaea90075f0"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'ReadRName' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/ExtCreatedUtils.cs",
      "language": "C#",
      "line": 33,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 31,
        "length": 8,
        "offset": 15,
        "surroundingCode": "    }\n    \n    internal static RName ReadRName(UnsafeReader reader)\n    {\n      var isEmpty = reader.ReadBool();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "c06e28e5e9e43e8506856f0279b1a4ec953c22adb882cfd2cff87ba776886d75"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'Change' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferChange.cs",
      "language": "C#",
      "line": 9,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 7,
        "length": 6,
        "offset": 55,
        "surroundingCode": "  public class RdTextBufferChange : IPrintable\n  {\n    public readonly RdTextChange Change;\n    public readonly TextBufferVersion Version;\n    public readonly RdChangeOrigin Origin;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "c10be95100616752b605b7876ae4793898687a87db516cd9185d4f4935246965"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'ReadUInt16' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 228,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 226,
        "length": 6,
        "offset": 68,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public UInt16 ReadUInt16()\n    {\n      if (Mode.IsAssertion) AssertLength(sizeof(UInt16));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "c16554a85b71a52e5f66b95a523bb491641e0006581d70c69b08df9423b1104e"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'ReadValueDelegate' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSignal.cs",
      "language": "C#",
      "line": 14,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 12,
        "length": 6,
        "offset": 29,
        "surroundingCode": "    #region Serializers\n\n    public CtxReadDelegate<T> ReadValueDelegate { get; }\n    public CtxWriteDelegate<T> WriteValueDelegate { get; }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "c21025572386706c265f6e64391a51dc22d2ea862a8e0f67c351b4bccc478abd"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'SerializationCtx' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/SerializationCtx.cs",
      "language": "C#",
      "line": 17,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 15,
        "length": 6,
        "offset": 89,
        "surroundingCode": "    [NotNull] public readonly IDictionary<string, IInternRoot<object>> InternRoots;\n\n    public SerializationCtx(ISerializers serializers, IDictionary<string, IInternRoot<object>> internRoots = null) : this()\n    {\n      Serializers = serializers;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "c2d4c6b0198c0e4cd1455ebff5d98c42bc1779dc6ebbd1fd5f52683e3d4b30f2"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteCharArray' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 137,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 135,
        "length": 6,
        "offset": 285,
        "surroundingCode": "    public static readonly CtxWriteDelegate<float[]?> WriteFloatArray = (ctx, writer, value) => writer.WriteArray(WriteFloat, ctx, value);\n    public static readonly CtxWriteDelegate<double[]?> WriteDoubleArray = (ctx, writer, value) => writer.WriteArray(WriteDouble, ctx, value);\n    public static readonly CtxWriteDelegate<char[]?> WriteCharArray = (ctx, writer, value) => writer.WriteArray(WriteChar, ctx, value);\n    public static readonly CtxWriteDelegate<bool[]?> WriteBoolArray = (ctx, writer, value) => writer.WriteArray(WriteBool, ctx, value);\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "c61bd2983ce17dc53d9a2c677760b845bcff41edc9ca85a295c839680f3ef48c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteStringInternedAtTest' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 176,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 174,
        "length": 6,
        "offset": 88,
        "surroundingCode": "      value.mySerializationContext = ctx.WithInternRootsHere(value, \"Test\");\n    };\n    public static CtxWriteDelegate<string> WriteStringInternedAtTest = Serializers.WriteString.Interned(\"Test\");\n    //custom body\n    //equals trait"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "c84cfd1e40f6f3dd2ef2f756dbc6f82aa1570f55b49b3fbb6c53c9469b4465fa"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteChar' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 119,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 117,
        "length": 6,
        "offset": 224,
        "surroundingCode": "    public static readonly CtxWriteDelegate<float> WriteFloat = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<double> WriteDouble = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<char> WriteChar = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<bool> WriteBool = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<Unit> WriteVoid = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "c8cb0634cc596a7e85500e0cad098640e42758fe7e6b02bce3347a749a4d7411"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'ProtocolWrappedStringModel' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 520,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 518,
        "length": 6,
        "offset": 51,
        "surroundingCode": "    //private fields\n    //primary constructor\n    public ProtocolWrappedStringModel(\n      [NotNull] string text\n    )"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "c8f4939b2984d5117451d2b224f0a118e41ecd4cd81f1a599cd2f61b3aed90a1"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Write' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 606,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 604,
        "length": 6,
        "offset": 68,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public void Write(byte[]? value)\n    {\n      if(value == null)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "cb187da2dd2c89b536011896c58f881273d1c32222f0fa41ec6f15920f6061e7"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Class 'MyImpl2' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorScalarInterfaceSerializerTest.cs",
      "language": "C#",
      "line": 64,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 62,
        "length": 6,
        "offset": 41,
        "surroundingCode": "      public Action myAction;\n    } \n    public class MyImpl2 : IMyInterface { }   \n\n    [RdRpc]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "cd5f8651fb2b4cacbf5ea3c8afe09419678d8c0c2ee745690ca62aaeaae41d90"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'ReadNullableClass' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SerializersEx.cs",
      "language": "C#",
      "line": 92,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 90,
        "length": 6,
        "offset": 68,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public static T? ReadNullableClass<T>(this UnsafeReader reader, CtxReadDelegate<T> itemReader, SerializationCtx ctx) where T:class\n    {\n      return reader.ReadNullness() ? itemReader(ctx, reader) : null;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "cdcb6016998eeb26f1817481843a0f5e98e9db095689c2c7ec02d02bc2ec31d0"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'ProxyGenerator' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFacade.cs",
      "language": "C#",
      "line": 18,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 16,
        "length": 6,
        "offset": 73,
        "surroundingCode": "    public ReflectionSerializersFactory SerializersFactory { get; }\n\n    public IProxyGenerator ProxyGenerator { get; }\n\n    public ITypesRegistrar Registrar { get; }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "cee8f9f45cce98f1bc1aa34110547482f7fd2cd7c091c119cbb4d378fea0b632"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteUShort' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 142,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 140,
        "length": 6,
        "offset": 113,
        "surroundingCode": "\n    public static readonly CtxWriteDelegate<byte> WriteUByte = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<ushort> WriteUShort = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<uint> WriteUInt = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<ulong> WriteULong = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "d2c9921446b6f3834130db8bd6280115825afe2991f19695e67f2ad8ce46a691"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'Name' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SingleThreadScheduler.cs",
      "language": "C#",
      "line": 56,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 54,
        "length": 6,
        "offset": 42,
        "surroundingCode": "    private readonly ILog myLog;\n    \n    public string Name { get; }        \n    public int ActionPriority { get; }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "d3fb2bbb4dfef8e0378b60db957f297bb87abd6c814ddd218bb87c0eb48d6fc5"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadInterningNestedTestStringModelNullable' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 312,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 310,
        "length": 6,
        "offset": 121,
        "surroundingCode": "    };\n    public static CtxReadDelegate<string> ReadStringInternedAtTest = Serializers.ReadString.Interned(\"Test\");\n    public static CtxReadDelegate<InterningNestedTestStringModel> ReadInterningNestedTestStringModelNullable = InterningNestedTestStringModel.Read.NullableClass();\n    \n    public static CtxWriteDelegate<InterningNestedTestStringModel> Write = (ctx, writer, value) => "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "d41fdb952c82d440c23f97e8a1d3c557dd11e0378d7a8bf15454a5ca11dbdcfb"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadDouble' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 76,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 74,
        "length": 6,
        "offset": 199,
        "surroundingCode": "    public static readonly CtxReadDelegate<long> ReadLong = (ctx, reader) => reader.ReadLong();\n    public static readonly CtxReadDelegate<float> ReadFloat = (ctx, reader) => reader.ReadFloat();\n    public static readonly CtxReadDelegate<double> ReadDouble = (ctx, reader) => reader.ReadDouble();\n    public static readonly CtxReadDelegate<char> ReadChar = (ctx, reader) => reader.ReadChar();\n    public static readonly CtxReadDelegate<bool> ReadBool = (ctx, reader) => reader.ReadBool();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "d46b9eec1138659ffae867425f5ad11dbe6c9f9759dde64790d80f065c04d9d2"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'GetEnumerator' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 24,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 22,
        "length": 6,
        "offset": 49,
        "surroundingCode": "    private List<T?>? myMultipleValues;\n    \n    public CompactListEnumerator<T> GetEnumerator()\n    {\n      return new CompactListEnumerator<T>(mySingleValue, myMultipleValues);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "d4d5c7c3dea349702f53f3d7237528b0582666343c72389d1bf3e4948e63e0d5"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadULong' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 103,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 101,
        "length": 6,
        "offset": 202,
        "surroundingCode": "    public static readonly CtxReadDelegate<ushort> ReadUShort = (ctx, reader) => reader.ReadUShort();\n    public static readonly CtxReadDelegate<uint> ReadUInt = (ctx, reader) => reader.ReadUInt();\n    public static readonly CtxReadDelegate<ulong> ReadULong = (ctx, reader) => reader.ReadULong();\n    \n    public static readonly CtxReadDelegate<byte[]?> ReadUByteArray = (ctx, reader) => reader.ReadArray(ReadByte, ctx);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "d5ed62cbdedaeee319dff7b6f7e956936511b44495efebef269c6e7923f72cba"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'CopyTo' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 76,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 74,
        "length": 6,
        "offset": 15,
        "surroundingCode": "      }\n\n      public void CopyTo(byte[] dst, int srcOffset, int dstOffset, int count)\n      {\n        Marshal.Copy((IntPtr)(Data + srcOffset), dst, dstOffset, count);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "d85516299ed62ae8f4b54e423081c44c4bee0fa05ab545579117ea870bf9834a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteBool' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 120,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 118,
        "length": 6,
        "offset": 222,
        "surroundingCode": "    public static readonly CtxWriteDelegate<double> WriteDouble = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<char> WriteChar = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<bool> WriteBool = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<Unit> WriteVoid = (ctx, writer, value) => writer.Write(value);\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "d8e8512e93939841878d01a8e15c5184c7b699a5d0117e742d3bfc4e70349b80"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'Max' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RpcTimeouts.cs",
      "language": "C#",
      "line": 36,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 34,
        "length": 6,
        "offset": 80,
        "surroundingCode": "    /// <param name=\"y\">Second timeouts</param>\n    /// <returns></returns>\n    public static RpcTimeouts Max(RpcTimeouts x, RpcTimeouts y)\n    {\n      return new RpcTimeouts("
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "d9027d5d146a705b08b7032e66e3f0343c9ebef05b719a5ac761f343bc3674fa"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteByteArray' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 131,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 129,
        "length": 6,
        "offset": 139,
        "surroundingCode": "    public static readonly CtxWriteDelegate<RdSecureString> WriteSecureString = (ctx, writer, value) => writer.Write(value.Contents);\n\n    public static readonly CtxWriteDelegate<byte[]?> WriteByteArray = (ctx, writer, value) => writer.WriteArray(WriteByte, ctx, value);\n    public static readonly CtxWriteDelegate<short[]?> WriteShortArray = (ctx, writer, value) => writer.WriteArray(WriteShort, ctx, value);\n    public static readonly CtxWriteDelegate<int[]?> WriteIntArray = (ctx, writer, value) => writer.WriteArray(WriteInt, ctx, value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "d99b6d968e6d69f78d451d2b830a121f161d450be42d9f263532433c3d4c1e47"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'BindEx' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IRdBindable.cs",
      "language": "C#",
      "line": 95,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 93,
        "length": 6,
        "offset": 6,
        "surroundingCode": "\n\n    public static void BindEx<T>(this T? value, Lifetime lifetime, IRdDynamic parent, string name) where T : IRdBindable\n    {\n      if (value != null) value.Bind(lifetime, parent, name);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "d99e39e434fc13980688073326a35fc432708ef329c7b5c34fc12d3eef88e2e0"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadStringInternedAtInExt' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 141,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 139,
        "length": 6,
        "offset": 33,
        "surroundingCode": "      return _result;\n    };\n    public static CtxReadDelegate<string> ReadStringInternedAtInExt = Serializers.ReadString.Interned(\"InExt\");\n    public static CtxReadDelegate<string> ReadStringInternedAtOutOfExt = Serializers.ReadString.Interned(\"OutOfExt\");\n    public static CtxReadDelegate<string> ReadStringInternedAtProtocol = Serializers.ReadString.Interned(\"Protocol\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "d9ade9761fde579953f4462d0f42575d835193ecd0564ce45245c5d79b9e2eb9"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'IsRpcAttributeDefined' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 437,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 435,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public static bool IsRpcAttributeDefined(Type @interface)\n    {\n      return @interface.IsDefined(typeof(RdRpcAttribute), false);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "dba777fab9df7be7b8a00d0fd0e054c78cffce45586f0cfe79fff787a2736c68"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Property 'Priority' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SingleThreadScheduler.cs",
      "language": "C#",
      "line": 25,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 23,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public int Priority { get; }\n    public Action Action { get; }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "df1974978bd863fea4f04664ed11900c3836cb70c2a9a88fa8cfee9ea8c63852"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadUShort' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 101,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 99,
        "length": 6,
        "offset": 107,
        "surroundingCode": "    \n    public static readonly CtxReadDelegate<byte> ReadUByte = (ctx, reader) => reader.ReadUByte();\n    public static readonly CtxReadDelegate<ushort> ReadUShort = (ctx, reader) => reader.ReadUShort();\n    public static readonly CtxReadDelegate<uint> ReadUInt = (ctx, reader) => reader.ReadUInt();\n    public static readonly CtxReadDelegate<ulong> ReadULong = (ctx, reader) => reader.ReadULong();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "df249cea767b41bb4f220a95f1a304440328adc5570a2e571ca6703d88602209"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteStringInternedAtProtocol' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 155,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 153,
        "length": 6,
        "offset": 240,
        "surroundingCode": "    public static CtxWriteDelegate<string> WriteStringInternedAtInExt = Serializers.WriteString.Interned(\"InExt\");\n    public static CtxWriteDelegate<string> WriteStringInternedAtOutOfExt = Serializers.WriteString.Interned(\"OutOfExt\");\n    public static CtxWriteDelegate<string> WriteStringInternedAtProtocol = Serializers.WriteString.Interned(\"Protocol\");\n    //custom body\n    //equals trait"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "df8d52b4b01a486b1eb8721aa108780ce90e765a6a179ecbfaeada12749da1d1"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'ReadRaw' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 81,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 79,
        "length": 6,
        "offset": 68,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public byte* ReadRaw(int count)\n    {\n      if (Mode.IsAssertion) AssertLength(count);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "e47bc9d85632449a95371db06ebbcf331fd424cff8cf907c19d9250635af7b3c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'HeartBeatInterval' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 396,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 394,
        "length": 6,
        "offset": 93,
        "surroundingCode": "      /// Its value must be the same on both sides of connection.\n      /// </summary>\n      public TimeSpan HeartBeatInterval { get; set; } = TimeSpan.FromMilliseconds(500);\n\n      /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "e50e42fbdcb1626dc3a8a4c9c7e2946a546c0661478d6882ec3d90fb32b10ee5"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AssertNotNull' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/OuterLifetime.cs",
      "language": "C#",
      "line": 71,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 69,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public void AssertNotNull()\n    {\n//      if(myLifetime == null)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "e6408184a1da5e71ed1a22932cc63e20d6707b8d7c73fd14a157bcc171e9486a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'SlaveVersion' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdAssertion.cs",
      "language": "C#",
      "line": 13,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 11,
        "length": 6,
        "offset": 73,
        "surroundingCode": "    //public fields\n    public int MasterVersion {get; private set;}\n    public int SlaveVersion {get; private set;}\n    public string Text {get; private set;}\n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "e6b1a268b7d8d5b0c79cf0d25381d0e7ff865ee1ef21186c696ee295ff6fc4aa"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'ThrowLoggedExceptions' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/LifetimesTestBase.cs",
      "language": "C#",
      "line": 40,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 38,
        "length": 9,
        "offset": 10,
        "surroundingCode": "    \n\n    protected void ThrowLoggedExceptions()\n    {\n      TestLogger.ExceptionLogger.ThrowLoggedExceptions();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "e7353f3a31c9fb9b974ebcf33fceff1d93424519087529859b84b26ef0e1629f"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'MessageBroker' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/IWire.cs",
      "language": "C#",
      "line": 36,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 34,
        "length": 9,
        "offset": 72,
        "surroundingCode": "  public abstract class WireBase : IWireWithDelayedDelivery\n  {    \n    protected readonly MessageBroker MessageBroker;\n    protected IScheduler Scheduler { get; }\n    private ProtocolContexts myContexts;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "e786cb1ba638e85b2b9799c60cf9c9452074da46200034128d63509f7c5a24d3"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Constant 'ExceptionDataKey' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/FirstChanceExceptionInterceptor.cs",
      "language": "C#",
      "line": 24,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 22,
        "length": 6,
        "offset": 71,
        "surroundingCode": "    [ThreadStatic] private static Stack? ourThreadLocalDebugInfo;\n\n    public const string ExceptionDataKey = \"ThreadLocalDebugInfo\"; \n    \n    static FirstChanceExceptionInterceptor()"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "e80f2bd790198a44e033304ab147b4f39a05e7943e892ec81f703e8cb5bb7270"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadUShortArray' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 106,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 104,
        "length": 6,
        "offset": 128,
        "surroundingCode": "    \n    public static readonly CtxReadDelegate<byte[]?> ReadUByteArray = (ctx, reader) => reader.ReadArray(ReadByte, ctx);\n    public static readonly CtxReadDelegate<ushort[]?> ReadUShortArray = (ctx, reader) => reader.ReadArray(ReadUShort, ctx);\n    public static readonly CtxReadDelegate<uint[]?> ReadUIntArray = (ctx, reader) => reader.ReadArray(ReadUInt, ctx);\n    public static readonly CtxReadDelegate<ulong[]?> ReadULongArray = (ctx, reader) => reader.ReadArray(ReadULong, ctx);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "e88dca1fff22127ba86beafa21d480e260500d97b1243e4b9d899a15d2e7b830"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'SocketProxy' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SocketProxy.cs",
      "language": "C#",
      "line": 44,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 42,
        "length": 8,
        "offset": 72,
        "surroundingCode": "    private readonly SequentialLifetimes myClientToServerLifetime;\n\n    internal SocketProxy(string id, Lifetime lifetime, int serverPort)\n    {\n      Id = id;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "e99bcc9ef1ae34282999270416d3a917043f4805e97cc537ba36151c69894209"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Class 'Derived' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorCornerCasesTests.cs",
      "language": "C#",
      "line": 34,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 32,
        "length": 6,
        "offset": 32,
        "surroundingCode": "\n    public class Base  { }\n    public class Derived : Base  { }\n\n    [RdRpc]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "ece409c0310426c64ba8b6a27d0d5b3021118449dc6d9f05cd4de0c8e080e62a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'Read' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSet.cs",
      "language": "C#",
      "line": 40,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 38,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public static RdSet<T> Read(SerializationCtx ctx, UnsafeReader reader, CtxReadDelegate<T> readValue, CtxWriteDelegate<T> writeValue)\n    {\n      var id = reader.ReadRdId();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "edbf8d5a8b642da6cbffb079effc515700056c970bca449619dd7f7a981f7132"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadInt' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 73,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 71,
        "length": 6,
        "offset": 199,
        "surroundingCode": "    public static readonly CtxReadDelegate<byte> ReadByte = (ctx, reader) => reader.ReadByte();\n    public static readonly CtxReadDelegate<short> ReadShort = (ctx, reader) => reader.ReadShort();\n    public static readonly CtxReadDelegate<int> ReadInt = (ctx, reader) => reader.ReadInt();\n    public static readonly CtxReadDelegate<long> ReadLong = (ctx, reader) => reader.ReadLong();\n    public static readonly CtxReadDelegate<float> ReadFloat = (ctx, reader) => reader.ReadFloat();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "ef30fc37f7b66881c906dce4bd02217be4268b19b1dc177616ef5a1d01a1a0db"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'DynamicModule' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 76,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 74,
        "length": 6,
        "offset": 76,
        "surroundingCode": "\n    public AssemblyBuilder DynamicAssembly => myAssemblyBuilder.Value;\n    public ModuleBuilder DynamicModule => myModuleBuilder.Value;\n\n    public ProxyGenerator(bool allowSave = false)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "f013b0a6731244688b46cabfa01e9a8609f1037b090e6c1a0708400dc7749223"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteGuid' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 124,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 122,
        "length": 6,
        "offset": 117,
        "surroundingCode": "\n    public static readonly CtxWriteDelegate<string?> WriteString = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<Guid> WriteGuid = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<DateTime> WriteDateTime = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<Uri> WriteUri = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "f18af5aa0ded73c2bf1cd7ec2d9aac74dbeaed68ebfc4debef4f66891ec8d836"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'Inner' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 287,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 285,
        "length": 6,
        "offset": 90,
        "surroundingCode": "    //public fields\n    [NotNull] public string Value {get; private set;}\n    [CanBeNull] public InterningNestedTestStringModel Inner {get; private set;}\n    \n    //private fields"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "f2b2e95b54fcedd161e0d339d9d3c5e564c42e5c02d69f0f91aa4ca848be9a38"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadString' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 81,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 79,
        "length": 6,
        "offset": 101,
        "surroundingCode": "    public static readonly CtxReadDelegate<Unit> ReadVoid = (ctx, reader) => reader.ReadVoid();\n\n    public static readonly CtxReadDelegate<string?> ReadString = (ctx, reader) => reader.ReadString();\n    public static readonly CtxReadDelegate<Guid> ReadGuid = (ctx, reader) => reader.ReadGuid();\n    public static readonly CtxReadDelegate<DateTime> ReadDateTime = (ctx, reader) => reader.ReadDateTime();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "f3c0331c41bbbabf1b15bbf536263bfdc51b13cda2260cd96df6d0a4cfe26940"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Struct 'FakeTuple' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 48,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 46,
        "length": 6,
        "offset": 187,
        "surroundingCode": "      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; }\n    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6, T7> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6; public T7 Item7;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; Item7 = item7; }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "f44b0b441ec8a6212e5d659f07be8a0498d3a18c1e78555f246738ef9ed83b02"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'LifetimeDefinition' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/LifetimesTestBase.cs",
      "language": "C#",
      "line": 13,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 11,
        "length": 9,
        "offset": 43,
        "surroundingCode": "    private IDisposable myDisposable;\n\n    protected LifetimeDefinition LifetimeDefinition;\n    protected Lifetime TestLifetime;\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "f482f2bca49e4d80dcc02481afba0732e10a69bc9b192653bd6ed554896251c1"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'Activator' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFacade.cs",
      "language": "C#",
      "line": 10,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 8,
        "length": 6,
        "offset": 51,
        "surroundingCode": "  public class ReflectionSerializersFacade\n  {\n    public ReflectionRdActivator Activator { get; }\n\n    public ITypesCatalog TypesCatalog { get; }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "f4d083eab12d738e4fbf0ae8921cc1d443f5e9abbc2565ab2183e20856c1777a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Property 'Category' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogLog.cs",
      "language": "C#",
      "line": 24,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 22,
        "length": 6,
        "offset": 39,
        "surroundingCode": "\n    public DateTime Time { get; }\n    public string? Category { get; }\n    public LoggingLevel Severity { get; }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "f529fa8ba4a13d258f306301a513a8a7a33ea73224d76465524734dfdaf14805"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'Text' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdAssertion.cs",
      "language": "C#",
      "line": 14,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 12,
        "length": 6,
        "offset": 101,
        "surroundingCode": "    public int MasterVersion {get; private set;}\n    public int SlaveVersion {get; private set;}\n    public string Text {get; private set;}\n    \n    //private fields"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "f5606b6076f2eac14cd8a668342fd65abd5f9cc6f0cb63e2e9377c832cf94de9"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteRdId' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 127,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 125,
        "length": 6,
        "offset": 224,
        "surroundingCode": "    public static readonly CtxWriteDelegate<DateTime> WriteDateTime = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<Uri> WriteUri = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<RdId> WriteRdId = (ctx, writer, value) => writer.Write(value);\n    \n    public static readonly CtxWriteDelegate<RdSecureString> WriteSecureString = (ctx, writer, value) => writer.Write(value.Contents);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "f7c78a6384a6b179d9f188e72298a51e67a966f5dc363d753c22ba7e8566a8f7"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'OnLocalChange' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/RdTextBuffer.cs",
      "language": "C#",
      "line": 223,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 221,
        "length": 6,
        "offset": 51,
        "surroundingCode": "      private State myState = State.Opened;\n\n      public readonly Signal<RdTextChange> OnLocalChange = new Signal<RdTextChange>();\n      public readonly Signal<RdTextChange> OnRemoteChange = new Signal<RdTextChange>();\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "f9fdc934b3efc1559b99e3f7ddf61c8ce5285f412a4e35c5428284e83de8fb3e"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteDateTime' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 125,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 123,
        "length": 6,
        "offset": 223,
        "surroundingCode": "    public static readonly CtxWriteDelegate<string?> WriteString = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<Guid> WriteGuid = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<DateTime> WriteDateTime = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<Uri> WriteUri = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<RdId> WriteRdId = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "fb08ebbe70fbb3d766cdbf0f70ed35fbfa6fb0b41e63f1e8a2d6e855a80b72e8"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Verbose' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogEx.cs",
      "language": "C#",
      "line": 261,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 259,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public static void Verbose(this ILog @this, Exception ex, string? message = null)\n    {\n      @this.Log(LoggingLevel.VERBOSE, message, ex);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "fd08d7d7b3236ce1413f869f0777706fe3be6ccd3fd75af079730f76f6268020"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'ExecuteOrTerminateOnFail' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 296,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 294,
        "length": 8,
        "offset": 88,
        "surroundingCode": "    [System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions]\n#endif\n    internal void ExecuteOrTerminateOnFail(Action<Lifetime>? atomicAction)\n    {\n      try"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "fe140f876c743363403e23081c15b8c68f32d52e6850cd0a46e3c454fc1be484"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'TypesCatalog' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFacade.cs",
      "language": "C#",
      "line": 12,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 10,
        "length": 6,
        "offset": 57,
        "surroundingCode": "    public ReflectionRdActivator Activator { get; }\n\n    public ITypesCatalog TypesCatalog { get; }\n\n    public IScalarSerializers ScalarSerializers { get; }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MemberCanBePrivate.Global"
  },
  "hash": "feb796ec840a31aba489dd60a18dd01f4cfb76b99f421513ae814409ec5ae0e9"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Reset' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ByteBufferAsyncProcessor.cs",
      "language": "C#",
      "line": 66,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 64,
        "length": 8,
        "offset": 66,
        "surroundingCode": "      public bool IsNotProcessed => SeqN == long.MaxValue;\n\n      internal void Reset()\n      {\n        SeqN = long.MaxValue;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Local"
  },
  "hash": "354ab370b2e1ca568f653c44611ff6f9e921cf93f3473f17b688ddc9252a151c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'Time' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/PriorityQueueTest.cs",
      "language": "C#",
      "line": 74,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 72,
        "length": 8,
        "offset": 61,
        "surroundingCode": "    {\n      internal string Name { get; private set; }\n      internal DateTime Time { get; private set; }\n\n      public Timed(string name, DateTime time)"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MemberCanBePrivate.Local"
  },
  "hash": "3be04cf6197a26c050bfcd8a6c95c5d44dea3cf96f85e8a0e65443b7682e622a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made private (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Property 'Lifetime' can be made private",
  "detailsInfo": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/WriteOnceProperty.cs",
      "language": "C#",
      "line": 76,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 74,
        "length": 6,
        "offset": 88,
        "surroundingCode": "    {\n      private readonly LifetimeDefinition myDef = new LifetimeDefinition();\n      public Lifetime Lifetime => myDef.Lifetime;\n      \n      public override void Advise(Lifetime lifetime, Action<T> handler)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBePrivate.Local"
  },
  "hash": "f36841d9f8681cb6b90726632f37211b1d22f272545f3cecbc7036982a052d34"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made protected (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Property 'Delegate' can be made protected",
  "detailsInfo": "Member can be made protected [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeProtected.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdDelegateBase.cs",
      "language": "C#",
      "line": 10,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 8,
        "length": 6,
        "offset": 13,
        "surroundingCode": "  {\n    \n    public T Delegate { get; }\n\n    public RdDelegateBase(T @delegate)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBeProtected.Global"
  },
  "hash": "0741f2d158b8ee058df7adf2fdf1ea6bc2166951d7ffa6949539873f7d79739c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made protected (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'RdDelegateBase' can be made protected",
  "detailsInfo": "Member can be made protected [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeProtected.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdDelegateBase.cs",
      "language": "C#",
      "line": 12,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 10,
        "length": 6,
        "offset": 36,
        "surroundingCode": "    public T Delegate { get; }\n\n    public RdDelegateBase(T @delegate)\n    {\n      Delegate = @delegate;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBeProtected.Global"
  },
  "hash": "074fc5e879db10ac3e7e8e295b7f00bb2918bf25d07fa5724c552decbe55e161"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made protected (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'SingletonLogFactory' can be made protected",
  "detailsInfo": "Member can be made protected [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeProtected.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Internal/SingletonLogFactory.cs",
      "language": "C#",
      "line": 10,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 8,
        "length": 6,
        "offset": 38,
        "surroundingCode": "    private readonly ILog myLog;\n\n    public SingletonLogFactory(ILog log)\n    {\n      myLog = log;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBeProtected.Global"
  },
  "hash": "1690e763f0d5f64e61f81429e0e192286a954ed912f126c9ae79e4677113eebe"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made protected (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Id' can be made protected",
  "detailsInfo": "Member can be made protected [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeProtected.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 34,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 32,
        "length": 6,
        "offset": 49,
        "surroundingCode": "      /// For logging\n      /// </summary>\n      public readonly string Id;\n\n      protected readonly ILog Log;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBeProtected.Global"
  },
  "hash": "3143e317d4aeebb3927db4954aec6e95be47320a8bb500317ea88e40c9addf59"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made protected (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'TaskSchedulerWrapper' can be made protected",
  "detailsInfo": "Member can be made protected [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeProtected.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/TaskSchedulerWrapper.cs",
      "language": "C#",
      "line": 16,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 14,
        "length": 6,
        "offset": 50,
        "surroundingCode": "    public bool OutOfOrderExecution { get; }\n\n    public TaskSchedulerWrapper(TaskScheduler scheduler, bool outOfOrderExecution)\n    {\n      myScheduler = scheduler;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBeProtected.Global"
  },
  "hash": "3dd71843a24ba9049458ae107c77f931382057af63d7521c818e4c87255ee75b"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made protected (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'IsLocalChange' can be made protected",
  "detailsInfo": "Member can be made protected [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeProtected.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdReactiveBase.cs",
      "language": "C#",
      "line": 69,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 67,
        "length": 6,
        "offset": 34,
        "surroundingCode": "    #region Local change\n    \n    public bool IsLocalChange { get; protected set; }\n    \n    protected internal struct LocalChangeCookie : IDisposable"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBeProtected.Global"
  },
  "hash": "7732e785d2e2a5a33512faab487876530e9578d7ff8ee67e45f5f0bd37802acd"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made protected (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'SingleThreadObjectPool' can be made protected",
  "detailsInfo": "Member can be made protected [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeProtected.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/SingleThreadObjectPool.cs",
      "language": "C#",
      "line": 20,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 18,
        "length": 6,
        "offset": 7,
        "surroundingCode": "  }\n\n  public SingleThreadObjectPool(int maxCapacity,  Func<T> factory, Action<T>? clear)\n  {\n    myMaxCapacity = maxCapacity;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MemberCanBeProtected.Global"
  },
  "hash": "7a58630a21fb72c7833531013f9b0fd68e26676972d3db8f2ba9e55a695b1142"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made protected (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'TimeoutMs' can be made protected",
  "detailsInfo": "Member can be made protected [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeProtected.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 26,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 24,
        "length": 6,
        "offset": 156,
        "surroundingCode": "      /// lead to exception thrown by <see cref=\"System.Net.Sockets.Socket.Receive(byte[],int,System.Net.Sockets.SocketFlags)\"/>\n      /// </summary>\n      public static int TimeoutMs = 500;\n\n      private const int ACK_MSG_LEN = -1;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBeProtected.Global"
  },
  "hash": "92a90651c04b9239c380296dde98a036c670da93bfa8df050abdf9f0c6fe49b9"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Member can be made protected (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'Socket' can be made protected",
  "detailsInfo": "Member can be made protected [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeProtected.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 53,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 51,
        "length": 6,
        "offset": 60,
        "surroundingCode": "      protected readonly object Lock = new object();\n\n      public Socket Socket { get; protected set; }\n\n      [PublicAPI]"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MemberCanBeProtected.Global"
  },
  "hash": "ac0414120f50d76a96cc1563318aeb88a0558dc2e4055bdd5940ca9450151cef"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Type check and casts can be merged",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Merge cast with type check",
  "detailsInfo": "Type check ('is' expression) and direct cast(s) after it can be merged [Learn more...](https://www.jetbrains.com/help/rider/MergeCastWithTypeCheck.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/TextBufferVersion.cs",
      "language": "C#",
      "line": 39,
      "offset": 18,
      "length": 2,
      "code": {
        "startLine": 37,
        "length": 2,
        "offset": 75,
        "surroundingCode": "    {\n      if (ReferenceEquals(null, obj)) return false;\n      return obj is TextBufferVersion && Equals((TextBufferVersion) obj);\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MergeCastWithTypeCheck"
  },
  "hash": "1d9837eace5ca99bad08fbb4f395e44fe63c91d8a953c3562e6326601dabdea9"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Type check and casts can be merged",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Merge cast with type check",
  "detailsInfo": "Type check ('is' expression) and direct cast(s) after it can be merged [Learn more...](https://www.jetbrains.com/help/rider/MergeCastWithTypeCheck.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 208,
      "offset": 21,
      "length": 2,
      "code": {
        "startLine": 206,
        "length": 2,
        "offset": 93,
        "surroundingCode": "        {\n          var value = propertyInfo.GetValue(o, new object[0]);\n          if (value is T)\n            result = (T) value;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MergeCastWithTypeCheck"
  },
  "hash": "6cb9acd51fa7717b6f2d8f4743ddf7967675044485d561bf2328ef6225e297ec"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Type check and casts can be merged",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Merge cast with type check",
  "detailsInfo": "Type check ('is' expression) and direct cast(s) after it can be merged [Learn more...](https://www.jetbrains.com/help/rider/MergeCastWithTypeCheck.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSecureString.cs",
      "language": "C#",
      "line": 32,
      "offset": 18,
      "length": 2,
      "code": {
        "startLine": 30,
        "length": 2,
        "offset": 75,
        "surroundingCode": "    {\n      if (ReferenceEquals(null, obj)) return false;\n      return obj is RdSecureString && Equals((RdSecureString) obj);\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MergeCastWithTypeCheck"
  },
  "hash": "d4cd0cc3223689f2cdc24164f9d2ff54197a7ff7fe0a4f8102117c2f37446c96"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Type check and casts can be merged",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Merge cast with type check",
  "detailsInfo": "Type check ('is' expression) and direct cast(s) after it can be merged [Learn more...](https://www.jetbrains.com/help/rider/MergeCastWithTypeCheck.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Maybe.cs",
      "language": "C#",
      "line": 53,
      "offset": 17,
      "length": 2,
      "code": {
        "startLine": 51,
        "length": 2,
        "offset": 66,
        "surroundingCode": "    public override bool Equals(object obj)\n    {\n      if (!(obj is Maybe<T>)) return false;\n      return Equals((Maybe<T>)obj);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MergeCastWithTypeCheck"
  },
  "hash": "e146e8038a3c9dc3eff6d901d72f463901669756491090dfff5ccabf60776701"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Type check and casts can be merged",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Merge cast with type check",
  "detailsInfo": "Type check ('is' expression) and direct cast(s) after it can be merged [Learn more...](https://www.jetbrains.com/help/rider/MergeCastWithTypeCheck.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/RdId.cs",
      "language": "C#",
      "line": 88,
      "offset": 18,
      "length": 2,
      "code": {
        "startLine": 86,
        "length": 2,
        "offset": 75,
        "surroundingCode": "    {\n      if (ReferenceEquals(null, obj)) return false;\n      return obj is RdId && Equals((RdId) obj);\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MergeCastWithTypeCheck"
  },
  "hash": "ff0a28c3c5f08676c3971f0697752428967c78a7507fead3284166813e6aa861"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge conditional ?: expression into conditional access",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Merge conditional expression",
  "detailsInfo": "Merge conditional expression (?: ternary operator) into conditional access expression [Learn more...](https://www.jetbrains.com/help/rider/MergeConditionalExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 151,
      "offset": 23,
      "length": 7,
      "code": {
        "startLine": 149,
        "length": 7,
        "offset": 184,
        "surroundingCode": "      {\n        var member = ownerObject.GetType().OptionalTypeInfo().GetField(memberName, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);\n        return member != null ? member.GetValue(ownerObject) : null;\n      }\n      catch (Exception)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MergeConditionalExpression"
  },
  "hash": "171a90c757ccb12a7f6772c3991ae691f442d09128ad24dd6b6d965f882eb391"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge conditional ?: expression into conditional access",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Merge conditional expression",
  "detailsInfo": "Merge conditional expression (?: ternary operator) into conditional access expression [Learn more...](https://www.jetbrains.com/help/rider/MergeConditionalExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 164,
      "offset": 23,
      "length": 7,
      "code": {
        "startLine": 162,
        "length": 7,
        "offset": 187,
        "surroundingCode": "      {\n        var member = ownerObject.GetType().OptionalTypeInfo().GetProperty(memberName, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);\n        return member != null ? member.GetValue(ownerObject, null) : null;\n      }\n      catch (Exception)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MergeConditionalExpression"
  },
  "hash": "1b8facb4a4ee269f7a1659c531f53da0bca42771388d97b73ecf66638fd13a52"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern/value checks into 'or'/'and' patterns",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Merge into logical pattern",
  "detailsInfo": "Merge sequential negated null/pattern/value checks into single logical 'or'/'and' pattern check",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 399,
      "offset": 35,
      "length": 2,
      "code": {
        "startLine": 397,
        "length": 2,
        "offset": 127,
        "surroundingCode": "      foreach (var member in t.GetFields(BindingFlags.Static | BindingFlags.Public))\n      {\n        if (member.Name == \"Read\" || member.Name == \"Write\")\n        {\n          return true;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MergeIntoLogicalPattern"
  },
  "hash": "0090b62e40ee2d92aba2e68887d4194828a496dd0e9f272ff17449b7d2f91c66"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern/value checks into 'or'/'and' patterns",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Merge into logical pattern",
  "detailsInfo": "Merge sequential negated null/pattern/value checks into single logical 'or'/'and' pattern check",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 413,
      "offset": 36,
      "length": 2,
      "code": {
        "startLine": 411,
        "length": 2,
        "offset": 129,
        "surroundingCode": "      foreach (var member in t.GetMethods(BindingFlags.Static | BindingFlags.Public))\n      {\n        if ((member.Name == \"Read\" || member.Name == \"Write\") &&\n            member.GetParameters() is var p && p.Length == 1 && p[0].ParameterType == typeof(UnsafeReader))\n        {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MergeIntoLogicalPattern"
  },
  "hash": "0ab4ce57ba9b1f199c90d07fbdbba1dce2d504fdf25548cb69f2966a7c66f5b5"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern/value checks into 'or'/'and' patterns",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Merge into logical pattern",
  "detailsInfo": "Merge sequential negated null/pattern/value checks into single logical 'or'/'and' pattern check",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 439,
      "offset": 36,
      "length": 2,
      "code": {
        "startLine": 437,
        "length": 2,
        "offset": 73,
        "surroundingCode": "        catch (Exception e)\n        {\n          if (e is SocketException || e is ObjectDisposedException)\n          {\n            SendBuffer.Pause(DisconnectedPauseReason);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MergeIntoLogicalPattern"
  },
  "hash": "4dd5815015cf9a1bbbe02066f4442dd34c14e90564adbeb9bdbfef15b6fed61f"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern/value checks into 'or'/'and' patterns",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Merge into logical pattern",
  "detailsInfo": "Merge sequential negated null/pattern/value checks into single logical 'or'/'and' pattern check",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 182,
      "offset": 51,
      "length": 2,
      "code": {
        "startLine": 180,
        "length": 2,
        "offset": 118,
        "surroundingCode": "            {\n              var errcode = socketEx.SocketErrorCode;\n              if (errcode == SocketError.TimedOut || errcode == SocketError.WouldBlock) continue; //expected\n            }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MergeIntoLogicalPattern"
  },
  "hash": "61506eba83140dd2f97abdf4960f1adc5de41201322dacb3ac6960b815c07873"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern/value checks into 'or'/'and' patterns",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Merge into logical pattern",
  "detailsInfo": "Merge sequential negated null/pattern/value checks into single logical 'or'/'and' pattern check",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/TestLogger.cs",
      "language": "C#",
      "line": 53,
      "offset": 48,
      "length": 2,
      "code": {
        "startLine": 51,
        "length": 2,
        "offset": 103,
        "surroundingCode": "      foreach (var rec in LogLog.StoredRecords)\n      {\n        if (rec.Severity == LoggingLevel.ERROR || rec.Severity == LoggingLevel.FATAL)\n        {\n          myExceptions.Add(new Exception(rec.Format(false)));"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MergeIntoLogicalPattern"
  },
  "hash": "729a70dfb9afef07a9a0c36f61dfec57cd4343012194cb5fc9b3427b90413449"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern/value checks into 'or'/'and' patterns",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Merge into logical pattern",
  "detailsInfo": "Merge sequential negated null/pattern/value checks into single logical 'or'/'and' pattern check",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LoggingLevel.cs",
      "language": "C#",
      "line": 45,
      "offset": 42,
      "length": 2,
      "code": {
        "startLine": 43,
        "length": 2,
        "offset": 110,
        "surroundingCode": "    public static bool IsSeriousError(this LoggingLevel level)\n    {\n      return level == LoggingLevel.FATAL || level == LoggingLevel.ERROR;\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MergeIntoLogicalPattern"
  },
  "hash": "730ba8f405374f495584eab19bfff9df2992517d076807f1b99404f0dfc4f2ee"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern/value checks into 'or'/'and' patterns",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Merge into logical pattern",
  "detailsInfo": "Merge sequential negated null/pattern/value checks into single logical 'or'/'and' pattern check",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdList.cs",
      "language": "C#",
      "line": 166,
      "offset": 47,
      "length": 2,
      "code": {
        "startLine": 164,
        "length": 2,
        "offset": 117,
        "surroundingCode": "      var kind = (AddUpdateRemove) opType;\n      V value = default(V);\n      var isPut = kind == AddUpdateRemove.Add || kind == AddUpdateRemove.Update;\n      if (isPut)\n        value = ReadValueDelegate(SerializationContext, stream);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MergeIntoLogicalPattern"
  },
  "hash": "88eff88956f16e65b7af4d634d09526ea95b8bde49cb77c1832da47b6ec4eefd"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern/value checks into 'or'/'and' patterns",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Merge into logical pattern",
  "detailsInfo": "Merge sequential negated null/pattern/value checks into single logical 'or'/'and' pattern check",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 696,
      "offset": 53,
      "length": 2,
      "code": {
        "startLine": 694,
        "length": 2,
        "offset": 117,
        "surroundingCode": "              {\n                var errcode = e.SocketErrorCode;\n                if (errcode == SocketError.TimedOut || errcode == SocketError.WouldBlock) continue; //expected, Linux\n\n                Log.Verbose(\"{0}: SocketException with message {1}\", Id, e.Message);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MergeIntoLogicalPattern"
  },
  "hash": "a8ceacd59cf93fc8125a4c51e7befc7270cfac59684052db82b19fd66b80623c"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern/value checks into 'or'/'and' patterns",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Merge into logical pattern",
  "detailsInfo": "Merge sequential negated null/pattern/value checks into single logical 'or'/'and' pattern check",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 186,
      "offset": 38,
      "length": 2,
      "code": {
        "startLine": 184,
        "length": 2,
        "offset": 39,
        "surroundingCode": "\n\n            if (e is SocketException || e is ObjectDisposedException)\n            {\n              Log.Verbose(\"Exception in SocketWire.Receive: {0} {1} {2}\", e.GetType().Name, Id, e.Message);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MergeIntoLogicalPattern"
  },
  "hash": "d13e5f5a31794816345bc3968f1ca16018d86aa58c4a4f708595db34aaa5cbe0"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge negated null/pattern checks into complex pattern",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Merge into pattern",
  "detailsInfo": "Merge sequential negated null/pattern checks into single recursive/logical pattern check",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/RdTextBuffer.cs",
      "language": "C#",
      "line": 131,
      "offset": 48,
      "length": 2,
      "code": {
        "startLine": 129,
        "length": 2,
        "offset": 82,
        "surroundingCode": "      BufferVersion = newVersion;\n\n      if (!IsMaster || myActiveSession == null || !myActiveSession.IsCommitting)\n      {\n        myTextChanged.SetValue(change);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MergeIntoNegatedPattern"
  },
  "hash": "cbce763f32ac1bb771e0e399b431e7f873dafbeffea9911577ff272f63560591"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern checks into complex pattern",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Merge into pattern",
  "detailsInfo": "Merge sequential null/pattern checks into single recursive/logical pattern check",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/NativeMemoryPool.cs",
      "language": "C#",
      "line": 30,
      "offset": 70,
      "length": 2,
      "code": {
        "startLine": 28,
        "length": 2,
        "offset": 129,
        "surroundingCode": "    private static readonly object ourLock = new object();\n\n    public static int SampleUsed() => ourBlocks.Count(b => b != null && b.IsUsed);\n\n    public static int SampleCount() => ourBlocks.Count(b => b != null);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MergeIntoPattern"
  },
  "hash": "087038747867b177bef8ad747ad872e5542cfa08f87de989eccf125b3ca67a5b"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern checks into complex pattern",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Merge into pattern",
  "detailsInfo": "Merge sequential null/pattern checks into single recursive/logical pattern check",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdExtBase.cs",
      "language": "C#",
      "line": 107,
      "offset": 38,
      "length": 2,
      "code": {
        "startLine": 105,
        "length": 2,
        "offset": 132,
        "surroundingCode": "        base.Proto.Scheduler.Queue(() => { base.Proto.OutOfSyncModels.Add(this); } );\n        \n        if (base.Proto is Protocol p && p.ThrowErrorOnOutOfSyncModels)\n          Assertion.Fail($\"{this} : SerializationHash doesn't match to counterpart: maybe you forgot to generate models?\" +\n                         $\"Our: `${SerializationHash}` counterpart: {counterpartSerializationHash}\");"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MergeIntoPattern"
  },
  "hash": "119a4c7b71c858ebb6fabc9a9374d92eba62eb9f449f9d64d21fa855323a0197"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern checks into complex pattern",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Merge into pattern",
  "detailsInfo": "Merge sequential null/pattern checks into single recursive/logical pattern check",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/RdTextBuffer.cs",
      "language": "C#",
      "line": 26,
      "offset": 57,
      "length": 2,
      "code": {
        "startLine": 24,
        "length": 2,
        "offset": 111,
        "surroundingCode": "    private TextBufferTypingSession? myActiveSession;\n\n    public bool IsCommitting => myActiveSession != null && myActiveSession.IsCommitting;\n\n    public TextBufferVersion BufferVersion { get; private set; }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MergeIntoPattern"
  },
  "hash": "32d5ddb75e44fb581a3f5e2cf0e8c189017444020d27dbc1a189119de0251de2"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern checks into complex pattern",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Merge into pattern",
  "detailsInfo": "Merge sequential null/pattern checks into single recursive/logical pattern check",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 190,
      "offset": 28,
      "length": 2,
      "code": {
        "startLine": 188,
        "length": 2,
        "offset": 50,
        "surroundingCode": "        return false;\n\n      return (type.IsClass && !type.IsSealed) || type.IsInterface;\n      //&& typeof(RdReflectionBindableBase).IsAssignableFrom(typeInfo);\n      //&& ReflectionSerializerVerifier.HasRdModelAttribute(typeInfo);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MergeIntoPattern"
  },
  "hash": "4f50c0ae58045bb61dc07022880f99b42361d90550f679132300f06d8b603f23"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern checks into complex pattern",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Merge into pattern",
  "detailsInfo": "Merge sequential null/pattern checks into single recursive/logical pattern check",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IRdReactive.cs",
      "language": "C#",
      "line": 38,
      "offset": 32,
      "length": 2,
      "code": {
        "startLine": 36,
        "length": 2,
        "offset": 110,
        "surroundingCode": "    public static T Static<T>(this T thIs, int id) where T : IRdBindable\n    {\n      Assertion.Require(id > 0 && id < RdId.MaxStaticId, \"id > 0 && id < RdId.MaxStaticId\");\n      return thIs.WithId(new RdId(id));\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MergeIntoPattern"
  },
  "hash": "528f1d5e21447fe86c2bf1ad64050d101cf1360fbe469d97e4479c4cdccea352"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern checks into complex pattern",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Merge into pattern",
  "detailsInfo": "Merge sequential null/pattern checks into single recursive/logical pattern check",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 444,
      "offset": 81,
      "length": 2,
      "code": {
        "startLine": 442,
        "length": 2,
        "offset": 145,
        "surroundingCode": "    public static Type? GetRpcInterface(TypeInfo typeInfo)\n    {\n      if (typeInfo.GetCustomAttribute<RdExtAttribute>() is RdExtAttribute rdExt && rdExt.RdRpcInterface != null)\n        return rdExt.RdRpcInterface;\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MergeIntoPattern"
  },
  "hash": "5ba27631048a8096dc26d41676541a5d509d2e112f92b338dd3e9a6bff3ff306"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern checks into complex pattern",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Merge into pattern",
  "detailsInfo": "Merge sequential null/pattern checks into single recursive/logical pattern check",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 162,
      "offset": 35,
      "length": 2,
      "code": {
        "startLine": 160,
        "length": 2,
        "offset": 119,
        "surroundingCode": "    private static bool IsNullable(TypeInfo typeInfo, Func<Type, bool> filter)\n    {\n      return typeInfo.IsValueType &&\n             typeInfo.IsGenericType &&\n             typeInfo.GetGenericTypeDefinition() == typeof(Nullable<>) &&"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MergeIntoPattern"
  },
  "hash": "6d7ca4caacb665eb42ae0b7729816e8fdc0350cfe73edc1a4b140627609b0c2d"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern checks into complex pattern",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Merge into pattern",
  "detailsInfo": "Merge sequential null/pattern checks into single recursive/logical pattern check",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ExceptionEx.cs",
      "language": "C#",
      "line": 23,
      "offset": 51,
      "length": 4,
      "code": {
        "startLine": 21,
        "length": 4,
        "offset": 134,
        "surroundingCode": "                case OperationCanceledException _:\n                    return true;\n                case AggregateException aggregate when aggregate.InnerExceptions.Count == 0:\n                    return false;\n                case AggregateException aggregate:"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MergeIntoPattern"
  },
  "hash": "71d2d0974fdc785a1d9c5b9f902c57bee90c39ab3bc126c39ceed37353e37875"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern checks into complex pattern",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Merge into pattern",
  "detailsInfo": "Merge sequential null/pattern checks into single recursive/logical pattern check",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/SerializerReflectionUtil.cs",
      "language": "C#",
      "line": 162,
      "offset": 46,
      "length": 2,
      "code": {
        "startLine": 160,
        "length": 2,
        "offset": 59,
        "surroundingCode": "\n        if (\n          mi.MemberType == MemberTypes.Field &&\n          (mi.DeclaringType != null && !mi.DeclaringType.GetTypeInfo().IsAssignableFrom(baseType)) &&\n          mi.GetCustomAttribute<NonSerializedAttribute>() == null &&"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MergeIntoPattern"
  },
  "hash": "74879f12504ea15841e03785ef8dafe1ee80cacdb10b9f3e9e3301af7d01284e"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern checks into complex pattern",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Merge into pattern",
  "detailsInfo": "Merge sequential null/pattern checks into single recursive/logical pattern check",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 599,
      "offset": 55,
      "length": 2,
      "code": {
        "startLine": 597,
        "length": 2,
        "offset": 143,
        "surroundingCode": "          {\n            //can't clear Canceling because TryAdd works in Canceling state \n            if (resources[i] is LifetimeDefinition ld && ld.Status >= LifetimeStatus.Terminating)\n              resources[i] = null;\n            else"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MergeIntoPattern"
  },
  "hash": "82a0365674d8d23a22515548f01f6d516d2b25a5790a975a7565110845a7015c"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern checks into complex pattern",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Merge into pattern",
  "detailsInfo": "Merge sequential null/pattern checks into single recursive/logical pattern check",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ReactiveEx.cs",
      "language": "C#",
      "line": 298,
      "offset": 32,
      "length": 2,
      "code": {
        "startLine": 296,
        "length": 2,
        "offset": 106,
        "surroundingCode": "    public static bool HasTrueValue(this IReadonlyProperty<bool> me)\n    {\n      return me.Maybe.HasValue && me.Maybe.Value;\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MergeIntoPattern"
  },
  "hash": "9098148052a9c8378f6f6fdd87ecb7dd230435cf095160debb95c432c508a61a"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern checks into complex pattern",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Merge into pattern",
  "detailsInfo": "Merge sequential null/pattern checks into single recursive/logical pattern check",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/RName.cs",
      "language": "C#",
      "line": 40,
      "offset": 33,
      "length": 2,
      "code": {
        "startLine": 38,
        "length": 2,
        "offset": 119,
        "surroundingCode": "    {\n      if (localName == null) throw new ArgumentNullException(nameof(localName));\n      if (localName is string s && s.Length == 0) \n        return this; //special case for empty string\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MergeIntoPattern"
  },
  "hash": "91fe1eea192399c3d386cdf5fd74b91372b10e8103c0f4d52d450b5cbcb38c5f"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern checks into complex pattern",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Merge into pattern",
  "detailsInfo": "Merge sequential null/pattern checks into single recursive/logical pattern check",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 190,
      "offset": 34,
      "length": 2,
      "code": {
        "startLine": 188,
        "length": 2,
        "offset": 189,
        "surroundingCode": "               (genericDefinition == typeof(RdCall<,>) && IsScalar(arguments[0]) /*&& IsScalar(arguments[1])*/) ||\n               // Custom classes support\n               (typeInfo.IsClass && typeInfo.IsSealed && typeof(IRdBindable).IsAssignableFrom(typeInfo));\n      }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MergeIntoPattern"
  },
  "hash": "a97b62401aae6b2371bf2c6560da59de79a98c3a49a0e3ea619049449f9f0912"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern checks into complex pattern",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Merge into pattern",
  "detailsInfo": "Merge sequential null/pattern checks into single recursive/logical pattern check",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/RdTextBuffer.cs",
      "language": "C#",
      "line": 150,
      "offset": 47,
      "length": 2,
      "code": {
        "startLine": 148,
        "length": 2,
        "offset": 107,
        "surroundingCode": "      if (Delegate.IsBound) Proto.Scheduler.AssertThread();\n\n      if (IsMaster && myActiveSession != null && myActiveSession.IsCommitting)\n      {\n        return;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MergeIntoPattern"
  },
  "hash": "be11b435fb5a3eeef429bb0d0bd210ed3d29c97b49db833ec0c0cda1ae5ef00b"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern checks into complex pattern",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Merge into pattern",
  "detailsInfo": "Merge sequential null/pattern checks into single recursive/logical pattern check",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SchedulerWrapper.cs",
      "language": "C#",
      "line": 26,
      "offset": 39,
      "length": 2,
      "code": {
        "startLine": 24,
        "length": 2,
        "offset": 134,
        "surroundingCode": "    protected override bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued)\n    {\n      return myRealScheduler.IsActive && myRealScheduler.OutOfOrderExecution && TryExecuteTaskWithContext(task);\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MergeIntoPattern"
  },
  "hash": "bf5c7978775a44aa52c5f13b41f21a952088943f4dec58bab3126d481cf4a1f8"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern checks into complex pattern",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Merge into pattern",
  "detailsInfo": "Merge sequential null/pattern checks into single recursive/logical pattern check",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 392,
      "offset": 31,
      "length": 2,
      "code": {
        "startLine": 390,
        "length": 2,
        "offset": 100,
        "surroundingCode": "    {\n      var rdScalar = t.GetCustomAttribute<RdScalarAttribute>();\n      return rdScalar != null && rdScalar.Marshaller != null;\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MergeIntoPattern"
  },
  "hash": "d2fa566473a07e9cce2a6463b0a052e8550c82b3c65f76de4d5464b656b1f42f"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern checks into complex pattern",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Merge into pattern",
  "detailsInfo": "Merge sequential null/pattern checks into single recursive/logical pattern check",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 414,
      "offset": 45,
      "length": 2,
      "code": {
        "startLine": 412,
        "length": 2,
        "offset": 117,
        "surroundingCode": "      {\n        if ((member.Name == \"Read\" || member.Name == \"Write\") &&\n            member.GetParameters() is var p && p.Length == 1 && p[0].ParameterType == typeof(UnsafeReader))\n        {\n          return true;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MergeIntoPattern"
  },
  "hash": "e16db99187a16965a5596b130831f8f68a2b72c3eba95c381a7fbd3641ceca7b"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Merge null/pattern checks into complex pattern",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Merge into pattern",
  "detailsInfo": "Merge sequential null/pattern checks into single recursive/logical pattern check",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 44,
      "offset": 36,
      "length": 4,
      "code": {
        "startLine": 42,
        "length": 4,
        "offset": 61,
        "surroundingCode": "      switch (mi)\n      {\n        case PropertyInfo propInfo when propInfo.CanWrite:\n          return (instance, val) => propInfo.SetValue(instance, val, null);\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MergeIntoPattern"
  },
  "hash": "f5fd8cef1133d4c8755d17327120605c08352acf45126d2e7b4455e0622cdb6a"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Method with optional or 'params' parameter is hidden by overload",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Method with optional parameter is hidden by overload",
  "detailsInfo": "Method with optional or 'params' parameter is hidden by overload",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogErrorInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 39,
      "offset": 46,
      "length": 17,
      "code": {
        "startLine": 37,
        "length": 17,
        "offset": 130,
        "surroundingCode": "  \n  public void AppendFormatted(string? value) => myHandler.AppendFormatted(value);\n  public void AppendFormatted(string? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);\n  \n  public void AppendFormatted(object? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MethodOverloadWithOptionalParameter"
  },
  "hash": "2af36a19add97b56ad5cac5dacc5c9773bffdae052065bed35efef409fd22c20"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Method with optional or 'params' parameter is hidden by overload",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Method with optional parameter is hidden by overload",
  "detailsInfo": "Method with optional or 'params' parameter is hidden by overload",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetNotNullConditionalInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 39,
      "offset": 46,
      "length": 17,
      "code": {
        "startLine": 37,
        "length": 17,
        "offset": 130,
        "surroundingCode": "  \n  public void AppendFormatted(string? value) => myHandler.AppendFormatted(value);\n  public void AppendFormatted(string? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);\n  \n  public void AppendFormatted(object? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MethodOverloadWithOptionalParameter"
  },
  "hash": "3d75dbeafbfb74abc0f5a0a14d6fec253ca15b9cc1ec027a1e8a09b19fdc239c"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Method with optional or 'params' parameter is hidden by overload",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Method with optional parameter is hidden by overload",
  "detailsInfo": "Method with optional or 'params' parameter is hidden by overload",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogLevelInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 40,
      "offset": 46,
      "length": 17,
      "code": {
        "startLine": 38,
        "length": 17,
        "offset": 128,
        "surroundingCode": "\n  public void AppendFormatted(string? value) => myHandler.AppendFormatted(value);\n  public void AppendFormatted(string? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);\n\n  public void AppendFormatted(object? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MethodOverloadWithOptionalParameter"
  },
  "hash": "6a6d7e4067d95669670292661db1943701dfa77bf439f40721fead62fa2b464b"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Method with optional or 'params' parameter is hidden by overload",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Method with optional parameter is hidden by overload",
  "detailsInfo": "Method with optional or 'params' parameter is hidden by overload",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogInfoInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 39,
      "offset": 46,
      "length": 17,
      "code": {
        "startLine": 37,
        "length": 17,
        "offset": 130,
        "surroundingCode": "  \n  public void AppendFormatted(string? value) => myHandler.AppendFormatted(value);\n  public void AppendFormatted(string? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);\n  \n  public void AppendFormatted(object? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MethodOverloadWithOptionalParameter"
  },
  "hash": "96d2ec8490112f374113287c37abce4430d022314eefa2f9d5a3634084f84aee"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Method with optional or 'params' parameter is hidden by overload",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Method with optional parameter is hidden by overload",
  "detailsInfo": "Method with optional or 'params' parameter is hidden by overload",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogVerboseInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 39,
      "offset": 46,
      "length": 17,
      "code": {
        "startLine": 37,
        "length": 17,
        "offset": 130,
        "surroundingCode": "  \n  public void AppendFormatted(string? value) => myHandler.AppendFormatted(value);\n  public void AppendFormatted(string? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);\n  \n  public void AppendFormatted(object? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MethodOverloadWithOptionalParameter"
  },
  "hash": "b7fca6a69c53bc06b5db5147578f97f05f523eb5f335f1f6df3edb5c25758e27"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Method with optional or 'params' parameter is hidden by overload",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Method with optional parameter is hidden by overload",
  "detailsInfo": "Method with optional or 'params' parameter is hidden by overload",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogTraceInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 39,
      "offset": 46,
      "length": 17,
      "code": {
        "startLine": 37,
        "length": 17,
        "offset": 130,
        "surroundingCode": "  \n  public void AppendFormatted(string? value) => myHandler.AppendFormatted(value);\n  public void AppendFormatted(string? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);\n  \n  public void AppendFormatted(object? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MethodOverloadWithOptionalParameter"
  },
  "hash": "becdae0197de7cf473cd77f71d6bb4ca7ea819c4a570faef3af2c7a51f87f14a"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Method with optional or 'params' parameter is hidden by overload",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Method with optional parameter is hidden by overload",
  "detailsInfo": "Method with optional or 'params' parameter is hidden by overload",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogWarnInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 39,
      "offset": 46,
      "length": 17,
      "code": {
        "startLine": 37,
        "length": 17,
        "offset": 130,
        "surroundingCode": "  \n  public void AppendFormatted(string? value) => myHandler.AppendFormatted(value);\n  public void AppendFormatted(string? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);\n  \n  public void AppendFormatted(object? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MethodOverloadWithOptionalParameter"
  },
  "hash": "f8361d4a3e9d9f3c3127b55958a4b6a66a2d0a20f8ac57d457fb7f4ec6cda3bb"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Method supports cancellation",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method has overload with cancellation support",
  "detailsInfo": "Method has overload with 'CancellationToken'",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 89,
      "offset": 67,
      "length": 4,
      "code": {
        "startLine": 87,
        "length": 4,
        "offset": 92,
        "surroundingCode": "    #region Blocking API\n\n    [PublicAPI] public void SendBlocking(T msg) => SendAsync(msg).Wait();\n    [PublicAPI] public T ReceiveBlocking() => ReceiveAsync().Result;\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MethodSupportsCancellation"
  },
  "hash": "ca7394072f7485c31c8712b3c44acf9635f5cc0e5d16b2ac1ae40aa042870038"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Method supports cancellation",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method has overload with cancellation support",
  "detailsInfo": "Method has overload with 'CancellationToken'",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/BlockingPriorityQueueTest.cs",
      "language": "C#",
      "line": 52,
      "offset": 35,
      "length": 8,
      "code": {
        "startLine": 50,
        "length": 8,
        "offset": 118,
        "surroundingCode": "            var tasks = Enumerable.Range(0, threadsCount).Select(x =>\n            {\n              return Task.Factory.StartNew(() =>\n              {\n                Interlocked.Increment(ref currentCount);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MethodSupportsCancellation"
  },
  "hash": "e8823c90509c08d68f9954f426465f9cc9af0a2762d08a928419d73958d5a71a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Method supports cancellation",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method has overload with cancellation support",
  "detailsInfo": "Method has overload with 'CancellationToken'",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 228,
      "offset": 14,
      "length": 4,
      "code": {
        "startLine": 226,
        "length": 4,
        "offset": 26,
        "surroundingCode": "        });\n\n        task.Wait();\n      }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MethodSupportsCancellation"
  },
  "hash": "eb779525643416ff135364373a85dff46c3a1ec34c4d37d0bed939a556bdfa6a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'Reg' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarIntrinsicTests.cs",
      "language": "C#",
      "line": 63,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 61,
        "length": 3,
        "offset": 61,
        "surroundingCode": "    public void TestExternalSerialization()\n    {\n      void Reg(ISerializersContainer cache)\n      {\n        cache.Register("
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "06d24d18f6e72804ca5dcd508e8613974153f6687ec04fb97768231c02444ab4"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'Inner' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 360,
      "offset": 12,
      "length": 5,
      "code": {
        "startLine": 358,
        "length": 5,
        "offset": 36,
        "surroundingCode": "    {\n      var log = 0;\n      void Inner(Action action)\n      {\n        def = new LifetimeDefinition();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "0a424161310c7caf8dc014dbf28b4831f7165d89da94d9bc7666259aa65739dd"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'TryGetTypeMapping' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 298,
      "offset": 12,
      "length": 17,
      "code": {
        "startLine": 296,
        "length": 17,
        "offset": 94,
        "surroundingCode": "    public void Write<T>(SerializationCtx ctx, UnsafeWriter writer, T value)\n    {\n      bool TryGetTypeMapping(Type type1, out RdId rdId)\n      {\n        lock (myLock)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "0de982fef3b31801f250a17df570a8c4aa70fab2439a15e16195c14e1bd7a4bc"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'WriterDelegate' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 520,
      "offset": 12,
      "length": 14,
      "code": {
        "startLine": 518,
        "length": 14,
        "offset": 70,
        "surroundingCode": "      var ctxValueWriteDelegate = valueSerializer.Writer;\n\n      void WriterDelegate(SerializationCtx ctx, UnsafeWriter writer, T value) => \n        writeMethod.Invoke(null, new object?[] {ctx, writer, value});\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "10a96d3dc01ae4f41132de4433a955c054815f425b717455616fcc2f8cf0f6fb"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'CheckerProc' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1278,
      "offset": 12,
      "length": 11,
      "code": {
        "startLine": 1276,
        "length": 11,
        "offset": 21,
        "surroundingCode": "      );\n\n      void CheckerProc()\n      {\n        var cache = def;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "15a7f86261fe911a2ca93907d3e277097b27aee1d41a7c93b9498a26b47cefbd"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'Inner' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 322,
      "offset": 12,
      "length": 5,
      "code": {
        "startLine": 320,
        "length": 5,
        "offset": 53,
        "surroundingCode": "      var log = 0;\n      def.Terminate();\n      void Inner(Action action)\n      {\n        log = 0;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "1aa5eeb9b930753031a671467f5a538a7cb84c0a454e1f9006894c378bef69a0"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'ReaderDelegate' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 501,
      "offset": 9,
      "length": 14,
      "code": {
        "startLine": 499,
        "length": 14,
        "offset": 79,
        "surroundingCode": "        writeMethod.Invoke(null, new object?[] {ctx, writer, value});\n\n      T ReaderDelegate(SerializationCtx ctx, UnsafeReader reader)\n      {\n        return (T)readMethod.Invoke(null,"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "214f49144a5262187a6eab050ab542975875490ca201800d1866386600b52efd"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'AssertFail' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Core/TestResult.cs",
      "language": "C#",
      "line": 95,
      "offset": 12,
      "length": 10,
      "code": {
        "startLine": 93,
        "length": 10,
        "offset": 93,
        "surroundingCode": "    {\n      // ReSharper disable once ParameterOnlyUsedForPreconditionCheck.Local\n      void AssertFail(Result<Nothing> res)\n      {\n        Assert.True(res.FailedNotCanceled);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "28e1cc131dba675938dd8b8e6a300c868921b8c268e21f8a84fdad0ec4fc8efe"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'InnerSuccess' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 692,
      "offset": 12,
      "length": 12,
      "code": {
        "startLine": 690,
        "length": 12,
        "offset": 25,
        "surroundingCode": "      \n      \n      void InnerSuccess<T>(Func<bool, Result<T>> action)\n      {\n        log = 0;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "2d4ebe409fdb0ce46348aa5eba3beb36f9334f57ad9fb9265bb9c10bee883556"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'WriterDelegate' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 498,
      "offset": 12,
      "length": 14,
      "code": {
        "startLine": 496,
        "length": 14,
        "offset": 72,
        "surroundingCode": "      var ctxKeyWriteDelegate = keySerializer.Writer;\n      \n      void WriterDelegate(SerializationCtx ctx, UnsafeWriter writer, T value) => \n        writeMethod.Invoke(null, new object?[] {ctx, writer, value});\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "394d5ff9fe6165da5766e6f34317703060d600b1dca8d9deda4b56cbd68e859e"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'IsPackagesConfig' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 91,
      "offset": 12,
      "length": 16,
      "code": {
        "startLine": 89,
        "length": 16,
        "offset": 13,
        "surroundingCode": "\n\n      bool IsPackagesConfig(string file) => file.EndsWith(\"packages.config\", StringComparison.OrdinalIgnoreCase);\n      bool IsProj(string file) => file.EndsWith(\".csproj\", StringComparison.OrdinalIgnoreCase) \n                                  || file.EndsWith(\".vbproj\", StringComparison.OrdinalIgnoreCase)"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "3df33edf03bdfadb61d75100bb4b7a9d951be83b42153d50e1e97a6a954bf166"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'Inner' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 524,
      "offset": 12,
      "length": 5,
      "code": {
        "startLine": 522,
        "length": 5,
        "offset": 37,
        "surroundingCode": "      \n      var log = 0;\n      void Inner(Action action)\n      {\n        log = 0;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "43b12acf34dc845a2009b7e3a5dc1f5bfe2147e6643ab5088a1a185d70f7f3f0"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'Inner' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 451,
      "offset": 12,
      "length": 5,
      "code": {
        "startLine": 449,
        "length": 5,
        "offset": 37,
        "surroundingCode": "      \n      var log = 0;\n      void Inner(Action action)\n      {\n        log = 0;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "5805a5772563099b5dc0aee9aa2cfb127cb9cf7e50edb5990cc786fb804239a4"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'ReaderDelegate' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 553,
      "offset": 10,
      "length": 14,
      "code": {
        "startLine": 551,
        "length": 14,
        "offset": 18,
        "surroundingCode": "      }\n\n      T? ReaderDelegate(SerializationCtx ctx, UnsafeReader reader)\n      {\n        if (!typeof(T).IsValueType && !reader.ReadNullness())"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "5fe47f16a6ab81b7269b456a3f955c7ba7ab3d5708e4d1e072c5ff166ea378ce"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'Ack' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 143,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 141,
        "length": 3,
        "offset": 34,
        "surroundingCode": "      buffer.Start();\n\n      void Ack(long seqn)\n      {\n        buffer?.Acknowledge(seqn);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "663c9e1ec8d35ea2df03facf67990cdeeb55fda3b043549f018a65f69d97a2b8"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'FilesToProcess' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 96,
      "offset": 27,
      "length": 14,
      "code": {
        "startLine": 94,
        "length": 14,
        "offset": 133,
        "surroundingCode": "                                  || file.EndsWith(\".vcxproj\", StringComparison.OrdinalIgnoreCase);\n      \n      IEnumerable<string> FilesToProcess(string folder)\n      {\n        if (folder.EndsWith(\"data\") && folder.Replace('\\\\','/').EndsWith(\"test/data\"))"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "66f8d43f7a763a2b5a44176e35bc02b1064e8daa380fd60f30f6aac970adcde3"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'IsProj' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 92,
      "offset": 12,
      "length": 6,
      "code": {
        "startLine": 90,
        "length": 6,
        "offset": 126,
        "surroundingCode": "\n      bool IsPackagesConfig(string file) => file.EndsWith(\"packages.config\", StringComparison.OrdinalIgnoreCase);\n      bool IsProj(string file) => file.EndsWith(\".csproj\", StringComparison.OrdinalIgnoreCase) \n                                  || file.EndsWith(\".vbproj\", StringComparison.OrdinalIgnoreCase)\n                                  || file.EndsWith(\".vcxproj\", StringComparison.OrdinalIgnoreCase);"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "6abe82258ca83a607dadb4f5a79f2e47edef79f3bb57ae696c591311ac723585"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'Present' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Types.cs",
      "language": "C#",
      "line": 58,
      "offset": 15,
      "length": 7,
      "code": {
        "startLine": 56,
        "length": 7,
        "offset": 61,
        "surroundingCode": "    {\n      [return: NotNullIfNotNull(\"type\")]\n      string? Present(Type? type, Type[]? genericArguments = null)\n      {\n        if (type == null)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "6e6fcead2ece9f9fa9296fb410ac5a39906ae3ea0964a1d4575788bbc270ccff"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'ReaderDelegate' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 485,
      "offset": 9,
      "length": 14,
      "code": {
        "startLine": 483,
        "length": 14,
        "offset": 83,
        "surroundingCode": "        writeMethod.Invoke(null, new[] { ctx, writer, (object?)value, });\n\n      T ReaderDelegate(SerializationCtx ctx, UnsafeReader reader) =>\n        (T) readMethod.Invoke(null, new object[] { ctx, reader });\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "6ffaefcb14e975e7cde675065c7be1cda6794af1554aa7f01af5dd132d6aa2d3"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'GetFieldSetter' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 35,
      "offset": 24,
      "length": 14,
      "code": {
        "startLine": 33,
        "length": 14,
        "offset": 93,
        "surroundingCode": "    public static SetValueDelegate? TryGetSetter(MemberInfo mi)\n    {\n      SetValueDelegate GetFieldSetter(FieldInfo backingField)\n      {\n        // It is possible to mutate readonly fields in current CLI without any warranty."
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "7551987d739f37c5d593e00e2eac93fea69aabe2c19fb6b37163b6828b2ee98c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'SetSocketOptions' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SocketProxy.cs",
      "language": "C#",
      "line": 70,
      "offset": 12,
      "length": 16,
      "code": {
        "startLine": 68,
        "length": 16,
        "offset": 47,
        "surroundingCode": "    public async void Start()\n    {\n      void SetSocketOptions(TcpClient client) => client.NoDelay = true;\n\n      while (myLifetime.IsAlive)"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "7a4c0e5eb055b7ca4ab18cb24559a28211d76289e74eee3ad8ca39efbe2b51d8"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'UpdateCsproj' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 136,
      "offset": 12,
      "length": 12,
      "code": {
        "startLine": 134,
        "length": 12,
        "offset": 20,
        "surroundingCode": "      }\n\n      void UpdateCsproj(string file)\n      {\n        Console.WriteLine($\"Updating: {file}\");"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "8004add0a5e14226e3159839e7feb9637ce69482d5b05eb5aec6113204ba47da"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'WriterDelegate' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 482,
      "offset": 12,
      "length": 14,
      "code": {
        "startLine": 480,
        "length": 14,
        "offset": 124,
        "surroundingCode": "    private static SerializerPair CreateFromMethodsImpl0<T>(MethodInfo readMethod, MethodInfo writeMethod)\n    {\n      void WriterDelegate(SerializationCtx ctx, UnsafeWriter writer, T value) =>\n        writeMethod.Invoke(null, new[] { ctx, writer, (object?)value, });\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "83409ffcaae049a4e09305e7ec38091fbdba09d4efe8ad46eaed60e4f0860f00"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'OnTimedEvent' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 116,
      "offset": 14,
      "length": 12,
      "code": {
        "startLine": 114,
        "length": 12,
        "offset": 111,
        "surroundingCode": "      {\n        var timer = new Timer(HeartBeatInterval.TotalMilliseconds) { AutoReset = false };\n        void OnTimedEvent(object sender, ElapsedEventArgs e)\n        {\n          Ping();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "9284981c4b1571bece239f0fa150ae193b7253fdba54463ef4aef0b074bb6e0d"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'WriterDelegate' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 546,
      "offset": 12,
      "length": 14,
      "code": {
        "startLine": 544,
        "length": 14,
        "offset": 146,
        "surroundingCode": "      Assertion.Assert(!writeMethod.IsStatic, $\"Read method should not be static ({readMethod.DeclaringType.ToString(true)})\");\n      \n      void WriterDelegate(SerializationCtx ctx, UnsafeWriter writer, T value)\n      {\n        if (!typeof(T).IsValueType && !writer.WriteNullness(value as object))"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "93196f21c66aae1c47aff675cb6a464f6c1de9f16460da3539ba157c009b642f"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'Rec' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 767,
      "offset": 14,
      "length": 3,
      "code": {
        "startLine": 765,
        "length": 3,
        "offset": 82,
        "surroundingCode": "        LocalPort = ((IPEndPoint) serverSocket.LocalEndPoint).Port;\n\n        void Rec()\n        {\n          lifetime.TryExecute(() =>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "9d3f808870aa6c0f30523780936f92caa851afdeb98f1a49aed19746ca33816a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'Root' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTest.cs",
      "language": "C#",
      "line": 217,
      "offset": 26,
      "length": 4,
      "code": {
        "startLine": 215,
        "length": 4,
        "offset": 106,
        "surroundingCode": "\n      IProtocol Proto(bool server) => server ? ServerProtocol : ClientProtocol;\n      InternRoot<object> Root(bool server) => server ? rootServer : rootClient;\n\n      var firstSendBytes = MeasureBytes(Proto(firstSendServer), () => { Root(firstSendServer).Intern(stringToSend); });"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "9d928d11011b277c65f5a71f8c50a082fb53b5a26cd52fc4625733e485c18c1c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'TerminateLifetimeDefinition' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/SequentialLifetimes.cs",
      "language": "C#",
      "line": 86,
      "offset": 12,
      "length": 27,
      "code": {
        "startLine": 84,
        "length": 27,
        "offset": 173,
        "surroundingCode": "    private LifetimeDefinition TrySetNewAndTerminateOld(LifetimeDefinition newLifetimeDefinition, Action<LifetimeDefinition>? actionWithNewLifetime = null)\n    {\n      void TerminateLifetimeDefinition(LifetimeDefinition lifetimeDefinition)\n      {\n        lifetimeDefinition.AllowTerminationUnderExecution = true;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "a391a98696f7828c26a5ba9eb0652b4acadb22da51dc316418e06f4b645c7951"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'UpdatePackagesConfig' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 122,
      "offset": 12,
      "length": 20,
      "code": {
        "startLine": 120,
        "length": 20,
        "offset": 20,
        "surroundingCode": "      }\n\n      void UpdatePackagesConfig(string file)\n      {\n        Console.WriteLine($\"Updating: {file}\");"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "a7c9aefb6fa90cd98a4183c8d6f86e79dba109d977ab65ccadad5cd8f3c772fc"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'Inner' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 282,
      "offset": 12,
      "length": 5,
      "code": {
        "startLine": 280,
        "length": 5,
        "offset": 31,
        "surroundingCode": "\n      var log = 0;\n      void Inner(Action action)\n      {\n        log = 0;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "aa1ddf5eb4991b888e3fe3311c96312dddf5f0f38f77ab774ddde8ac10004b4e"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'InnerFail' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 708,
      "offset": 12,
      "length": 9,
      "code": {
        "startLine": 706,
        "length": 9,
        "offset": 26,
        "surroundingCode": "      }\n      \n      void InnerFail<T>(Func<bool, Result<T>> action)\n      {\n        log = 0;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "aed5c0547242085d7ea872e12ef39212687abcc33e78884c2683c775be7f08f1"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'Inner' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 612,
      "offset": 12,
      "length": 5,
      "code": {
        "startLine": 610,
        "length": 5,
        "offset": 36,
        "surroundingCode": "    {\n      var log = 0;\n      void Inner(Action action)\n      {\n        log = 0;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "b39bb3b75bcf81a7b21317f08025584343f932d13994c13b5e372967d92f4e95"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'Until' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 150,
      "offset": 12,
      "length": 5,
      "code": {
        "startLine": 148,
        "length": 5,
        "offset": 53,
        "surroundingCode": "      var start = Environment.TickCount;\n\n      bool Until() => Environment.TickCount - start < 1000;\n\n      long next = 0;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "b417028fceeccdc87e483ad8d5aba96a408cea91cc792d0528d43b055ff91e53"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'TryGetReader' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 255,
      "offset": 12,
      "length": 12,
      "code": {
        "startLine": 253,
        "length": 12,
        "offset": 132,
        "surroundingCode": "    public T? Read<T>(SerializationCtx ctx, UnsafeReader reader, CtxReadDelegate<T>? unknownInstanceReader = null)\n    {\n      bool TryGetReader(RdId rdId, out CtxReadDelegate<object?> readDelegate)\n      {\n        lock (myLock)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "bcf705a78478a679d35bf9c8c7ab7e147343fdd91843b3890a5f0bb983dddcb6"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'CalcFoo' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Core/TestResult.cs",
      "language": "C#",
      "line": 70,
      "offset": 36,
      "length": 7,
      "code": {
        "startLine": 68,
        "length": 7,
        "offset": 84,
        "surroundingCode": "      void C() { Nothing.Unreachable(); }\n      \n      Result<TestResultInnerClass> CalcFoo(bool success)\n      {\n        if (success)"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "c43c487d5ed629bf2caec06506d92590418f65ede67d22b1c6b45cac5851041c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'C' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Core/TestResult.cs",
      "language": "C#",
      "line": 68,
      "offset": 12,
      "length": 1,
      "code": {
        "startLine": 66,
        "length": 1,
        "offset": 36,
        "surroundingCode": "      void B() { C(); }\n\n      void C() { Nothing.Unreachable(); }\n      \n      Result<TestResultInnerClass> CalcFoo(bool success)"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "c5da5a92b42e3dc15e2746368027bbe0c9c5ca4515ce6bfa6710e017d4a82f97"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'Inner' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 403,
      "offset": 12,
      "length": 5,
      "code": {
        "startLine": 401,
        "length": 5,
        "offset": 36,
        "surroundingCode": "    {\n      var log = 0;\n      void Inner(Action action)\n      {\n        def = new LifetimeDefinition();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "c7430c23936bf0e67eb559ea40a7cff3f6e700ffb6feb178d6bdbbe6ced50526"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'AssertFailForInt' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Core/TestResult.cs",
      "language": "C#",
      "line": 101,
      "offset": 12,
      "length": 16,
      "code": {
        "startLine": 99,
        "length": 16,
        "offset": 94,
        "surroundingCode": "      \n      // ReSharper disable once ParameterOnlyUsedForPreconditionCheck.Local\n      void AssertFailForInt(Result<int> res)\n      {\n        Assert.True(res.FailedNotCanceled);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "d07d55af4d390c1f00b18ec0c1f2f3227f2c2d9f96d8cb6e8b3337b6a7a0d6e6"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'Proto' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTest.cs",
      "language": "C#",
      "line": 216,
      "offset": 17,
      "length": 5,
      "code": {
        "startLine": 214,
        "length": 5,
        "offset": 119,
        "surroundingCode": "      var stringToSend = \"This string is nice and long enough to overshadow any interning overheads\";\n\n      IProtocol Proto(bool server) => server ? ServerProtocol : ClientProtocol;\n      InternRoot<object> Root(bool server) => server ? rootServer : rootClient;\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "d1f40debc005b4bfbd7135297cddc9dbe3d2a8ab2c46f51117ffe4642108d2de"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'A' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Core/TestResult.cs",
      "language": "C#",
      "line": 64,
      "offset": 12,
      "length": 1,
      "code": {
        "startLine": 62,
        "length": 1,
        "offset": 43,
        "surroundingCode": "    public void NewTest()\n    {\n      void A() { B(); }\n\n      void B() { C(); }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "d45158528b7bbf1024b124a32b03af3b089779965bb47a278d1e62c70161e7bc"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'B' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Core/TestResult.cs",
      "language": "C#",
      "line": 66,
      "offset": 12,
      "length": 1,
      "code": {
        "startLine": 64,
        "length": 1,
        "offset": 36,
        "surroundingCode": "      void A() { B(); }\n\n      void B() { C(); }\n\n      void C() { Nothing.Unreachable(); }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "dbfbc980d215a010aa3c16339c937f8659cdd46f27cad0c1c2769781ccac7d13"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'LoggerHandler' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 222,
      "offset": 14,
      "length": 13,
      "code": {
        "startLine": 220,
        "length": 13,
        "offset": 54,
        "surroundingCode": "      Lifetime.Using(lifetime =>\n      {\n        void LoggerHandler(LeveledMessage message)\n        {\n          if (message.Level == LoggingLevel.WARN && message.FormattedMessage.Contains(expectedWarningText)) "
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "e34022e1c60538be8530300bb4655c9934a8b346d7bdee73320f0eb17c61de01"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'Enumerate' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 71,
      "offset": 12,
      "length": 9,
      "code": {
        "startLine": 69,
        "length": 9,
        "offset": 63,
        "surroundingCode": "      lst.Add(l2.Lifetime, () => { log.Add(3); });\n\n      void Enumerate()\n      {\n        foreach (var (lf, action) in lst)"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "eab754fc1b06daade3e9ae8f547bb31f1690aba851ad1081e9c810745233b765"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'ReaderDelegate' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 523,
      "offset": 9,
      "length": 14,
      "code": {
        "startLine": 521,
        "length": 14,
        "offset": 79,
        "surroundingCode": "        writeMethod.Invoke(null, new object?[] {ctx, writer, value});\n\n      T ReaderDelegate(SerializationCtx ctx, UnsafeReader reader)\n      {\n        return (T)readMethod.Invoke(null,"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "ed6b1cb446ab7a7aab7febf46240c08343ff52147048e375740116be4edbe9a3"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'IsValidArray' after 'return'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 144,
      "offset": 12,
      "length": 12,
      "code": {
        "startLine": 142,
        "length": 12,
        "offset": 96,
        "surroundingCode": "    private static bool IsFieldType(TypeInfo typeInfo, bool canBeArray = true)\n    {\n      bool IsValidArray()\n      {\n        if (!typeInfo.IsArray) return false;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "ee0ee7f2817de184ee7c4eef8dd145305e129f60141ceba784049d25fe3d5990"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Put local function after 'return' or 'continue'",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Put local function 'GetInterfaceMap' after 'yield break'",
  "detailsInfo": "Move a local function to the end of its containing scope and separate it from executable code with explicit 'return', 'continue', or 'yield break'. This can improve code readability because executable code will be clearly separated from helper functions that are not executed at their declaration sites.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 456,
      "offset": 31,
      "length": 15,
      "code": {
        "startLine": 454,
        "length": 15,
        "offset": 130,
        "surroundingCode": "    public static IEnumerable<MethodInfo> GetMethodsMap(TypeInfo typeInfo, Type rpcInterface)\n    {\n      IEnumerable<MethodInfo> GetInterfaceMap(Type baseInterface)\n      {\n        return typeInfo.GetInterfaceMap(baseInterface).InterfaceMethods.Where(m => !m.IsSpecialName);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "MoveLocalFunctionAfterJumpStatement"
  },
  "hash": "f14cf3cb2db2a1ca58a8ea4628467195e69fa76b82f454c1a675e1cc049f0d02"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-readonly type member referenced in 'GetHashCode()'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Non-readonly property referenced in 'GetHashCode()'",
  "detailsInfo": "Non-readonly field or auto-property referenced in 'GetHashCode()' [Learn more...](https://www.jetbrains.com/help/rider/NonReadonlyMemberInGetHashCode.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 257,
      "offset": 28,
      "length": 5,
      "code": {
        "startLine": 255,
        "length": 5,
        "offset": 67,
        "surroundingCode": "      unchecked {\n        var hash = 0;\n        hash = hash * 31 + Value.GetHashCode();\n        hash = hash * 31 + (Inner != null ?Inner.GetHashCode() : 0);\n        return hash;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "NonReadonlyMemberInGetHashCode"
  },
  "hash": "075ae3227e4b30e151b48189ffa74fe9bcc1d9fcd44823fcd65fa79d57168fff"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-readonly type member referenced in 'GetHashCode()'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Non-readonly property referenced in 'GetHashCode()'",
  "detailsInfo": "Non-readonly field or auto-property referenced in 'GetHashCode()' [Learn more...](https://www.jetbrains.com/help/rider/NonReadonlyMemberInGetHashCode.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 258,
      "offset": 29,
      "length": 5,
      "code": {
        "startLine": 256,
        "length": 5,
        "offset": 98,
        "surroundingCode": "        var hash = 0;\n        hash = hash * 31 + Value.GetHashCode();\n        hash = hash * 31 + (Inner != null ?Inner.GetHashCode() : 0);\n        return hash;\n      }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "NonReadonlyMemberInGetHashCode"
  },
  "hash": "098e410d81763435c61bee2e8d1f668bd534779468fac33cd7e79de69b2764b2"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-readonly type member referenced in 'GetHashCode()'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Non-readonly property referenced in 'GetHashCode()'",
  "detailsInfo": "Non-readonly field or auto-property referenced in 'GetHashCode()' [Learn more...](https://www.jetbrains.com/help/rider/NonReadonlyMemberInGetHashCode.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 342,
      "offset": 29,
      "length": 5,
      "code": {
        "startLine": 340,
        "length": 5,
        "offset": 98,
        "surroundingCode": "        var hash = 0;\n        hash = hash * 31 + Value.GetHashCode();\n        hash = hash * 31 + (Inner != null ?Inner.GetHashCode() : 0);\n        return hash;\n      }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "NonReadonlyMemberInGetHashCode"
  },
  "hash": "11930b551bad87e522d0188f439d15dbe6617fb51d1c97674920519bf68cfe9b"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-readonly type member referenced in 'GetHashCode()'",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Non-readonly property referenced in 'GetHashCode()'",
  "detailsInfo": "Non-readonly field or auto-property referenced in 'GetHashCode()' [Learn more...](https://www.jetbrains.com/help/rider/NonReadonlyMemberInGetHashCode.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdAssertion.cs",
      "language": "C#",
      "line": 68,
      "offset": 28,
      "length": 12,
      "code": {
        "startLine": 66,
        "length": 12,
        "offset": 105,
        "surroundingCode": "        var hash = 0;\n        hash = hash * 31 + MasterVersion.GetHashCode();\n        hash = hash * 31 + SlaveVersion.GetHashCode();\n        hash = hash * 31 + Text.GetHashCode();\n        return hash;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "NonReadonlyMemberInGetHashCode"
  },
  "hash": "328763471105642e3c2d86e7140e5154fe0f826f7d8c4699b0de0eab876a1731"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-readonly type member referenced in 'GetHashCode()'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Non-readonly property referenced in 'GetHashCode()'",
  "detailsInfo": "Non-readonly field or auto-property referenced in 'GetHashCode()' [Learn more...](https://www.jetbrains.com/help/rider/NonReadonlyMemberInGetHashCode.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 639,
      "offset": 28,
      "length": 4,
      "code": {
        "startLine": 637,
        "length": 4,
        "offset": 67,
        "surroundingCode": "      unchecked {\n        var hash = 0;\n        hash = hash * 31 + Text.GetHashCode();\n        return hash;\n      }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "NonReadonlyMemberInGetHashCode"
  },
  "hash": "727065d06022b196f2f1d9352327125815c21f065692ce8f9bc6eeeb718613cc"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-readonly type member referenced in 'GetHashCode()'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Non-readonly property referenced in 'GetHashCode()'",
  "detailsInfo": "Non-readonly field or auto-property referenced in 'GetHashCode()' [Learn more...](https://www.jetbrains.com/help/rider/NonReadonlyMemberInGetHashCode.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 258,
      "offset": 44,
      "length": 5,
      "code": {
        "startLine": 256,
        "length": 5,
        "offset": 113,
        "surroundingCode": "        var hash = 0;\n        hash = hash * 31 + Value.GetHashCode();\n        hash = hash * 31 + (Inner != null ?Inner.GetHashCode() : 0);\n        return hash;\n      }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "NonReadonlyMemberInGetHashCode"
  },
  "hash": "7670cd6ee9e8314f3981f1c7fd81c2d94c4f3c9de6c7c6cb0d1e5c747f9cbfc1"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-readonly type member referenced in 'GetHashCode()'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Non-readonly property referenced in 'GetHashCode()'",
  "detailsInfo": "Non-readonly field or auto-property referenced in 'GetHashCode()' [Learn more...](https://www.jetbrains.com/help/rider/NonReadonlyMemberInGetHashCode.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 564,
      "offset": 28,
      "length": 4,
      "code": {
        "startLine": 562,
        "length": 4,
        "offset": 67,
        "surroundingCode": "      unchecked {\n        var hash = 0;\n        hash = hash * 31 + Text.GetHashCode();\n        return hash;\n      }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "NonReadonlyMemberInGetHashCode"
  },
  "hash": "83faf763d3156fb4ed0358b63494ca729122cdbb5996e5c77bbbc5add7f293bd"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-readonly type member referenced in 'GetHashCode()'",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Non-readonly property referenced in 'GetHashCode()'",
  "detailsInfo": "Non-readonly field or auto-property referenced in 'GetHashCode()' [Learn more...](https://www.jetbrains.com/help/rider/NonReadonlyMemberInGetHashCode.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdAssertion.cs",
      "language": "C#",
      "line": 67,
      "offset": 28,
      "length": 13,
      "code": {
        "startLine": 65,
        "length": 13,
        "offset": 67,
        "surroundingCode": "      unchecked {\n        var hash = 0;\n        hash = hash * 31 + MasterVersion.GetHashCode();\n        hash = hash * 31 + SlaveVersion.GetHashCode();\n        hash = hash * 31 + Text.GetHashCode();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "NonReadonlyMemberInGetHashCode"
  },
  "hash": "b541191195d0f7fb1d1ed489af6181b7a57a3888111d23787b5575f8f181bfe4"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-readonly type member referenced in 'GetHashCode()'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Non-readonly property referenced in 'GetHashCode()'",
  "detailsInfo": "Non-readonly field or auto-property referenced in 'GetHashCode()' [Learn more...](https://www.jetbrains.com/help/rider/NonReadonlyMemberInGetHashCode.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdAssertion.cs",
      "language": "C#",
      "line": 69,
      "offset": 28,
      "length": 4,
      "code": {
        "startLine": 67,
        "length": 4,
        "offset": 138,
        "surroundingCode": "        hash = hash * 31 + MasterVersion.GetHashCode();\n        hash = hash * 31 + SlaveVersion.GetHashCode();\n        hash = hash * 31 + Text.GetHashCode();\n        return hash;\n      }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "NonReadonlyMemberInGetHashCode"
  },
  "hash": "d514a6f9a21462f2249a6f06d8077b5b6d7370295d066c5e0a51f62f2e2e261c"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-readonly type member referenced in 'GetHashCode()'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Non-readonly property referenced in 'GetHashCode()'",
  "detailsInfo": "Non-readonly field or auto-property referenced in 'GetHashCode()' [Learn more...](https://www.jetbrains.com/help/rider/NonReadonlyMemberInGetHashCode.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 342,
      "offset": 44,
      "length": 5,
      "code": {
        "startLine": 340,
        "length": 5,
        "offset": 113,
        "surroundingCode": "        var hash = 0;\n        hash = hash * 31 + Value.GetHashCode();\n        hash = hash * 31 + (Inner != null ?Inner.GetHashCode() : 0);\n        return hash;\n      }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "NonReadonlyMemberInGetHashCode"
  },
  "hash": "ea8bca1ed932c25ca2940062e8fb77b0910e457e92d0913c5449fe3dce91daf5"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-readonly type member referenced in 'GetHashCode()'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Non-readonly property referenced in 'GetHashCode()'",
  "detailsInfo": "Non-readonly field or auto-property referenced in 'GetHashCode()' [Learn more...](https://www.jetbrains.com/help/rider/NonReadonlyMemberInGetHashCode.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 341,
      "offset": 28,
      "length": 5,
      "code": {
        "startLine": 339,
        "length": 5,
        "offset": 67,
        "surroundingCode": "      unchecked {\n        var hash = 0;\n        hash = hash * 31 + Value.GetHashCode();\n        hash = hash * 31 + (Inner != null ?Inner.GetHashCode() : 0);\n        return hash;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "NonReadonlyMemberInGetHashCode"
  },
  "hash": "f350fd813884db016611e9a1ff3f8996ea140bf13792154736d87a328aa6e7f2"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item2' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 29,
      "offset": 34,
      "length": 5,
      "code": {
        "startLine": 27,
        "length": 5,
        "offset": 77,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2> {\n      public T1 Item1; public T2 Item2;\n      public FakeTuple(T1 item1, T2 item2) { Item1 = item1; Item2 = item2; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "025c05cbe472221567d25d5885bf6a09c759ca939956cc1c1d23e782e56d7f7c"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item2' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 41,
      "offset": 34,
      "length": 5,
      "code": {
        "startLine": 39,
        "length": 5,
        "offset": 89,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "038602b3cca4b1cdfb6f1d7c0ea0ba0e063e3532dcf511827e12f0c5c79f1e8e"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Id' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SocketProxy.cs",
      "language": "C#",
      "line": 15,
      "offset": 28,
      "length": 2,
      "code": {
        "startLine": 13,
        "length": 2,
        "offset": 58,
        "surroundingCode": "  public class SocketProxy\n  {\n    public readonly string Id;\n    private readonly Lifetime myLifetime;\n    private readonly int myServerPort;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "06a86b5f2a248844a8b725868d56151bf84664646e35c4b789d52e85c55c2c9a"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item4' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 45,
      "offset": 68,
      "length": 5,
      "code": {
        "startLine": 43,
        "length": 5,
        "offset": 127,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "08096d431ab4b54935000dc5304a0fdafa40bceb828d1804ea94d833d8f7c443"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'IsRunningOnMono' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/RuntimeInfo.cs",
      "language": "C#",
      "line": 11,
      "offset": 33,
      "length": 15,
      "code": {
        "startLine": 9,
        "length": 15,
        "offset": 83,
        "surroundingCode": "  {\n    public static Version? CurrentMonoVersion;\n    public static readonly bool IsRunningOnMono; \n    public static readonly bool IsRunningUnderWindows;\n    public static readonly bool IsRunningOnCore;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "09c816d5c4ca346e8f15fc6fe369828bf90ff4febd604d387e411fca828e365e"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item5' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 45,
      "offset": 85,
      "length": 5,
      "code": {
        "startLine": 43,
        "length": 5,
        "offset": 144,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "0e802f6f29191695cfd32fec45f5b20caa378fd6bca3265ed9c493c43b8c8628"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item2' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 53,
      "offset": 34,
      "length": 5,
      "code": {
        "startLine": 51,
        "length": 5,
        "offset": 104,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6, T7, TRest> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6; public T7 Item7; public TRest Rest;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; Item7 = item7; Rest = rest; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "181015fee0f5acd0c6967aed59e7457a4ad03cbccb38f1d122dfc9ddc470af42"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item6' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 45,
      "offset": 102,
      "length": 5,
      "code": {
        "startLine": 43,
        "length": 5,
        "offset": 161,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "2c8e83bce51481aeaba41128390a24e3db9c88fab66a65eb1fd9640093cc64ee"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item2' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 49,
      "offset": 34,
      "length": 5,
      "code": {
        "startLine": 47,
        "length": 5,
        "offset": 97,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6, T7> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6; public T7 Item7;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; Item7 = item7; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "3b166d0fcd5870510f630be8eb374b39600c994d3105f092db7af87985318e60"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item2' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 33,
      "offset": 34,
      "length": 5,
      "code": {
        "startLine": 31,
        "length": 5,
        "offset": 81,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3> {\n      public T1 Item1; public T2 Item2; public T3 Item3;\n      public FakeTuple(T1 item1, T2 item2, T3 item3) { Item1 = item1; Item2 = item2; Item3 = item3; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "4939adaeb0737972d8826216dffe47dfd14a1f3b3c1ed9dfd315caa2abe80844"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item3' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 41,
      "offset": 51,
      "length": 5,
      "code": {
        "startLine": 39,
        "length": 5,
        "offset": 106,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "497a418c8929d19903f2c45725bdcfd7969636084bf165d70bd4d3726b3623ca"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item6' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 53,
      "offset": 102,
      "length": 5,
      "code": {
        "startLine": 51,
        "length": 5,
        "offset": 172,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6, T7, TRest> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6; public T7 Item7; public TRest Rest;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; Item7 = item7; Rest = rest; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "4ee31db26d6da751d59dc24c014476935c3b01e194d3aae784b5e07d9f9ac227"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'EventCount' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/Example/CustomReactive.cs",
      "language": "C#",
      "line": 13,
      "offset": 16,
      "length": 10,
      "code": {
        "startLine": 11,
        "length": 10,
        "offset": 51,
        "surroundingCode": "    public T1 t1;\n    public T2 t2;\n    public int EventCount;\n\n    public CtxReadDelegate<T1> ReadKeyDelegate { get; private set; }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "53b2858d2d4b7939fa267fd3e02a6cb12ab21c0bbbe9c7e5e385db736594818f"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item4' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 53,
      "offset": 68,
      "length": 5,
      "code": {
        "startLine": 51,
        "length": 5,
        "offset": 138,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6, T7, TRest> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6; public T7 Item7; public TRest Rest;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; Item7 = item7; Rest = rest; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "7922066893cd685019c4b36a896d3270e445084754b890f7622312aa57b89105"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item3' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 53,
      "offset": 51,
      "length": 5,
      "code": {
        "startLine": 51,
        "length": 5,
        "offset": 121,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6, T7, TRest> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6; public T7 Item7; public TRest Rest;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; Item7 = item7; Rest = rest; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "7aa854824d7485a99162dfbb12d6b4b8f054b0a7bfd4e90a0d5dbabf1cab7002"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item1' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 53,
      "offset": 17,
      "length": 5,
      "code": {
        "startLine": 51,
        "length": 5,
        "offset": 87,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6, T7, TRest> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6; public T7 Item7; public TRest Rest;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; Item7 = item7; Rest = rest; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "843dc42e2c53dfde77940e0e189cc14a4a7a4e7e99db49282edac84a0a127821"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item4' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 41,
      "offset": 68,
      "length": 5,
      "code": {
        "startLine": 39,
        "length": 5,
        "offset": 123,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "87c9874467d1a5fdc0ba08ea3f054b1eaf7fec905c54ac1febd9d394c8792734"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'v2' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorCustomSignalTest.cs",
      "language": "C#",
      "line": 101,
      "offset": 19,
      "length": 2,
      "code": {
        "startLine": 99,
        "length": 2,
        "offset": 44,
        "surroundingCode": "  {\n    public string v1;\n    public string v2;\n\n    public Payload(string v1, string v2)"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "87dbb434d6a9d49066b65b730ddc18a5ef2ea85d8d5b64f378a54b650b38b5ee"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'IsAssertionUndefined' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Mode.cs",
      "language": "C#",
      "line": 16,
      "offset": 31,
      "length": 20,
      "code": {
        "startLine": 14,
        "length": 20,
        "offset": 67,
        "surroundingCode": "  /// used instead.\n  /// </summary>\n  public static readonly bool IsAssertionUndefined;\n\n  static Mode()"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "8901b4d10290074aebb315c7f684a7a6892fab9af90247ef807efb7336665217"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item1' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 45,
      "offset": 17,
      "length": 5,
      "code": {
        "startLine": 43,
        "length": 5,
        "offset": 76,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "8ada039de122262b8b7467d889432ab94836f6408d3eb9ea390be6e8d6015f80"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'IsRunningOnCore' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/RuntimeInfo.cs",
      "language": "C#",
      "line": 13,
      "offset": 33,
      "length": 15,
      "code": {
        "startLine": 11,
        "length": 15,
        "offset": 137,
        "surroundingCode": "    public static readonly bool IsRunningOnMono; \n    public static readonly bool IsRunningUnderWindows;\n    public static readonly bool IsRunningOnCore;\n\n    static RuntimeInfo()"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "9041026cd0e3893b916aa2deaeeaa36f9b48d0a486346e68c9a1bb26e76720cb"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item2' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 45,
      "offset": 34,
      "length": 5,
      "code": {
        "startLine": 43,
        "length": 5,
        "offset": 93,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "94c49894678dc33ab4e0b6cf3d6883d08474aad5d3c1ba62771ad117af808af1"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item4' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 37,
      "offset": 68,
      "length": 5,
      "code": {
        "startLine": 35,
        "length": 5,
        "offset": 119,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "99d95ecef3bd87834b60744216ea5ffb744e7df7b369798f2b01241f123f3720"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'Ext' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/ExtCreationInfo.cs",
      "language": "C#",
      "line": 11,
      "offset": 23,
      "length": 3,
      "code": {
        "startLine": 9,
        "length": 3,
        "offset": 65,
        "surroundingCode": "    public RdId? Id;\n    public long Hash;\n    public RdExtBase? Ext;\n\n    public ExtCreationInfo(RName name, RdId? id, long hash, RdExtBase? ext)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "9e895791c3a6df79aefbdd3eeed4a11abbaac4ec110ee6515da5c03cb69ed81e"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'Connected' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdExtBase.cs",
      "language": "C#",
      "line": 33,
      "offset": 45,
      "length": 9,
      "code": {
        "startLine": 31,
        "length": 9,
        "offset": 54,
        "surroundingCode": "    \n    \n    public readonly IReadonlyProperty<bool> Connected;\n    protected RdExtBase()\n    {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "a17ce72e0d7b9232cf8e247144e7d0081c3886b83d5f77f97462adaa0ac751cb"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item1' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 37,
      "offset": 17,
      "length": 5,
      "code": {
        "startLine": 35,
        "length": 5,
        "offset": 68,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "a1b4d93a1518cd5af1b958c8c2ca1975b0e1c358b80fb9ecde660ffe00d23e1d"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item7' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 49,
      "offset": 119,
      "length": 5,
      "code": {
        "startLine": 47,
        "length": 5,
        "offset": 182,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6, T7> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6; public T7 Item7;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; Item7 = item7; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "a84761eebe7e294f88a988fdad13580590c6e3d620667c1d5bebbac5240f472a"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item1' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 29,
      "offset": 17,
      "length": 5,
      "code": {
        "startLine": 27,
        "length": 5,
        "offset": 60,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2> {\n      public T1 Item1; public T2 Item2;\n      public FakeTuple(T1 item1, T2 item2) { Item1 = item1; Item2 = item2; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "aa087141b48520abbead55a70a59ca574576e2ed0a927c6282910f373f239eac"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item3' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 49,
      "offset": 51,
      "length": 5,
      "code": {
        "startLine": 47,
        "length": 5,
        "offset": 114,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6, T7> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6; public T7 Item7;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; Item7 = item7; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "af66510ffc941433dd22b630157b0e2dc3a7ffbc6baa92e886c943bdd58f5bf4"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item7' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 53,
      "offset": 119,
      "length": 5,
      "code": {
        "startLine": 51,
        "length": 5,
        "offset": 189,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6, T7, TRest> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6; public T7 Item7; public TRest Rest;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; Item7 = item7; Rest = rest; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "b6b7e9e41ffb7f228e1ce6539e625ee2d5aec89a96cc5c5f1b34e04809e83118"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item3' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 45,
      "offset": 51,
      "length": 5,
      "code": {
        "startLine": 43,
        "length": 5,
        "offset": 110,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "b7f35a8d8e8ced648b21e92433ff293f01e0312effcc17d29146056d94a8718b"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'IsMaster' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSet.cs",
      "language": "C#",
      "line": 56,
      "offset": 17,
      "length": 8,
      "code": {
        "startLine": 54,
        "length": 8,
        "offset": 39,
        "surroundingCode": "    #region Mastering\n\n    public bool IsMaster = false;\n\n    #endregion"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "b98678aef892999cef3839ca2344d9a1f376ed68c3bf80756e27eef2b01495ab"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item1' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 49,
      "offset": 17,
      "length": 5,
      "code": {
        "startLine": 47,
        "length": 5,
        "offset": 80,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6, T7> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6; public T7 Item7;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; Item7 = item7; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "c3441b9a6fa83f3ed43becfa56a074752f6a548f976ebdbd14765de7377f2448"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item5' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 53,
      "offset": 85,
      "length": 5,
      "code": {
        "startLine": 51,
        "length": 5,
        "offset": 155,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6, T7, TRest> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6; public T7 Item7; public TRest Rest;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; Item7 = item7; Rest = rest; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "c39f0b7aaab45d2e9f7def3dbe24d127442c2f470dcd5e7df9e53e197177981e"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item5' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 49,
      "offset": 85,
      "length": 5,
      "code": {
        "startLine": 47,
        "length": 5,
        "offset": 148,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6, T7> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6; public T7 Item7;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; Item7 = item7; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "c96278122e27a26b88a36ae137fdd3fa1cdbbc9ffa396ca03353e137e9c77f6e"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item1' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 25,
      "offset": 17,
      "length": 5,
      "code": {
        "startLine": 23,
        "length": 5,
        "offset": 58,
        "surroundingCode": "     */\n    public struct FakeTuple<T1> {\n      public T1 Item1;\n      public FakeTuple(T1 item1) { Item1 = item1; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "c9764a3c510e038547a8977a52948dc2774e6c044ff02981b476579a7869c846"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item1' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 41,
      "offset": 17,
      "length": 5,
      "code": {
        "startLine": 39,
        "length": 5,
        "offset": 72,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "cef1beac610e88a4d7dd031017b7ff6f6bdc8a99842830e5d43b5169d9b0ba05"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item3' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 37,
      "offset": 51,
      "length": 5,
      "code": {
        "startLine": 35,
        "length": 5,
        "offset": 102,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "d8a8ff0e88b51569dad7b8f730646c556d0b5a0aada92a903ddb00be35dd13a4"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item2' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 37,
      "offset": 34,
      "length": 5,
      "code": {
        "startLine": 35,
        "length": 5,
        "offset": 85,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "daac77bda4369407e559973f9c3b2d679b41c302ebfa1b23b6de958e2c5b22eb"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item6' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 49,
      "offset": 102,
      "length": 5,
      "code": {
        "startLine": 47,
        "length": 5,
        "offset": 165,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6, T7> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6; public T7 Item7;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; Item7 = item7; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "e4751618c06cbadfcee8838784c8cdf3b9620e15cbf508d78693ecc6f38253c9"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item3' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 33,
      "offset": 51,
      "length": 5,
      "code": {
        "startLine": 31,
        "length": 5,
        "offset": 98,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3> {\n      public T1 Item1; public T2 Item2; public T3 Item3;\n      public FakeTuple(T1 item1, T2 item2, T3 item3) { Item1 = item1; Item2 = item2; Item3 = item3; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "e9b598876ec60cd53495f0c5ce5ea4976644f5a4cff8b65cf2095f785a20a229"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item1' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 33,
      "offset": 17,
      "length": 5,
      "code": {
        "startLine": 31,
        "length": 5,
        "offset": 64,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3> {\n      public T1 Item1; public T2 Item2; public T3 Item3;\n      public FakeTuple(T1 item1, T2 item2, T3 item3) { Item1 = item1; Item2 = item2; Item3 = item3; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "ec4a6eed690ce4e0aaba966d56963bbe069e85b9f4392bbd80b2cb4bc07a71f5"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item4' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 49,
      "offset": 68,
      "length": 5,
      "code": {
        "startLine": 47,
        "length": 5,
        "offset": 131,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6, T7> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6; public T7 Item7;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; Item7 = item7; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "f10f8438c1ab791266958731c17e6e832d278eab95f9f334fa68ca5a08cb7688"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Rest' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 53,
      "offset": 139,
      "length": 4,
      "code": {
        "startLine": 51,
        "length": 4,
        "offset": 209,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6, T7, TRest> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6; public T7 Item7; public TRest Rest;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; Item7 = item7; Rest = rest; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "fb14211dd2891c207be7504796c722ec55e4228d77a0b0ccd534fa2af0b3e190"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Item5' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 41,
      "offset": 85,
      "length": 5,
      "code": {
        "startLine": 39,
        "length": 5,
        "offset": 140,
        "surroundingCode": "    }\n    public struct FakeTuple<T1, T2, T3, T4, T5> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Global"
  },
  "hash": "fe34508dba39f4c842211e47a686f68738788a94ab0213c5f5412e495e18121d"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Field 'myId' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used [Learn more...](https://www.jetbrains.com/help/rider/NotAccessedField.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorCustomSignalTest.cs",
      "language": "C#",
      "line": 48,
      "offset": 31,
      "length": 4,
      "code": {
        "startLine": 46,
        "length": 4,
        "offset": 104,
        "surroundingCode": "    public sealed class CustomProperty<T> : ISignal<T>, IRdBindable\n    {\n      private readonly string myId;\n      private readonly RdSignal<T> myRdSignal;\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "NotAccessedField.Local"
  },
  "hash": "146f269c6896c490d8802ebc4a20f93ab7e423bfb0f5e39909fae3e3915c6191"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Field 'mySliceE1' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used [Learn more...](https://www.jetbrains.com/help/rider/NotAccessedField.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/BitSliceTest.cs",
      "language": "C#",
      "line": 22,
      "offset": 26,
      "length": 9,
      "code": {
        "startLine": 20,
        "length": 9,
        "offset": 103,
        "surroundingCode": "    private BitSlice<bool> mySliceBool;\n    private BitSlice<E4> mySliceEnum;\n    private BitSlice<E1> mySliceE1;\n\n    [SetUp]"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "NotAccessedField.Local"
  },
  "hash": "40bb936e4b6947ec2fe4f170de5e2a2c85a4c245d92555eed2b5a54f5164e9dd"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Field 'myAllowSave' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used [Learn more...](https://www.jetbrains.com/help/rider/NotAccessedField.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 19,
      "offset": 27,
      "length": 11,
      "code": {
        "startLine": 17,
        "length": 11,
        "offset": 108,
        "surroundingCode": "  {\n    private const String DynamicAssemblyName = \"JetBrains.Rd.ProxyGenerator\";\n    private readonly bool myAllowSave;\n\n    /*"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "NotAccessedField.Local"
  },
  "hash": "78ae027785ad5a910a405b543166bc1b6d92534ceea60129933d6bf43833f672"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Non-accessed field (private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Field 'Kind' is assigned but its value is never used",
  "detailsInfo": "Field is assigned but its value is never used [Learn more...](https://www.jetbrains.com/help/rider/NotAccessedField.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Identities.cs",
      "language": "C#",
      "line": 7,
      "offset": 29,
      "length": 4,
      "code": {
        "startLine": 5,
        "length": 4,
        "offset": 72,
        "surroundingCode": "  public class Identities : IIdentities\n  {\n    private readonly IdKind Kind;\n    private int myId;\n    private const int BaseClientId = RdId.MaxStaticId;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "NotAccessedField.Local"
  },
  "hash": "92533bbdafdd287f9f05bf966e1707c6af9bed1110b77f5ba0108792d2a015c3"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Non-accessed local variable only used to discard the 'out' parameter value",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Local variable 'x' is only used to discard 'out' parameter value",
  "detailsInfo": "Non-accessed local variable only used to discard the 'out' parameter value",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/PriorityQueueTest.cs",
      "language": "C#",
      "line": 64,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 62,
        "length": 6,
        "offset": 34,
        "surroundingCode": "      AssertExtract(5, q);\n\n      int x;\n      Assert.False(q.TryPeek(out x));\n      Assert.False(q.TryExtract(out x));      "
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "NotAccessedOutParameterVariable"
  },
  "hash": "30b11be8308f42d087d099c640735d11b479fda6f84b37c54d70cc96e7850dd3"
},{
  "tool": "Code Inspection",
  "category": "Constraints Violations",
  "type": "Non-nullable or required member is not initialized at constructor exit",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Non-nullable event 'PropertyChanged' is not initialized in any execution path",
  "detailsInfo": "Non-nullable or required type member is not initialized in any execution path of the constructor",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdList.cs",
      "language": "C#",
      "line": 30,
      "offset": 12,
      "length": 6,
      "code": {
        "startLine": 28,
        "length": 6,
        "offset": 24,
        "surroundingCode": "       \n    \n    public RdList(CtxReadDelegate<V> readValue, CtxWriteDelegate<V> writeValue, long nextVersion = 1L)\n    {\n      myNextVersion = nextVersion;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "NotNullOrRequiredMemberIsNotInitialized"
  },
  "hash": "b267df609a83b8320581ec1c0e40870fb6d83d35af64d9602879a6ad41ec4439"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "'??' condition is never null according to nullable reference types' annotations",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "'??' left operand is never null according to nullable reference types' annotations",
  "detailsInfo": "'??' condition is never null according to nullable reference types' annotations",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdPerContextMap.cs",
      "language": "C#",
      "line": 41,
      "offset": 42,
      "length": 24,
      "code": {
        "startLine": 39,
        "length": 24,
        "offset": 122,
        "surroundingCode": "            {\n                myMap.TryGetValue(contextValue, out var oldValue);\n                var value = (oldValue ?? myValueFactory(IsMaster)).WithId(RdId.Mix(contextValue.ToString()));\n                value.Bind(contextValueLifetime, this, $\"[{contextValue.ToString()}]\");\n                if (oldValue == null)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "NullCoalescingConditionIsAlwaysNotNullAccordingToAPIContract"
  },
  "hash": "5b1286ebea06797e2e474aad45e422372ee8347d78111134c2ab7ab4716f58ee"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "'??' condition is never null according to nullable reference types' annotations",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "'??' left operand is never null according to nullable reference types' annotations",
  "detailsInfo": "'??' condition is never null according to nullable reference types' annotations",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/RName.cs",
      "language": "C#",
      "line": 43,
      "offset": 54,
      "length": 2,
      "code": {
        "startLine": 41,
        "length": 2,
        "offset": 107,
        "surroundingCode": "        return this; //special case for empty string\n\n      return new RName(this, localName, separator ?? \"\");\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "NullCoalescingConditionIsAlwaysNotNullAccordingToAPIContract"
  },
  "hash": "88aa0638f92f1b1f8f3c87438eadbdd881507052511898155f7acf05aa06aabe"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Nullability conflicts with annotations in hierarchy",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Nullability of a member conflicts with annotations in hierarchy",
  "detailsInfo": "Nullability of a member conflicts with attribute annotations in its hierarchy. When using a base member, an unexpected value might be passed or returned, e.g. a null value might be passed to a non-nullable parameter because a parameter of a base member allows it, or the return value might not be checked for null because a base member indicates that it should never return null.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/TextBufferVersion.cs",
      "language": "C#",
      "line": 36,
      "offset": 33,
      "length": 6,
      "code": {
        "startLine": 34,
        "length": 6,
        "offset": 39,
        "surroundingCode": "    }\n\n    public override bool Equals(object obj)\n    {\n      if (ReferenceEquals(null, obj)) return false;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "NullnessAnnotationConflictWithJetBrainsAnnotations"
  },
  "hash": "03a6f6440d54b85e6f8ba1428874c1dca521d2d4471bebb90297944833e2a086"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Nullability conflicts with annotations in hierarchy",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Nullability of a member conflicts with annotations in hierarchy",
  "detailsInfo": "Nullability of a member conflicts with attribute annotations in its hierarchy. When using a base member, an unexpected value might be passed or returned, e.g. a null value might be passed to a non-nullable parameter because a parameter of a base member allows it, or the return value might not be checked for null because a base member indicates that it should never return null.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSecureString.cs",
      "language": "C#",
      "line": 29,
      "offset": 33,
      "length": 6,
      "code": {
        "startLine": 27,
        "length": 6,
        "offset": 39,
        "surroundingCode": "    }\n\n    public override bool Equals(object obj)\n    {\n      if (ReferenceEquals(null, obj)) return false;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "NullnessAnnotationConflictWithJetBrainsAnnotations"
  },
  "hash": "deafcfa9d78837bff8f01c8998390751390b5954be5602152cf0e0f4c828a76b"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Nullability conflicts with annotations in hierarchy",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Nullability of a member conflicts with annotations in hierarchy",
  "detailsInfo": "Nullability of a member conflicts with attribute annotations in its hierarchy. When using a base member, an unexpected value might be passed or returned, e.g. a null value might be passed to a non-nullable parameter because a parameter of a base member allows it, or the return value might not be checked for null because a base member indicates that it should never return null.",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Maybe.cs",
      "language": "C#",
      "line": 51,
      "offset": 33,
      "length": 6,
      "code": {
        "startLine": 49,
        "length": 6,
        "offset": 141,
        "surroundingCode": "    public Maybe<TK> Select<TK>(Func<T, TK> map) => HasValue ? new Maybe<TK>(map(Value)) : Maybe<TK>.None; \n\n    public override bool Equals(object obj)\n    {\n      if (!(obj is Maybe<T>)) return false;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "NullnessAnnotationConflictWithJetBrainsAnnotations"
  },
  "hash": "f6fad31eb2580a88fce7f154a2ec2716ad1de93bf43f687b94ef6266ec3119a3"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Possible unassigned object created by 'new' expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Possible unassigned object created by 'new' expression",
  "detailsInfo": "Object created by 'new' expression is possibly not assigned anywhere",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SocketWireTest.cs",
      "language": "C#",
      "line": 384,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 382,
        "length": 3,
        "offset": 55,
        "surroundingCode": "      \n      var lf1 = new LifetimeDefinition();\n      new SocketWire.Client(lf1.Lifetime, SynchronousScheduler.Instance, factory.LocalPort);\n      SpinWaitEx.SpinUntil(() => factory.Connected.Count == 1);\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ObjectCreationAsStatement"
  },
  "hash": "5dd3f6ddadc14677977b3c2958468e689089dfc0d1309e592b6b99bb64e85488"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Possible unassigned object created by 'new' expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Possible unassigned object created by 'new' expression",
  "detailsInfo": "Object created by 'new' expression is possibly not assigned anywhere",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SocketWireTest.cs",
      "language": "C#",
      "line": 388,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 386,
        "length": 3,
        "offset": 55,
        "surroundingCode": "      \n      var lf2 = new LifetimeDefinition();\n      new SocketWire.Client(lf2.Lifetime, SynchronousScheduler.Instance, factory.LocalPort);\n      SpinWaitEx.SpinUntil(() => factory.Connected.Count == 2);\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ObjectCreationAsStatement"
  },
  "hash": "8b63290535051ef2d1de4472538b456ca107b0101be32d6e278d64112a857329"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Parameter is only used for precondition check (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'b' is only used for precondition check(s)",
  "detailsInfo": "Parameter is only used for precondition check",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 209,
      "offset": 118,
      "length": 1,
      "code": {
        "startLine": 207,
        "length": 1,
        "offset": 152,
        "surroundingCode": "    public void TestCyclic()\n    {\n      RunScalarTest(new RedBlackList {Start = new RedBlackList.BlackNode() {Next = new RedBlackList.RedNode()}}, (a, b) =>\n      {\n        Assert.NotNull(b.Start.Next);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "ParameterOnlyUsedForPreconditionCheck.Local"
  },
  "hash": "df888dd9da2bc055ff2a5c96174369d132914ab2c154894f01d9d1c1bbd17dfa"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Parameter type can be IEnumerable<T> (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Parameter can be of type 'IEnumerable?'",
  "detailsInfo": "Parameter can be declared with IEnumerable type but it is declared with more specific type (e.g. List) [Learn more...](https://www.jetbrains.com/help/rider/ParameterTypeCanBeEnumerable.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IRdBindable.cs",
      "language": "C#",
      "line": 106,
      "offset": 39,
      "length": 4,
      "code": {
        "startLine": 104,
        "length": 4,
        "offset": 45,
        "surroundingCode": "    }\n\n    public static void BindEx<T>(this T[]? items, Lifetime lifetime, IRdDynamic parent, string name) where T : IRdBindable\n    {\n      Bind0(items, lifetime, parent, name);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ParameterTypeCanBeEnumerable.Global"
  },
  "hash": "a4bc8750fd696927b8d946ce96721db1716a4649ffe48840c05efa2459ceaa48"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Parameter type can be IEnumerable<T> (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Parameter can be of type 'IEnumerable?'",
  "detailsInfo": "Parameter can be declared with IEnumerable type but it is declared with more specific type (e.g. List) [Learn more...](https://www.jetbrains.com/help/rider/ParameterTypeCanBeEnumerable.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IRdBindable.cs",
      "language": "C#",
      "line": 101,
      "offset": 39,
      "length": 8,
      "code": {
        "startLine": 99,
        "length": 8,
        "offset": 80,
        "surroundingCode": "\n    // ASSHEATING C# OVERLOAD RESOLUTION\n    public static void BindEx<T>(this List<T>? items, Lifetime lifetime, IRdDynamic parent, string name) where T : IRdBindable\n    {\n      Bind0(items, lifetime, parent, name);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ParameterTypeCanBeEnumerable.Global"
  },
  "hash": "dc9044494315131f5b1c94b81a67b45053d70634ad8d7741a47a2163fa53ddc8"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 105,
      "offset": 13,
      "length": 20,
      "code": {
        "startLine": 103,
        "length": 20,
        "offset": 210,
        "surroundingCode": "                         && (myMessages.Count < SendBufferSize || mySenders.Count + SendBufferSize == myMessages.Count)\n                         && (myMessages.Count == 0 || myReceivers.Count == 0)\n          , \"Bad state for {0} \", this);\n      }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "002cfa2204525ace7d84ab78adb90953f4d06ebf6cd7286816d192ba31f8578d"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/MessageBroker.cs",
      "language": "C#",
      "line": 165,
      "offset": 25,
      "length": 47,
      "code": {
        "startLine": 163,
        "length": 47,
        "offset": 128,
        "surroundingCode": "                    {\n                      Assertion.Assert(subscription.WireScheduler != myScheduler,\n                        \"subscription.Scheduler != myScheduler for {0}\", subscription);\n                      Invoke(subscription, m);\n                    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "07e09ce7d964ec09cde69f296cd2ee598c86562077a7faed1524341b6ed78fe7"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 1055,
      "offset": 19,
      "length": 70,
      "code": {
        "startLine": 1053,
        "length": 70,
        "offset": 52,
        "surroundingCode": "      ~FinalizableGuard()\n      {\n        Log.Error(\"{0} has never been terminated. Some resources might have leaked. {1}\", myDef, myComment ?? \"\");\n      }\n      "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "0e77e53ccdecb9ba9f78f643188a4df401d357bdb437213364feb7d35f708431"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 687,
      "offset": 33,
      "length": 17,
      "code": {
        "startLine": 685,
        "length": 17,
        "offset": 96,
        "surroundingCode": "                      continue;\n                    Socket = s;\n                    Log.Verbose(\"{0} : connected\", Id);\n                  }\n                }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "0ede7fd4660e7c588165a34bc8d159584933cf8c7b707f59ad92e9c0e44d5738"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 233,
      "offset": 49,
      "length": 63,
      "code": {
        "startLine": 231,
        "length": 63,
        "offset": 122,
        "surroundingCode": "        if (myTypeMapping.TryGetValue(typeof(T), out existing))\n        {\n          Assertion.Require(existing == typeId, \"Type {0} already present with id={1}, but now is set with {2}\", typeof(T).FullName, existing, typeId);\n        }\n        else"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "13f6a043e2464301b290f5d893da089be41455f7e89997ad9bbecfff53f508b4"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 468,
      "offset": 61,
      "length": 40,
      "code": {
        "startLine": 466,
        "length": 40,
        "offset": 91,
        "surroundingCode": "      \n      Destruct();      \n      Assertion.Assert(Status == LifetimeStatus.Terminated, \"{0}: bad status for termination finish\", this);\n      Diagnostics(nameof(LifetimeStatus.Terminated));\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "1545f45adc6621b194c2017f95cdf1b80ef7c2f041ab9dc5b559d8685bce3e3b"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/JetPriorityQueue.cs",
      "language": "C#",
      "line": 184,
      "offset": 59,
      "length": 36,
      "code": {
        "startLine": 182,
        "length": 36,
        "offset": 103,
        "surroundingCode": "    private void HeapUp(int idx)\n    {      \n      Assertion.Assert(idx >= 1 && idx < myStorage.Count, \"Index {0} is not in range [1, {1})\", idx, myStorage.Count);\n      \n      while (idx > 1 && Compare(idx, idx >> 1) < 0)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "188e2dc0b58b52bf96e9d7e74d5d3f6c78569f5b7d128cc9d21885038be73f71"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 203,
      "offset": 62,
      "length": 5,
      "code": {
        "startLine": 201,
        "length": 5,
        "offset": 77,
        "surroundingCode": "     Enum\n    {\n      Assertion.Assert(typeof(T).IsSubclassOf(typeof(Enum)), \"{0}\", typeof(T));\n      return Cast32BitEnum<T>.FromInt(reader.ReadInt());\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "1e276b74bae08d3349bf46831a71a3f9e33b1182448fcddfdc216dd6f9be93df"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 157,
      "offset": 49,
      "length": 132,
      "code": {
        "startLine": 155,
        "length": 132,
        "offset": 151,
        "surroundingCode": "              type.GetTypeInfo(), \n              t => GetOrRegisterStaticSerializerInternal(t, true));\n            Assertion.Assert(intrinsic != null, \"Unable to get intrinsic serializer for type {0}, thought API detect the presense of it. Probably it was only partially implemented\", type);\n            mySerializers.Add(type, intrinsic);\n          }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "1f3b5f9d08742c7759ed6ef9077c8a5a97d24edba87c1ce1ef1532018f805dfc"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 698,
      "offset": 29,
      "length": 39,
      "code": {
        "startLine": 696,
        "length": 39,
        "offset": 147,
        "surroundingCode": "                if (errcode == SocketError.TimedOut || errcode == SocketError.WouldBlock) continue; //expected, Linux\n\n                Log.Verbose(\"{0}: SocketException with message {1}\", Id, e.Message);\n              }\n              catch (ObjectDisposedException e)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "1f8893c2f5d7cf82de3cee2cb4bd44ec9b1dcffdddae409f52dc7ba701422209"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Actor.cs",
      "language": "C#",
      "line": 102,
      "offset": 39,
      "length": 50,
      "code": {
        "startLine": 100,
        "length": 50,
        "offset": 68,
        "surroundingCode": "          finally\n          {\n            Assertion.Assert(IsEmpty, \"Not empty: sent items: {0}, processed items: {1}\", myChannel.TotalMessagesSent, myTotalMessagesProcessed);\n          }\n        }, lifetime, TaskCreationOptions.None, scheduler ?? TaskScheduler.Default);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "1fe37da495bd37d199f73fdee5d42f89f7a54c867b90156fb659615f137aea25"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 652,
      "offset": 37,
      "length": 59,
      "code": {
        "startLine": 650,
        "length": 59,
        "offset": 105,
        "surroundingCode": "        serverSocket.Bind(endPoint);\n        serverSocket.Listen(1);\n        Protocol.InitLogger.Verbose(\"Server socket created, listening started on endpoint: {0}\", endPoint);\n\n        return serverSocket;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "211ad3fa658b7713342161808cebd076034fbaf859fda6df822dc8d9136f18a2"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 644,
      "offset": 37,
      "length": 41,
      "code": {
        "startLine": 642,
        "length": 41,
        "offset": 112,
        "surroundingCode": "      public static Socket CreateServerSocket(IPEndPoint? endPoint)\n      {\n        Protocol.InitLogger.Verbose(\"Creating server socket on endpoint: {0}\", endPoint);\n\n        var serverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "23b21d479a9cd2932c86ab2e39a15765bfb590806915c25c0eb7a3b144fa33a1"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 596,
      "offset": 25,
      "length": 47,
      "code": {
        "startLine": 594,
        "length": 47,
        "offset": 80,
        "surroundingCode": "          catch (ObjectDisposedException e)\n          {\n            Log.Verbose(\"{0}: ObjectDisposedException with message {1}\", Id, e.Message);\n          }\n          catch (Exception e)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "23f05c1332d0ae2e2a891fe5721feef5575a516a9e48a8eef06cda56aebd6c10"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 382,
      "offset": 46,
      "length": 26,
      "code": {
        "startLine": 380,
        "length": 26,
        "offset": 98,
        "surroundingCode": "        {          \n          var s = myDef.myState;\n          Assertion.Assert(ourMutexSlice[s], \"{0}: Mutex must be owned\", myDef);\n    \n          if (Interlocked.CompareExchange(ref myDef.myState, ourMutexSlice.Updated(s, false), s) == s)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "243a74d9c192bf2a26143e53358c96e115eb92618c37322c023835e8fc7690ae"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 198,
      "offset": 13,
      "length": 90,
      "code": {
        "startLine": 196,
        "length": 90,
        "offset": 215,
        "surroundingCode": "          var implementingType = ReflectionSerializerVerifier.GetImplementingType(ReflectionUtil.GetReturnType(mi).GetTypeInfo());\n          Assertion.Assert(currentValue.GetType() == implementingType, \n            \"Bindable field {0} was initialized with incompatible type. Expected type {1}, actual {2}\", \n            mi, \n            implementingType.ToString(true), "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "26b7dea25a7d9e0327af352fdfa748601f6e8da0a9e3ebac85501af1397e1650"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 503,
      "offset": 57,
      "length": 43,
      "code": {
        "startLine": 501,
        "length": 43,
        "offset": 194,
        "surroundingCode": "      var status = Status;\n      Assertion.Assert(status == LifetimeStatus.Terminating, \"{0}: bad status for destructuring start\", this);\n      Assertion.Assert(ourMutexSlice[myState] == false, \"{0}: mutex must be released in this point\", this);\n      //no one can take mutex after this point\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "2912fe3d3c49cfed1dd3b2bfdd684e23b013506d7cb544f9f1c0d08114ae875b"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 552,
      "offset": 33,
      "length": 67,
      "code": {
        "startLine": 550,
        "length": 67,
        "offset": 93,
        "surroundingCode": "                  if (!lifetime.IsAlive)\n                  {\n                    Log.Verbose(\"{0} : connected, but lifetime is already canceled, closing socket\", Id);\n                    CloseSocket(s); //to guarantee socket termination\n                    return;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "2faa67a24419df72bd242386e1ee218f4d941c6993397004feb94bd32ac4a24b"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/MessageBroker.cs",
      "language": "C#",
      "line": 147,
      "offset": 30,
      "length": 24,
      "code": {
        "startLine": 145,
        "length": 24,
        "offset": 77,
        "surroundingCode": "            if (!hasSubscription)\n            {\n              myLogger.Trace(\"No handler for id: {0}\", id);\n            }\n            else if (msg1 != null)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "3371da12a64b14cb0d5ac64b4225efcd99c146f4f13044a84074769ebd2f09fb"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 269,
      "offset": 62,
      "length": 5,
      "code": {
        "startLine": 267,
        "length": 5,
        "offset": 162,
        "surroundingCode": "      var writerCaster = Expression.Lambda<Func<T, int>>(writerConvert, writerParameter).Compile();\n\n      Assertion.Assert(typeof(T).IsSubclassOf(typeof(Enum)), \"{0}\", typeof(T));\n      var result = new SerializerPair(\n        (CtxReadDelegate<T>) ((ctx, reader) => readerCaster(reader.ReadInt())),"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "35dfd8fd483ae86583f2de1e5eb0ceb8b065aeb49fcb5e151c2935d87fcd9287"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/InternRoot.cs",
      "language": "C#",
      "line": 163,
      "offset": 36,
      "length": 44,
      "code": {
        "startLine": 161,
        "length": 44,
        "offset": 134,
        "surroundingCode": "    {\n      Assertion.Require(RdId.IsNil, \"Already has RdId: {0}, entity: {1}\", RdId, this);      \n      Assertion.Require(!id.IsNil, \"Assigned RdId mustn't be null, entity: {0}\", this);\n      \n      RdId = id;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "37b3545312d47965683ace28543d3484c9e3512c2a9ce2bf673bbd7c9a7e4ac3"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/HeavySingleContextHandler.cs",
      "language": "C#",
      "line": 91,
      "offset": 51,
      "length": 90,
      "code": {
        "startLine": 89,
        "length": 90,
        "offset": 111,
        "surroundingCode": "      if (myProtocolValueSet.Contains(value)) return;\n      \n      Assertion.Require(Proto.Scheduler.IsActive, \"Attempting to use previously unused context value {0} on a background thread for key {1}\", value, Context.Key);\n      myProtocolValueSet.Add(Context.Value);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "384f3819f8e3d370ded713fe078626ea99b50083ed3fafe99875e629a5a9394c"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/JetPriorityQueue.cs",
      "language": "C#",
      "line": 156,
      "offset": 35,
      "length": 52,
      "code": {
        "startLine": 154,
        "length": 52,
        "offset": 90,
        "surroundingCode": "\n      var cmp2 = myVersions[left] - myVersions[right];\n      Assertion.Assert(cmp2 != 0, \"Equal versions for indices {0}, {1}, version = {2}\", left, right, myVersions[left]);\n      return cmp2 > 0 ? 1 : -1;\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "3cb89fc9e0502fa5d47ff9468d2db44405c882357457849ffec30aa900c469fc"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 653,
      "offset": 43,
      "length": 36,
      "code": {
        "startLine": 651,
        "length": 36,
        "offset": 121,
        "surroundingCode": "    {\n      if (child == null) throw new ArgumentNullException(nameof(child));\n      Assertion.Require(!child.IsEternal, \"{0}: can't attach eternal lifetime\", this);\n\n      if (child.Status >= LifetimeStatus.Canceling) //should not normally happen"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "3ee6a9f988753527733c1f6098517d5ef01a6b684f06119cd3facedb78b6e433"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 677,
      "offset": 33,
      "length": 67,
      "code": {
        "startLine": 675,
        "length": 67,
        "offset": 93,
        "surroundingCode": "                  if (!lifetime.IsAlive)\n                  {\n                    Log.Verbose(\"{0} : connected, but lifetime is already canceled, closing socket\", Id);\n                    CloseSocket(s);\n                    return;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "3f0affa01c53eafeb4c7851c8bdf71ea2886e671f936497db46975c61b916603"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 558,
      "offset": 33,
      "length": 17,
      "code": {
        "startLine": 556,
        "length": 17,
        "offset": 75,
        "surroundingCode": "                  else\n                  {\n                    Log.Verbose(\"{0} : connected\", Id);\n                  }\n                }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "41ff5f962cdb40cb2c0328f00343636ef179b794d986e36317bcfaa2d483bc29"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 532,
      "offset": 25,
      "length": 48,
      "code": {
        "startLine": 530,
        "length": 48,
        "offset": 46,
        "surroundingCode": "\n            default:\n              Log.Error(\"{0}: unknown type of termination resource: {1}\", this, resources[i]);\n              break;\n          }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "434ce2703c0b0494526800feb6a9fbba9dcfe777c22c51d17e6a9a1bf32fb6d8"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/ProtocolContexts.cs",
      "language": "C#",
      "line": 166,
      "offset": 73,
      "length": 54,
      "code": {
        "startLine": 164,
        "length": 54,
        "offset": 127,
        "surroundingCode": "    {\n      var numContextValues = reader.ReadShort();\n      Assertion.Assert(numContextValues <= myCounterpartHandlers.Count, \"We know of {0} other side keys, received {1} instead\", myCounterpartHandlers.Count, numContextValues);\n      \n      var pool = ourListsPool ??= new SingleThreadListPool<IDisposable>(2);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "46c131ad1f192b5b3a99c3d101d62ec5aec03409ddf209afcde0dd85a1e4b77d"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RpcTimeouts.cs",
      "language": "C#",
      "line": 60,
      "offset": 62,
      "length": 46,
      "code": {
        "startLine": 58,
        "length": 46,
        "offset": 139,
        "surroundingCode": "    public RpcTimeouts(TimeSpan warnAwaitTime, TimeSpan errorAwaitTime)\n    {\n      Assertion.Require(warnAwaitTime.TotalMilliseconds > 0, \"Warn timeout should be more 0ms but was: {0}\", warnAwaitTime.TotalMilliseconds);\n      Assertion.Require(warnAwaitTime <= errorAwaitTime, \"Warn timeout should ({0} ms) <= Error Timeout ({1} ms)\", warnAwaitTime.TotalMilliseconds, ErrorAwaitTime.TotalMilliseconds);\n      "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "4e9ce52c4ba4fb4ba0f67da0c5dbbb0c0728d07fde83d25d3f8d364ba7ea42b6"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/BitSlice.cs",
      "language": "C#",
      "line": 177,
      "offset": 44,
      "length": 54,
      "code": {
        "startLine": 175,
        "length": 54,
        "offset": 153,
        "surroundingCode": "      var values = ((T[]) System.Enum.GetValues(typeof(T))).Select(Cast32BitEnum<T>.ToUInt).ToArray();\n      \n      Assertion.Require(values.Length > 0, \"Bit slice for enum {0} with no values is meaningless\", typeof(T));\n      \n      var max = values.Max();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "5093af8a661526807dc8442019278a15fe9a9c0a70c9b539f5927ce8a93f98e5"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/MessageBroker.cs",
      "language": "C#",
      "line": 226,
      "offset": 71,
      "length": 71,
      "code": {
        "startLine": 224,
        "length": 71,
        "offset": 192,
        "surroundingCode": "\n              mq.DefaultSchedulerMessages.Clear(); // clear it here because it is captured by default scheduler queueing\n              Assertion.Assert(mq.CustomSchedulerMessages.Count == 0, \"Custom scheduler messages for an entity with outOfOrder scheduler {0}\", reactive);\n            }\n          }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "538a99214ff986b3b5661fd36dc982ac58499513d2edbcfed25bfeef84b585e1"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 188,
      "offset": 27,
      "length": 46,
      "code": {
        "startLine": 186,
        "length": 46,
        "offset": 110,
        "surroundingCode": "            if (e is SocketException || e is ObjectDisposedException)\n            {\n              Log.Verbose(\"Exception in SocketWire.Receive: {0} {1} {2}\", e.GetType().Name, Id, e.Message);\n\n              //That's why we don't use Timeout any more. Exception happens only on windows but blocks socket completely."
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "545abb951d73e292331c61cbd967955eda70072707e8cdf33f4375abfa058ec6"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 354,
      "offset": 47,
      "length": 35,
      "code": {
        "startLine": 352,
        "length": 35,
        "offset": 156,
        "surroundingCode": "\n      Assertion.Assert(!requestType.IsByRef, \"ByRef is not supported. ({0}.{1})\", typebuilder, requestType);\n      Assertion.Assert(!responseType.IsByRef, \"ByRef is not supported. ({0}.{1})\", typebuilder, responseType);\n\n      var fieldType = typeof(IRdCall<,>).MakeGenericType(requestType, responseType);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "546f528f52f84fb91aa99e5077472e108bf8a65d7476572505e48a9eb340049b"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 711,
      "offset": 23,
      "length": 18,
      "code": {
        "startLine": 709,
        "length": 18,
        "offset": 37,
        "surroundingCode": "          });\n\n          Log.Verbose(\"{0}: terminated.\", Id);\n        }) {Name = Id + \"-Receiver\", IsBackground = true};\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "553c5f35330029f2197b44b31d1ccb9582d7031eb252c9200834249c0096b991"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/InternRoot.cs",
      "language": "C#",
      "line": 162,
      "offset": 37,
      "length": 36,
      "code": {
        "startLine": 160,
        "length": 36,
        "offset": 100,
        "surroundingCode": "    public void Identify(IIdentities identities, RdId id)\n    {\n      Assertion.Require(RdId.IsNil, \"Already has RdId: {0}, entity: {1}\", RdId, this);      \n      Assertion.Require(!id.IsNil, \"Assigned RdId mustn't be null, entity: {0}\", this);\n      "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "5b9f120042476cda0dad685aa2a592a4f691dc1fa195e23eb72c52d40d27d1dc"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGeneratorUtil.cs",
      "language": "C#",
      "line": 57,
      "offset": 39,
      "length": 16,
      "code": {
        "startLine": 55,
        "length": 16,
        "offset": 178,
        "surroundingCode": "    public static TRes SyncNested<TReq, TRes>(RdCall<TReq, TRes> call, Lifetime lifetime, TReq request, RpcTimeouts? timeouts = null)\n    {\n      Assertion.Require(call.IsBound, \"Not bound: {0}\", call);\n\n      // Sync calls can called only under the protocol's scheduler."
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "6b33c7e3f10a2c348f26477e352080406fc49724e0acc9c082ee3ab3dcfecce3"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 564,
      "offset": 55,
      "length": 42,
      "code": {
        "startLine": 562,
        "length": 42,
        "offset": 158,
        "surroundingCode": "      \n      var statusIncrementedSuccessfully = IncrementStatusIfEqualsTo(LifetimeStatus.Terminating);\n      Assertion.Assert(statusIncrementedSuccessfully, \"{0}: bad status for destructuring finish\", this);\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "6c91662a6d90d7b248b477bf467297ed79db1dfe7f604807b5f42edf2f8e1c00"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/JetPriorityQueue.cs",
      "language": "C#",
      "line": 162,
      "offset": 59,
      "length": 36,
      "code": {
        "startLine": 160,
        "length": 36,
        "offset": 99,
        "surroundingCode": "    private void HeapDown(int idx)\n    {\n      Assertion.Assert(idx >= 1 && idx < myStorage.Count, \"Index {0} is not in range [1, {1})\", idx, myStorage.Count);\n\n      int n = myStorage.Count;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "6ca4577b6f8b0488adb753718e092e0e6620d9cdb96bdd44ebf6e038ecfc8ab8"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/ProtocolContexts.cs",
      "language": "C#",
      "line": 124,
      "offset": 41,
      "length": 51,
      "code": {
        "startLine": 122,
        "length": 51,
        "offset": 128,
        "surroundingCode": "    public IViewableSet<T> GetValueSet<T>(RdContext<T> context) where T : notnull\n    {\n      Assertion.Assert(context.IsHeavy, \"Only heavy keys have value sets, key {0} is light\", context.Key);\n      return ((HeavySingleContextHandler<T>) GetHandlerForContext(context)).LocalValueSet;\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "701493f6d71be20c33c531b7fe6bf5c73df4c1379fb0e69306ed72c67585586e"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFacade.cs",
      "language": "C#",
      "line": 41,
      "offset": 47,
      "length": 49,
      "code": {
        "startLine": 39,
        "length": 49,
        "offset": 194,
        "surroundingCode": "      var type = ProxyGenerator.CreateType<TInterface>();\n      var proxyInstance = Activator.ActivateBind(type, lifetime, protocol) as TInterface;\n      Assertion.Assert(proxyInstance != null, \"Unable to cast proxy to desired interface ({0})\", typeof(TInterface));\n      return proxyInstance;\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "76c33f15dfe35187c98c8067e56d48631d2df35f231c06890874514f96fe0e7a"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 591,
      "offset": 45,
      "length": 71,
      "code": {
        "startLine": 589,
        "length": 71,
        "offset": 82,
        "surroundingCode": "\n        var resources = myResources;\n        Assertion.Assert(resources != null, \"{0}: `resources` can't be null under mutex while status < Terminating\", this);\n        \n        if (myResCount == resources.Length)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "77ceda991943855502911d3a6d484bbf195f448c87774082762df33e46ea12fc"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdReactiveBase.cs",
      "language": "C#",
      "line": 51,
      "offset": 34,
      "length": 16,
      "code": {
        "startLine": 49,
        "length": 16,
        "offset": 72,
        "surroundingCode": "    protected void AssertBound()\n    {\n      Assertion.Require(IsBound, \"Not bound: {0}\", this);\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "7dc1ffc24d378947dccdfd2483cbb0abbbad18d722db7d768555aa7f00c0f2ca"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 264,
      "offset": 75,
      "length": 45,
      "code": {
        "startLine": 262,
        "length": 45,
        "offset": 126,
        "surroundingCode": "    private void RegisterModelSerializer<T>()\n    {\n      Assertion.Assert(!ReflectionSerializerVerifier.IsScalar(typeof(T)), \"Type {0} should be either RdModel or RdExt.\", typeof(T));\n      // place null marker to detect circular dependencies\n      mySerializers.Add(typeof(T), null!);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "7ed1451b57fe42c573444422b6170ff4d930b1a759bc74e46c1c04596ce14401"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 534,
      "offset": 25,
      "length": 15,
      "code": {
        "startLine": 532,
        "length": 15,
        "offset": 50,
        "surroundingCode": "          try\n          {\n            Log.Verbose(\"{0} : started\", Id);\n            var lastReportedErrorHash = 0;\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "7fbbbd35b7a5f3d8db6655fac14ef93b7b43a745f4e6825db440624a36ae0898"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGeneratorUtil.cs",
      "language": "C#",
      "line": 89,
      "offset": 26,
      "length": 55,
      "code": {
        "startLine": 87,
        "length": 55,
        "offset": 107,
        "surroundingCode": "        if (freezeTime > timeoutsToUse.WarnAwaitTime.TotalMilliseconds)\n        {\n          Log.Root.Error(\"Sync execution of rpc `{0}` executed too long: {1} ms\", call.Location, freezeTime);\n        }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "846f6aae8cf32cb7266a13fe52eef1966691a30060173a04d4330a3b053d7989"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdPerContextMap.cs",
      "language": "C#",
      "line": 55,
      "offset": 47,
      "length": 26,
      "code": {
        "startLine": 53,
        "length": 26,
        "offset": 116,
        "surroundingCode": "        {\n          var currentId = Context.ValueForPerContextEntity;\n          Assertion.Assert(currentId != null, \"No value set for key {0}\", Context.Key);\n          if (TryGetValue(currentId, out var value))\n            return value;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "85e5e6d794be92d918cc57fec632a1ea803f6e3c275be52a10837fd4b1bf43ca"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 702,
      "offset": 29,
      "length": 47,
      "code": {
        "startLine": 700,
        "length": 47,
        "offset": 92,
        "surroundingCode": "              catch (ObjectDisposedException e)\n              {\n                Log.Verbose(\"{0}: ObjectDisposedException with message {1}\", Id, e.Message);\n              }\n              catch (Exception e)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "8e14314608bdfa8b2f1c59d73be7e6ef32797fff327e9acaee11a66812683745"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/InternRoot.cs",
      "language": "C#",
      "line": 190,
      "offset": 54,
      "length": 42,
      "code": {
        "startLine": 188,
        "length": 42,
        "offset": 108,
        "surroundingCode": "        {\n          var oldPair = myInverseMap[value];\n          Assertion.Assert(!oldPair.ExtraId.IsValid, \"Remote send duplicated IDs for value {0}\", value);\n          var modifiedPair = oldPair;\n          modifiedPair.ExtraId = id;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "8eea72fa1c165db6ddd3ad124113d08995b1ca38d957160f302183f0a06886d9"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SchedulerEx.cs",
      "language": "C#",
      "line": 15,
      "offset": 24,
      "length": 76,
      "code": {
        "startLine": 13,
        "length": 76,
        "offset": 60,
        "surroundingCode": "    {\n      if (!scheduler.IsActive)\n        Log.Root.Error(\"Illegal scheduler for current action, must be: {0}, current thread: {1}{2}\", scheduler, Thread.CurrentThread.ToThreadString(), \n          debugInfo != null ? \", debug info: \"+debugInfo : \"\");\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "8fb45464d84417768a1d4ae3cd201d7e668cfc7878d6af253f9a198bc5b3bfab"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/MessageBroker.cs",
      "language": "C#",
      "line": 79,
      "offset": 55,
      "length": 22,
      "code": {
        "startLine": 77,
        "length": 22,
        "offset": 156,
        "surroundingCode": "        var reader = UnsafeReader.CreateReader(p, msg.Length);\n        var rdid0 = RdId.Read(reader);\n        Assertion.Assert(reactive.RdId.Equals(rdid0), \"Not equals: {0}, {1}\", reactive.RdId, rdid0);\n\n        if (BackwardsCompatibleWireFormat)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "917542a35a2db9a4ff20f504a3b36582dd66a39ed647b8b485bbdea544df5440"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 223,
      "offset": 20,
      "length": 85,
      "code": {
        "startLine": 221,
        "length": 85,
        "offset": 97,
        "surroundingCode": "        if (!msgBuffer.Read(ref myPkgBuffer, ReceiveFromPkgBuffer))\n        {\n          Log.Warn(\"{0}: Can't read message with len={1} from the wire because connection was shut down\", Id, len);\n          return false;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "94b95c4a27aaecfdd07b7cff63ee10afb631a4982e374d9ab56490cdf05b796f"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdBindableBase.cs",
      "language": "C#",
      "line": 110,
      "offset": 36,
      "length": 44,
      "code": {
        "startLine": 108,
        "length": 44,
        "offset": 134,
        "surroundingCode": "    {\n      Assertion.Require(RdId.IsNil, \"Already has RdId: {0}, entity: {1}\", RdId, this);      \n      Assertion.Require(!id.IsNil, \"Assigned RdId mustn't be null, entity: {0}\", this);\n      \n      RdId = id;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "9b90bfd994e63c94d053c9ca8368d7f71eeb9f09a56e8a23883917184dc02b9a"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 507,
      "offset": 25,
      "length": 27,
      "code": {
        "startLine": 505,
        "length": 27,
        "offset": 95,
        "surroundingCode": "              Log.Verbose(\"{0}: unable to join receiver thread\", Id);\n\n            Log.Verbose(\"{0}: termination finished\", Id);\n          }\n        );"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "9ba0e1eb6ed09960ee7cd628d3832cc8a48964a71981b7dc76a0715707ec495e"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 491,
      "offset": 25,
      "length": 36,
      "code": {
        "startLine": 489,
        "length": 36,
        "offset": 75,
        "surroundingCode": "        myLifetime.OnTermination(() =>\n          {\n            Log.Verbose(\"{0}: start termination of lifetime\", Id);\n\n            var sendBufferStopped = SendBuffer.Stop(5_000);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "9edd5d420249fc384d261187d1ee1d42577728961225a027d95486af5f985a37"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 661,
      "offset": 21,
      "length": 26,
      "code": {
        "startLine": 659,
        "length": 26,
        "offset": 172,
        "surroundingCode": "        if (serverSocket == null) throw new ArgumentNullException(nameof(serverSocket));\n        Port = ((IPEndPoint) serverSocket.LocalEndPoint).Port;\n        Log.Verbose(\"{0} : started, port: {1}\", Id, Port);\n\n        var thread = new Thread(() =>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "9fa87faa592adcd1d37813d33c7208e2a1b193f66ff13cb44aad80e33d1b790b"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/BitSlice.cs",
      "language": "C#",
      "line": 53,
      "offset": 36,
      "length": 33,
      "code": {
        "startLine": 51,
        "length": 33,
        "offset": 73,
        "surroundingCode": "      if (!Mode.IsAssertion) return;\n\n      Assertion.Assert(value >= 0, \"[{0}] must be >= 0; actual: {1}\", nameof(value), value);\n      Assertion.Assert(value <= Mask, \"[{0}] must be <= {1} to fit {2}; actual: {3}\", nameof(value), Mask, this, value);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "a0c5259b09168cf13cc9bc3ffe1cd3ef73beed0f5943c8e022326863b2c97dc6"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 683,
      "offset": 33,
      "length": 16,
      "code": {
        "startLine": 681,
        "length": 16,
        "offset": 75,
        "surroundingCode": "                  else\n                  {\n                    Log.Verbose(\"{0} : accepted\", Id);\n                    if (!AcceptHandshake(s))\n                      continue;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "a3f20d4c6bd235559f710cc736741d2f09afb75d6be9800cfa550cfafc807f15"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 545,
      "offset": 29,
      "length": 25,
      "code": {
        "startLine": 543,
        "length": 25,
        "offset": 66,
        "surroundingCode": "\n                SetSocketOptions(s);\n                Log.Verbose(\"{0}: connecting to {1}.\", Id, endPoint);\n                s.Connect(endPoint);\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "a532390d628328f6a91156e3c72c21335d08db0d4619b2a8ebe611662390cc57"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/BitSlice.cs",
      "language": "C#",
      "line": 54,
      "offset": 39,
      "length": 46,
      "code": {
        "startLine": 52,
        "length": 46,
        "offset": 132,
        "surroundingCode": "\n      Assertion.Assert(value >= 0, \"[{0}] must be >= 0; actual: {1}\", nameof(value), value);\n      Assertion.Assert(value <= Mask, \"[{0}] must be <= {1} to fit {2}; actual: {3}\", nameof(value), Mask, this, value);\n    }\n    "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "a8e5e51100a354af9afe30329d92ed01bfdbe2ed3eb6da8f3114851d2902fbc3"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdMap.cs",
      "language": "C#",
      "line": 233,
      "offset": 34,
      "length": 28,
      "code": {
        "startLine": 231,
        "length": 28,
        "offset": 58,
        "surroundingCode": "\n          if (IsMaster)\n            ourLogReceived.Error(\"Both ends are masters: {0}\", Location);\n        }\n      }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "aa86538c239f5acec8c2c179e6b071ec08c5071d0f83a498268324b7d65a9de9"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdCall.cs",
      "language": "C#",
      "line": 152,
      "offset": 24,
      "length": 55,
      "code": {
        "startLine": 150,
        "length": 55,
        "offset": 101,
        "surroundingCode": "      if (freezeTime > timeoutsToUse.WarnAwaitTime.TotalMilliseconds)\n      {\n        Log.Root.Error(\"Sync execution of rpc `{0}` executed too long: {1} ms\", Location, freezeTime);\n      }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "ad4de24d1324bfd67fa651835e0d3416d29850d0dd72a2f3fa97b16049ba6c5a"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ByteBufferAsyncProcessor.cs",
      "language": "C#",
      "line": 52,
      "offset": 51,
      "length": 33,
      "code": {
        "startLine": 50,
        "length": 33,
        "offset": 82,
        "surroundingCode": "        if (Ptr == 0)\n        {\n          Assertion.Assert(SeqN == long.MaxValue, \"SeqN == long.MaxValue, but: {0}\", SeqN);\n          return true;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "ae29b1264945403f225487e985e912c985581520fc52e273364d66c81796b67b"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 576,
      "offset": 31,
      "length": 51,
      "code": {
        "startLine": 574,
        "length": 51,
        "offset": 69,
        "surroundingCode": "                else\n                {\n                  Log.Verbose(\"{0}: connection error for endpoint \\\"{1}\\\" ({2}).\", Id, endPoint, ex.Message);\n                }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "b03b0da051f28e43cca174fc1d9b23ef0bc1300218fce94bd8a87eec2098b573"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Linearization.cs",
      "language": "C#",
      "line": 45,
      "offset": 43,
      "length": 35,
      "code": {
        "startLine": 43,
        "length": 35,
        "offset": 83,
        "surroundingCode": "        if (!myEnabled) return;\n        \n        Assertion.Require(id <= myNextId, \"Point {0} already set, nextId={1}\", id, myNextId);\n        myNextId++; \n        "
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "b0ea98794f157b555eda7acce445254568e15fed1adf23e6f0cf62c347d8cb8f"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 1215,
      "offset": 36,
      "length": 39,
      "code": {
        "startLine": 1213,
        "length": 39,
        "offset": 50,
        "surroundingCode": "      }\n      \n      LifetimeDefinition.Log.Error(\"{0} hasn't been terminated in {1} {2}\", this, timeout, string.IsNullOrEmpty(comment) ? \"\" : comment);\n    }\n    #endif"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "b24aa6c28f2ba84ebf8eac1308e7e5cc1adfddeb6a88a8594c65fd7a216992b0"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/MessageBroker.cs",
      "language": "C#",
      "line": 205,
      "offset": 47,
      "length": 16,
      "code": {
        "startLine": 203,
        "length": 16,
        "offset": 116,
        "surroundingCode": "    public void Advise(Lifetime lifetime, IRdWireable reactive)\n    {\n      Assertion.Require(!reactive.RdId.IsNil, \"!id.IsNil: {0}\", reactive);\n\n      //todo commented because of WiredRdTask"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "b2cd75f1012e7c6dd9f81079de435b8ea9d0703648fdfecfc843ef4747befd87"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 292,
      "offset": 39,
      "length": 49,
      "code": {
        "startLine": 290,
        "length": 49,
        "offset": 90,
        "surroundingCode": "\n      var uncasted = ctxReadDelegate(ctx, reader);\n      Assertion.Assert(uncasted is T, \"Bad cast for id {0}. Expected: {1}, actual: {2}\", typeId, typeof(T).Name, uncasted.GetType().Name);\n      return (T)uncasted;\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "b357d1beff4dc88489cd901fc4d1b57db89923bf9c9df631e3f7c4835a53b832"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdBindableBase.cs",
      "language": "C#",
      "line": 193,
      "offset": 42,
      "length": 66,
      "code": {
        "startLine": 191,
        "length": 66,
        "offset": 135,
        "surroundingCode": "        {\n          var val = existing.NotNull(\"Found null value for key: '{0}'\", name) as T;\n          Assertion.Require(val != null, \"Found bad value for key '{0}'. Expected type: '{1}', actual:'{2}\", name, typeof(T).FullName, existing.GetType().FullName);\n          res = val;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "b42c0acbb84bd03a57ac592462ba383fbaa1ea687910d2f6d42ae4add9256d1f"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 173,
      "offset": 27,
      "length": 40,
      "code": {
        "startLine": 171,
        "length": 40,
        "offset": 68,
        "surroundingCode": "            if (!ReadMsg())\n            {\n              Log.Verbose(\"{0} Connection was gracefully shutdown\", Id);\n              break;\n            }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "b6c9ea8e513eb1819acb81ab8b8b3f3c41909081f18d9d75ca3b609388ecefe0"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/BitSlice.cs",
      "language": "C#",
      "line": 45,
      "offset": 41,
      "length": 61,
      "code": {
        "startLine": 43,
        "length": 61,
        "offset": 125,
        "surroundingCode": "      \n      Assertion.Assert(maxBit > 0, \"Unsupported host type: {0}\", type);      \n      Assertion.Assert(HiBit <= maxBit, \"{0} doesn't fit into host type {1}; must be inside [0, {2}]\", this, type, maxBit);\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "b70073029103d50a08749de7b00e5294f5b33489395a94c536d6484e71b68fad"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/MessageBroker.cs",
      "language": "C#",
      "line": 58,
      "offset": 26,
      "length": 36,
      "code": {
        "startLine": 56,
        "length": 36,
        "offset": 72,
        "surroundingCode": "          Execute(reactive, msg);\n        else\n          myLogger.Trace(\"Handler for entity {0} dissapeared\", reactive);\n      });\n      "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "badf174d13b7b726bf600a4d232a456a09ddb107bbe7c61ffefe9f843ba27a16"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 671,
      "offset": 29,
      "length": 28,
      "code": {
        "startLine": 669,
        "length": 28,
        "offset": 62,
        "surroundingCode": "              try\n              {\n                Log.Verbose(\"{0} : accepting, port: {1}\", Id, Port);\n                var s = serverSocket.Accept();\n                lock (Lock)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "bb03ebd608c83fb6e9f4bf44d6b10bd38d6112fdd0da4bee968241fa62e1aec2"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/BitSlice.cs",
      "language": "C#",
      "line": 44,
      "offset": 36,
      "length": 28,
      "code": {
        "startLine": 42,
        "length": 28,
        "offset": 55,
        "surroundingCode": "        : 0;\n      \n      Assertion.Assert(maxBit > 0, \"Unsupported host type: {0}\", type);      \n      Assertion.Assert(HiBit <= maxBit, \"{0} doesn't fit into host type {1}; must be inside [0, {2}]\", this, type, maxBit);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "c166771aeb45c4a2bca5988a9ca84e7524c1f1a0c299c0a8c49c32ad28165ce4"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 494,
      "offset": 25,
      "length": 40,
      "code": {
        "startLine": 492,
        "length": 40,
        "offset": 85,
        "surroundingCode": "\n            var sendBufferStopped = SendBuffer.Stop(5_000);\n            Log.Verbose(\"{0}: send buffer stopped, success: {1}\", Id, sendBufferStopped);\n\n            lock (Lock)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "c547e0bd5d0f63a63e2569b50c9ca9ac12a8ef6855f3e4297affce33a5018de6"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 91,
      "offset": 36,
      "length": 10,
      "code": {
        "startLine": 89,
        "length": 10,
        "offset": 77,
        "surroundingCode": "    public bool RemoveAt(int index)\n    {\n      Assertion.Assert(index >= 0, \"{0} >= 0\", index);\n      if (index >= Count) return false;\n      "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "c84d16e8d0de58aa31640b00c0e859438a07457e5b20a1d17cfa6eef9da74c3c"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RpcTimeouts.cs",
      "language": "C#",
      "line": 61,
      "offset": 58,
      "length": 56,
      "code": {
        "startLine": 59,
        "length": 56,
        "offset": 206,
        "surroundingCode": "    {\n      Assertion.Require(warnAwaitTime.TotalMilliseconds > 0, \"Warn timeout should be more 0ms but was: {0}\", warnAwaitTime.TotalMilliseconds);\n      Assertion.Require(warnAwaitTime <= errorAwaitTime, \"Warn timeout should ({0} ms) <= Error Timeout ({1} ms)\", warnAwaitTime.TotalMilliseconds, ErrorAwaitTime.TotalMilliseconds);\n      \n      "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "ca6c8bc3203111ec3ffbf5a1bd2c1386790039918cfe61bf3785c67bce55ae3f"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ByteBufferAsyncProcessor.cs",
      "language": "C#",
      "line": 394,
      "offset": 23,
      "length": 31,
      "code": {
        "startLine": 392,
        "length": 31,
        "offset": 88,
        "surroundingCode": "        \n        var newReasonAdded = myPauseReasons.Add(reason);\n        myLog.Verbose(\"PAUSE ('{0}') {1}:: state={2}\", reason, newReasonAdded ? \"\": \"<already has this pause reason>\", State);\n        \n        WaitProcessingFinished();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "caf2fc5e850053971fe7a9f82f72f4fee1c0041118a7ad2224aba0476d8cdc8f"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 353,
      "offset": 46,
      "length": 35,
      "code": {
        "startLine": 351,
        "length": 35,
        "offset": 102,
        "surroundingCode": "      var responseType = GetResponseType(method, true);\n\n      Assertion.Assert(!requestType.IsByRef, \"ByRef is not supported. ({0}.{1})\", typebuilder, requestType);\n      Assertion.Assert(!responseType.IsByRef, \"ByRef is not supported. ({0}.{1})\", typebuilder, responseType);\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "cff9c5bc09189adb2af1be0f7d6ddca4b2fd3b5f2b9c9668366e99d0e80d7616"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 503,
      "offset": 25,
      "length": 34,
      "code": {
        "startLine": 501,
        "length": 34,
        "offset": 39,
        "surroundingCode": "            }\n\n            Log.Verbose(\"{0}: waiting for receiver thread\", Id);\n            if (!receiverThread.Join(TimeoutMs + 100))\n              Log.Verbose(\"{0}: unable to join receiver thread\", Id);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "d3d9b4636a8ca24b99d305fea1beecd16f50e8ada74a1eaa1a2146c9be4a21e4"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 194,
      "offset": 19,
      "length": 211,
      "code": {
        "startLine": 192,
        "length": 211,
        "offset": 61,
        "surroundingCode": "              {\n                Log.Error(\n                  \"ERROR! Socket {0} {1} is in invalid state. Probably no more messages will be received. Exception message: '{2}'. \" +\n                  \"Sometimes it happens because of Timeout property on socket. Your os: {3}.\",\n                  e.GetType().Name, Id, e.Message, Environment.OSVersion.VersionString);\n              }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "d58f749e0135a692c44900087d6149adf364bd20e911c1e91b7253d1d4b2a0b7"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Linearization.cs",
      "language": "C#",
      "line": 35,
      "offset": 34,
      "length": 10,
      "code": {
        "startLine": 33,
        "length": 10,
        "offset": 69,
        "surroundingCode": "    public void Point(int id)\n    {\n      Assertion.Require(id >= 0, \"{0} >= 0\", id);\n\n      lock (myLock)"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "dcc3c1d57c9a39f4b98d7cc6b4434d966a4af7ba25b87b8f2a6f09c6b55c5aa9"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 498,
      "offset": 27,
      "length": 41,
      "code": {
        "startLine": 496,
        "length": 41,
        "offset": 64,
        "surroundingCode": "            lock (Lock)\n            {\n              Log.Verbose(\"{0}: closing socket because of lifetime\", Id);\n              CloseSocket(Socket);\n              Monitor.PulseAll(Lock);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "dd26b9b93342626f8f789a7a5d92f5fb5d240bca4981be457ed4a27674ac5f38"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 592,
      "offset": 25,
      "length": 39,
      "code": {
        "startLine": 590,
        "length": 39,
        "offset": 72,
        "surroundingCode": "          catch (SocketException e)\n          {\n            Log.Verbose(\"{0}: SocketException with message {1}\", Id, e.Message);\n          }\n          catch (ObjectDisposedException e)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "de1f17cc706b8ae59483906fe2a9ffc5f6fcdf830012b2ccbe5a9a266f67398f"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/DictionaryEx.cs",
      "language": "C#",
      "line": 73,
      "offset": 55,
      "length": 21,
      "code": {
        "startLine": 71,
        "length": 21,
        "offset": 89,
        "surroundingCode": "          lock (@lock)\n          {\n            Assertion.Require(dictionary.Remove(key), \"No value by key {0}\", key);\n          }\n        });"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "ee00607f6e0e5d7b258067a8dc09922227797f06ca9fa60dce6d8d5b2964b697"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 505,
      "offset": 27,
      "length": 37,
      "code": {
        "startLine": 503,
        "length": 37,
        "offset": 146,
        "surroundingCode": "            Log.Verbose(\"{0}: waiting for receiver thread\", Id);\n            if (!receiverThread.Join(TimeoutMs + 100))\n              Log.Verbose(\"{0}: unable to join receiver thread\", Id);\n\n            Log.Verbose(\"{0}: termination finished\", Id);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "ee70cd57dd501b29450d625b6c950b52491bba8d2d11239a5a989e3c1050276b"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/BitSlice.cs",
      "language": "C#",
      "line": 180,
      "offset": 46,
      "length": 60,
      "code": {
        "startLine": 178,
        "length": 60,
        "offset": 82,
        "surroundingCode": "      \n      var max = values.Max();\n      Assertion.Require(max <= int.MaxValue, \"Values in enum must {0} must be in range [0..int.MaxValue]\", typeof(T));\n      \n      var count = max + 1L;            "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "ef1d7d403136ad58d2addd0d89be3d1e9d16222159cd305dccba1f48d199c107"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 481,
      "offset": 21,
      "length": 44,
      "code": {
        "startLine": 479,
        "length": 44,
        "offset": 60,
        "surroundingCode": "      private void LogTraffic()\n      {\n        Log.Verbose(\"{0}: Total traffic: sent {1}, received {2}\", Id, WrittenBytesCount, ReadBytesCount);\n      }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "f1d06fd4534d2a84387b6da53974cf9726a422360110971fe09da2fa8e3401cf"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdBindableBase.cs",
      "language": "C#",
      "line": 109,
      "offset": 37,
      "length": 36,
      "code": {
        "startLine": 107,
        "length": 36,
        "offset": 108,
        "surroundingCode": "    public virtual void Identify(IIdentities identities, RdId id)\n    {\n      Assertion.Require(RdId.IsNil, \"Already has RdId: {0}, entity: {1}\", RdId, this);      \n      Assertion.Require(!id.IsNil, \"Assigned RdId mustn't be null, entity: {0}\", this);\n      "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "f27349e24b72adf0977d045498e0125cc1f6c4754d71174110b61edeffdc19a4"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 502,
      "offset": 62,
      "length": 41,
      "code": {
        "startLine": 500,
        "length": 41,
        "offset": 94,
        "surroundingCode": "    {\n      var status = Status;\n      Assertion.Assert(status == LifetimeStatus.Terminating, \"{0}: bad status for destructuring start\", this);\n      Assertion.Assert(ourMutexSlice[myState] == false, \"{0}: mutex must be released in this point\", this);\n      //no one can take mutex after this point"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "f46d5b11fa64b56ad10ba3da6446451b3aabaf9e494bc46f4c9dd334dbc41de2"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 507,
      "offset": 43,
      "length": 55,
      "code": {
        "startLine": 505,
        "length": 55,
        "offset": 78,
        "surroundingCode": "\n      var resources = myResources;\n      Assertion.Assert(resources != null, \"{0}: `resources` can't be null on destructuring stage\", this);\n      \n      for (var i = myResCount - 1; i >= 0; i--)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "f5d7cc34223cb9b27e86cfa506e34ea76d5b3d44a9b812c93abb7cc2b169a5eb"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 604,
      "offset": 25,
      "length": 18,
      "code": {
        "startLine": 602,
        "length": 18,
        "offset": 54,
        "surroundingCode": "          finally\n          {\n            Log.Verbose(\"{0}: terminated.\", Id);\n          }\n        }) {Name = Id+\"-Receiver\", IsBackground = true};"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "f802bf0e36a4817012902d398d7db1d4029359ec83c5182cedfc41bbd01e5ee3"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdReactiveBase.cs",
      "language": "C#",
      "line": 96,
      "offset": 40,
      "length": 21,
      "code": {
        "startLine": 94,
        "length": 21,
        "offset": 105,
        "surroundingCode": "    protected internal LocalChangeCookie UsingLocalChange()\n    {\n      Assertion.Assert(!IsLocalChange, \"!IsLocalChange: {0}\", this);\n      if (IsBound && !Async) AssertThreading();\n      return new LocalChangeCookie(this);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "faadba70529609ba961a464d72b2f6e6bfc596558c593a9ea530145a96fd7ace"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Pass string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Pass string interpolation",
  "detailsInfo": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 89,
      "offset": 47,
      "length": 39,
      "code": {
        "startLine": 87,
        "length": 39,
        "offset": 105,
        "surroundingCode": "\n      var hasValue  = map.TryGetValue(this, out var old);\n      Assertion.Assert(hasValue == (old > 0), \"Illegal state, hasValue={0}, _old={1}\", hasValue, old);\n      \n      var _new = old + increment;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PassStringInterpolation"
  },
  "hash": "fc5d90a000d4a29548a149f0ab3be2fcf0bb6255bc934668973ab211d411d8c9"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Possible ambiguity while accessing member by interface",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Possible ambiguity while accessing by this interface: ISignal Test.RdFramework.Reflection.ProxyGeneratorInheritanceNegativeTest.ITest1.Signal ISignal Test.RdFramework.Reflection.ProxyGeneratorInheritanceNegativeTest.ITest1.Signal.get ISignal Test.RdFramework.Reflection.ProxyGeneratorInheritanceNegativeTest.ITest2.Signal ISignal Test.RdFramework.Reflection.ProxyGeneratorInheritanceNegativeTest.ITest2.Signal.get",
  "detailsInfo": "Possible ambiguity while accessing member by interface",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorInheritanceNegativeTest.cs",
      "language": "C#",
      "line": 22,
      "offset": 22,
      "length": 16,
      "code": {
        "startLine": 20,
        "length": 16,
        "offset": 34,
        "surroundingCode": "\n    [RdRpc]\n    public interface IInheritanceTest : ITest2, ITest1\n    {\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "PossibleInterfaceMemberAmbiguity"
  },
  "hash": "120f93f1511893284e7c463521f381eb901713fbc12cc920b81db51d857328ed"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Possible ambiguity while accessing member by interface",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Possible ambiguity while accessing by this interface: RdId JetBrains.Rd.Base.IRdBindable.RdId RdId JetBrains.Rd.Base.IRdBindable.RdId.get RdId JetBrains.Rd.Base.IRdWireable.RdId RdId JetBrains.Rd.Base.IRdWireable.RdId.get",
  "detailsInfo": "Possible ambiguity while accessing member by interface",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IRdReactive.cs",
      "language": "C#",
      "line": 8,
      "offset": 20,
      "length": 11,
      "code": {
        "startLine": 6,
        "length": 11,
        "offset": 24,
        "surroundingCode": "{\n  \n  public interface IRdReactive : IRdBindable, IRdWireable\n  {\n    bool Async { get; set; }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PossibleInterfaceMemberAmbiguity"
  },
  "hash": "80f4a94cbcd4accbcecc024b049da12576cc7de3056a89a37993f7a1cd88cad0"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Possible 'System.NullReferenceException'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Possible 'System.NullReferenceException'",
  "detailsInfo": "Dereferencing an expression that can have 'null' value. This warning is detected either when there is a comparison with 'null' earlier in the code or when this value is returned by a member marked with 'Value can be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/PossibleNullReferenceException.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1333,
      "offset": 13,
      "length": 22,
      "code": {
        "startLine": 1331,
        "length": 22,
        "offset": 82,
        "surroundingCode": "          while (Volatile.Read(ref count) <= magicNumber)\n          {\n            Volatile.Read(ref def).Terminate();\n            Interlocked.Increment(ref count);\n          }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "PossibleNullReferenceException"
  },
  "hash": "20cc9f97cfcb3f328882cd4b2783eae47761a49f272d5224bfebedad11f97580"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Possible 'System.NullReferenceException'",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Possible 'System.NullReferenceException'",
  "detailsInfo": "Dereferencing an expression that can have 'null' value. This warning is detected either when there is a comparison with 'null' earlier in the code or when this value is returned by a member marked with 'Value can be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/PossibleNullReferenceException.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 366,
      "offset": 9,
      "length": 22,
      "code": {
        "startLine": 364,
        "length": 22,
        "offset": 69,
        "surroundingCode": "        method.CallingConvention,\n        method.ReturnType,\n        method.ReturnParameter.GetRequiredCustomModifiers(),\n        method.ReturnParameter.GetOptionalCustomModifiers(),\n        parameters.Select(param => param.ParameterType).ToArray(),"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "PossibleNullReferenceException"
  },
  "hash": "21022371446503cd2fd3ac4bb8260df761bbe6bacc96d29693c6b6ce5463f9c8"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Possible 'System.NullReferenceException'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Possible 'System.NullReferenceException'",
  "detailsInfo": "Dereferencing an expression that can have 'null' value. This warning is detected either when there is a comparison with 'null' earlier in the code or when this value is returned by a member marked with 'Value can be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/PossibleNullReferenceException.html)",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 148,
      "offset": 38,
      "length": 79,
      "code": {
        "startLine": 146,
        "length": 79,
        "offset": 50,
        "surroundingCode": "          {\n\n            foreach (XmlNode node in doc.SelectNodes($\"//x:HintPath[contains(text(), \\\"{pkg}\\\")]\", namespaceManager))\n            {\n              var text = (XmlText) node.FirstChild;"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "PossibleNullReferenceException"
  },
  "hash": "39d650aa8e76322677f7b658f6be8ad61f8fa1ba2a91a1ab93a37a958dfd7f34"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Possible 'System.NullReferenceException'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Possible 'System.NullReferenceException'",
  "detailsInfo": "Dereferencing an expression that can have 'null' value. This warning is detected either when there is a comparison with 'null' earlier in the code or when this value is returned by a member marked with 'Value can be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/PossibleNullReferenceException.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Reflection.App/Common/Util.cs",
      "language": "C#",
      "line": 13,
      "offset": 20,
      "length": 38,
      "code": {
        "startLine": 11,
        "length": 38,
        "offset": 42,
        "surroundingCode": "        return false;\n\n      var dotnet = Process.GetCurrentProcess().MainModule.FileName;\n      var startInfo = new ProcessStartInfo(dotnet, string.Join(\" \", Environment.GetCommandLineArgs()) + \" FORK\")\n      {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Reflection.App",
    "inspectionName": "PossibleNullReferenceException"
  },
  "hash": "3be20881025d5826c79d04247a84fee1b39ed12e18e8185ec6ff15f9543f891b"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Possible 'System.NullReferenceException'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Possible 'System.NullReferenceException'",
  "detailsInfo": "Dereferencing an expression that can have 'null' value. This warning is detected either when there is a comparison with 'null' earlier in the code or when this value is returned by a member marked with 'Value can be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/PossibleNullReferenceException.html)",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 154,
      "offset": 38,
      "length": 79,
      "code": {
        "startLine": 152,
        "length": 79,
        "offset": 52,
        "surroundingCode": "            }\n\n            foreach (XmlNode node in doc.SelectNodes($\"//x:Import[contains(@Project, \\\"{pkg}\\\")]\", namespaceManager))\n            {\n              node.Attributes[\"Project\"].Value = Regex.Replace(node.Attributes[\"Project\"].Value, $\"{pkg}.*.\\\\\\\\build\", $\"{pkg}.{RdVersion}\\\\build\");"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "PossibleNullReferenceException"
  },
  "hash": "4e5b99d5814635d4f1454dc0e7a87c1f22bb67cd64caed147f4d9065bc3c36c0"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Possible 'System.NullReferenceException'",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Possible 'System.NullReferenceException'",
  "detailsInfo": "Dereferencing an expression that can have 'null' value. This warning is detected either when there is a comparison with 'null' earlier in the code or when this value is returned by a member marked with 'Value can be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/PossibleNullReferenceException.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 220,
      "offset": 38,
      "length": 8,
      "code": {
        "startLine": 218,
        "length": 8,
        "offset": 95,
        "surroundingCode": "\n        myCurrentAllocSize = NativeMemoryPool.AllocSize;\n        myStartPtr = myPtr = (byte*) myMemory.Data;\n        myCount = 0;\n      }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PossibleNullReferenceException"
  },
  "hash": "629582ff6fa1c82c3fc49b4d28fa35b2706f07bdb62a583c54c534a35ecd4a8d"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Possible 'System.NullReferenceException'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Possible 'System.NullReferenceException'",
  "detailsInfo": "Dereferencing an expression that can have 'null' value. This warning is detected either when there is a comparison with 'null' earlier in the code or when this value is returned by a member marked with 'Value can be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/PossibleNullReferenceException.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Reflection.App/Program.cs",
      "language": "C#",
      "line": 111,
      "offset": 8,
      "length": 35,
      "code": {
        "startLine": 109,
        "length": 35,
        "offset": 82,
        "surroundingCode": "        root = facade.InitBind(new RootExt(), lifetime, protocol);\n      }\n      (root as RdExtReflectionBindableBase).Connected.Advise(lifetime, v => Console.WriteLine(\"RootExt connected: \" + v));\n\n      root.OnChar.Advise(lifetime, Console.Write);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Reflection.App",
    "inspectionName": "PossibleNullReferenceException"
  },
  "hash": "64820afe2d03ec1d02a3ad9c8609e0452ed278d21f577de188f04589c828ee2f"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Possible 'System.NullReferenceException'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Possible 'System.NullReferenceException'",
  "detailsInfo": "Dereferencing an expression that can have 'null' value. This warning is detected either when there is a comparison with 'null' earlier in the code or when this value is returned by a member marked with 'Value can be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/PossibleNullReferenceException.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/PriorityQueueTest.cs",
      "language": "C#",
      "line": 86,
      "offset": 24,
      "length": 1,
      "code": {
        "startLine": 84,
        "length": 1,
        "offset": 78,
        "surroundingCode": "        public int Compare(Timed x, Timed y)\n        {\n          if (x.Time > y.Time) return 1;\n          if (x.Time < y.Time) return -1;\n          return 0;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "PossibleNullReferenceException"
  },
  "hash": "77279eae27232d4c7a1243b5060a0e7aed8ef2091e8cea2cc6e2113efdabb8ef"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Possible 'System.NullReferenceException'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Possible 'System.NullReferenceException'",
  "detailsInfo": "Dereferencing an expression that can have 'null' value. This warning is detected either when there is a comparison with 'null' earlier in the code or when this value is returned by a member marked with 'Value can be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/PossibleNullReferenceException.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 76,
      "offset": 11,
      "length": 6,
      "code": {
        "startLine": 74,
        "length": 6,
        "offset": 59,
        "surroundingCode": "        {\n          if (lf.IsNotAlive) continue;\n          action.Invoke();\n        }\n      }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "PossibleNullReferenceException"
  },
  "hash": "842d93dad38f217349b2c2194677e767899c08f5ad7a37a98b4571bef4f18805"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Possible 'System.NullReferenceException'",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Possible 'System.NullReferenceException'",
  "detailsInfo": "Dereferencing an expression that can have 'null' value. This warning is detected either when there is a comparison with 'null' earlier in the code or when this value is returned by a member marked with 'Value can be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/PossibleNullReferenceException.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 989,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 987,
        "length": 5,
        "offset": 139,
        "surroundingCode": "      //But MarkCanceledRecursively may already happen, so we need to help Cancel source\n      if (Status != LifetimeStatus.Alive)\n        myCts.Cancel();\n\n      return myCts;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "PossibleNullReferenceException"
  },
  "hash": "860193dc7efa62817e33e34a2814c5fee4466f353f292ca7935cefa7f6f11ea2"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Possible 'System.NullReferenceException'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Possible 'System.NullReferenceException'",
  "detailsInfo": "Dereferencing an expression that can have 'null' value. This warning is detected either when there is a comparison with 'null' earlier in the code or when this value is returned by a member marked with 'Value can be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/PossibleNullReferenceException.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/RdReflectionTestBase.cs",
      "language": "C#",
      "line": 86,
      "offset": 24,
      "length": 9,
      "code": {
        "startLine": 84,
        "length": 9,
        "offset": 111,
        "surroundingCode": "      var generator = generatorCache.GetDynamicField(\"myGenerator\") as ProxyGenerator;\n\n      var modulePath = generator.DynamicModule.FullyQualifiedName;\n      var proxyName = Path.GetFileName(modulePath);\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "PossibleNullReferenceException"
  },
  "hash": "9349921e2e90fe6ea8c095923cfa09ca4702355aae9e8cbd20d033686f423df4"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Possible 'System.NullReferenceException'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Possible 'System.NullReferenceException'",
  "detailsInfo": "Dereferencing an expression that can have 'null' value. This warning is detected either when there is a comparison with 'null' earlier in the code or when this value is returned by a member marked with 'Value can be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/PossibleNullReferenceException.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/PriorityQueueTest.cs",
      "language": "C#",
      "line": 86,
      "offset": 15,
      "length": 1,
      "code": {
        "startLine": 84,
        "length": 1,
        "offset": 69,
        "surroundingCode": "        public int Compare(Timed x, Timed y)\n        {\n          if (x.Time > y.Time) return 1;\n          if (x.Time < y.Time) return -1;\n          return 0;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "PossibleNullReferenceException"
  },
  "hash": "9438f7b67d3a41531c8ff022012408462417952627438b1278f949b5b3bc3374"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Possible 'System.NullReferenceException'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Possible 'System.NullReferenceException'",
  "detailsInfo": "Dereferencing an expression that can have 'null' value. This warning is detected either when there is a comparison with 'null' earlier in the code or when this value is returned by a member marked with 'Value can be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/PossibleNullReferenceException.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 420,
      "offset": 35,
      "length": 43,
      "code": {
        "startLine": 418,
        "length": 43,
        "offset": 41,
        "surroundingCode": "    }\n\n    private string ElementType => ((Delegate)myReader).Method.ReturnParameter.ParameterType.ToString(false);\n\n    public SerializerPair(object reader, object writer)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "PossibleNullReferenceException"
  },
  "hash": "a7ef0b2f8073f28133e56919ffbef2c68dd642f165bfb8b9a28b02071c8071c6"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Possible 'System.NullReferenceException'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Possible 'System.NullReferenceException'",
  "detailsInfo": "Dereferencing an expression that can have 'null' value. This warning is detected either when there is a comparison with 'null' earlier in the code or when this value is returned by a member marked with 'Value can be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/PossibleNullReferenceException.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ActorTest.cs",
      "language": "C#",
      "line": 107,
      "offset": 11,
      "length": 5,
      "code": {
        "startLine": 105,
        "length": 5,
        "offset": 46,
        "surroundingCode": "        if (count -- > 0)\n        {\n          actor.SendBlocking(x+1);\n          log.Add(x);\n        }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "PossibleNullReferenceException"
  },
  "hash": "ad73124981a07db13557045b88349b4207d3325b1ab4785d71a2e84a78fc165a"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Possible 'System.NullReferenceException'",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Possible 'System.NullReferenceException'",
  "detailsInfo": "Dereferencing an expression that can have 'null' value. This warning is detected either when there is a comparison with 'null' earlier in the code or when this value is returned by a member marked with 'Value can be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/PossibleNullReferenceException.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/MessageBroker.cs",
      "language": "C#",
      "line": 151,
      "offset": 48,
      "length": 12,
      "code": {
        "startLine": 149,
        "length": 12,
        "offset": 96,
        "surroundingCode": "            else if (msg1 != null)\n            {\n              Invoke(subscription, msg1, sync: subscription.WireScheduler == myScheduler);\n            }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "PossibleNullReferenceException"
  },
  "hash": "b7d543ce4f7c40bf0bbded1727716a9372e8156f80e68edbf01b7000867b42a1"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Possible 'System.NullReferenceException'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Possible 'System.NullReferenceException'",
  "detailsInfo": "Dereferencing an expression that can have 'null' value. This warning is detected either when there is a comparison with 'null' earlier in the code or when this value is returned by a member marked with 'Value can be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/PossibleNullReferenceException.html)",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 142,
      "offset": 45,
      "length": 19,
      "code": {
        "startLine": 140,
        "length": 19,
        "offset": 127,
        "surroundingCode": "        {\n          var namespaceManager = new XmlNamespaceManager(doc.NameTable);\n          namespaceManager.AddNamespace(\"\", doc.DocumentElement.NamespaceURI);\n          namespaceManager.AddNamespace(\"x\", doc.DocumentElement.NamespaceURI);\n"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "PossibleNullReferenceException"
  },
  "hash": "bfbe92cdd816b3a78749fb6208e263ecfe059e54d6e981afcc93edc0e853bbb2"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Possible 'System.NullReferenceException'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Possible 'System.NullReferenceException'",
  "detailsInfo": "Dereferencing an expression that can have 'null' value. This warning is detected either when there is a comparison with 'null' earlier in the code or when this value is returned by a member marked with 'Value can be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/PossibleNullReferenceException.html)",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 129,
      "offset": 36,
      "length": 50,
      "code": {
        "startLine": 127,
        "length": 50,
        "offset": 85,
        "surroundingCode": "        {\n          foreach (var pkg in Packages)\n          foreach (XmlNode node in doc.SelectNodes($\"/packages/package[@id='{pkg}']\"))\n          {\n            node.Attributes[\"version\"].Value = RdVersion;"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "PossibleNullReferenceException"
  },
  "hash": "ddf905601f483a5a0d04711855cb583846f219ffcb1d5450898fcfdd99d4a9ed"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument with default value",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "The parameter 'withGenericArguments' has the same default value",
  "detailsInfo": "Corresponding parameter is optional and has the same value, so the argument could be omitted [Learn more...](https://www.jetbrains.com/help/rider/RedundantArgumentDefaultValue.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdBindableBase.cs",
      "language": "C#",
      "line": 144,
      "offset": 49,
      "length": 4,
      "code": {
        "startLine": 142,
        "length": 4,
        "offset": 110,
        "surroundingCode": "    {\n      if (Location == NotBound || printer.PrintContent)\n        printer.Print(GetType().ToString(false, true));\n      else\n        printer.Print($\"{ShortName} `{Location}`\" + (RdId != RdId.Nil ? $\" ({RdId})\" : \"\"));"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantArgumentDefaultValue"
  },
  "hash": "3ea6e12179e81a902810accdbfaa8fc477a77494122079cb7aa48ac381f116fc"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument with default value",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "The parameter 'withGenericArguments' has the same default value",
  "detailsInfo": "Corresponding parameter is optional and has the same value, so the argument could be omitted [Learn more...](https://www.jetbrains.com/help/rider/RedundantArgumentDefaultValue.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdBindableBase.cs",
      "language": "C#",
      "line": 139,
      "offset": 69,
      "length": 4,
      "code": {
        "startLine": 137,
        "length": 4,
        "offset": 78,
        "surroundingCode": "    \n    \n    protected virtual string ShortName => GetType().ToString(false, true);\n\n    public virtual void Print(PrettyPrinter printer)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantArgumentDefaultValue"
  },
  "hash": "44b433dc6284b36b5a4912147b84a77f32a03584012e093cb785405a4b55f7a3"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument with default value",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "The parameter 'withGenericArguments' has the same default value",
  "detailsInfo": "Corresponding parameter is optional and has the same value, so the argument could be omitted [Learn more...](https://www.jetbrains.com/help/rider/RedundantArgumentDefaultValue.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/InternRoot.cs",
      "language": "C#",
      "line": 126,
      "offset": 40,
      "length": 4,
      "code": {
        "startLine": 124,
        "length": 4,
        "offset": 83,
        "surroundingCode": "    public override string ToString()\n    {\n      return GetType().ToString(false, true) + \": `\" + Location + \"`\";\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantArgumentDefaultValue"
  },
  "hash": "486f440b8bf94fdbff4f4f45193a571da8861ebf755f72a7da720844682ff1e8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument with default value",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "The parameter 'unknownInstanceReader' has the same default value",
  "detailsInfo": "Corresponding parameter is optional and has the same value, so the argument could be omitted [Learn more...](https://www.jetbrains.com/help/rider/RedundantArgumentDefaultValue.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SerializersTest.cs",
      "language": "C#",
      "line": 28,
      "offset": 114,
      "length": 4,
      "code": {
        "startLine": 26,
        "length": 4,
        "offset": 155,
        "surroundingCode": "\n      MyTestObject newTestObject = null;\n      UnsafeReader.With(data, reader => newTestObject = serializers.Read<MyTestObject>(serializationCtx, reader, null));\n      Assert.AreEqual(testObject.Data, newTestObject.Data);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantArgumentDefaultValue"
  },
  "hash": "4cbf43714c4a7620ffb7e94558b8670aaa6cf1775b0f6b6bb732b7d3319f315c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument with default value",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "The parameter 'separator' has the same default value",
  "detailsInfo": "Corresponding parameter is optional and has the same value, so the argument could be omitted [Learn more...](https://www.jetbrains.com/help/rider/RedundantArgumentDefaultValue.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/SerializersTest.cs",
      "language": "C#",
      "line": 22,
      "offset": 43,
      "length": 3,
      "code": {
        "startLine": 20,
        "length": 3,
        "offset": 193,
        "surroundingCode": "        RName.Empty.Sub(\"abc\", \"\").Sub(\"asdf123\", \"::\"),\n        RName.Empty.Sub(\"arbitrary\", \"\").Sub(\"separators with\", \" spaces and $&*@ symbols \"),\n        RName.Empty.Sub(\"a\", \"\").Sub(\"b\", \".\").Sub(\"c\", \"::\").Sub(\"d\", \"$\").Sub(\"e\", \"_\").Sub(\"$\", \".\").Sub(\"[]\", \"::\"),\n        RName.Empty.Sub(\"\", \"\").Sub(\"\", \"\").Sub(\"\", \"\").Sub(\"\", \"\").Sub(\"\", \"\")\n      };"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantArgumentDefaultValue"
  },
  "hash": "bb568ca235fa2dbd625943fa5cd1907c00dc5ce9b851a4c56ecf448daa15077d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument with default value",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "The parameter 'port' has the same default value",
  "detailsInfo": "Corresponding parameter is optional and has the same value, so the argument could be omitted [Learn more...](https://www.jetbrains.com/help/rider/RedundantArgumentDefaultValue.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SocketWireTest.cs",
      "language": "C#",
      "line": 320,
      "offset": 49,
      "length": 4,
      "code": {
        "startLine": 318,
        "length": 4,
        "offset": 119,
        "surroundingCode": "        {\n          SynchronousScheduler.Instance.SetActive(lifetime);\n          var serverProtocol = Server(lifetime, null);\n          \n          var sp = NewRdProperty<int>().Static(1);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantArgumentDefaultValue"
  },
  "hash": "ecbcc2c16bb7ef3abb02239f830747b355bc67f5e8d1ab0acaf07355bee7a75e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument with default value",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "The parameter 'separator' has the same default value",
  "detailsInfo": "Corresponding parameter is optional and has the same value, so the argument could be omitted [Learn more...](https://www.jetbrains.com/help/rider/RedundantArgumentDefaultValue.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/SerializersTest.cs",
      "language": "C#",
      "line": 22,
      "offset": 100,
      "length": 3,
      "code": {
        "startLine": 20,
        "length": 3,
        "offset": 250,
        "surroundingCode": "        RName.Empty.Sub(\"abc\", \"\").Sub(\"asdf123\", \"::\"),\n        RName.Empty.Sub(\"arbitrary\", \"\").Sub(\"separators with\", \" spaces and $&*@ symbols \"),\n        RName.Empty.Sub(\"a\", \"\").Sub(\"b\", \".\").Sub(\"c\", \"::\").Sub(\"d\", \"$\").Sub(\"e\", \"_\").Sub(\"$\", \".\").Sub(\"[]\", \"::\"),\n        RName.Empty.Sub(\"\", \"\").Sub(\"\", \"\").Sub(\"\", \"\").Sub(\"\", \"\").Sub(\"\", \"\")\n      };"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantArgumentDefaultValue"
  },
  "hash": "f27cf941ad6e453e971d67c0a0f78dddac2c0c536df08bc03b55c2eb9af13eea"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Array creation can be replaced with array initializer",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant array creation expression",
  "detailsInfo": "When initializing explicitly typed local variable or field of array type, array creation expression can be replaced with array initializer",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 57,
      "offset": 49,
      "length": 5,
      "code": {
        "startLine": 55,
        "length": 5,
        "offset": 55,
        "surroundingCode": "    }\n\n    public static readonly Type[] ValueTuples = new[]\n    {\n      typeof(FakeTuple<>),"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantArrayCreationExpression"
  },
  "hash": "5c648dfe8e9c2ba8dba919722784e84b862bf76bf0c454fb5192d02f32bb2566"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Assignment is not used",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "The value passed to the method is never used because it is overwritten in the method body before being read",
  "detailsInfo": "Value assigned to a local variable or parameter is not used in any execution path [Learn more...](https://www.jetbrains.com/help/rider/RedundantAssignment.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 123,
      "offset": 61,
      "length": 4,
      "code": {
        "startLine": 121,
        "length": 4,
        "offset": 175,
        "surroundingCode": "      ByteBufferAsyncProcessor buffer = null;\n      buffer = new ByteBufferAsyncProcessor(\"TestAsyncProcessor\", 8,\n        delegate(byte[] data, int offset, int len, ref long seqN)\n        {\n          long l = 0;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantAssignment"
  },
  "hash": "543bb1f96065b165b0dfe03b814359e1a8ce02ff6473213e9ec746f53ce223ba"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Assignment is not used",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Value assigned is not used in any execution path",
  "detailsInfo": "Value assigned to a local variable or parameter is not used in any execution path [Learn more...](https://www.jetbrains.com/help/rider/RedundantAssignment.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 187,
      "offset": 39,
      "length": 6,
      "code": {
        "startLine": 185,
        "length": 6,
        "offset": 65,
        "surroundingCode": "    {\n      long prev = 0;\n      ByteBufferAsyncProcessor buffer = null;\n      List<long> log = new List<long>();\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantAssignment"
  },
  "hash": "5b327de6a5daa31424b8247751d99d8ceaf9a9e3d658a65845171796753e222a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Assignment is not used",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "The value passed to the method is never used because it is overwritten in the method body before being read",
  "detailsInfo": "Value assigned to a local variable or parameter is not used in any execution path [Learn more...](https://www.jetbrains.com/help/rider/RedundantAssignment.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 78,
      "offset": 47,
      "length": 8,
      "code": {
        "startLine": 76,
        "length": 8,
        "offset": 114,
        "surroundingCode": "    \n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public static void VolatileWrite<T>(ref T location, T value) where T : class\n    {\n#if (NET35)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantAssignment"
  },
  "hash": "5c2087288c7b7ee6e2c671c88c6d3c9d5dfc8b8a5706b5d1ef65b6d521e7976d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Assignment is not used",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Value assigned is not used in any execution path",
  "detailsInfo": "Value assigned to a local variable or parameter is not used in any execution path [Learn more...](https://www.jetbrains.com/help/rider/RedundantAssignment.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 49,
      "offset": 11,
      "length": 4,
      "code": {
        "startLine": 47,
        "length": 4,
        "offset": 48,
        "surroundingCode": "        {\n          dest[0] = src[0];\n          dest++;\n          src++;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantAssignment"
  },
  "hash": "80c21ae494491f70112bef51c4ed440ca65811854fb5b4a3065838e9a3f67f1c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Assignment is not used",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "The value passed to the method is never used because it is overwritten in the method body before being read",
  "detailsInfo": "Value assigned to a local variable or parameter is not used in any execution path [Learn more...](https://www.jetbrains.com/help/rider/RedundantAssignment.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 121,
      "offset": 47,
      "length": 8,
      "code": {
        "startLine": 119,
        "length": 8,
        "offset": 114,
        "surroundingCode": "    \n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public static void VolatileWrite(ref bool location, bool value)\n    {\n#if (NET35)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantAssignment"
  },
  "hash": "c1551770f77a9a9366079325915b00507ef60b5d349afe5fa9146f094519d0b9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Assignment is not used",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Value assigned is not used in any execution path",
  "detailsInfo": "Value assigned to a local variable or parameter is not used in any execution path [Learn more...](https://www.jetbrains.com/help/rider/RedundantAssignment.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 50,
      "offset": 11,
      "length": 3,
      "code": {
        "startLine": 48,
        "length": 3,
        "offset": 56,
        "surroundingCode": "          dest[0] = src[0];\n          dest++;\n          src++;\n        }\n      }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantAssignment"
  },
  "hash": "e154e3ac2d39e5d45b45ef4d349f9444b388450b26c35f6fde7c4d1b7b4f51da"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant [AttributeUsage] attribute property assignment",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant [AttributeUsage] property assignment: 'IsInherited' only make sense with AttributeTargets.Method or AttributeTargets.Class",
  "detailsInfo": "Application of \\[AttributeUsage\\] attribute has property assignment to its default value",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/NullableAttributes.cs",
      "language": "C#",
      "line": 12,
      "offset": 102,
      "length": 17,
      "code": {
        "startLine": 10,
        "length": 17,
        "offset": 217,
        "surroundingCode": "\n    /// <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property, Inherited = false)]\n    internal sealed class AllowNullAttribute : Attribute { }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantAttributeUsageProperty"
  },
  "hash": "2677072ccf8b0e319f4a6cf89298636e63409bea6213879a716b9da9031b1b05"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant [AttributeUsage] attribute property assignment",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant [AttributeUsage] property assignment: provided value is equal to default",
  "detailsInfo": "Application of \\[AttributeUsage\\] attribute has property assignment to its default value",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/InterpolatedStringHandlerArgumentAttribute.cs",
      "language": "C#",
      "line": 10,
      "offset": 47,
      "length": 21,
      "code": {
        "startLine": 8,
        "length": 21,
        "offset": 186,
        "surroundingCode": "{\n  /// <summary>Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.</summary>\n  [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false, Inherited = false)]\n  internal sealed class InterpolatedStringHandlerArgumentAttribute : Attribute\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantAttributeUsageProperty"
  },
  "hash": "26a2e1008b0f79a7887e34e09fdc9e6ec204c62f95491e75401006aa0c76156f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant [AttributeUsage] attribute property assignment",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant [AttributeUsage] property assignment: 'IsInherited' only make sense with AttributeTargets.Method or AttributeTargets.Class",
  "detailsInfo": "Application of \\[AttributeUsage\\] attribute has property assignment to its default value",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/InterpolatedStringHandlerArgumentAttribute.cs",
      "language": "C#",
      "line": 10,
      "offset": 70,
      "length": 17,
      "code": {
        "startLine": 8,
        "length": 17,
        "offset": 209,
        "surroundingCode": "{\n  /// <summary>Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.</summary>\n  [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false, Inherited = false)]\n  internal sealed class InterpolatedStringHandlerArgumentAttribute : Attribute\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantAttributeUsageProperty"
  },
  "hash": "329cac560525063d07b88275302e62b794ae1de3843e15cf650ec77cb95fa0bc"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant [AttributeUsage] attribute property assignment",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant [AttributeUsage] property assignment: provided value is equal to default",
  "detailsInfo": "Application of \\[AttributeUsage\\] attribute has property assignment to its default value",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/InterpolatedStringHandlerAttribute.cs",
      "language": "C#",
      "line": 9,
      "offset": 69,
      "length": 21,
      "code": {
        "startLine": 7,
        "length": 21,
        "offset": 174,
        "surroundingCode": "{\n  /// <summary>Indicates the attributed type is to be used as an interpolated string handler.</summary>\n  [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = false, Inherited = false)]\n  internal sealed class InterpolatedStringHandlerAttribute : Attribute\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantAttributeUsageProperty"
  },
  "hash": "71f73356eb09a6f2fcc322a8ab37023654560d7c2d1c9bb99ac7692272959060"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant [AttributeUsage] attribute property assignment",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant [AttributeUsage] property assignment: 'IsInherited' only make sense with AttributeTargets.Method or AttributeTargets.Class",
  "detailsInfo": "Application of \\[AttributeUsage\\] attribute has property assignment to its default value",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/NullableAttributes.cs",
      "language": "C#",
      "line": 16,
      "offset": 102,
      "length": 17,
      "code": {
        "startLine": 14,
        "length": 17,
        "offset": 217,
        "surroundingCode": "\n    /// <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property, Inherited = false)]\n    internal sealed class DisallowNullAttribute : Attribute { }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantAttributeUsageProperty"
  },
  "hash": "97a5fbdac6640b758ba104fdeea54e62538aeca562077a1dd0d1ec6a9d903ee5"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant [AttributeUsage] attribute property assignment",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant [AttributeUsage] property assignment: 'IsInherited' only make sense with AttributeTargets.Method or AttributeTargets.Class",
  "detailsInfo": "Application of \\[AttributeUsage\\] attribute has property assignment to its default value",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/NullableAttributes.cs",
      "language": "C#",
      "line": 56,
      "offset": 130,
      "length": 17,
      "code": {
        "startLine": 54,
        "length": 17,
        "offset": 236,
        "surroundingCode": "\n    /// <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    internal sealed class NotNullIfNotNullAttribute : Attribute\n    {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantAttributeUsageProperty"
  },
  "hash": "b1055ee79164ccb426bc4797e9ed34b4584ff7ac98e7e8f8da2fbf3345807d63"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant [AttributeUsage] attribute property assignment",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant [AttributeUsage] property assignment: 'IsInherited' only make sense with AttributeTargets.Method or AttributeTargets.Class",
  "detailsInfo": "Application of \\[AttributeUsage\\] attribute has property assignment to its default value",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/NullableAttributes.cs",
      "language": "C#",
      "line": 74,
      "offset": 49,
      "length": 17,
      "code": {
        "startLine": 72,
        "length": 17,
        "offset": 185,
        "surroundingCode": "\n    /// <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>\n    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]\n    internal sealed class DoesNotReturnIfAttribute : Attribute\n    {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantAttributeUsageProperty"
  },
  "hash": "b8a88915f4e631a2235f584f90a41da0b0f94f25c649aa68b1906b939a9a19ea"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant [AttributeUsage] attribute property assignment",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant [AttributeUsage] property assignment: 'IsInherited' only make sense with AttributeTargets.Method or AttributeTargets.Class",
  "detailsInfo": "Application of \\[AttributeUsage\\] attribute has property assignment to its default value",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/NullableAttributes.cs",
      "language": "C#",
      "line": 20,
      "offset": 133,
      "length": 17,
      "code": {
        "startLine": 18,
        "length": 17,
        "offset": 242,
        "surroundingCode": "\n    /// <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, Inherited = false)]\n    internal sealed class MaybeNullAttribute : Attribute { }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantAttributeUsageProperty"
  },
  "hash": "cecd5db55556539b026b1bf14d5381c2645ed5ff80b918e062ad3b50bcbdeaba"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant [AttributeUsage] attribute property assignment",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant [AttributeUsage] property assignment: 'IsInherited' only make sense with AttributeTargets.Method or AttributeTargets.Class",
  "detailsInfo": "Application of \\[AttributeUsage\\] attribute has property assignment to its default value",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/NullableAttributes.cs",
      "language": "C#",
      "line": 42,
      "offset": 49,
      "length": 17,
      "code": {
        "startLine": 40,
        "length": 17,
        "offset": 213,
        "surroundingCode": "\n    /// <summary>Specifies that when a method returns <see cref=\"ReturnValue\"/>, the parameter will not be null even if the corresponding type allows it.</summary>\n    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]\n    internal sealed class NotNullWhenAttribute : Attribute\n    {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantAttributeUsageProperty"
  },
  "hash": "e6c3f025c5370621d4cde24caa28dda26dcd21126a5c1701a1c3ff34f9a99cf1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant [AttributeUsage] attribute property assignment",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant [AttributeUsage] property assignment: 'IsInherited' only make sense with AttributeTargets.Method or AttributeTargets.Class",
  "detailsInfo": "Application of \\[AttributeUsage\\] attribute has property assignment to its default value",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/NullableAttributes.cs",
      "language": "C#",
      "line": 24,
      "offset": 133,
      "length": 17,
      "code": {
        "startLine": 22,
        "length": 17,
        "offset": 244,
        "surroundingCode": "\n    /// <summary>Specifies that an output will not be null even if the corresponding type allows it.</summary>\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, Inherited = false)]\n    internal sealed class NotNullAttribute : Attribute { }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantAttributeUsageProperty"
  },
  "hash": "fd296f58a1c11ea10281cd6694f856badd2b5058a24d9bf9cf2472f392bd9161"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant [AttributeUsage] attribute property assignment",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant [AttributeUsage] property assignment: 'IsInherited' only make sense with AttributeTargets.Method or AttributeTargets.Class",
  "detailsInfo": "Application of \\[AttributeUsage\\] attribute has property assignment to its default value",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/NullableAttributes.cs",
      "language": "C#",
      "line": 28,
      "offset": 49,
      "length": 17,
      "code": {
        "startLine": 26,
        "length": 17,
        "offset": 211,
        "surroundingCode": "\n    /// <summary>Specifies that when a method returns <see cref=\"ReturnValue\"/>, the parameter may be null even if the corresponding type disallows it.</summary>\n    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]\n    internal sealed class MaybeNullWhenAttribute : Attribute\n    {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantAttributeUsageProperty"
  },
  "hash": "fea7e19056835f3fdfd6bdb2ead5059978eac4f9b68a19ce81b920028a8c28a7"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Redundant base constructor call",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Redundant base constructor call",
  "detailsInfo": "Explicit call to the base class constructor with no arguments. It is generated by the compiler by default and can be omitted.",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeCanceledException.cs",
      "language": "C#",
      "line": 13,
      "offset": 57,
      "length": 97,
      "code": {
        "startLine": 11,
        "length": 97,
        "offset": 107,
        "surroundingCode": "    [PublicAPI] public Lifetime Lifetime { get; }\n\n    public LifetimeCanceledException(Lifetime lifetime) : base(\n      #if !NET35\n      lifetime.Definition.ToCancellationToken(true)\n      #endif\n      )\n    {\n      if (lifetime.IsAlive) "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantBaseConstructorCall"
  },
  "hash": "09a272db0f2a3d799b0ad0a177381a94804f226e441b95a3e72293229c7ce698"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ByteBufferAsyncProcessor.cs",
      "language": "C#",
      "line": 490,
      "offset": 58,
      "length": 30,
      "code": {
        "startLine": 488,
        "length": 30,
        "offset": 95,
        "surroundingCode": "        while (ptr < count)\n        {\n          Assertion.Assert(myChunkToFill.IsNotProcessed, \"myChunkToFill.IsNotProcessed\");\n          var rest = count - ptr;\n          var available = ChunkSize - myChunkToFill.Ptr;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "0333dbc976a8d9bfaa7d72ddc94696a6e00d9ed2d35f7721fca4de011c0c1e35"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/BufferWindow.cs",
      "language": "C#",
      "line": 38,
      "offset": 43,
      "length": 19,
      "code": {
        "startLine": 36,
        "length": 19,
        "offset": 74,
        "surroundingCode": "    {\n      var hi = Hi + size;\n      Assertion.Assert(hi <= Data.Length, \"hi <= Data.Length\");\n      \n      while (Hi < hi)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "03acdae5edbe25977d5465c650e27d690026c6e38a77030d26e4f521c413e6d6"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ByteBufferAsyncProcessor.cs",
      "language": "C#",
      "line": 241,
      "offset": 74,
      "length": 49,
      "code": {
        "startLine": 239,
        "length": 49,
        "offset": 121,
        "surroundingCode": "    public void ReprocessUnacknowledged()\n    {\n      Assertion.Require(Thread.CurrentThread != myAsyncProcessingThread, \"Thread.CurrentThread != myAsyncProcessingThread\");\n      lock (myLock)\n      {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "1c45892cb0baa119e8ccc7a70877fdc6ad3a077ca78be10b31ec30f672a0a422"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/BufferWindow.cs",
      "language": "C#",
      "line": 42,
      "offset": 50,
      "length": 24,
      "code": {
        "startLine": 40,
        "length": 24,
        "offset": 79,
        "surroundingCode": "      while (Hi < hi)\n      {\n        Assertion.Assert(helper.Hi >= helper.Lo, \"helper.Hi >= helper.Lo\");\n\n        if (helper.Available > 0)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "27968fdc465b536ee8da6421205ee9417d1c8be4453ac6b783c0f9cbcc54363e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 136,
      "offset": 60,
      "length": 34,
      "code": {
        "startLine": 134,
        "length": 34,
        "offset": 95,
        "surroundingCode": "      if (Mode.IsAssertion)\n      {\n        Assertion.Assert(myCurrentActivationChain != null, \"myCurrentActivationChain != null\");\n        Assertion.Assert(!myCurrentActivationChain.Contains(type),\n            $\"Unable to activate {type.FullName}: circular dependency detected: {string.Join(\" -> \", myCurrentActivationChain.Select(t => t.FullName).ToArray())}\");"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "357d718cc2f089e2e9e10f2aaea241630e05090b664f9a1f4f090536c135a252"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/NativeMemoryPool.cs",
      "language": "C#",
      "line": 236,
      "offset": 48,
      "length": 22,
      "code": {
        "startLine": 234,
        "length": 22,
        "offset": 89,
        "surroundingCode": "      public ThreadMemoryHolder()\n      {\n        Assertion.Assert(myPtr == IntPtr.Zero, \"myPtr == IntPtr.Zero\");\n        myPtr = AllocateMemory(AllocSize);\n        Length = AllocSize;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "3e5daee09782a66d92087ad46b3dda2f254093d9c8c35cb624fae1bd3012c4fb"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 108,
      "offset": 54,
      "length": 26,
      "code": {
        "startLine": 106,
        "length": 26,
        "offset": 83,
        "surroundingCode": "            \n        default:\n          Assertion.Assert(myMultipleValues != null, \"myMultipleValues != null\");\n          myMultipleValues.RemoveAt(index);\n          return true;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "4377a7b2c7a892d11479a729f8c16d3b3a7ec00f03daff631995fe33df23be7d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IRdReactive.cs",
      "language": "C#",
      "line": 38,
      "offset": 58,
      "length": 33,
      "code": {
        "startLine": 36,
        "length": 33,
        "offset": 136,
        "surroundingCode": "    public static T Static<T>(this T thIs, int id) where T : IRdBindable\n    {\n      Assertion.Require(id > 0 && id < RdId.MaxStaticId, \"id > 0 && id < RdId.MaxStaticId\");\n      return thIs.WithId(new RdId(id));\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "5d3ce65a05a457d70f83a03eb9ae2afd18843b994e140e9c079cb1b07e77cae0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 314,
      "offset": 48,
      "length": 24,
      "code": {
        "startLine": 312,
        "length": 24,
        "offset": 85,
        "surroundingCode": "        return new[] {typeof(Unit)};\n\n      Assertion.Assert(parameters.Length <= 7, \"parameters.Length <= 7\");\n      List<Type> list = new List<Type>();\n      foreach (var p in parameters)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "6bf984c7a612f6b992dbdfa46ac55cf094cbfc7a26830f8d9e66e81e877cdd9a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 123,
      "offset": 54,
      "length": 26,
      "code": {
        "startLine": 121,
        "length": 26,
        "offset": 111,
        "surroundingCode": "          return new [] {mySingleValue};\n        default:\n          Assertion.Assert(myMultipleValues != null, \"myMultipleValues != null\");\n          return myMultipleValues.ToArray();\n      }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "6ecfd38b8873a9f7b9a3ec357365f9146cbc353d5964c325dda178c4afa11d32"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/MessageBroker.cs",
      "language": "C#",
      "line": 113,
      "offset": 36,
      "length": 11,
      "code": {
        "startLine": 111,
        "length": 11,
        "offset": 87,
        "surroundingCode": "    public void Dispatch(RdId id, byte[] msg)\n    {\n      Assertion.Require(!id.IsNil, \"!id.IsNil\");\n\n      lock (myLock)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "77589dfc1f630f15e28d13a67a0f391a5e93e200a641d68036d100cee4d1bb24"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/RdTextBuffer.cs",
      "language": "C#",
      "line": 298,
      "offset": 51,
      "length": 25,
      "code": {
        "startLine": 296,
        "length": 25,
        "offset": 103,
        "surroundingCode": "      public void StartCommitRemoteVersion()\n      {\n        Assertion.Assert(myState == State.Opened, \"myState == State.Opened\");\n        myState = State.Committing;\n      }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "8b3a3935d426aff3fd517437e0a03a12ad9d29cdd1f475b885dbfb3f7df8e0fe"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/RdTextBuffer.cs",
      "language": "C#",
      "line": 147,
      "offset": 9,
      "length": 68,
      "code": {
        "startLine": 145,
        "length": 68,
        "offset": 105,
        "surroundingCode": "    {\n      Assertion.Assert(Delegate.IsBound || BufferVersion == TextBufferVersion.InitVersion,\n        \"Delegate.IsBound || BufferVersion == TextBufferVersion.InitVersion\");\n      if (Delegate.IsBound) Proto.Scheduler.AssertThread();\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "9607ebc809d870a577a2b6e401d3e7af2dc6bdd2f7b0ec5c34791719d4c7b774"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSet.cs",
      "language": "C#",
      "line": 48,
      "offset": 43,
      "length": 19,
      "code": {
        "startLine": 46,
        "length": 19,
        "offset": 136,
        "surroundingCode": "    public static void Write(SerializationCtx ctx, UnsafeWriter writer, RdSet<T> value)\n    {\n      Assertion.Assert(!value.RdId.IsNil, \"!value.RdId.IsNil\");\n      writer.Write(value.RdId);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "9ea55499ef6caaea5160ea7f9d8cf02a089e97726a8fea1d7d4f6a7c57b75aab"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 80,
      "offset": 54,
      "length": 26,
      "code": {
        "startLine": 78,
        "length": 26,
        "offset": 150,
        "surroundingCode": "        case 1: return comparer.Equals(mySingleValue, item) ? 0 : -1;          \n        default:\n          Assertion.Assert(myMultipleValues != null, \"myMultipleValues != null\");\n          for (var i = myMultipleValues.Count - 1; i >= 0; i--)\n          {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "a1bb8b0779d8ed889890e9114e006684519355d7105135fe5012273a190a0c88"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/IWire.cs",
      "language": "C#",
      "line": 100,
      "offset": 36,
      "length": 11,
      "code": {
        "startLine": 98,
        "length": 11,
        "offset": 130,
        "surroundingCode": "    public void Send<TParam>(RdId id, TParam param, Action<TParam, UnsafeWriter> writer)\n    {\n      Assertion.Require(!id.IsNil, \"!id.IsNil\");\n      Assertion.AssertNotNull(writer, \"writer != null\");\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "acffeaa995f5ba9551121b773cf557dc272a3be17c1dd8584f66e5ce4362cca4"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/RdTextBuffer.cs",
      "language": "C#",
      "line": 178,
      "offset": 42,
      "length": 18,
      "code": {
        "startLine": 176,
        "length": 18,
        "offset": 118,
        "surroundingCode": "    public void Advise(Lifetime lifetime, Action<RdTextChange> change)\n    {\n      Assertion.Assert(Delegate.IsBound, \"Delegate.IsBound\");\n      Proto.Scheduler.AssertThread();\n      "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "afec329f0cb073a2c433c616f61726615d7390e46b8df0f1042ace2f225aa9b1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 61,
      "offset": 54,
      "length": 26,
      "code": {
        "startLine": 59,
        "length": 26,
        "offset": 87,
        "surroundingCode": "          break;\n        default:\n          Assertion.Assert(myMultipleValues != null, \"myMultipleValues != null\");\n          myMultipleValues.Add(item);\n          break;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "b3efa6fe3d3a58240bee4de8d9cc9d769fa10f2f1d9a13237e56143ca7048c92"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 312,
      "offset": 46,
      "length": 18,
      "code": {
        "startLine": 310,
        "length": 18,
        "offset": 108,
        "surroundingCode": "        if (myStartPtr != null) //already terminated\n        {\n          Assertion.Assert(myMemory != null, \"myMemory != null\");\n          myStartPtr = (byte*) myMemory.Realloc(reallocSize);\n          myPtr = myStartPtr + myCount;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "bf0e32e9985c2c8cd9661b864952f093f5d9a0648f8c5895f08ea82bb9208390"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/RdTextBuffer.cs",
      "language": "C#",
      "line": 201,
      "offset": 42,
      "length": 18,
      "code": {
        "startLine": 199,
        "length": 18,
        "offset": 123,
        "surroundingCode": "    {\n      Assertion.Assert(myActiveSession == null, \"myActiveSession == null\");\n      Assertion.Assert(lifetime.IsAlive, \"lifetime.IsAlive\");\n\n      myActiveSession = new TextBufferTypingSession(this);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "c0cc3fbba2b456eda2cca557ecce2cbe4a4c7bf1ccca513af2db278e3a469e57"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ViewableList.cs",
      "language": "C#",
      "line": 101,
      "offset": 42,
      "length": 15,
      "code": {
        "startLine": 99,
        "length": 15,
        "offset": 59,
        "surroundingCode": "      set\n      {\n        Assertion.Require(value != null, \"value != null\");\n        \n        var oldval = myStorage[index];"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "c1d24f6386918c9099ff10a1913ad913a5152a31598f65a9d58428a2d2276340"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/IWire.cs",
      "language": "C#",
      "line": 101,
      "offset": 39,
      "length": 16,
      "code": {
        "startLine": 99,
        "length": 16,
        "offset": 93,
        "surroundingCode": "    {\n      Assertion.Require(!id.IsNil, \"!id.IsNil\");\n      Assertion.AssertNotNull(writer, \"writer != null\");\n\n      using (var cookie = UnsafeWriter.NewThreadLocalWriter())"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "c964dab4563890c777f25c43b44748832046d9c80aeb6eca4451d15f03265f69"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 226,
      "offset": 46,
      "length": 18,
      "code": {
        "startLine": 224,
        "length": 18,
        "offset": 225,
        "surroundingCode": "          var endPointType = typeof(RdCall<,>).MakeGenericType(requestType, responseNonTaskType);\n          var endpoint = ActivateGenericMember(name, endPointType.GetTypeInfo());\n          Assertion.Assert(endpoint != null, \"endpoint != null\");\n          SetAsync(endpoint);\n          if (endpoint is RdReactiveBase reactiveBase)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "caffc4ad2090f0eb9eaea902d352e705513d84fc0bc2f074d5af97da9819e390"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/RdTextBuffer.cs",
      "language": "C#",
      "line": 92,
      "offset": 37,
      "length": 11,
      "code": {
        "startLine": 90,
        "length": 11,
        "offset": 107,
        "surroundingCode": "      else if (change.Kind == RdTextChangeKind.PromoteVersion)\n      {\n        Assertion.Assert(!IsMaster, \"!IsMaster\");\n        BufferVersion = newVersion;\n        return;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "d0f2c7d41bf9769e991606dcbb94bb4cb6bf77b5b349758f5a60cad4484a223e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdMap.cs",
      "language": "C#",
      "line": 62,
      "offset": 43,
      "length": 19,
      "code": {
        "startLine": 60,
        "length": 19,
        "offset": 139,
        "surroundingCode": "    public static void Write(SerializationCtx ctx, UnsafeWriter writer, RdMap<K, V> value)\n    {\n      Assertion.Assert(!value.RdId.IsNil, \"!value.RdId.IsNil\");\n      writer.Write(value.RdId);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "d22ecb288bf7c8d1bf509a7fa451911a6e743499cfdeb249dd14a0bfe08847fd"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 102,
      "offset": 54,
      "length": 26,
      "code": {
        "startLine": 100,
        "length": 26,
        "offset": 80,
        "surroundingCode": "          \n        case 2:\n          Assertion.Assert(myMultipleValues != null, \"myMultipleValues != null\");\n          mySingleValue = myMultipleValues[1-index];\n          myMultipleValues = SingleMarker;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "dfe09334ce560548e37af3ea509a01b4fdd7990ed5f8a31a1ed7ad8b4f831c9f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/RdTextBuffer.cs",
      "language": "C#",
      "line": 200,
      "offset": 49,
      "length": 25,
      "code": {
        "startLine": 198,
        "length": 25,
        "offset": 118,
        "surroundingCode": "    public ITypingSession StartTypingSession(Lifetime lifetime)\n    {\n      Assertion.Assert(myActiveSession == null, \"myActiveSession == null\");\n      Assertion.Assert(lifetime.IsAlive, \"lifetime.IsAlive\");\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "e0eddf0587353de187519979b8d8e271fd2d8f8d23483f901eb32fd8c3e695aa"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ByteBufferAsyncProcessor.cs",
      "language": "C#",
      "line": 371,
      "offset": 74,
      "length": 49,
      "code": {
        "startLine": 369,
        "length": 49,
        "offset": 103,
        "surroundingCode": "    public void Clear()\n    {\n      Assertion.Require(Thread.CurrentThread != myAsyncProcessingThread, \"Thread.CurrentThread != myAsyncProcessingThread\");\n\n      lock (myLock)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "e48ab50f7826f246a787443befa4ca65181eb5ddde96506e086bd10a0a20e186"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant argument passed to caller argument expression parameter",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "The parameter 'message' has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "detailsInfo": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdProperty.cs",
      "language": "C#",
      "line": 64,
      "offset": 43,
      "length": 19,
      "code": {
        "startLine": 62,
        "length": 19,
        "offset": 141,
        "surroundingCode": "    public static void Write(SerializationCtx ctx, UnsafeWriter writer, RdProperty<T> value)\n    {\n      Assertion.Assert(!value.RdId.IsNil, \"!value.RdId.IsNil\");\n      writer.Write(value.RdId);\n      if (value.HasValue())"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantCallerArgumentExpressionDefaultValue"
  },
  "hash": "f867269881c94aa8e6d353b7beb7552c30a205a9a9a6b8ddaa7a08aa285c6aee"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant cast",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Type cast is redundant",
  "detailsInfo": "Type cast can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantCast.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Result.cs",
      "language": "C#",
      "line": 78,
      "offset": 113,
      "length": 8,
      "code": {
        "startLine": 76,
        "length": 8,
        "offset": 211,
        "surroundingCode": "      if (exception == null) throw new ArgumentNullException(nameof(exception));           \n      \n      return new Result<Nothing, TFailure>(null, captureStackTrace ? ExceptionDispatchInfo.Capture(exception) : (object) exception, failValue);\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantCast"
  },
  "hash": "62a164170391a9da522f18715bddaeda721d3b2884273fc0b4d922ca26b6605c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant cast",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Type cast is redundant",
  "detailsInfo": "Type cast can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantCast.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/UnsafeMarshallersTest.cs",
      "language": "C#",
      "line": 150,
      "offset": 29,
      "length": 5,
      "code": {
        "startLine": 148,
        "length": 5,
        "offset": 111,
        "surroundingCode": "      myCookie.Writer.Write(1234.5678d);\n      myCookie.Writer.Write((short)1000);\n      myCookie.Writer.Write((int)1001);\n      myCookie.Writer.Write((long)-1002);\n      myCookie.Writer.Write(\"(long)-1002\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantCast"
  },
  "hash": "8da4fb124725f3741740618197101744b1dba8f2e38cf494e48e6562d7539f68"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant cast",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Type cast is redundant",
  "detailsInfo": "Type cast can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantCast.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogWithLevel.cs",
      "language": "C#",
      "line": 45,
      "offset": 67,
      "length": 15,
      "code": {
        "startLine": 43,
        "length": 15,
        "offset": 196,
        "surroundingCode": "    /// null otherwise</returns>\n    [PublicAPI] public static LogWithLevel? CreateIfEnabled(ILog logger, LoggingLevel level) => \n      logger.IsEnabled(level) ? new LogWithLevel(logger, level) : (LogWithLevel?) null;\n  }\n}"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantCast"
  },
  "hash": "b5106e7a1d09f612d3acbf105aa516f6f9e2cea74cc3b6c5784590e047c8f671"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant cast",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Type cast is redundant",
  "detailsInfo": "Type cast can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantCast.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Result.cs",
      "language": "C#",
      "line": 63,
      "offset": 103,
      "length": 8,
      "code": {
        "startLine": 61,
        "length": 8,
        "offset": 201,
        "surroundingCode": "      if (exception == null) throw new ArgumentNullException(nameof(exception));           \n      \n      return new Result<Nothing>(null, captureStackTrace ? ExceptionDispatchInfo.Capture(exception) : (object) exception);\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantCast"
  },
  "hash": "e9b61c62e8908f56e08751b69a38145725844059e9c8f9613ab7144f86a6f9e4"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant cast",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Type cast is redundant",
  "detailsInfo": "Type cast can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantCast.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/UnsafeMarshallersTest.cs",
      "language": "C#",
      "line": 29,
      "offset": 29,
      "length": 5,
      "code": {
        "startLine": 27,
        "length": 5,
        "offset": 112,
        "surroundingCode": "        cookie.Writer.Write(1234.5678d);\n        cookie.Writer.Write((short) 1000);\n        cookie.Writer.Write((int) 1001);\n        cookie.Writer.Write((long) -1002);\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantCast"
  },
  "hash": "edb3936c832631dc6bd3e7f5c844eb9ec7c07135761e0ffbaa126d23c6b3d7f1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant cast",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Type cast is redundant",
  "detailsInfo": "Type cast can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantCast.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Result.cs",
      "language": "C#",
      "line": 110,
      "offset": 19,
      "length": 8,
      "code": {
        "startLine": 108,
        "length": 8,
        "offset": 112,
        "surroundingCode": "    public static Result<Nothing, TFailure> FailWithValue<TFailure>(TFailure failValue)\n    {\n      return Fail((string) null, failValue);\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantCast"
  },
  "hash": "fe93701bc2de78c8fb3eb95f4faefe772d28ed1d0df590d817c0a21c3ff4d881"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant catch clause",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Catch clause is redundant",
  "detailsInfo": "Catch clause with single 'throw' statement is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantCatchClause.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 136,
      "offset": 7,
      "length": 179,
      "code": {
        "startLine": 134,
        "length": 179,
        "offset": 82,
        "surroundingCode": "          .Invoke(null, parameters ?? EmptyArray<object>.Instance);\n      }\n      catch (TargetInvocationException e)\n      {\n#if !NET35\n        if (e.InnerException != null) ExceptionDispatchInfo.Capture(e.InnerException).Throw();\n#endif\n        throw;\n      }\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantCatchClause"
  },
  "hash": "03331903f8deb051afbdb823bcb31a1cab04bde4e05d1aeaed6cb3d72437873f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant catch clause",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Catch clause is redundant",
  "detailsInfo": "Catch clause with single 'throw' statement is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantCatchClause.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 102,
      "offset": 7,
      "length": 179,
      "code": {
        "startLine": 100,
        "length": 179,
        "offset": 82,
        "surroundingCode": "          .Invoke(self, parameters ?? EmptyArray<object>.Instance);\n      }\n      catch (TargetInvocationException e)\n      {\n#if !NET35\n        if (e.InnerException != null) ExceptionDispatchInfo.Capture(e.InnerException).Throw();\n#endif\n        throw;\n      }\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantCatchClause"
  },
  "hash": "8389d07e69d47a863c2cd2b7be5b7e21e5bdc3c335dab599a4ad631f34da9236"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant catch clause",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Catch clause is redundant",
  "detailsInfo": "Catch clause with single 'throw' statement is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantCatchClause.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 119,
      "offset": 7,
      "length": 179,
      "code": {
        "startLine": 117,
        "length": 179,
        "offset": 82,
        "surroundingCode": "          .Invoke(null, parameters ?? EmptyArray<object>.Instance);\n      }\n      catch (TargetInvocationException e)\n      {\n#if !NET35\n        if (e.InnerException != null) ExceptionDispatchInfo.Capture(e.InnerException).Throw();\n#endif\n        throw;\n      }\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantCatchClause"
  },
  "hash": "c73ff4fbb35cd1facfd5eef3adba49f996b14428491e222f89817d45403cb775"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Redundant member initializer",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Initializing field by default value is redundant",
  "detailsInfo": "Initializing field/property/event with default value is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantDefaultMemberInitializer.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/DelayedContextWithExtTest.cs",
      "language": "C#",
      "line": 22,
      "offset": 35,
      "length": 7,
      "code": {
        "startLine": 20,
        "length": 7,
        "offset": 51,
        "surroundingCode": "\n    [Datapoint]\n    public static bool FalseValue = false;\n    \n    [Theory]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantDefaultMemberInitializer"
  },
  "hash": "1530d46813720dd0f7b4805839e53fbb48ec4592587cad185f05db3b4dbc4bc0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Redundant member initializer",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Initializing field by default value is redundant",
  "detailsInfo": "Initializing field/property/event with default value is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantDefaultMemberInitializer.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/InternRoot.cs",
      "language": "C#",
      "line": 237,
      "offset": 26,
      "length": 3,
      "code": {
        "startLine": 235,
        "length": 3,
        "offset": 117,
        "surroundingCode": "    internal static readonly InternRootScheduler Instance = new InternRootScheduler();\n    \n    private int myActive = 0;\n    public void Queue(Action action)\n    {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantDefaultMemberInitializer"
  },
  "hash": "32eb54bc3db9475f31407b22fc99a355f8b1d2c01eaf632d361872d46c9f2f9c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Redundant member initializer",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Initializing field by default value is redundant",
  "detailsInfo": "Initializing field/property/event with default value is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantDefaultMemberInitializer.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/IWire.cs",
      "language": "C#",
      "line": 40,
      "offset": 50,
      "length": 7,
      "code": {
        "startLine": 38,
        "length": 7,
        "offset": 95,
        "surroundingCode": "    private ProtocolContexts myContexts;\n    \n    private bool myBackwardsCompatibleWireFormat = false;\n\n    public bool IsStub => false;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantDefaultMemberInitializer"
  },
  "hash": "33e514f340d475dbf33379af566413a86994f48aa0e4f6e4e6ad4523bfdf4d98"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Redundant member initializer",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Initializing field by default value is redundant",
  "detailsInfo": "Initializing field/property/event with default value is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantDefaultMemberInitializer.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 44,
      "offset": 42,
      "length": 7,
      "code": {
        "startLine": 42,
        "length": 7,
        "offset": 112,
        "surroundingCode": "    /// of polymorphic serializer from outer world.\n    /// </summary>\n    private bool myPolySerializersSealed = false;\n\n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantDefaultMemberInitializer"
  },
  "hash": "747362e6a93b1f86c1f501adbbddf14dce3c4e629ad0dae82611d5ca70769aa3"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Redundant member initializer",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Initializing field by default value is redundant",
  "detailsInfo": "Initializing field/property/event with default value is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantDefaultMemberInitializer.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextEarlyDeliveryTest.cs",
      "language": "C#",
      "line": 23,
      "offset": 39,
      "length": 7,
      "code": {
        "startLine": 21,
        "length": 7,
        "offset": 99,
        "surroundingCode": "    public static bool TrueDataPoint = true;\n    [Datapoint]\n    public static bool FalseDataPoint = false;\n\n    private IProtocol myClientProtocol;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantDefaultMemberInitializer"
  },
  "hash": "797c4dfed34957781b8560cdc299bbd034ec5794f1d468c033ba2b3aefd1ee8e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Redundant member initializer",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Initializing field by default value is redundant",
  "detailsInfo": "Initializing field/property/event with default value is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantDefaultMemberInitializer.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/SpinWaitLock.cs",
      "language": "C#",
      "line": 135,
      "offset": 36,
      "length": 3,
      "code": {
        "startLine": 133,
        "length": 3,
        "offset": 107,
        "surroundingCode": "    private int _lockCount;\n    private static int _processorCount = 1;\n    private static int _sleepCount = 0;\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantDefaultMemberInitializer"
  },
  "hash": "7f8874bb37dca3eb28ba479741672bab25ae44db4f26494963a6013f82df6aea"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Redundant member initializer",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Initializing field by default value is redundant",
  "detailsInfo": "Initializing field/property/event with default value is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantDefaultMemberInitializer.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/RdExtReflectionBindableBase.cs",
      "language": "C#",
      "line": 13,
      "offset": 43,
      "length": 7,
      "code": {
        "startLine": 11,
        "length": 7,
        "offset": 140,
        "surroundingCode": "    List<KeyValuePair<string, object>> IReflectionBindable.BindableChildren => BindableChildren;\n\n    private bool myBindableChildrenFilled = false;\n    protected override Action<ISerializers> Register { get; } = s => { };\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantDefaultMemberInitializer"
  },
  "hash": "825f1553dfe3e3932be878910fbc9586ab3b87634865b631bc97aab9a0ec3f45"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Redundant member initializer",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Initializing field by default value is redundant",
  "detailsInfo": "Initializing field/property/event with default value is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantDefaultMemberInitializer.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTest.cs",
      "language": "C#",
      "line": 20,
      "offset": 39,
      "length": 7,
      "code": {
        "startLine": 18,
        "length": 7,
        "offset": 99,
        "surroundingCode": "    public static bool TrueDataPoint = true;\n    [Datapoint]\n    public static bool FalseDataPoint = false;\n    \n    [SetUp]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantDefaultMemberInitializer"
  },
  "hash": "98fcb7445e5e815476738e80b02cd0c0a7b01306d9feccfcabe3cce90bdf5dbd"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Redundant member initializer",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Initializing field by default value is redundant",
  "detailsInfo": "Initializing field/property/event with default value is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantDefaultMemberInitializer.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/RdReflectionBindableBase.cs",
      "language": "C#",
      "line": 12,
      "offset": 41,
      "length": 7,
      "code": {
        "startLine": 10,
        "length": 7,
        "offset": 138,
        "surroundingCode": "    List<KeyValuePair<string, object>> IReflectionBindable.BindableChildren => BindableChildren;\n\n    private bool bindableChildrenFilled = false;\n\n    void IReflectionBindable.EnsureBindableChildren()"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantDefaultMemberInitializer"
  },
  "hash": "a109c88c458f4fbe828f38de4accc37b114a27190a36221a45f074e0c00ba8c6"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Redundant member initializer",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Initializing field by default value is redundant",
  "detailsInfo": "Initializing field/property/event with default value is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantDefaultMemberInitializer.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 42,
      "offset": 37,
      "length": 3,
      "code": {
        "startLine": 40,
        "length": 3,
        "offset": 141,
        "surroundingCode": "    private readonly Queue<TaskCompletionSource<T>> myReceivers = new Queue<TaskCompletionSource<T>>();\n\n    private int myTotalMessagesSent = 0;\n    [PublicAPI] public long TotalMessagesSent\n    {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantDefaultMemberInitializer"
  },
  "hash": "a267a1c64733bcab388d86e15108ae2ebeee01da06cd66b31515533f2044075e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Redundant member initializer",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Initializing field by default value is redundant",
  "detailsInfo": "Initializing field/property/event with default value is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantDefaultMemberInitializer.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextBasicTest.cs",
      "language": "C#",
      "line": 13,
      "offset": 39,
      "length": 7,
      "code": {
        "startLine": 11,
        "length": 7,
        "offset": 99,
        "surroundingCode": "    public static bool TrueDataPoint = true;\n    [Datapoint]\n    public static bool FalseDataPoint = false;\n\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantDefaultMemberInitializer"
  },
  "hash": "b1ad2162cdea5878563b0aec437486d16ab56e985095685735b81922a04f760f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Redundant member initializer",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Initializing field by default value is redundant",
  "detailsInfo": "Initializing field/property/event with default value is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantDefaultMemberInitializer.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 196,
      "offset": 34,
      "length": 3,
      "code": {
        "startLine": 194,
        "length": 3,
        "offset": 111,
        "surroundingCode": "    /// </summary>\n    private NativeMemoryPool.ThreadMemoryHolder? myMemory;\n    private int myRecursionLevel = 0;\n\n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantDefaultMemberInitializer"
  },
  "hash": "be2d14b001fc264edd4c65fabc74dc44be362d8bca54528f3cd71ed36e9737fc"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Redundant member initializer",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Initializing field by default value is redundant",
  "detailsInfo": "Initializing field/property/event with default value is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantDefaultMemberInitializer.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/Example/CustomReactive.cs",
      "language": "C#",
      "line": 10,
      "offset": 36,
      "length": 7,
      "code": {
        "startLine": 8,
        "length": 7,
        "offset": 101,
        "surroundingCode": "  public sealed class CustomReactive<T1, T2> : RdReactiveBase\n  {\n    private bool myCreatedFromRead = false;\n    public T1 t1;\n    public T2 t2;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantDefaultMemberInitializer"
  },
  "hash": "cc43c3567bdfec0fc968e115c22225c2e3742a962d036e2c010c85bc5f7ba6b3"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Redundant member initializer",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Initializing field by default value is redundant",
  "detailsInfo": "Initializing field/property/event with default value is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantDefaultMemberInitializer.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/ContextWithExtTest.cs",
      "language": "C#",
      "line": 15,
      "offset": 35,
      "length": 7,
      "code": {
        "startLine": 13,
        "length": 7,
        "offset": 51,
        "surroundingCode": "\n    [Datapoint]\n    public static bool FalseValue = false;\n    \n    [Theory]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantDefaultMemberInitializer"
  },
  "hash": "d65489219d45a281e46f5c66468eaf566473259d68d3c9125104985650c83c1b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant discard designation",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant discard designation",
  "detailsInfo": "Discard designation can be omitted in this context",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ExceptionEx.cs",
      "language": "C#",
      "line": 21,
      "offset": 49,
      "length": 1,
      "code": {
        "startLine": 19,
        "length": 1,
        "offset": 109,
        "surroundingCode": "                case null:\n                    return false;\n                case OperationCanceledException _:\n                    return true;\n                case AggregateException aggregate when aggregate.InnerExceptions.Count == 0:"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantDiscardDesignation"
  },
  "hash": "346e3cb417ea1efe2eded10bbb17bf2d9c2b2a56464c01d03c2ca353d8fbb96e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant discard designation",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant discard designation",
  "detailsInfo": "Discard designation can be omitted in this context",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IRdBindable.cs",
      "language": "C#",
      "line": 193,
      "offset": 21,
      "length": 1,
      "code": {
        "startLine": 191,
        "length": 1,
        "offset": 72,
        "surroundingCode": "          printer.Print(\"<null>\");\n          break;\n        case string _:\n          printer.Print(\"\\\"\" + me + \"\\\"\");\n          break;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantDiscardDesignation"
  },
  "hash": "7ddbd451b3c484a062f8bb827eb0913c1233f8492b57c45249d572806b52efac"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant discard designation",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant discard designation",
  "detailsInfo": "Discard designation can be omitted in this context",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 47,
      "offset": 27,
      "length": 1,
      "code": {
        "startLine": 45,
        "length": 1,
        "offset": 103,
        "surroundingCode": "          return (instance, val) => propInfo.SetValue(instance, val, null);\n\n        case PropertyInfo _:\n          var backingFieldName = $\"<{mi.Name}>k__BackingField\";\n          var backingField = mi.DeclaringType.NotNull().OptionalTypeInfo().GetField(backingFieldName, BindingFlags.NonPublic | BindingFlags.Instance);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantDiscardDesignation"
  },
  "hash": "9c75cd2155c271268a4338b0b329b2206dbca8f646755b62c46da2318ac2fdf8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant discard designation",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant discard designation",
  "detailsInfo": "Discard designation can be omitted in this context",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IRdBindable.cs",
      "language": "C#",
      "line": 67,
      "offset": 26,
      "length": 1,
      "code": {
        "startLine": 65,
        "length": 1,
        "offset": 52,
        "surroundingCode": "      switch (obj)\n      {\n        case IRdBindable _:\n          return true;\n        case IEnumerable enumerable:"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantDiscardDesignation"
  },
  "hash": "f434399817e2a29bb98c33dab991bd58d1bab9bee164fe17ac829c656ebaae6f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant empty argument list on object creation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Empty argument list is redundant",
  "detailsInfo": "When object creation uses object or collection initializer, empty argument list is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 142,
      "offset": 59,
      "length": 2,
      "code": {
        "startLine": 140,
        "length": 2,
        "offset": 110,
        "surroundingCode": "      WithExts<ListInterfacesExt>((c, s) =>\n      {\n        c.Objects.Value = new ListInterfacesExt.ListOwner1()\n        {\n          InterfaceListOfInts = new List<int>() {1, 2, 3},"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantEmptyObjectCreationArgumentList"
  },
  "hash": "0c125e2c1ea3c3cd9c588c120bfb9b01271f25cc6895ae35c5a96639d929a97f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant empty argument list on object creation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Empty argument list is redundant",
  "detailsInfo": "When object creation uses object or collection initializer, empty argument list is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 164,
      "offset": 48,
      "length": 2,
      "code": {
        "startLine": 162,
        "length": 2,
        "offset": 94,
        "surroundingCode": "      WithExts<EventArgsExt>((c, s) =>\n      {\n        c.Objects.Value = new MyEventArgs<int?>() { Value = 42 };\n        Assert.AreEqual(42, s.Objects.Value.Value);\n      });"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantEmptyObjectCreationArgumentList"
  },
  "hash": "26675cd775e0142d8e45d582b2fea3ea561e3175fdfbc7946a0e942ed0fdaf99"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant empty argument list on object creation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Empty argument list is redundant",
  "detailsInfo": "When object creation uses object or collection initializer, empty argument list is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 194,
      "offset": 51,
      "length": 2,
      "code": {
        "startLine": 192,
        "length": 2,
        "offset": 90,
        "surroundingCode": "    public void TestIDictionary()\n    {\n      RunScalarTest(new Dictionary<string, string>() { {\"a\", \"b\"}} as IDictionary<string, string>, CollectionAssert.AreEqual);\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantEmptyObjectCreationArgumentList"
  },
  "hash": "44e8b95af532d71e0638785f75203d31b36d610e7bfbf7089e953a5122ee8d02"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant empty argument list on object creation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Empty argument list is redundant",
  "detailsInfo": "When object creation uses object or collection initializer, empty argument list is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 125,
      "offset": 53,
      "length": 2,
      "code": {
        "startLine": 123,
        "length": 2,
        "offset": 102,
        "surroundingCode": "            new ColorFields(1, 2, 3)\n          },\n          PolymorphicArray = new List<ColorFields[]>()\n          {\n            new ColorFields[30]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantEmptyObjectCreationArgumentList"
  },
  "hash": "46367d1198263ab1e1b31c8b92655156e7c02deee74b742964876c6aa0c80873"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant empty argument list on object creation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Empty argument list is redundant",
  "detailsInfo": "When object creation uses object or collection initializer, empty argument list is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/NativeMemoryPoolTests.cs",
      "language": "C#",
      "line": 73,
      "offset": 70,
      "length": 2,
      "code": {
        "startLine": 71,
        "length": 2,
        "offset": 112,
        "surroundingCode": "    {\n      var sw = Stopwatch.StartNew();\n      Parallel.For(0, Environment.ProcessorCount, new ParallelOptions()\n      {\n        MaxDegreeOfParallelism = -1"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantEmptyObjectCreationArgumentList"
  },
  "hash": "5849bd30304be6d340b43b418c038f582896278c5642468cf04f3d5d34880e4b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant empty argument list on object creation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Empty argument list is redundant",
  "detailsInfo": "When object creation uses object or collection initializer, empty argument list is redundant",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/InternRoot.cs",
      "language": "C#",
      "line": 184,
      "offset": 28,
      "length": 2,
      "code": {
        "startLine": 182,
        "length": 2,
        "offset": 152,
        "surroundingCode": "      RdReactiveBase.ReceiveTrace?.Log($\"InternRoot `{Location}` ({RdId}):: {id} = {value}\");\n      myDirectMap[id] = value;\n      var pair = new IdPair() { Id = id, ExtraId = InternId.Invalid };\n      if (!myInverseMap.TryAdd(value, pair))\n      {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantEmptyObjectCreationArgumentList"
  },
  "hash": "670678248a788234f9be74b2413345ca62fa35bdd5199bda04058ea17ead0519"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant empty argument list on object creation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Empty argument list is redundant",
  "detailsInfo": "When object creation uses object or collection initializer, empty argument list is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 188,
      "offset": 51,
      "length": 2,
      "code": {
        "startLine": 186,
        "length": 2,
        "offset": 89,
        "surroundingCode": "    public void TestDictionary()\n    {\n      RunScalarTest(new Dictionary<string, string>() { {\"a\", \"b\"}}, CollectionAssert.AreEqual);\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantEmptyObjectCreationArgumentList"
  },
  "hash": "6b7185cb03133c0c905ea087d0ecf2e10278d5166c331c00e49f57627a076fb9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant empty argument list on object creation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Empty argument list is redundant",
  "detailsInfo": "When object creation uses object or collection initializer, empty argument list is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorScalarInterfaceSerializerTest.cs",
      "language": "C#",
      "line": 39,
      "offset": 88,
      "length": 2,
      "code": {
        "startLine": 37,
        "length": 2,
        "offset": 166,
        "surroundingCode": "        proxy.GetTypeName3(new IMyInterface[]{new MyImpl1(), new MyImpl2()});\n\n        Assert.AreEqual(1, proxy.ReadonlyDictionaryCount(new Dictionary<string, string>() {{\"\", \"\"}}));\n      });\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantEmptyObjectCreationArgumentList"
  },
  "hash": "83716572ed484e9c892c97776cb336c3a033c33583bd23bcba2840b6bc98713b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant empty argument list on object creation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Empty argument list is redundant",
  "detailsInfo": "When object creation uses object or collection initializer, empty argument list is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 146,
      "offset": 43,
      "length": 2,
      "code": {
        "startLine": 144,
        "length": 2,
        "offset": 151,
        "surroundingCode": "          InterfaceListOfInts = new List<int>() {1, 2, 3},\n          ListOfInts = new List<int>() {1, 2, 3},\n          CollectionOfInts = new List<int>() {1, 2, 3},\n          ReadonlyListInts = new List<int>() {1, 2, 3},\n          EnumerableInts = new List<int>() {1, 2, 3},"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantEmptyObjectCreationArgumentList"
  },
  "hash": "86f38d0f27674e425594641a2a6b66d826ab92d97fbf18e3ebec32a53fa8385f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant empty argument list on object creation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Empty argument list is redundant",
  "detailsInfo": "When object creation uses object or collection initializer, empty argument list is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 201,
      "offset": 51,
      "length": 2,
      "code": {
        "startLine": 199,
        "length": 2,
        "offset": 97,
        "surroundingCode": "    public void TestReadOnlyDictionary()\n    {\n      RunScalarTest(new Dictionary<string, string>() { {\"a\", \"b\"}} as IReadOnlyDictionary<string, string>, CollectionAssert.AreEqual);\n    }\n#endif"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantEmptyObjectCreationArgumentList"
  },
  "hash": "8bf7077ad2f97f44fd280614e8ae700940b302575520372ecd00f0b0c909f4d5"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant empty argument list on object creation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Empty argument list is redundant",
  "detailsInfo": "When object creation uses object or collection initializer, empty argument list is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 145,
      "offset": 37,
      "length": 2,
      "code": {
        "startLine": 143,
        "length": 2,
        "offset": 105,
        "surroundingCode": "        {\n          InterfaceListOfInts = new List<int>() {1, 2, 3},\n          ListOfInts = new List<int>() {1, 2, 3},\n          CollectionOfInts = new List<int>() {1, 2, 3},\n          ReadonlyListInts = new List<int>() {1, 2, 3},"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantEmptyObjectCreationArgumentList"
  },
  "hash": "9ee7fd075472a33bb05b4b6be76b0e7d27cb61be178cd8aaa5e9e1f64b55a90b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant empty argument list on object creation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Empty argument list is redundant",
  "detailsInfo": "When object creation uses object or collection initializer, empty argument list is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 148,
      "offset": 41,
      "length": 2,
      "code": {
        "startLine": 146,
        "length": 2,
        "offset": 152,
        "surroundingCode": "          CollectionOfInts = new List<int>() {1, 2, 3},\n          ReadonlyListInts = new List<int>() {1, 2, 3},\n          EnumerableInts = new List<int>() {1, 2, 3},\n        };\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantEmptyObjectCreationArgumentList"
  },
  "hash": "a17d0922e8621c3f2f1154323090d903ab3d70bc2b8b9dcad4b5a0206599e8f0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant empty argument list on object creation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Empty argument list is redundant",
  "detailsInfo": "When object creation uses object or collection initializer, empty argument list is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 144,
      "offset": 46,
      "length": 2,
      "code": {
        "startLine": 142,
        "length": 2,
        "offset": 116,
        "surroundingCode": "        c.Objects.Value = new ListInterfacesExt.ListOwner1()\n        {\n          InterfaceListOfInts = new List<int>() {1, 2, 3},\n          ListOfInts = new List<int>() {1, 2, 3},\n          CollectionOfInts = new List<int>() {1, 2, 3},"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantEmptyObjectCreationArgumentList"
  },
  "hash": "a31d03b174f5f90aaa1eee540bb7963007c7043e015b0958971f3078fecbf97c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant empty argument list on object creation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Empty argument list is redundant",
  "detailsInfo": "When object creation uses object or collection initializer, empty argument list is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 118,
      "offset": 40,
      "length": 2,
      "code": {
        "startLine": 116,
        "length": 2,
        "offset": 88,
        "surroundingCode": "      WithExts<ListObjectsExt>((c, s) =>\n      {\n        s.Objects.Value = new ListOwner()\n        {\n          Ints = new List<int>() {1, 2, 3},"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantEmptyObjectCreationArgumentList"
  },
  "hash": "a379d978abe62d7a6016c40749c4d4e97eac9e33b4c6e9b27c5865cbc1f92535"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant empty argument list on object creation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Empty argument list is redundant",
  "detailsInfo": "When object creation uses object or collection initializer, empty argument list is redundant",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 75,
      "offset": 80,
      "length": 2,
      "code": {
        "startLine": 73,
        "length": 2,
        "offset": 134,
        "surroundingCode": "  public static class ReflectionSerializerVerifier\n  {\n    private static readonly HashSet<Type> ourPrimitiveTypes = new HashSet<Type>()\n    {\n      typeof(byte),              // serializers.Register(ReadByte, WriteByte, 1);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantEmptyObjectCreationArgumentList"
  },
  "hash": "b2da8994f156ad16655ace84c84d97ed91b7f95bcf49f1b3ab4288e111f5e3b6"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant empty argument list on object creation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Empty argument list is redundant",
  "detailsInfo": "When object creation uses object or collection initializer, empty argument list is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 209,
      "offset": 73,
      "length": 2,
      "code": {
        "startLine": 207,
        "length": 2,
        "offset": 107,
        "surroundingCode": "    public void TestCyclic()\n    {\n      RunScalarTest(new RedBlackList {Start = new RedBlackList.BlackNode() {Next = new RedBlackList.RedNode()}}, (a, b) =>\n      {\n        Assert.NotNull(b.Start.Next);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantEmptyObjectCreationArgumentList"
  },
  "hash": "ba894425e536b31e241fa362578036ae26c84a29446a27ee47d225e2b9661d82"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant empty argument list on object creation expression",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Empty argument list is redundant",
  "detailsInfo": "When object creation uses object or collection initializer, empty argument list is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 30,
      "offset": 35,
      "length": 2,
      "code": {
        "startLine": 28,
        "length": 2,
        "offset": 78,
        "surroundingCode": "      WithExts<ColorsExt>((c, s) =>\n      {\n        c.List.Add(new ColorStruct() {Blue = 1, Green = 2, Red = 3});\n        c.List.Add(new ColorStruct());\n        CollectionAssert.AreEqual(s.List, c.List);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantEmptyObjectCreationArgumentList"
  },
  "hash": "bfe4ca9fdaffc1f493ca3a40b04524ff702ef6b4ec21be969ff292c268818a01"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant empty argument list on object creation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Empty argument list is redundant",
  "detailsInfo": "When object creation uses object or collection initializer, empty argument list is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 121,
      "offset": 46,
      "length": 2,
      "code": {
        "startLine": 119,
        "length": 2,
        "offset": 99,
        "surroundingCode": "        {\n          Ints = new List<int>() {1, 2, 3},\n          Polymorphic = new List<ColorFields>()\n          {\n            new ColorFields(1, 2, 3)"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantEmptyObjectCreationArgumentList"
  },
  "hash": "c13ea9ca3525609b2502ca8d10e48188e8931c89233ecebdc49f43e2e2f47f40"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant empty argument list on object creation expression",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Empty argument list is redundant",
  "detailsInfo": "When object creation uses object or collection initializer, empty argument list is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 120,
      "offset": 31,
      "length": 2,
      "code": {
        "startLine": 118,
        "length": 2,
        "offset": 82,
        "surroundingCode": "        s.Objects.Value = new ListOwner()\n        {\n          Ints = new List<int>() {1, 2, 3},\n          Polymorphic = new List<ColorFields>()\n          {"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantEmptyObjectCreationArgumentList"
  },
  "hash": "da8ba71219487af0f90214eadffc5b630e7ccda771a5605a9cad21d0e75de55f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant empty argument list on object creation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Empty argument list is redundant",
  "detailsInfo": "When object creation uses object or collection initializer, empty argument list is redundant",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Protocol.cs",
      "language": "C#",
      "line": 47,
      "offset": 120,
      "length": 2,
      "code": {
        "startLine": 45,
        "length": 2,
        "offset": 270,
        "surroundingCode": "      Scheduler = scheduler ?? throw new ArgumentNullException(nameof(scheduler));\n      Wire = wire ?? throw new ArgumentNullException(nameof(wire));\n      SerializationContext = serializationCtx ?? new SerializationCtx(this, new Dictionary<string, IInternRoot<object>>() {{ProtocolInternScopeStringId, CreateProtocolInternRoot(lifetime)}});\n      Contexts = parentContexts ?? new ProtocolContexts(SerializationContext);\n      wire.Contexts = Contexts;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantEmptyObjectCreationArgumentList"
  },
  "hash": "e246983cb9e6d7b4c8117fc3799920d86e262bac0550b724db20311a28b6b83c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant empty argument list on object creation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Empty argument list is redundant",
  "detailsInfo": "When object creation uses object or collection initializer, empty argument list is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 41,
      "offset": 35,
      "length": 2,
      "code": {
        "startLine": 39,
        "length": 2,
        "offset": 78,
        "surroundingCode": "      WithExts<ColorsExt>((c, s) =>\n      {\n        c.List.Add(new ColorStruct() {Blue = 1, Green = 2, Red = 3});\n        c.List.Add(new ColorStruct());\n        CollectionAssert.AreEqual(s.List, c.List);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantEmptyObjectCreationArgumentList"
  },
  "hash": "f82bce57e10e7aee3c60e47b57bcbbf66d67f21818c71f6fbaee2ff2f46ce84c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant empty argument list on object creation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Empty argument list is redundant",
  "detailsInfo": "When object creation uses object or collection initializer, empty argument list is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 147,
      "offset": 43,
      "length": 2,
      "code": {
        "startLine": 145,
        "length": 2,
        "offset": 148,
        "surroundingCode": "          ListOfInts = new List<int>() {1, 2, 3},\n          CollectionOfInts = new List<int>() {1, 2, 3},\n          ReadonlyListInts = new List<int>() {1, 2, 3},\n          EnumerableInts = new List<int>() {1, 2, 3},\n        };"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantEmptyObjectCreationArgumentList"
  },
  "hash": "fd576108d0738815e090bf60f7dfdc9bd6547f291108b1048fc00bcc6265fd9a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant empty object or collection initializer",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Empty object or collection initializer list is redundant",
  "detailsInfo": "Redundant empty object or collection initializer",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 37,
      "offset": 37,
      "length": 2,
      "code": {
        "startLine": 35,
        "length": 2,
        "offset": 65,
        "surroundingCode": "      \n      l2.Terminate();\n      Assert.AreEqual(new List<int> {}, lst.Select(x => x.Value).ToList());\n      \n      //again"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantEmptyObjectOrCollectionInitializer"
  },
  "hash": "f9adcd9ee99f770747d027a5e7b45b61c380757e2825db12122b1ad0117b4d8f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant explicit type in array creation",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Redundant explicit array type specification",
  "detailsInfo": "When array type can be inferred from the initializer, you can use an implicitly-typed array [Learn more...](https://www.jetbrains.com/help/rider/RedundantExplicitArrayCreation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/InterpolatedStringHandlerArgumentAttribute.cs",
      "language": "C#",
      "line": 16,
      "offset": 91,
      "length": 6,
      "code": {
        "startLine": 14,
        "length": 6,
        "offset": 305,
        "surroundingCode": "    /// <param name=\"argument\">The name of the argument that should be passed to the handler.</param>\n    /// <remarks><see langword=\"null\"/> may be used as the name of the receiver in an instance method.</remarks>\n    public InterpolatedStringHandlerArgumentAttribute(string argument) => Arguments = new string[] { argument };\n\n    /// <summary>Initializes a new instance of the <see cref=\"InterpolatedStringHandlerArgumentAttribute\"/> class.</summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantExplicitArrayCreation"
  },
  "hash": "5b934a7473f761c3e106d3fee74fce8242f96a2e3dab6236ab9c14507578f014"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant explicit type in array creation",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Redundant explicit array type specification",
  "detailsInfo": "When array type can be inferred from the initializer, you can use an implicitly-typed array [Learn more...](https://www.jetbrains.com/help/rider/RedundantExplicitArrayCreation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/PriorityQueueTest.cs",
      "language": "C#",
      "line": 28,
      "offset": 25,
      "length": 3,
      "code": {
        "startLine": 26,
        "length": 3,
        "offset": 56,
        "surroundingCode": "      q.Add(2);\n      q.Add(3);\n      Assert.IsTrue(new int[] { 1, 2, 3}.SequenceEqual(q), \"new int[] {{ 1, 2, 3}}.SequenceEqual(q)\");\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantExplicitArrayCreation"
  },
  "hash": "6e8590776c234e30895fc0e88eac4b4862f9eb0cb7eac83ff9ec6233a7299ecb"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 136,
      "offset": 11,
      "length": 4,
      "code": {
        "startLine": 134,
        "length": 4,
        "offset": 70,
        "surroundingCode": "          if (index == 0)\n            return mySingleValue;\n          else\n            throw new IndexOutOfRangeException($\"{index} out of range [0;0]\");\n        }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "0644296207ee0a14dbd030fba5a222ee5a469ced6b15e2619d454d57774b7396"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' block",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ByteBufferAsyncProcessor.cs",
      "language": "C#",
      "line": 231,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 229,
        "length": 4,
        "offset": 58,
        "surroundingCode": "          AcknowledgedSeqN = seqNumber;\n        }\n        else\n        {\n          //it's ok ack came 2 times for same package, because if connection lost/resume client resend package with lower number and could receive packages with lower numbers"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "06ebb073c8d91019d7d389b6ef12d6cfe19edb67c8eb9367806f0382dbc6a767"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ByteBufferAsyncProcessor.cs",
      "language": "C#",
      "line": 258,
      "offset": 11,
      "length": 4,
      "code": {
        "startLine": 256,
        "length": 4,
        "offset": 42,
        "surroundingCode": "            return;\n          }\n          else\n            chunk = chunk.Next;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "09aa7337ac22b5bab6ee085fc341cbcc31417ede121df5c0ea835d5916607e1b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' block",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 219,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 217,
        "length": 4,
        "offset": 144,
        "surroundingCode": "        il.Emit(OpCodes.Call, returnType.GetMethod(nameof(RdTask<int>.Successful)).NotNull(\"RdTask<Unit>.Successful not found\"));\n      }\n      else\n      {\n        // regular task already on stack"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "18d6b79a32d9be3956fa19388b54fcd2242672cbb132ac29e0631d01bcfc4dcc"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 137,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 135,
        "length": 4,
        "offset": 135,
        "surroundingCode": "          return (SerializerPair) ReflectionUtil.InvokeGenericThis(this, nameof(CreateValueTupleSerializer), type)!;\n        }\n        else if (typeInfo.IsGenericType && typeInfo.GetGenericTypeDefinition() == typeof(Nullable<>))\n        {\n          var genericTypeArgument = typeInfo.GetGenericArguments()[0];"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "19f7e15ed5456097eed57848b01b536ca8612e4f03c0ed56727b77d10724b508"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/StealingScheduler.cs",
      "language": "C#",
      "line": 125,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 123,
        "length": 4,
        "offset": 35,
        "surroundingCode": "        return true;\n      }\n      else\n      {\n        // no more tasks available"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "24a7a18b13fa4f0e9272e6fc6f79aae92fa95a1b11e7c12e077ab5cf38928a8b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/Intrinsic.cs",
      "language": "C#",
      "line": 81,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 79,
        "length": 4,
        "offset": 65,
        "surroundingCode": "        return new SerializerPair(reader, writer);\n      }\n      else if (ReflectionSerializerVerifier.HasIntrinsicAttribute(typeInfo))\n      {\n        var marshallerType = typeInfo.GetCustomAttribute<RdScalarAttribute>().NotNull().Marshaller;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "250e2b3c8d768b122395b9143f2b46e6dcd8821c6a47139bf405b75bb5b1d31e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 144,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 142,
        "length": 4,
        "offset": 121,
        "surroundingCode": "          // return CreateGenericSerializer(member, typeInfo, implementingType, implementingTypeInfo);\n        }\n        else\n        {\n          myTypesCatalog?.AddType(type);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "2759564ea4b9469b8173334dbe7870e6e279c080691a6912ab2bd289bbed7e6c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdBindableBase.cs",
      "language": "C#",
      "line": 168,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 166,
        "length": 4,
        "offset": 49,
        "surroundingCode": "          return (T) existing;\n        }\n        else\n        {\n          return null;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "31aefb2f2868f36ff6f88204dc3d830f3b85b97f818bfc487f11eaf54e008c07"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 163,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 161,
        "length": 4,
        "offset": 57,
        "surroundingCode": "          return Task.FromResult(msg);\n        }\n        else\n        {\n          return myReceivers.Enqueued(new TaskCompletionSource<T>(TaskCreationOptions.RunContinuationsAsynchronously)).Task;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "31e54ee99e669cf12930e073f991d26408f806371d9f0368dee92c2a4cc59f42"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Result.cs",
      "language": "C#",
      "line": 430,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 428,
        "length": 4,
        "offset": 121,
        "surroundingCode": "      if (Exception is OperationCanceledException oce)\n        return Task.FromCanceled<T>(oce.CancellationToken);\n      else\n        return Task.FromCanceled<T>(Lifetime.Terminated);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "3ebae464b572958644d51a1a047b79452744c8a34faf8b4e191450b1099607e8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 298,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 296,
        "length": 4,
        "offset": 60,
        "surroundingCode": "        return SerializerPair.Polymorphic(t);\n      }\n      else\n      {\n        return GetOrCreate(t);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "3f112a0bbfccf37a7cfdc02f7910ea71af543b0dcd48e841744b610c4050d05a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/Intrinsic.cs",
      "language": "C#",
      "line": 69,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 67,
        "length": 4,
        "offset": 24,
        "surroundingCode": "        }\n      }\n      else if (ReflectionSerializerVerifier.HasIntrinsicFields(typeInfo))\n      {\n        var readField = typeInfo.GetField(\"Read\", BindingFlags.Public | BindingFlags.Static);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "54a9e7e792fa847e95492200f654675c60d260cb462dc46fe954a1af91ca43de"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 201,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 199,
        "length": 4,
        "offset": 96,
        "surroundingCode": "        return CreateGenericSerializer(typeInfo, implementingType.GetTypeInfo());\n      }\n      else if (ReflectionSerializerVerifier.IsScalar(serializerType))\n      {\n        return GetOrCreateScalar(serializerType, instanceSerializer);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "6fb34379929cc25cce4a3fb1340921f69116eeb2feb40bd43d9e51dcb3469202"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 128,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 126,
        "length": 4,
        "offset": 144,
        "surroundingCode": "          return (SerializerPair) ReflectionUtil.InvokeGenericThis(this, nameof(CreateArraySerializer), t.GetElementType())!;\n        }\n        else if (t.IsEnum)\n        {\n          var serializer = ReflectionUtil.InvokeGenericThis(this, nameof(CreateEnumSerializer), t);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "7ca4b4dd07a873f9838eee84ec6ce4633d5ba5974534988fdca437a1d384f994"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 301,
      "offset": 15,
      "length": 4,
      "code": {
        "startLine": 299,
        "length": 4,
        "offset": 65,
        "surroundingCode": "                return sizeToCopy;\n              }\n              else\n                myAcktor.SendAsync(seqN);\n            }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "7f0a46dffa3ccb5ba89c74ae0aa17ee3f56d7b0e119ca9ed062ac05653b28ec9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/SingletonEnumerator.cs",
      "language": "C#",
      "line": 25,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 23,
        "length": 4,
        "offset": 50,
        "surroundingCode": "      if (!myHasNext)\n        return false;\n      else\n      {\n        myHasNext = false;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "88eee480092f80bea6c0a66f25b34378d35b011192248dc2dbc85f38f62c7214"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 205,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 203,
        "length": 4,
        "offset": 84,
        "surroundingCode": "        return GetOrCreateScalar(serializerType, instanceSerializer);\n      }\n      else\n      {\n        var serializerPair = GetOrRegisterStaticSerializerInternal(serializerType, instanceSerializer);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "925a24e4454f0a5a39be7adba5f3d92baa40f145bd6485946942eb6544d29aac"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Result.cs",
      "language": "C#",
      "line": 255,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 253,
        "length": 4,
        "offset": 125,
        "surroundingCode": "      if (result.Exception is OperationCanceledException oce)\n        return Task.FromCanceled(oce.CancellationToken);\n      else\n        return Task.FromCanceled(Lifetime.Terminated);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "96e85063dcde8ee7c5090fa205bd6457bd5999617657a5df7fec3f23218ec72c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CollectionEx.cs",
      "language": "C#",
      "line": 52,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 50,
        "length": 4,
        "offset": 35,
        "surroundingCode": "        return true;\n      }\n      else\n      {\n        res = default(T);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "9e49324cf3d18cf239eb7772b5f95fd458c203bfec6dbfefc3e6abbaac5f28f5"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 114,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 112,
        "length": 4,
        "offset": 225,
        "surroundingCode": "          return (SerializerPair) ReflectionUtil.InvokeStaticGeneric(typeof(CollectionSerializers), nameof(CollectionSerializers.CreateListSerializerPair), genericTypeArgument, argumentTypeSerializerPair)!;\n        }\n        else if (IsDictionary(t) || IsReadOnlyDictionary(t))\n        {\n          var typeArguments = t.GetGenericArguments();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "abde14f59fc85a1f63084b52a0071c29c47d215d190686b2d71ce5c96e0cc8cd"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 681,
      "offset": 19,
      "length": 4,
      "code": {
        "startLine": 679,
        "length": 4,
        "offset": 66,
        "surroundingCode": "                    return;\n                  }\n                  else\n                  {\n                    Log.Verbose(\"{0} : accepted\", Id);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "adc3dd2dae8007f1ce89c42d4761b950aaeaaa2e381a53cd0b314c933907af0c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 136,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 134,
        "length": 4,
        "offset": 55,
        "surroundingCode": "          return Task.CompletedTask;\n        }\n        else {\n          myMessages.Enqueue(msg);\n          return myMessages.Count > SendBufferSize ? "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "ae0dd592ed4ce7da0a23b025a1db5ba550c13af8c77ce46145dd86ae3d522297"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/BitHacks.cs",
      "language": "C#",
      "line": 40,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 38,
        "length": 4,
        "offset": 65,
        "surroundingCode": "          return 16 + ourLogFloor2Lookup[x >> 16];\n      }\n      else\n      {\n        if (x >= 1 << 8) "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "b15001bfb7084c6380c24725a047468515de12700c375e1ae10095e07de1abc3"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' block",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 436,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 434,
        "length": 4,
        "offset": 47,
        "surroundingCode": "        ilgen.Emit(OpCodes.Pop);\n      }\n      else\n      {\n        // ilgen.Emit(OpCodes.Ldnull);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "b4bcafc399edae02a9ef51cc84cf0dc7552be4d362d63eca54d1935cfc148709"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/BitHacks.cs",
      "language": "C#",
      "line": 44,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 42,
        "length": 4,
        "offset": 83,
        "surroundingCode": "        if (x >= 1 << 8) \n          return 8 + ourLogFloor2Lookup[x >> 8];\n        else \n          return ourLogFloor2Lookup[x];\n      }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "bf0d5e635cb97d55035203784171631be0f02dfad11b41feba0d6d3c6aad1395"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 124,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 122,
        "length": 4,
        "offset": 191,
        "surroundingCode": "          return (SerializerPair) ReflectionUtil.InvokeStaticGeneric2(typeof(CollectionSerializers), serializersFactoryName, tkey, tvalue, keySerializer, valueSerializer)!;\n        }\n        else if (t.IsArray)\n        {\n          return (SerializerPair) ReflectionUtil.InvokeGenericThis(this, nameof(CreateArraySerializer), t.GetElementType())!;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "c376b9daaba3bd944f3c2a30b364734d6b8c1bfad0a550883774b1cc99266428"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 139,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 137,
        "length": 4,
        "offset": 97,
        "surroundingCode": "            throw new IndexOutOfRangeException($\"{index} out of range [0;0]\");\n        }\n        else if (myMultipleValues != null)\n          return myMultipleValues[index];\n        else "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "c43f0cdecb971c7760225c9225641493fbfba73d1fd0bbcac6e01d7c1c4e82f1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/BitHacks.cs",
      "language": "C#",
      "line": 37,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 35,
        "length": 4,
        "offset": 86,
        "surroundingCode": "        if (x >= 1 << 24) \n          return 24 + ourLogFloor2Lookup[x >> 24];\n        else \n          return 16 + ourLogFloor2Lookup[x >> 16];\n      }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "cb52a4846120741fc8316a8eff7a1f6e86d368369993e289312a416ecc64e58d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Result.cs",
      "language": "C#",
      "line": 278,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 276,
        "length": 4,
        "offset": 128,
        "surroundingCode": "      if (result.Exception is OperationCanceledException oce)\n        return Task.FromCanceled<T>(oce.CancellationToken);\n      else\n        return Task.FromCanceled<T>(Lifetime.Terminated);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "ce36de798f2dc1c2f4d2ce68d86f1e9f4f926927c3398e8412204d979470c7de"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 246,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 244,
        "length": 4,
        "offset": 47,
        "surroundingCode": "          return sizeToCopy;\n        }\n        else\n        {\n          while (true)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "ce8a4d0ab9e5578e3441681808e1822a3ad4412565788e6ae2abe8f11d85a110"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 141,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 139,
        "length": 4,
        "offset": 93,
        "surroundingCode": "        else if (myMultipleValues != null)\n          return myMultipleValues[index];\n        else \n          throw new IndexOutOfRangeException($\"List is empty\");        \n      }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "edec1c2d79d96d760793c02f494f68ffecda0d80c416c17e949e39499e52fecb"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant 'else' keyword",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant 'else' keyword",
  "detailsInfo": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 133,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 131,
        "length": 4,
        "offset": 65,
        "surroundingCode": "          return (SerializerPair) serializer!;\n        }\n        else if (ReflectionSerializerVerifier.IsValueTuple(typeInfo))\n        {\n          return (SerializerPair) ReflectionUtil.InvokeGenericThis(this, nameof(CreateValueTupleSerializer), type)!;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantIfElseBlock"
  },
  "hash": "ffe2251a736c01296e36ac07ff8ef6e1198d5f1533287506b4e51ebb13a284f5"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant lambda signature parentheses",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant lambda signature parentheses",
  "detailsInfo": "When lambda signature contains single implicitly-typed parameter, signature parentheses can be omitted [Learn more...](https://www.jetbrains.com/help/rider/RedundantLambdaSignatureParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1078,
      "offset": 48,
      "length": 1,
      "code": {
        "startLine": 1076,
        "length": 1,
        "offset": 303,
        "surroundingCode": "        Lifetime.Define(lifetime, atomicAction:(lifeNested) => { lifeNested.OnTermination(FMakeAdder()); lifeNested.OnTermination(FMakeAdder()); lifeNested.OnTermination(FMakeAdder());});\n        lifetime.AddDispose(Disposable.CreateAction(FMakeAdder()));\n        Lifetime.Define(lifetime, atomicAction:(lifeNested) => lifeNested.OnTermination(() => flag = true)).Terminate();\n        Assert.IsTrue(flag, \"Nested closing FAIL.\");\n        flag = false;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantLambdaSignatureParentheses"
  },
  "hash": "0162a7e5ab0fa38ab990996641832018517ee1f5cb64023620eb7627ee12fa69"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant lambda signature parentheses",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant lambda signature parentheses",
  "detailsInfo": "When lambda signature contains single implicitly-typed parameter, signature parentheses can be omitted [Learn more...](https://www.jetbrains.com/help/rider/RedundantLambdaSignatureParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdMap.cs",
      "language": "C#",
      "line": 223,
      "offset": 27,
      "length": 1,
      "code": {
        "startLine": 221,
        "length": 1,
        "offset": 62,
        "surroundingCode": "        if (msgVersioned)\n        {\n          Wire.Send(RdId, (innerWriter) =>\n          {\n            innerWriter.Write((1 << versionedFlagShift) | Ack);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantLambdaSignatureParentheses"
  },
  "hash": "1a8ba456e61a7f6b4e6a470f6a2386bedba1173cccc031331a0f637b76fb8f3d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant lambda signature parentheses",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant lambda signature parentheses",
  "detailsInfo": "When lambda signature contains single implicitly-typed parameter, signature parentheses can be omitted [Learn more...](https://www.jetbrains.com/help/rider/RedundantLambdaSignatureParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/BindableChildrenUtil.cs",
      "language": "C#",
      "line": 80,
      "offset": 30,
      "length": 1,
      "code": {
        "startLine": 78,
        "length": 1,
        "offset": 112,
        "surroundingCode": "        var getters = bindableMembers.Select(ReflectionUtil.GetGetter).ToArray();\n\n        fillBindableFields = (obj) =>\n        {\n          for (int i = 0; i < bindableMembers.Length; i++)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantLambdaSignatureParentheses"
  },
  "hash": "3ac973ac288cb927221b0c1195e9e81ebfaa9f8b1398d486cc6f6b8f61c1e03b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant lambda signature parentheses",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant lambda signature parentheses",
  "detailsInfo": "When lambda signature contains single implicitly-typed parameter, signature parentheses can be omitted [Learn more...](https://www.jetbrains.com/help/rider/RedundantLambdaSignatureParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1076,
      "offset": 48,
      "length": 1,
      "code": {
        "startLine": 1074,
        "length": 1,
        "offset": 303,
        "surroundingCode": "        Lifetime.Define(lifetime, atomicAction:(lifeNested) => { lifeNested.OnTermination(FMakeAdder()); lifeNested.OnTermination(FMakeAdder()); lifeNested.OnTermination(FMakeAdder());});\n        lifetime.AddDispose(Disposable.CreateAction(FMakeAdder()));\n        Lifetime.Define(lifetime, atomicAction:(lifeNested) => { lifeNested.OnTermination(FMakeAdder()); lifeNested.OnTermination(FMakeAdder()); lifeNested.OnTermination(FMakeAdder());});\n        lifetime.AddDispose(Disposable.CreateAction(FMakeAdder()));\n        Lifetime.Define(lifetime, atomicAction:(lifeNested) => lifeNested.OnTermination(() => flag = true)).Terminate();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantLambdaSignatureParentheses"
  },
  "hash": "40957cb56f0c54b51a4220b022fbdf3a3989b36cafadca766c5403b3a1cc9bd1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant lambda signature parentheses",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant lambda signature parentheses",
  "detailsInfo": "When lambda signature contains single implicitly-typed parameter, signature parentheses can be omitted [Learn more...](https://www.jetbrains.com/help/rider/RedundantLambdaSignatureParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSet.cs",
      "language": "C#",
      "line": 76,
      "offset": 27,
      "length": 1,
      "code": {
        "startLine": 74,
        "length": 1,
        "offset": 75,
        "surroundingCode": "          if (!IsLocalChange) return;\n          \n          Wire.Send(RdId, (stream) =>\n          {\n            stream.Write((int)it.Kind);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantLambdaSignatureParentheses"
  },
  "hash": "4544cedd8b4036f13af7a29a0826ca5b12cd28868401a11fee23940f6a240f24"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant lambda signature parentheses",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant lambda signature parentheses",
  "detailsInfo": "When lambda signature contains single implicitly-typed parameter, signature parentheses can be omitted [Learn more...](https://www.jetbrains.com/help/rider/RedundantLambdaSignatureParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdListTest.cs",
      "language": "C#",
      "line": 54,
      "offset": 39,
      "length": 1,
      "code": {
        "startLine": 52,
        "length": 1,
        "offset": 75,
        "surroundingCode": "\n      var log = new List<string>();\n      clientList.Advise(TestLifetime, (e) => log.Add(e.Kind + \" \" + e.Index + \" \" + e.NewValue));   \n\n      serverList.Add(\"1\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantLambdaSignatureParentheses"
  },
  "hash": "6d741bf0d638a8b21c80cb6e6b5db8c3c4742ec811ab19c95a5b5e266f5d353f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant lambda signature parentheses",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant lambda signature parentheses",
  "detailsInfo": "When lambda signature contains single implicitly-typed parameter, signature parentheses can be omitted [Learn more...](https://www.jetbrains.com/help/rider/RedundantLambdaSignatureParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdMapTest.cs",
      "language": "C#",
      "line": 62,
      "offset": 53,
      "length": 1,
      "code": {
        "startLine": 60,
        "length": 1,
        "offset": 89,
        "surroundingCode": "\n      var log = new List<string>();\n      clientMap.Advise(LifetimeDefinition.Lifetime, (e) => log.Add(e.Kind + \" \" + e.Key + \" \" + e.NewValue));   \n\n      serverMap.Add(1, \"1\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantLambdaSignatureParentheses"
  },
  "hash": "aa27b782225cfca73f162647307871f7a21c7284065f06d72a858d11df859510"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant lambda signature parentheses",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant lambda signature parentheses",
  "detailsInfo": "When lambda signature contains single implicitly-typed parameter, signature parentheses can be omitted [Learn more...](https://www.jetbrains.com/help/rider/RedundantLambdaSignatureParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdCall.cs",
      "language": "C#",
      "line": 175,
      "offset": 23,
      "length": 1,
      "code": {
        "startLine": 173,
        "length": 1,
        "offset": 161,
        "surroundingCode": "      var task = new WiredRdTask<TReq,TRes>.CallSite(Lifetime.Intersect(requestLifetime, myBindLifetime), this, taskId, scheduler);\n      \n      Wire.Send(RdId, (writer) =>\n      {\n        SendTrace?.Log($\"{task} :: send request: {request.PrintToString()}\");"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantLambdaSignatureParentheses"
  },
  "hash": "b41f89a2cebf9541f70e4a58c05b90194782dbc92d59b3fa3cd9146c4325b284"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant lambda signature parentheses",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant lambda signature parentheses",
  "detailsInfo": "When lambda signature contains single implicitly-typed parameter, signature parentheses can be omitted [Learn more...](https://www.jetbrains.com/help/rider/RedundantLambdaSignatureParentheses.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1074,
      "offset": 48,
      "length": 1,
      "code": {
        "startLine": 1072,
        "length": 1,
        "offset": 161,
        "surroundingCode": "        lifetime.OnTermination(FMakeAdder());\n        lifetime.AddDispose(Disposable.CreateAction(FMakeAdder()));\n        Lifetime.Define(lifetime, atomicAction:(lifeNested) => { lifeNested.OnTermination(FMakeAdder()); lifeNested.OnTermination(FMakeAdder()); lifeNested.OnTermination(FMakeAdder());});\n        lifetime.AddDispose(Disposable.CreateAction(FMakeAdder()));\n        Lifetime.Define(lifetime, atomicAction:(lifeNested) => { lifeNested.OnTermination(FMakeAdder()); lifeNested.OnTermination(FMakeAdder()); lifeNested.OnTermination(FMakeAdder());});"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantLambdaSignatureParentheses"
  },
  "hash": "f662c4a37aeee798b25baf40c403431a3cc057586be01c5cdf75d4e06441a4d6"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant name qualifier",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Qualifier is redundant",
  "detailsInfo": "Redundant use of qualifier for a type name or static member usage",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdTaskTest.cs",
      "language": "C#",
      "line": 17,
      "offset": 14,
      "length": 17,
      "code": {
        "startLine": 15,
        "length": 17,
        "offset": 31,
        "surroundingCode": "{\n  [TestFixture]\n  [Apartment(System.Threading.ApartmentState.STA)]\n  public class RdTaskTest : RdFrameworkTestBase\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantNameQualifier"
  },
  "hash": "12fe1360b53f062cc2c736b0917c2e4a0ae2afe261e1f9bd07fae1d50ef6b184"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant name qualifier",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Qualifier is redundant",
  "detailsInfo": "Redundant use of qualifier for a type name or static member usage",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Types.cs",
      "language": "C#",
      "line": 109,
      "offset": 9,
      "length": 18,
      "code": {
        "startLine": 107,
        "length": 18,
        "offset": 33,
        "surroundingCode": "        Type\n      #else\n        System.Reflection.TypeInfo\n      #endif\n      OptionalTypeInfo(this Type thisType)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantNameQualifier"
  },
  "hash": "1561076c2f7245c5c0931295055918f2803ad0b01f777407892c5dbd5e5228c9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant name qualifier",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Qualifier is redundant",
  "detailsInfo": "Redundant use of qualifier for a type name or static member usage",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1086,
      "offset": 33,
      "length": 12,
      "code": {
        "startLine": 1084,
        "length": 12,
        "offset": 85,
        "surroundingCode": "      Assert.IsFalse(flag, \"Nested closed twice.\");\n\n      CollectionAssert.AreEqual(System.Linq.Enumerable.Range(0, entries.Count).Reverse().ToArray(), entries, \"Order FAIL.\");\n      \n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantNameQualifier"
  },
  "hash": "f1663ae17d961015d201e8ef17bbd26c5235e981220e587b9d782387e7b6a9aa"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant nullable directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Redundant nullable directive",
  "detailsInfo": "A nullable directive does not change a context and can be safely removed",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ReactiveEx.cs",
      "language": "C#",
      "line": 191,
      "offset": 1,
      "length": 17,
      "code": {
        "startLine": 189,
        "length": 17,
        "offset": 137,
        "surroundingCode": "    public static void View<K, V>(this IViewableMap<K, V> me, Lifetime lifetime, Action<Lifetime, K, V> handler) where K : notnull\n    {\n#nullable disable\n      var lifetimes = new Dictionary<KeyValuePair<K, V>, LifetimeDefinition>();\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantNullableDirective"
  },
  "hash": "29a8f6637f246eee3d4eb0d32c726c6edc9a26f464001ce008b165760082ca77"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant nullable directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Redundant nullable directive",
  "detailsInfo": "A nullable directive does not change a context and can be safely removed",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdExtBase.cs",
      "language": "C#",
      "line": 13,
      "offset": 1,
      "length": 17,
      "code": {
        "startLine": 11,
        "length": 17,
        "offset": 23,
        "surroundingCode": "using JetBrains.Util;\n\n#nullable disable\n\nnamespace JetBrains.Rd.Base"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantNullableDirective"
  },
  "hash": "2e86faa72ccb28ca42f0d70a0b36fe9226ce81de39de94d566a68da1273dd6ea"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant nullable directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Redundant nullable directive",
  "detailsInfo": "A nullable directive does not change a context and can be safely removed",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/InternRoot.cs",
      "language": "C#",
      "line": 13,
      "offset": 1,
      "length": 17,
      "code": {
        "startLine": 11,
        "length": 17,
        "offset": 28,
        "surroundingCode": "using JetBrains.Util.Util;\n\n#nullable disable\n\nnamespace JetBrains.Rd.Impl"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantNullableDirective"
  },
  "hash": "4e9dad6711aa92323c6be2cef07a9ff8bf133a8f335114b83a1201b13ebe9267"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant nullable directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Redundant nullable directive",
  "detailsInfo": "A nullable directive does not change a context and can be safely removed",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdTaskResult.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 17,
      "code": {
        "startLine": 4,
        "length": 17,
        "offset": 32,
        "surroundingCode": "using JetBrains.Serialization;\n\n#nullable disable\n\nnamespace JetBrains.Rd.Tasks"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantNullableDirective"
  },
  "hash": "5377bf0106b1d6194827ed712e88fadd6965fe31cecd8a357bd15d616036f7bb"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant nullable directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Redundant nullable directive",
  "detailsInfo": "A nullable directive does not change a context and can be safely removed",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/LightSingleContextHandler.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 17,
      "code": {
        "startLine": 3,
        "length": 17,
        "offset": 32,
        "surroundingCode": "using JetBrains.Serialization;\n\n#nullable disable\n\nnamespace JetBrains.Rd.Impl"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantNullableDirective"
  },
  "hash": "55fa322a6f948aa8bb415698fe1832273224c30eb75969819d9108cc569c4c0e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant nullable directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Redundant nullable directive",
  "detailsInfo": "A nullable directive does not change a context and can be safely removed",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/SerializationCtx.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 17,
      "code": {
        "startLine": 5,
        "length": 17,
        "offset": 32,
        "surroundingCode": "using JetBrains.Serialization;\n\n#nullable disable\n\nnamespace JetBrains.Rd"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantNullableDirective"
  },
  "hash": "6899acebbc56b18ae8617cacabbcabf1175aaba41dc5386871ab5ad031b10b02"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant nullable directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Redundant nullable directive",
  "detailsInfo": "A nullable directive does not change a context and can be safely removed",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ByteBufferAsyncProcessor.cs",
      "language": "C#",
      "line": 9,
      "offset": 1,
      "length": 17,
      "code": {
        "startLine": 7,
        "length": 17,
        "offset": 62,
        "surroundingCode": "using JetBrains.Serialization;\nusing JetBrains.Util.Internal;\n#nullable disable\n\nnamespace JetBrains.Threading"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantNullableDirective"
  },
  "hash": "75b01eeb622986f9958dea060abf924a4460dbe3b327b3ff610fc1fc6b35147c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant nullable directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Redundant nullable directive",
  "detailsInfo": "A nullable directive does not change a context and can be safely removed",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/HeavySingleContextHandler.cs",
      "language": "C#",
      "line": 9,
      "offset": 1,
      "length": 17,
      "code": {
        "startLine": 7,
        "length": 17,
        "offset": 32,
        "surroundingCode": "using JetBrains.Serialization;\n\n#nullable disable\n\nnamespace JetBrains.Rd.Impl"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantNullableDirective"
  },
  "hash": "91be087b9a58aeec7b72e69e3c12e9d24924982ba87f703a61983ef45ab2af61"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant nullable directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Redundant nullable directive",
  "detailsInfo": "A nullable directive does not change a context and can be safely removed",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/RdContext.cs",
      "language": "C#",
      "line": 9,
      "offset": 1,
      "length": 17,
      "code": {
        "startLine": 7,
        "length": 17,
        "offset": 23,
        "surroundingCode": "using JetBrains.Util;\n\n#nullable disable\n\nnamespace JetBrains.Rd"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantNullableDirective"
  },
  "hash": "bf52e70fbc1c38e4622312c7b5b8ec32e6d75c3166b8b7a7afb97cb1df4fa3b3"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant nullable directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Redundant nullable directive",
  "detailsInfo": "A nullable directive does not change a context and can be safely removed",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/IInternRoot.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 17,
      "code": {
        "startLine": 2,
        "length": 17,
        "offset": 56,
        "surroundingCode": "using JetBrains.Rd.Base;\nusing JetBrains.Serialization;\n#nullable disable\n\nnamespace JetBrains.Rd"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantNullableDirective"
  },
  "hash": "ca30bc36659fe60a47fab9cf03ac1bfa88173639704052c43cfd6e13243871e4"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant nullable directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Redundant nullable directive",
  "detailsInfo": "A nullable directive does not change a context and can be safely removed",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdList.cs",
      "language": "C#",
      "line": 15,
      "offset": 1,
      "length": 17,
      "code": {
        "startLine": 13,
        "length": 17,
        "offset": 32,
        "surroundingCode": "using JetBrains.Serialization;\n\n#nullable disable\n\n// ReSharper disable InconsistentNaming"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantNullableDirective"
  },
  "hash": "d989eb87da79defda523e7ae923b710c335b54f35c8be9889d4d04f9e5d6e397"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant string interpolation",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant string interpolation",
  "detailsInfo": "String interpolation expression without arguments is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 40,
      "offset": 9,
      "length": 1,
      "code": {
        "startLine": 38,
        "length": 1,
        "offset": 98,
        "surroundingCode": "      E($\"Entry points:\");\n      E(\"  \" + string.Join(\"\\n  \", ep.Select(it => it.Name)));\n      E($\"Parameters:\");\n      E(\"  \" + string.Join(\"\\n  \", ps.Select(it => it.Name)));\n"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "RedundantStringInterpolation"
  },
  "hash": "093cf5714fa4a01388401a336ab00b260a990783757102ef904ee507ce5fbbd5"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant string interpolation",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant string interpolation",
  "detailsInfo": "String interpolation expression without arguments is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/SequentialLifetimesTest.cs",
      "language": "C#",
      "line": 107,
      "offset": 31,
      "length": 1,
      "code": {
        "startLine": 105,
        "length": 1,
        "offset": 64,
        "surroundingCode": "      {\n        lifetime.Bracket(\n          () => sb.AppendLine($\"start\"),\n          () => sb.AppendLine($\"end\"));\n        sb.AppendLine(\"Before terminate\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantStringInterpolation"
  },
  "hash": "0d09963d4c525d70313cf4f37b7d0af4fb750366a9dbcd0fb54f9d10670873df"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant string interpolation",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Redundant string interpolation",
  "detailsInfo": "String interpolation expression without arguments is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 142,
      "offset": 46,
      "length": 1,
      "code": {
        "startLine": 140,
        "length": 1,
        "offset": 101,
        "surroundingCode": "          return myMultipleValues[index];\n        else \n          throw new IndexOutOfRangeException($\"List is empty\");        \n      }\n    }        "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantStringInterpolation"
  },
  "hash": "4c32b5df2e0ebae8d19faa12e36857bf87aaefc49017eadd6978ccb2291434e8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant string interpolation",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant string interpolation",
  "detailsInfo": "String interpolation expression without arguments is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/SequentialLifetimesTest.cs",
      "language": "C#",
      "line": 129,
      "offset": 33,
      "length": 1,
      "code": {
        "startLine": 127,
        "length": 1,
        "offset": 70,
        "surroundingCode": "        {\n          lifetime.Bracket(\n            () => sb.AppendLine($\"start\"),\n            () => sb.AppendLine($\"end\"));\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantStringInterpolation"
  },
  "hash": "9338a5a446a2b473f87a0c6d0e4f7987d7a0c50e7e4ce3e72f07bab5adef8c2e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant string interpolation",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant string interpolation",
  "detailsInfo": "String interpolation expression without arguments is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/SequentialLifetimesTest.cs",
      "language": "C#",
      "line": 130,
      "offset": 33,
      "length": 1,
      "code": {
        "startLine": 128,
        "length": 1,
        "offset": 103,
        "surroundingCode": "          lifetime.Bracket(\n            () => sb.AppendLine($\"start\"),\n            () => sb.AppendLine($\"end\"));\n\n          sb.AppendLine(\"Before exception\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantStringInterpolation"
  },
  "hash": "adde318ee3749d12098805897a1eb8fa5e32e0d49292cf02286ed60a37cf8868"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant string interpolation",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant string interpolation",
  "detailsInfo": "String interpolation expression without arguments is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/SequentialLifetimesTest.cs",
      "language": "C#",
      "line": 108,
      "offset": 31,
      "length": 1,
      "code": {
        "startLine": 106,
        "length": 1,
        "offset": 97,
        "surroundingCode": "        lifetime.Bracket(\n          () => sb.AppendLine($\"start\"),\n          () => sb.AppendLine($\"end\"));\n        sb.AppendLine(\"Before terminate\");\n        sequence.TerminateCurrent();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantStringInterpolation"
  },
  "hash": "d7219459784fc4b8f9e02ad9cc4cdb24568ba722a0db4a5dce1eb925a60932b0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant string interpolation",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Redundant string interpolation",
  "detailsInfo": "String interpolation expression without arguments is redundant",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 38,
      "offset": 9,
      "length": 1,
      "code": {
        "startLine": 36,
        "length": 1,
        "offset": 116,
        "surroundingCode": "      \n      E($\"Usage: {t.Assembly.GetName().Name}.exe <entry-point> <parameter-name>=<parameter-value>\");\n      E($\"Entry points:\");\n      E(\"  \" + string.Join(\"\\n  \", ep.Select(it => it.Name)));\n      E($\"Parameters:\");"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "RedundantStringInterpolation"
  },
  "hash": "d9c94d84a6e8fac6ed9151fc0950464b10a638254c8d498aa23c60eabb781fae"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant nullable warning suppression expression",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "The nullable warning suppression expression is redundant",
  "detailsInfo": "Nullable warning suppression expression does not suppress any warnings and is applied to an already non-nullable operand",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ViewableList.cs",
      "language": "C#",
      "line": 49,
      "offset": 15,
      "length": 1,
      "code": {
        "startLine": 47,
        "length": 1,
        "offset": 56,
        "surroundingCode": "    void ICollection<T>.Add(T item)\n    {\n      Add(item!);\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantSuppressNullableWarningExpression"
  },
  "hash": "c7e0ff0793102e8bd5b576bffa71024b740771596b6d1838eb427f37a0324370"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant nullable warning suppression expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "The nullable warning suppression expression is redundant",
  "detailsInfo": "Nullable warning suppression expression does not suppress any warnings and is applied to an already non-nullable operand",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 71,
      "offset": 101,
      "length": 1,
      "code": {
        "startLine": 69,
        "length": 1,
        "offset": 212,
        "surroundingCode": "      var _id = RdId.Read(reader);\n      var writeRdTextBufferChangeNullable = WriteRdTextBufferChangeNullable;\n      var changes = RdProperty<RdTextBufferChange?>.Read(ctx, reader, ReadRdTextBufferChangeNullable!, writeRdTextBufferChangeNullable);\n      var versionBeforeTypingSession = RdProperty<TextBufferVersion>.Read(ctx, reader, TextBufferVersionSerializer.ReadDelegate, TextBufferVersionSerializer.WriteDelegate);\n      var assertedMasterText = RdProperty<RdAssertion>.Read(ctx, reader, RdAssertion.Read, RdAssertion.Write);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantSuppressNullableWarningExpression"
  },
  "hash": "df4f150ef32918e3ba9785ad25f6e58c3ef798ef48896adca46a203b5b15eda0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant type arguments of method",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Type argument specification is redundant",
  "detailsInfo": "Specification of method type arguments is redundant because they are inferred from argument types",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 222,
      "offset": 38,
      "length": 3,
      "code": {
        "startLine": 220,
        "length": 3,
        "offset": 53,
        "surroundingCode": "     Enum\n    {\n      Register(ReadEnum<T>, WriteEnum<T>);\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantTypeArgumentsOfMethod"
  },
  "hash": "056ad5323688ef89436c02ffc1d4603ee3a142a053d4c46eb4c36cb8f4bd6025"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant type arguments of method",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Type argument specification is redundant",
  "detailsInfo": "Specification of method type arguments is redundant because they are inferred from argument types",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 20,
      "offset": 51,
      "length": 3,
      "code": {
        "startLine": 18,
        "length": 3,
        "offset": 149,
        "surroundingCode": "    public static CtxReadDelegate<T?> ReadAbstract(CtxReadDelegate<T> unknownInstanceReader)\n    {\n      return (ctx, reader) => ctx.Serializers.Read<T>(ctx, reader, unknownInstanceReader);\n    }\n  }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantTypeArgumentsOfMethod"
  },
  "hash": "fdc200b4c2e015737d6175f4c376a7d8578bbbb79f6bd1289846ce3e354a32f5"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorAsyncCallsTest.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 37,
      "code": {
        "startLine": 3,
        "length": 37,
        "offset": 54,
        "surroundingCode": "using System.Threading;\nusing System.Threading.Tasks;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Rd;\nusing JetBrains.Rd.Impl;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "03a2381c9ff3386a7f3ccc5a381e158cf74fb7b611bf5b34834791275f1a9245"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Internal/NullLog.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 21,
      "code": {
        "startLine": 1,
        "length": 21,
        "offset": 14,
        "surroundingCode": "using System;\nusing JetBrains.Util;\n\nnamespace JetBrains.Diagnostics.Internal"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "06a7d133668003b3207a4e26086ea2635bf80f2936ed543d98bbc1595c37fa54"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ActorTest.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 18,
      "code": {
        "startLine": 1,
        "length": 18,
        "offset": 48,
        "surroundingCode": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "0a8ae87886d1a095aff821e63cbd8345022283ae5dd7b78cf6f556b0f0bd8474"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Result.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 26,
      "code": {
        "startLine": 3,
        "length": 26,
        "offset": 48,
        "surroundingCode": "using System.Linq;\nusing JetBrains.Annotations;\nusing JetBrains.Lifetimes;\n\nusing System.Threading.Tasks;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "0ad0f3be661b319ae72aaa5c6c43473ed71f1206b74c60f05f0929ab69a01742"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorAsyncCallsTest.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 23,
      "code": {
        "startLine": 1,
        "length": 23,
        "offset": 33,
        "surroundingCode": "using System;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing JetBrains.Collections.Viewable;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "0b339fc50973a30b89781731496607324eeddfcf55ad5c26106e5808d8871e1e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ActorTest.cs",
      "language": "C#",
      "line": 9,
      "offset": 1,
      "length": 26,
      "code": {
        "startLine": 7,
        "length": 26,
        "offset": 49,
        "surroundingCode": "using JetBrains.Core;\nusing JetBrains.Lifetimes;\nusing JetBrains.Threading;\nusing NUnit.Framework;\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "0d30d2ed29f368e59a61a50b80c045268ccfc039e893643465b2f6e2006a6a92"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/TaskHack.cs",
      "language": "C#",
      "line": 1,
      "offset": 1,
      "length": 13,
      "code": {
        "startLine": 1,
        "length": 13,
        "offset": 0,
        "surroundingCode": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "0d7717fffb6ad9f7bc5edf0707156fb24aefccf5261b7623f0e5a3a8599c0f6b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 26,
      "code": {
        "startLine": 5,
        "length": 26,
        "offset": 51,
        "surroundingCode": "using JetBrains.Core;\nusing JetBrains.Diagnostics;\nusing JetBrains.Lifetimes;\nusing JetBrains.Serialization;\nusing JetBrains.Util.Util;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "122a2becd84926fcc8a4ff1f1a3031fb316c3583dee2197eed6add07745b7c8b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/UnsafeWriterTest.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 18,
      "code": {
        "startLine": 1,
        "length": 18,
        "offset": 40,
        "surroundingCode": "using System;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Threading;\nusing JetBrains.Serialization;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "154471c431654646d58637ce1b275bc1f342440dc609eda40bb5892604fe4250"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Synchronized/SynchronizedSet.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 25,
      "code": {
        "startLine": 1,
        "length": 25,
        "offset": 14,
        "surroundingCode": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "175df10f3bcf68a1e77c2ec5ba44c1420edb6e39c6da8151f4c9e9fa21cbc07d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/SchedulerWrapperTest.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 37,
      "code": {
        "startLine": 2,
        "length": 37,
        "offset": 54,
        "surroundingCode": "using System.Threading;\nusing System.Threading.Tasks;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Lifetimes;\nusing NUnit.Framework;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "17fcb9deba7544a00716ced21bf352bad64a40231d788e2b5d01ed4c70b460e4"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/RuntimeInfo.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 38,
      "code": {
        "startLine": 1,
        "length": 38,
        "offset": 14,
        "surroundingCode": "using System;\nusing System.Diagnostics.CodeAnalysis;\nusing System.Reflection;\nusing JetBrains.Annotations;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "1973e194742b18b5023e955641ae43d0fbdfeb9735ac50679c085cac0480c32c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ListEvent.cs",
      "language": "C#",
      "line": 1,
      "offset": 1,
      "length": 38,
      "code": {
        "startLine": 1,
        "length": 38,
        "offset": 0,
        "surroundingCode": "using System.Diagnostics.CodeAnalysis;\nusing JetBrains.Annotations;\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "19edd414dc5f59cf0e4fdb69e5e428317a40f8d4873fed790d90f0ad1387d68d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdExtBase.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 2,
        "length": 28,
        "offset": 53,
        "surroundingCode": "using System.Collections.Generic;\nusing System.Linq;\nusing JetBrains.Annotations;\nusing JetBrains.Collections;\nusing JetBrains.Collections.Viewable;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "1db7096e8222b6d5ac084a9cd9bc3d5575f53ccf94ca32daf207a781cadc84c7"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdMapTest.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 24,
      "code": {
        "startLine": 4,
        "length": 24,
        "offset": 56,
        "surroundingCode": "using JetBrains.Diagnostics;\nusing JetBrains.Lifetimes;\nusing JetBrains.Rd.Impl;\nusing NUnit.Framework;\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "1e1942ea34a0c28bae19bb0e0e1ad93d0f31611b345268ba0d0e179d54dfe8b9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/RdTextBuffer.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 3,
        "length": 28,
        "offset": 53,
        "surroundingCode": "using System.Collections.Generic;\nusing System.Linq;\nusing JetBrains.Annotations;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Diagnostics;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "1fef535e741291caf38b0dbdd82de440b79566a892781b227fb5bef94292e828"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/BlockingPriorityQueueTest.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 3,
        "length": 28,
        "offset": 54,
        "surroundingCode": "using System.Threading;\nusing System.Threading.Tasks;\nusing JetBrains.Collections;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Threading;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "21c0732fd11d65075d009ca644d3e7e75f5284cf201347080008ed32caf604f8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ActorTest.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 33,
      "code": {
        "startLine": 1,
        "length": 33,
        "offset": 14,
        "surroundingCode": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "2377cf87d97aa00f45d1d2e79d617b2a6efbd3e1d329a1b5adc1901d5806c215"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorModelTest.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 25,
      "code": {
        "startLine": 6,
        "length": 25,
        "offset": 58,
        "surroundingCode": "using JetBrains.Lifetimes;\nusing JetBrains.Rd.Reflection;\nusing JetBrains.Rd.Tasks;\nusing NUnit.Framework;\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "25684c9bfdaced6ecde9a12cbb6dddd5938a16b7668d80c2be02cc15bbd25d84"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/SingleThreadSchedulerTest.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 26,
      "code": {
        "startLine": 3,
        "length": 26,
        "offset": 68,
        "surroundingCode": "using System.Threading.Tasks;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Lifetimes;\nusing NUnit.Framework;\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "270a60b22621ddd07a48c177fd379008eeafc8aa6c75e3e5fb33ea7d991c4b94"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 1,
        "length": 28,
        "offset": 48,
        "surroundingCode": "using System;\nusing System.Collections.Generic;\nusing JetBrains.Annotations;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Rd.Base;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "277f654c15f6eb8c38f0e95ef29fb2bfb2a2b472c5f45f3d1223f1584b952f54"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 10,
      "offset": 1,
      "length": 26,
      "code": {
        "startLine": 8,
        "length": 26,
        "offset": 65,
        "surroundingCode": "using JetBrains.Diagnostics.Internal;\nusing JetBrains.Lifetimes;\nusing JetBrains.Threading;\nusing NUnit.Framework;\n// ReSharper disable MethodSupportsCancellation"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "2b25bd0cf23af29321121c21314fe42deb7b0724f936f159278adece1bddb322"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/ITypesRegistrar.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 1,
        "length": 28,
        "offset": 14,
        "surroundingCode": "using System;\nusing JetBrains.Annotations;\n\nnamespace JetBrains.Rd"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "2b3a2ea776a189699003c357bb45cdcccc691ba3c178a59593b55401981f002e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/ExtCreatedUtils.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 1,
        "length": 28,
        "offset": 14,
        "surroundingCode": "using System;\nusing JetBrains.Annotations;\nusing JetBrains.Diagnostics;\nusing JetBrains.Rd.Base;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "2b5a5235b20a1319a84f71f235f184675104a6162546e0d7df61bb7e9bcacec3"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/StealingScheduler.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 4,
        "length": 28,
        "offset": 54,
        "surroundingCode": "using System.Threading;\nusing System.Threading.Tasks;\nusing JetBrains.Annotations;\n\nnamespace JetBrains.Rd.Impl"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "2bc7c9ea88bd06ae34b8b56f579f6c5be103877f038c8653b6149cc4ed12e725"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Actor.cs",
      "language": "C#",
      "line": 10,
      "offset": 1,
      "length": 21,
      "code": {
        "startLine": 8,
        "length": 21,
        "offset": 56,
        "surroundingCode": "using JetBrains.Diagnostics;\nusing JetBrains.Lifetimes;\nusing JetBrains.Util;\n\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "2d1d12b561968d7b820dc51a2b7df9b0b2e8428f24a8992d90deae4a41b3f004"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/StealingScheduler.cs",
      "language": "C#",
      "line": 1,
      "offset": 1,
      "length": 13,
      "code": {
        "startLine": 1,
        "length": 13,
        "offset": 0,
        "surroundingCode": "using System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "2e16b4177717efa6f37bcbaaeb0087396d21a23b09471eabc04bbd15a03393e5"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/ILogFactory.cs",
      "language": "C#",
      "line": 1,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 1,
        "length": 28,
        "offset": 0,
        "surroundingCode": "using JetBrains.Annotations;\n\nnamespace JetBrains.Diagnostics"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "2e92894b2baa0132cc2806c2fb3d7cc248858c7674792124783755eb03a6e6c6"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/BitSliceTest.cs",
      "language": "C#",
      "line": 1,
      "offset": 1,
      "length": 13,
      "code": {
        "startLine": 1,
        "length": 13,
        "offset": 0,
        "surroundingCode": "using System;\nusing System.Threading.Tasks;\nusing JetBrains.Diagnostics;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "2e92e27d86e823490756342f9afd1febdfe54337d39c42c981d6ff4dfcb0d318"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/UnsafeWriterTest.cs",
      "language": "C#",
      "line": 1,
      "offset": 1,
      "length": 13,
      "code": {
        "startLine": 1,
        "length": 13,
        "offset": 0,
        "surroundingCode": "using System;\nusing System.Diagnostics;\nusing System.Linq;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "2ec06215ffff9a597b1f218adc05ad3e9a31ad6b61c371b6a48304318a6f467f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/BlockingPriorityQueueTest.cs",
      "language": "C#",
      "line": 9,
      "offset": 1,
      "length": 46,
      "code": {
        "startLine": 7,
        "length": 46,
        "offset": 50,
        "surroundingCode": "using JetBrains.Threading;\nusing NUnit.Framework;\nusing Lifetime = JetBrains.Lifetimes.Lifetime;\n\nnamespace Test.Lifetimes.Collections"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "30fe1654f462f11848fd918b1f85745c5326f89e0ee19248f9e354e86f871a78"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdSignalTest.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 24,
      "code": {
        "startLine": 1,
        "length": 24,
        "offset": 63,
        "surroundingCode": "using System.Collections.Generic;\nusing JetBrains.Diagnostics;\nusing JetBrains.Rd.Impl;\nusing NUnit.Framework;\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "32f38d74d053452b40a637a5cc7ad74c3e720c1d5adb8fa7af0873d084c4ff90"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 12,
      "offset": 1,
      "length": 30,
      "code": {
        "startLine": 10,
        "length": 30,
        "offset": 49,
        "surroundingCode": "using JetBrains.Threading;\nusing JetBrains.Util;\nusing JetBrains.Util.Internal;\nusing JetBrains.Util.Util;\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "342fbf46ce5e9aff14f404a8f0ebd19bc4c85f9a07c89756f806026adaad5e3a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ActorTest.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 26,
      "code": {
        "startLine": 6,
        "length": 26,
        "offset": 60,
        "surroundingCode": "using JetBrains.Collections.Viewable;\nusing JetBrains.Core;\nusing JetBrains.Lifetimes;\nusing JetBrains.Threading;\nusing NUnit.Framework;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "35fc62b10f1a0f322e1bb304831633d6d08f14e3163d69e625aef368385a4981"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/RuntimeInfo.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 2,
        "length": 28,
        "offset": 64,
        "surroundingCode": "using System.Diagnostics.CodeAnalysis;\nusing System.Reflection;\nusing JetBrains.Annotations;\n\nnamespace JetBrains.Util"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "386f4fef1ec2d622f346b68fb286d9ce4c72813f6870ab1fdee7c677766cb74d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/BitSliceTest.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 1,
        "length": 28,
        "offset": 44,
        "surroundingCode": "using System;\nusing System.Threading.Tasks;\nusing JetBrains.Diagnostics;\nusing JetBrains.Util.Util;\nusing NUnit.Framework;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "3a18e3b092fb42c14124b9107a188fa856a5dff236e7e4895bd35db988f93bd4"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/SingleThreadSchedulerTest.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 22,
      "code": {
        "startLine": 4,
        "length": 22,
        "offset": 65,
        "surroundingCode": "using JetBrains.Collections.Viewable;\nusing JetBrains.Lifetimes;\nusing NUnit.Framework;\n\n#if !NET35"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "3adb1c5a1c7dd4de81bca4c9bbef7d9749c76a8745f913a69a0206cb57139e49"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/SchedulerWrapperTest.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 22,
      "code": {
        "startLine": 4,
        "length": 22,
        "offset": 65,
        "surroundingCode": "using JetBrains.Collections.Viewable;\nusing JetBrains.Lifetimes;\nusing NUnit.Framework;\n\nnamespace Test.Lifetimes.Collections.Viewable"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "3b4cf8731ba5b76b8e0bd5c34ab9b819ebeee68cc93dc99211e471c3de4c357a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/BlockingPriorityQueueTest.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 22,
      "code": {
        "startLine": 6,
        "length": 22,
        "offset": 65,
        "surroundingCode": "using JetBrains.Collections.Viewable;\nusing JetBrains.Threading;\nusing NUnit.Framework;\nusing Lifetime = JetBrains.Lifetimes.Lifetime;\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "3bd52e8c496f69e9e9277d3497b7537e0b02d11c507d1250a2f39bb41edcef55"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/DictionaryExTest.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 25,
      "code": {
        "startLine": 1,
        "length": 25,
        "offset": 14,
        "surroundingCode": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Threading;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "3c35b98febb482a50ec00a8d6058df3c2f2099eca389f00f3423ce47f7c512eb"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 36,
      "code": {
        "startLine": 1,
        "length": 36,
        "offset": 14,
        "surroundingCode": "using System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.Diagnostics.CodeAnalysis;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "3d1e1fbb34bb40dcfeb99b681f15f7edd5828bdf6d0f5ab80833af700fdbfe38"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SingleThreadScheduler.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 30,
      "code": {
        "startLine": 6,
        "length": 30,
        "offset": 56,
        "surroundingCode": "using JetBrains.Diagnostics;\nusing JetBrains.Lifetimes;\nusing JetBrains.Serialization;\nusing JetBrains.Threading;\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "3ed937992b5a43b22a39f39abc69a44fb6eadeb61d2aa8dd9b37dc628ffcbb9d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Actor.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 3,
        "length": 28,
        "offset": 54,
        "surroundingCode": "using System.Threading;\nusing System.Threading.Tasks;\nusing JetBrains.Annotations;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Core;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "3f83d18980a2ab2962c6e30e1f7d0dc9049d41400aee4e4a5b2a0f9d30b290b5"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdListTest.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 24,
      "code": {
        "startLine": 3,
        "length": 24,
        "offset": 65,
        "surroundingCode": "using JetBrains.Collections.Viewable;\nusing JetBrains.Lifetimes;\nusing JetBrains.Rd.Impl;\nusing NUnit.Framework;\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "402ae514bf5bbebb14b0b8219ffaf6614215b9df51dac0fe22cb26844ce0395d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ReactiveEx.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 38,
      "code": {
        "startLine": 1,
        "length": 38,
        "offset": 48,
        "surroundingCode": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics.CodeAnalysis;\nusing System.Threading.Tasks;\nusing JetBrains.Core;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "43b96ab0e5534457ffbb7cec8dce2626a1166dfc9b9e3ee89118973721f55410"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 4,
        "length": 28,
        "offset": 77,
        "surroundingCode": "using System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\nusing JetBrains.Annotations;\nusing JetBrains.Diagnostics;\nusing JetBrains.Util;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "43d48f972d54b3c7870ded9fea16b0953c6f81a43ef16f1e62e4a0e32359cfd2"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IPerContextMap.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 37,
      "code": {
        "startLine": 1,
        "length": 37,
        "offset": 48,
        "surroundingCode": "using System;\nusing System.Collections.Generic;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Lifetimes;\nusing JetBrains.Rd.Impl;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "453454382437ecf9efbd14cb40791de63fddd027ca7ad3c4582ba4b16b5b95a0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdMap.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 18,
      "code": {
        "startLine": 2,
        "length": 18,
        "offset": 60,
        "surroundingCode": "using System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing JetBrains.Annotations;\nusing JetBrains.Collections;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "45a9ca9f116be39f3222b233b3f8288b59e82a2ea4ce147f44f33fa4e7901029"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 23,
      "code": {
        "startLine": 5,
        "length": 23,
        "offset": 77,
        "surroundingCode": "using System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\nusing System.Threading;\nusing JetBrains.Annotations;\nusing JetBrains.Diagnostics;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "46f95792e52934ae7b44d570b048e36c03ff892b8f8c3d871d6b68a7bb62aa87"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ListEvent.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 1,
        "length": 28,
        "offset": 39,
        "surroundingCode": "using System.Diagnostics.CodeAnalysis;\nusing JetBrains.Annotations;\n\nnamespace JetBrains.Collections.Viewable"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "472c70b924c6373ec4d7af23c49b3d4bd1f6473b096066406dff5dcd78c0448e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 29,
      "code": {
        "startLine": 2,
        "length": 29,
        "offset": 60,
        "surroundingCode": "using System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Threading.Tasks;\nusing JetBrains.Annotations;\nusing JetBrains.Collections;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "479fb3dada922a6191cd2878d5bcef3cce553d19739ed04b6c7f2d86f26897df"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Actor.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 37,
      "code": {
        "startLine": 4,
        "length": 37,
        "offset": 59,
        "surroundingCode": "using System.Threading.Tasks;\nusing JetBrains.Annotations;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Core;\nusing JetBrains.Diagnostics;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "4b678b06c4ab6c8943359da74653d3222ba93cb4f86d64fe459ba2b9def80dfe"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/BlockingPriorityQueueTest.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 18,
      "code": {
        "startLine": 1,
        "length": 18,
        "offset": 14,
        "surroundingCode": "using System;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "4bec372cf013e8419603b29cd6dc99b404a845b932d36c9e7ea51f7b35fb521b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/TestReflectionSerialization.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 2,
        "length": 28,
        "offset": 57,
        "surroundingCode": "using System.Linq;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Diagnostics;\nusing JetBrains.Rd.Impl;\nusing JetBrains.Rd.Reflection;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "4c57f7e6825a613506aace63ec79aa0cbc8d21ebdc7920df8ddb7819dbe48159"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ChannelTest.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 22,
      "code": {
        "startLine": 3,
        "length": 22,
        "offset": 54,
        "surroundingCode": "using JetBrains.Lifetimes;\nusing JetBrains.Threading;\nusing NUnit.Framework;\n\nnamespace Test.Lifetimes.Threading"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "4e4a21dc6b4a01c70244c23489ed6676f1a3869670d65cb6981ea005e5b6459c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/SchedulerWrapperTest.cs",
      "language": "C#",
      "line": 1,
      "offset": 1,
      "length": 13,
      "code": {
        "startLine": 1,
        "length": 13,
        "offset": 0,
        "surroundingCode": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "511a44224532ab4722bd3814117ed4e66e5db906105b2c8be27f6adb468be5e1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Synchronized/SynchronizedSet.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 3,
        "length": 28,
        "offset": 53,
        "surroundingCode": "using System.Collections.Generic;\nusing System.Linq;\nusing JetBrains.Annotations;\n\nnamespace JetBrains.Collections.Synchronized"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "5268da0d482d2e01887090b7cfa22c9cb63756f89e666391be233ca9bf68cd72"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/FirstChanceExceptionInterceptor.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 1,
        "length": 28,
        "offset": 40,
        "surroundingCode": "using System;\nusing System.Collections;\nusing JetBrains.Annotations;\nusing JetBrains.Util;\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "52aecfd31825548fecd78dace75ccf57e1d156774309de7a0ef01eb0d88844af"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ISource.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 1,
        "length": 28,
        "offset": 14,
        "surroundingCode": "using System;\nusing JetBrains.Annotations;\nusing JetBrains.Lifetimes;\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "533d2c79c616fbdb675917e3bbb218fbfd8aa0eef853288123533ee3d0ba7d97"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorCornerCasesTests.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 18,
      "code": {
        "startLine": 1,
        "length": 18,
        "offset": 14,
        "surroundingCode": "using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing JetBrains.Collections.Viewable;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "540611416bf04990610495beda970b290fbcde6e249d18a712330ffb15c7b52b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ChannelTest.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 26,
      "code": {
        "startLine": 1,
        "length": 26,
        "offset": 44,
        "surroundingCode": "using System;\nusing System.Threading.Tasks;\nusing JetBrains.Lifetimes;\nusing JetBrains.Threading;\nusing NUnit.Framework;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "568c89706b236c806c18ea1e33b0fbf8be7d97ab722378925d40b359f20f842c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ScopedAsyncLocal.cs",
      "language": "C#",
      "line": 1,
      "offset": 1,
      "length": 13,
      "code": {
        "startLine": 1,
        "length": 13,
        "offset": 0,
        "surroundingCode": "using System;\nusing System.Threading;\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "56b26f9136e449a29976ba1300ef08808cfa2915d4494547880f0f9dbdfcae51"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 29,
      "code": {
        "startLine": 2,
        "length": 29,
        "offset": 58,
        "surroundingCode": "using System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing JetBrains.Diagnostics;\nusing JetBrains.Serialization;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "573da77a602f73b61f2cbc831762024cec55593dcc3b27e20f65116a7b60f8ed"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdBindableBase.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 3,
        "length": 28,
        "offset": 48,
        "surroundingCode": "using System.ComponentModel;\nusing System.Linq;\nusing JetBrains.Annotations;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Diagnostics;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "581cde63e32303536be3ef4678acd2897b672c2145b3781412c1763286c6d1f6"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/SchedulerWrapperTest.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 23,
      "code": {
        "startLine": 1,
        "length": 23,
        "offset": 14,
        "surroundingCode": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing JetBrains.Collections.Viewable;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "5ac3c5a080111f81498504a8699b33d7ed7fb7f3bb33636d4c2372f3bdfff705"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 1,
      "offset": 1,
      "length": 13,
      "code": {
        "startLine": 1,
        "length": 13,
        "offset": 0,
        "surroundingCode": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "5b2ae0ccdb5f53a6a5c466931a6202c08beb03101c329c3d287d2ba0316a849e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 3,
        "length": 28,
        "offset": 56,
        "surroundingCode": "using System.Diagnostics;\nusing System.Threading.Tasks;\nusing JetBrains.Annotations;\nusing JetBrains.Collections;\nusing JetBrains.Core;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "5f74ea9acd0215f5a319ec91fbb743d99d5c1ff18384839444b2d3cec9d9258d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IRdBindable.cs",
      "language": "C#",
      "line": 10,
      "offset": 1,
      "length": 26,
      "code": {
        "startLine": 8,
        "length": 26,
        "offset": 56,
        "surroundingCode": "using JetBrains.Rd.Util;\nusing JetBrains.Serialization;\nusing JetBrains.Util.Util;\n\nnamespace JetBrains.Rd.Base"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "618c500f5d61572606cb3cd7cb589f83e7e27f2dcb71faacf7b21fb12c740d07"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/RdTextChange.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 1,
        "length": 28,
        "offset": 14,
        "surroundingCode": "using System;\nusing JetBrains.Annotations;\nusing JetBrains.Rd.Base;\nusing JetBrains.Rd.Util;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "62da5b4a6808cebdaffd86996548235ebdacc46267fb24d5d487d3f4eb555bec"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/BlockingPriorityQueueTest.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 37,
      "code": {
        "startLine": 4,
        "length": 37,
        "offset": 59,
        "surroundingCode": "using System.Threading.Tasks;\nusing JetBrains.Collections;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Threading;\nusing NUnit.Framework;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "642332a236c71dc7fae7835fdfc2f008c5ec575d0b0c15d0cc6ec759cbef9e01"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 25,
      "code": {
        "startLine": 1,
        "length": 25,
        "offset": 14,
        "surroundingCode": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Diagnostics;"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "677a162c2ff4a48f517559653de09ac062f48dc091328080fd5ac04aecb8d223"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/MessageBroker.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 1,
        "length": 28,
        "offset": 53,
        "surroundingCode": "using System.Collections.Generic;\nusing System.Linq;\nusing JetBrains.Annotations;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Diagnostics;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "67dd6b6c12fe5eed46ec9bfaf806c117b3fb24ac8a1a2e907ed9af81a88cf1ed"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/ILog.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 21,
      "code": {
        "startLine": 1,
        "length": 21,
        "offset": 43,
        "surroundingCode": "using System;\nusing JetBrains.Annotations;\nusing JetBrains.Util;\n\nnamespace JetBrains.Diagnostics"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "691e3c65c593ee10d9bcdf892bd1c42b0ec77d036ab8739066bed9a8af9da44f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorModelTest.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 23,
      "code": {
        "startLine": 1,
        "length": 23,
        "offset": 19,
        "surroundingCode": "using System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing JetBrains.Collections.Viewable;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "6a64740e48754ccef62341cb824063908fcbae10613b2b9636b8d4a0db140c9b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Synchronized/SynchronizedSet.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 33,
      "code": {
        "startLine": 1,
        "length": 33,
        "offset": 40,
        "surroundingCode": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing JetBrains.Annotations;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "6be1ea2a692f6737f3b8c44bd89da5e6f89f0df45eac20d3ae966e34318c06b9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdTask.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 29,
      "code": {
        "startLine": 1,
        "length": 29,
        "offset": 38,
        "surroundingCode": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing JetBrains.Annotations;\nusing JetBrains.Collections.Viewable;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "6db006dc9bde494e44dacd9a173f4c9cecaf0cbe93c03efd89cc7dc0cd0c5dbe"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/SingleThreadSchedulerTest.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 29,
      "code": {
        "startLine": 1,
        "length": 29,
        "offset": 48,
        "surroundingCode": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Lifetimes;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "6e0964339036ea3d1bb5d93b1fb23d286ecb37467b8f447198e73c078138bc27"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 4,
        "length": 28,
        "offset": 59,
        "surroundingCode": "using System.Threading.Tasks;\nusing JetBrains.Annotations;\nusing JetBrains.Collections;\nusing JetBrains.Core;\nusing JetBrains.Diagnostics;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "6e30f2367ee9d4b10f9d46574f307aad7931568d2f06d9d69aa0ce881f86f813"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Synchronized/SynchronizedSet.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 18,
      "code": {
        "startLine": 2,
        "length": 18,
        "offset": 60,
        "surroundingCode": "using System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing JetBrains.Annotations;\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "6fb37237fe903145f3e8d37eb1b69f9d431ba417d7aee7ab993c0dfeba265953"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IRdBindable.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 2,
        "length": 28,
        "offset": 60,
        "surroundingCode": "using System.Collections;\nusing System.Collections.Generic;\nusing JetBrains.Annotations;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Diagnostics;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "71e54b0faebe12ea59b0a4dda8c0316f1706cc593166629a7adf2c92d0975663"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 21,
      "code": {
        "startLine": 5,
        "length": 21,
        "offset": 58,
        "surroundingCode": "using JetBrains.Annotations;\nusing JetBrains.Collections;\nusing JetBrains.Core;\nusing JetBrains.Diagnostics;\nusing JetBrains.Lifetimes;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "75d737e3aea704a15a76c8dae9958085d99090fe38d1fa987fd9feeacc8266a2"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/IProtocol.cs",
      "language": "C#",
      "line": 1,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 1,
        "length": 28,
        "offset": 0,
        "surroundingCode": "using JetBrains.Annotations;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Rd.Base;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "7733d92c9320dc6f4c9048794055e51354923dab21db82b45e9fd94864d1834c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdList.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 37,
      "code": {
        "startLine": 2,
        "length": 37,
        "offset": 60,
        "surroundingCode": "using System.Collections;\nusing System.Collections.Generic;\nusing System.Collections.Specialized;\nusing System.ComponentModel;\nusing System.Linq;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "791b83dfa2203df52f225fc5c84cbde20bdeacc5e411de7e86872b4d944cb3b3"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/CastToTest.cs",
      "language": "C#",
      "line": 1,
      "offset": 1,
      "length": 13,
      "code": {
        "startLine": 1,
        "length": 13,
        "offset": 0,
        "surroundingCode": "using System;\nusing System.Runtime.InteropServices;\nusing JetBrains.Collections.Viewable;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "7ae7a65ba2c704748b623649ae1366f71789878f58fa4c0d05ceb64169c9a2a6"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 18,
      "code": {
        "startLine": 1,
        "length": 18,
        "offset": 48,
        "surroundingCode": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\nusing JetBrains.Annotations;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "7b42246b570ffa9149d9f92224164d7bad10558b1de6262ff4e957f02b4adc12"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/ReferenceEqualityComparer.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 1,
        "length": 28,
        "offset": 73,
        "surroundingCode": "using System.Collections.Generic;\nusing System.Runtime.CompilerServices;\nusing JetBrains.Annotations;\n\nnamespace JetBrains.Collections"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "7f769f95fc403408dc30f934b11697820e35cf4b3c8b85ee0eaa475c5c13c78a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ActorTest.cs",
      "language": "C#",
      "line": 10,
      "offset": 1,
      "length": 22,
      "code": {
        "startLine": 8,
        "length": 22,
        "offset": 54,
        "surroundingCode": "using JetBrains.Lifetimes;\nusing JetBrains.Threading;\nusing NUnit.Framework;\n\nnamespace Test.Lifetimes.Threading"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "80245c867de30e6f6cc0cc557d608ab4652b52ea262c48f52b9e933a560116a6"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ActorTest.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 21,
      "code": {
        "startLine": 5,
        "length": 21,
        "offset": 68,
        "surroundingCode": "using System.Threading.Tasks;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Core;\nusing JetBrains.Lifetimes;\nusing JetBrains.Threading;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "80b9939c78a5954cbb60bd39a52dabb3fb6527f8a0f0ed98435c86debeee9bc2"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 26,
      "code": {
        "startLine": 5,
        "length": 26,
        "offset": 58,
        "surroundingCode": "using JetBrains.Annotations;\nusing JetBrains.Diagnostics;\nusing JetBrains.Lifetimes;\nusing JetBrains.Util.Util;\n#if !NET35"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "8499a75072475592a843dcd7c71c8ec90ad407fb6445096cbaf96c60fe70b6b0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/TaskHack.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 26,
      "code": {
        "startLine": 3,
        "length": 26,
        "offset": 57,
        "surroundingCode": "using System.Threading.Tasks;\nusing JetBrains.Lifetimes;\nusing JetBrains.Threading;\n\n#if NET35"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "84c5a06c3111b5975ec4c936865dc5e03d2aae003b0ad34c83887e9b4bd3aaa5"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/SingleThreadSchedulerTest.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 33,
      "code": {
        "startLine": 1,
        "length": 33,
        "offset": 14,
        "surroundingCode": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing JetBrains.Collections.Viewable;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "891ccaa4947fa8f53378e4f0d0c66bb814f26385df595dea6eaf19696459d587"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/JetPriorityQueue.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 38,
      "code": {
        "startLine": 2,
        "length": 38,
        "offset": 60,
        "surroundingCode": "using System.Collections;\nusing System.Collections.Generic;\nusing System.Diagnostics.CodeAnalysis;\nusing System.Linq;\nusing System.Threading;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "8a29a03e783e36ca5ce5e553974655fde4c99632dcfcbc4c5ebb21a4c5a27660"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/TaskHack.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 26,
      "code": {
        "startLine": 2,
        "length": 26,
        "offset": 54,
        "surroundingCode": "using System.Threading;\nusing System.Threading.Tasks;\nusing JetBrains.Lifetimes;\nusing JetBrains.Threading;\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "8b9a1824ebeeb106bef49cbcd8584f59eca48c80a666553fb71b53349c934aef"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Synchronized/SynchronizedSet.cs",
      "language": "C#",
      "line": 1,
      "offset": 1,
      "length": 13,
      "code": {
        "startLine": 1,
        "length": 13,
        "offset": 0,
        "surroundingCode": "using System;\nusing System.Collections;\nusing System.Collections.Generic;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "8e702a26ee7073a8345efd1c65fe0b6cfcd66be6d6b893dbd89a3ed684905f0f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Log.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 4,
        "length": 28,
        "offset": 43,
        "surroundingCode": "using System.Text;\nusing System.Threading;\nusing JetBrains.Annotations;\nusing JetBrains.Diagnostics.Internal;\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "937d6cbf04af46f9b3484be3ca26bfa1cb09036f56582058a90a9e2385b40b33"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RpcTimeouts.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 1,
        "length": 28,
        "offset": 14,
        "surroundingCode": "using System;\nusing JetBrains.Annotations;\nusing JetBrains.Diagnostics;\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "962ab4f55626c77a8c46d960c999799e7e52e6b807ece87ac3ba5119aa124c9e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ReactiveEx.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 29,
      "code": {
        "startLine": 2,
        "length": 29,
        "offset": 73,
        "surroundingCode": "using System.Collections.Generic;\nusing System.Diagnostics.CodeAnalysis;\nusing System.Threading.Tasks;\nusing JetBrains.Core;\nusing JetBrains.Lifetimes;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "96a5bcfad31aef2b46f5ea770e1dc46ffebd3312b05ccfccb24c995d711df06d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/ILog.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 1,
        "length": 28,
        "offset": 14,
        "surroundingCode": "using System;\nusing JetBrains.Annotations;\nusing JetBrains.Util;\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "976252c4c07a04f746a6117356ba2f3ab1d20cda6c0028d10ae1c1f952ecbc5b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorCustomSignalTest.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 21,
      "code": {
        "startLine": 1,
        "length": 21,
        "offset": 14,
        "surroundingCode": "using System;\nusing System.Drawing;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Diagnostics;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "9c2a58e77fad607c76c4e6d906a60aabc65f6764f4861de0fe3eace85d06449e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 25,
      "code": {
        "startLine": 1,
        "length": 25,
        "offset": 48,
        "surroundingCode": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "9ef951b454cf6a5d7c3b3c4de4914e3219941daaeb438fd9570c141c3c8a27ef"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/BlockingPriorityQueueTest.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 29,
      "code": {
        "startLine": 2,
        "length": 29,
        "offset": 43,
        "surroundingCode": "using System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing JetBrains.Collections;\nusing JetBrains.Collections.Viewable;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "a259c8a21107c128dec52b9974d837190d1f8130e928a2ea3206e0095e31faae"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ActorTest.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 29,
      "code": {
        "startLine": 3,
        "length": 29,
        "offset": 43,
        "surroundingCode": "using System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Core;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "a2633a3df13072eb6823dd9380eb7ba1b26986b8f78174f059df9aa9ec9a1f77"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/BindableChildrenUtil.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 3,
        "length": 28,
        "offset": 44,
        "surroundingCode": "using System.Linq;\nusing System.Reflection;\nusing JetBrains.Diagnostics;\nusing JetBrains.Rd.Base;\nusing JetBrains.Rd.Util;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "a2688e31ddc6801614a455ebf6ca1e231aa783d9b2eaa06b9714dd048ebd3e07"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/CastToTest.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 37,
      "code": {
        "startLine": 1,
        "length": 37,
        "offset": 14,
        "surroundingCode": "using System;\nusing System.Runtime.InteropServices;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Util.Util;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "a30045395bee455fe4667ef5be001d6454bd17ed19bc0d4633dd50d6e017c781"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/TaskHack.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 23,
      "code": {
        "startLine": 1,
        "length": 23,
        "offset": 14,
        "surroundingCode": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing JetBrains.Lifetimes;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "a353a726898b98baa31c50725965dd2c110c66d7e7f5ae12ae70d06aadb66ebf"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/DictionaryExTest.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 4,
        "length": 28,
        "offset": 54,
        "surroundingCode": "using System.Threading;\nusing System.Threading.Tasks;\nusing JetBrains.Diagnostics;\nusing JetBrains.Lifetimes;\nusing JetBrains.Rd.Util;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "a59a0594c448f00b8bc2ad9c32f734db5e9c51775cfcb48b2cf09d171ef29619"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/BindableChildrenUtil.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 24,
      "code": {
        "startLine": 2,
        "length": 24,
        "offset": 53,
        "surroundingCode": "using System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\nusing JetBrains.Diagnostics;\nusing JetBrains.Rd.Base;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "a6169e125f0e8a478e5216438419566bc130a4785fc36fef750be9b49e430445"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Statics.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 2,
        "length": 28,
        "offset": 58,
        "surroundingCode": "using System.Collections.Generic;\nusing System.Threading;\nusing JetBrains.Annotations;\nusing JetBrains.Diagnostics;\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "a619b5e323f09eecd69d57ddf33a881a71aad71b97f993517da487f0d9970e74"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/ISerializers.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 1,
        "length": 28,
        "offset": 14,
        "surroundingCode": "using System;\nusing JetBrains.Annotations;\nusing JetBrains.Serialization;\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "a6ee085dc754eff63c438a9f51f985f885e2ce6dee7e995248293be60f6c599d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Interop/MethodImplAdvancedOptions.cs",
      "language": "C#",
      "line": 1,
      "offset": 1,
      "length": 13,
      "code": {
        "startLine": 1,
        "length": 13,
        "offset": 0,
        "surroundingCode": "using System;\nusing System.Runtime.CompilerServices;\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "a70e53bbc8a1771349519e486893ad3dfd8c84bab3b1362fc29e31d9528a54eb"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorModelTest.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 21,
      "code": {
        "startLine": 3,
        "length": 21,
        "offset": 68,
        "surroundingCode": "using System.Threading.Tasks;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Core;\nusing JetBrains.Lifetimes;\nusing JetBrains.Rd.Reflection;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "a79df625b8886c298420189a25dc26cff2651cfed3e1fa07a26495dbeaac8c61"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorModelTest.cs",
      "language": "C#",
      "line": 1,
      "offset": 1,
      "length": 18,
      "code": {
        "startLine": 1,
        "length": 18,
        "offset": 0,
        "surroundingCode": "using System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "ad7f9db0922e1f7bc645340199f6d32e68e2e3dec60776ba81ecfb494bf06f0e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdTask.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 2,
        "length": 28,
        "offset": 54,
        "surroundingCode": "using System.Threading;\nusing System.Threading.Tasks;\nusing JetBrains.Annotations;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Rd.Util;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "ad933ebe992075994445db0bb5d9a86bff2878c27d30aad87f370dc95b7a9f58"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdPropertyTest.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 24,
      "code": {
        "startLine": 1,
        "length": 24,
        "offset": 54,
        "surroundingCode": "using JetBrains.Diagnostics;\nusing JetBrains.Rd.Base;\nusing JetBrains.Rd.Impl;\nusing NUnit.Framework;\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "af7a6c850d8d78f8e06d27047b3d0cf8c01bcec3b29473f764f8caff0a7e61b3"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdTask.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 23,
      "code": {
        "startLine": 1,
        "length": 23,
        "offset": 14,
        "surroundingCode": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing JetBrains.Annotations;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "b1088b934c4328ff40170678f9c5717c09422739b4501c86a9be03c41e6f3831"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/SingleThreadSchedulerTest.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 37,
      "code": {
        "startLine": 2,
        "length": 37,
        "offset": 64,
        "surroundingCode": "using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Lifetimes;\nusing NUnit.Framework;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "b36138feacf4c8220ca5023c98659f0a0698e4b34359909d42e99b61a90fd19e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/RdReflectionTestBase.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 16,
      "code": {
        "startLine": 1,
        "length": 16,
        "offset": 14,
        "surroundingCode": "using System;\nusing System.IO;\nusing System.Linq;\nusing System.Threading.Tasks;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "b776154adeb2c02a08579c512313e421c52494726d18646c02c31712f3fa7171"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 10,
      "offset": 1,
      "length": 21,
      "code": {
        "startLine": 8,
        "length": 21,
        "offset": 56,
        "surroundingCode": "using JetBrains.Diagnostics;\nusing JetBrains.Lifetimes;\nusing JetBrains.Util;\n\n#if !NET35"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "b7928903d025d5914eb771e6485567b58a6877e36bad93c184ead914fa72a710"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/TypesRegistrar.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 25,
      "code": {
        "startLine": 1,
        "length": 25,
        "offset": 14,
        "surroundingCode": "using System;\nusing System.Diagnostics;\nusing JetBrains.Util;\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "b82ede2eedb8af5a48d72bcfe42382d732768e56d744461ea6c360fe8baf169c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdTask.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 24,
      "code": {
        "startLine": 4,
        "length": 24,
        "offset": 67,
        "surroundingCode": "using JetBrains.Annotations;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Rd.Util;\n\n#if !NET35"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "bb57b2c091cc8f31a37f6e6088e3c9d8f5525e3e5dceeb886213e23fae291f25"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Actor.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 21,
      "code": {
        "startLine": 5,
        "length": 21,
        "offset": 67,
        "surroundingCode": "using JetBrains.Annotations;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Core;\nusing JetBrains.Diagnostics;\nusing JetBrains.Lifetimes;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "bb8e14123f645d14b7b872548cc5b28bc651eb49f2d541441aafd9ffe08aa53c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IRdReactive.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 30,
      "code": {
        "startLine": 1,
        "length": 30,
        "offset": 67,
        "surroundingCode": "using JetBrains.Collections.Viewable;\nusing JetBrains.Diagnostics;\nusing JetBrains.Serialization;\n\nnamespace JetBrains.Rd.Base"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "bcc4fefcc8176cd1a2a03b51c21323ca4bbc41db87585f407b93da28f3179115"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ChannelTest.cs",
      "language": "C#",
      "line": 1,
      "offset": 1,
      "length": 13,
      "code": {
        "startLine": 1,
        "length": 13,
        "offset": 0,
        "surroundingCode": "using System;\nusing System.Threading.Tasks;\nusing JetBrains.Lifetimes;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "c10851e7b42d9c7c0fb0e3691c08889faa0bca165498a33143d704016db63163"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 29,
      "code": {
        "startLine": 2,
        "length": 29,
        "offset": 53,
        "surroundingCode": "using System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing JetBrains.Core;\nusing JetBrains.Diagnostics;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "c36e57a0c960fd38fbf4d32080851fda2061844d4e8753c90442ca37aa64726b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/SequentialLifetimes.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 2,
        "length": 28,
        "offset": 25,
        "surroundingCode": "using System.Threading;\n\nusing JetBrains.Annotations;\nusing JetBrains.Diagnostics;\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "c50a3c0e72b4ba4504b001c7635642e3058fc2ed5995011f92aec8266defa2a6"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Actor.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 6,
        "length": 28,
        "offset": 60,
        "surroundingCode": "using JetBrains.Collections.Viewable;\nusing JetBrains.Core;\nusing JetBrains.Diagnostics;\nusing JetBrains.Lifetimes;\nusing JetBrains.Util;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "c647db9b9be68a1972d4bad53f4ef60433e1106619e6484e10fd1b210baea29a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorAsyncCallsTest.cs",
      "language": "C#",
      "line": 10,
      "offset": 1,
      "length": 26,
      "code": {
        "startLine": 8,
        "length": 26,
        "offset": 62,
        "surroundingCode": "using JetBrains.Rd.Reflection;\nusing JetBrains.Serialization;\nusing JetBrains.Threading;\nusing NUnit.Framework;\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "c7caf734376f0f1beb4658c400d230cec2bb73ba75e6e1ec9ca4449783a98d43"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 25,
      "code": {
        "startLine": 1,
        "length": 25,
        "offset": 48,
        "surroundingCode": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Threading.Tasks;\nusing JetBrains.Annotations;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "cbad42bcf113c4ff6172357a218dbd581a026c198585fa2ba71aced815b7c92a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdReactiveBase.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 26,
      "code": {
        "startLine": 6,
        "length": 26,
        "offset": 56,
        "surroundingCode": "using JetBrains.Rd.Util;\nusing JetBrains.Serialization;\nusing JetBrains.Util.Util;\n\nnamespace JetBrains.Rd.Base"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "cc6d6dadcb55dc7d57ccd8463a9a94a704373ba83dee6abeef2f6d0020545cf8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Types.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 24,
      "code": {
        "startLine": 3,
        "length": 24,
        "offset": 58,
        "surroundingCode": "using System.Diagnostics.CodeAnalysis;\nusing System.Linq;\nusing System.Reflection;\nusing JetBrains.Annotations;\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "cc819e04aec2b17803adf363134268072bf9899522663ce96ddb9abf7e133be0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 3,
        "length": 28,
        "offset": 67,
        "surroundingCode": "using JetBrains.Annotations;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Diagnostics;\nusing JetBrains.Rd;\nusing JetBrains.Rd.Base;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "cdbe15905d6d7ada3bfcbf5f6648d460699aaf9961f56d169765d4ae733e4209"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Statics.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 23,
      "code": {
        "startLine": 1,
        "length": 23,
        "offset": 48,
        "surroundingCode": "using System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing JetBrains.Annotations;\nusing JetBrains.Diagnostics;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "ce330b6fb88779d89e497a3b8633df3d9ce6ac632e8695e47cc19542ac5a9d43"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSecureString.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 1,
        "length": 28,
        "offset": 14,
        "surroundingCode": "using System;\nusing JetBrains.Annotations;\n\nnamespace JetBrains.Rd.Impl"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "d0378c1a10c9a0d596e59ebdc64ee023f43510d69c73ca21bb23595f78b21994"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/CustomGenericPrimitiveTest.cs",
      "language": "C#",
      "line": 1,
      "offset": 1,
      "length": 13,
      "code": {
        "startLine": 1,
        "length": 13,
        "offset": 0,
        "surroundingCode": "using System;\nusing System.Linq;\nusing JetBrains.Collections.Viewable;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "d0d01180a0c102906fb17f8fca65ebf7b36a9d197c2e66f4a06d79d9130939b6"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ActorTest.cs",
      "language": "C#",
      "line": 1,
      "offset": 1,
      "length": 13,
      "code": {
        "startLine": 1,
        "length": 13,
        "offset": 0,
        "surroundingCode": "using System;\nusing System.Collections.Generic;\nusing System.Linq;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "d11d54e9acd96acdd448d5a91760080c8f6db0f631f5088e339704e42ce048b9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ThreadEx.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 1,
        "length": 28,
        "offset": 24,
        "surroundingCode": "using System.Threading;\nusing JetBrains.Annotations;\n\nnamespace JetBrains.Threading"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "d22289010ccd6f3686fb89f3e3238bfdd23621254e59f82e0b91ad343a64bfb0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 37,
      "code": {
        "startLine": 4,
        "length": 37,
        "offset": 59,
        "surroundingCode": "using System.Threading.Tasks;\nusing JetBrains.Annotations;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Core;\nusing JetBrains.Diagnostics;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "d376dff9a2e5aaa95de35242754cb27fe51e560a684895894aa70bea850659c4"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 6,
        "length": 28,
        "offset": 51,
        "surroundingCode": "using JetBrains.Collections;\nusing JetBrains.Core;\nusing JetBrains.Diagnostics;\nusing JetBrains.Lifetimes;\nusing JetBrains.Util;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "d55dfcaf95a734a9c5072727c031b2f4eda620a4d9c53772dde115e411d4b691"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SocketProxyTest.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 24,
      "code": {
        "startLine": 4,
        "length": 24,
        "offset": 52,
        "surroundingCode": "using JetBrains.Lifetimes;\nusing JetBrains.Rd.Base;\nusing JetBrains.Rd.Impl;\nusing JetBrains.Threading;\nusing NUnit.Framework;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "d75af798f8966a8496856cdbb1f2b11889fb94edde3994cc0187f99d1bdb2fc8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 3,
        "length": 28,
        "offset": 44,
        "surroundingCode": "using System.Linq;\nusing System.Reflection;\nusing JetBrains.Annotations;\nusing JetBrains.Diagnostics;\nusing JetBrains.Lifetimes;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "d7e8555a17841afbb98434ab285863a71199fa9051cb37fc0c9bffcdf56023d9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/ReactiveExTest.cs",
      "language": "C#",
      "line": 1,
      "offset": 1,
      "length": 29,
      "code": {
        "startLine": 1,
        "length": 29,
        "offset": 0,
        "surroundingCode": "using System.Threading.Tasks;\nusing JetBrains.Collections.Viewable;\nusing NUnit.Framework;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "d83cbf0911381f4b40ce81b1153cb9049ead4db846fcbb8f6c1a89a2aeac49d5"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ActorTest.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 37,
      "code": {
        "startLine": 4,
        "length": 37,
        "offset": 54,
        "surroundingCode": "using System.Threading;\nusing System.Threading.Tasks;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Core;\nusing JetBrains.Lifetimes;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "d8579a61f60c6aa495660f1e565af63d7e101ccbb9d227e96bed105a51fdabbf"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/SingleThreadSchedulerTest.cs",
      "language": "C#",
      "line": 1,
      "offset": 1,
      "length": 13,
      "code": {
        "startLine": 1,
        "length": 13,
        "offset": 0,
        "surroundingCode": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "da42e5999ac38043c6077791695b4f86dafc08500a3bf38bd7901e512f012c7c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/CustomGenericPrimitiveTest.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 18,
      "code": {
        "startLine": 1,
        "length": 18,
        "offset": 14,
        "surroundingCode": "using System;\nusing System.Linq;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Rd.Reflection;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "dc0612284ae195707040213a0e8efdb59fcb0dcc3fd4240dd6ef138c7729761c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/SchedulerWrapperTest.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 29,
      "code": {
        "startLine": 1,
        "length": 29,
        "offset": 38,
        "surroundingCode": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Lifetimes;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "dd2905594d7ea7e622b3627a1f9b196e0564651d9ab7c280b67b258a70495f85"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ChannelTest.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 29,
      "code": {
        "startLine": 1,
        "length": 29,
        "offset": 14,
        "surroundingCode": "using System;\nusing System.Threading.Tasks;\nusing JetBrains.Lifetimes;\nusing JetBrains.Threading;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "e130e2817604542d1eac20b06728cca51196987604f588e66884d27d4b7921b1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 8,
      "offset": 1,
      "length": 37,
      "code": {
        "startLine": 6,
        "length": 37,
        "offset": 44,
        "surroundingCode": "using System.Linq;\nusing System.Reflection;\nusing System.Runtime.InteropServices;\nusing System.Text;\nusing System.Text.RegularExpressions;"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "e18703f3c3369d76384b466a15bf3e1e92cca3bfcca556bb9115263dc865f3c2"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ChannelTest.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 26,
      "code": {
        "startLine": 2,
        "length": 26,
        "offset": 57,
        "surroundingCode": "using System.Threading.Tasks;\nusing JetBrains.Lifetimes;\nusing JetBrains.Threading;\nusing NUnit.Framework;\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "e49f1d45eab46ec62e261172311949fecb73078dc41825377297740e691fc092"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 24,
      "code": {
        "startLine": 3,
        "length": 24,
        "offset": 50,
        "surroundingCode": "using System.Linq;\nusing System.Linq.Expressions;\nusing System.Reflection;\nusing System.Runtime.Serialization;\nusing JetBrains.Diagnostics;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "e4dd8d7df27e074c297751dd9acf2339c36d92909ae37e6cc3a6196f33158355"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 38,
      "code": {
        "startLine": 1,
        "length": 38,
        "offset": 14,
        "surroundingCode": "using System;\nusing System.Runtime.CompilerServices;\nusing System.Threading;\nusing System.Threading.Tasks;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "e5ed711f79325e1d8fc295f5d972810f433b2f881ffed6b4cd2cef80c077e24e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/SchedulerWrapperTest.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 26,
      "code": {
        "startLine": 3,
        "length": 26,
        "offset": 68,
        "surroundingCode": "using System.Threading.Tasks;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Lifetimes;\nusing NUnit.Framework;\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "e860645720f6ed5946c761bf4c4f4ffea3f68cd9b000a2e8a8a5c701efb84a46"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/RdReflectionTestBase.cs",
      "language": "C#",
      "line": 10,
      "offset": 1,
      "length": 21,
      "code": {
        "startLine": 8,
        "length": 21,
        "offset": 49,
        "surroundingCode": "using JetBrains.Rd.Tasks;\nusing NUnit.Framework;\nusing Test.Lifetimes;\n\nnamespace Test.RdFramework.Reflection"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "e97492b0d53325e94d5eb1859092cc10a49cb7332b7ebfc72145aa7b72947565"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/BlockingPriorityQueueTest.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 23,
      "code": {
        "startLine": 1,
        "length": 23,
        "offset": 33,
        "surroundingCode": "using System;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing JetBrains.Collections;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "ef3c1467c47dfdf4cc83f74220ce3131039a66a09d782477888eb3eb7c5f18bd"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/BlockingPriorityQueueTest.cs",
      "language": "C#",
      "line": 7,
      "offset": 1,
      "length": 26,
      "code": {
        "startLine": 5,
        "length": 26,
        "offset": 67,
        "surroundingCode": "using JetBrains.Collections;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Threading;\nusing NUnit.Framework;\nusing Lifetime = JetBrains.Lifetimes.Lifetime;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "ef4efe7e5823f798f84d0dd2b9346425a70b86fe7f34eb7f73f16d82132872f1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 33,
      "code": {
        "startLine": 1,
        "length": 33,
        "offset": 14,
        "surroundingCode": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Threading.Tasks;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "eff80d91e87a3d5d234cecd5ae69459a81ddd386cdcb50886a43490f5d885079"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/TestReflectionSerialization.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 18,
      "code": {
        "startLine": 1,
        "length": 18,
        "offset": 34,
        "surroundingCode": "using System.Collections.Generic;\nusing System.Linq;\nusing JetBrains.Collections.Viewable;\nusing JetBrains.Diagnostics;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "f288541e93879b90622fca673ab42041e9134a95d76561fa04629a4be6c901df"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdReactiveBase.cs",
      "language": "C#",
      "line": 6,
      "offset": 1,
      "length": 24,
      "code": {
        "startLine": 4,
        "length": 24,
        "offset": 54,
        "surroundingCode": "using JetBrains.Diagnostics;\nusing JetBrains.Rd.Impl;\nusing JetBrains.Rd.Util;\nusing JetBrains.Serialization;\nusing JetBrains.Util.Util;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "f3b67466bb1c9224a1abfc6c714922cc1d35f93e8d4458ca46effa0d56e3222d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/LifetimesTestBase.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 16,
      "code": {
        "startLine": 1,
        "length": 16,
        "offset": 14,
        "surroundingCode": "using System;\nusing System.IO;\nusing JetBrains.Diagnostics;\nusing JetBrains.Lifetimes;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "f41465e2a1fae6ac50e250d3a0d3bffee14cf09108c10ec03f200aca097d88e6"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdAssertion.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 1,
        "length": 28,
        "offset": 14,
        "surroundingCode": "using System;\nusing JetBrains.Annotations;\nusing JetBrains.Diagnostics;\nusing JetBrains.Rd.Base;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "f418d54fcf6304aee271988cc42dd3e68fdce5df83af22682c0e09541f8c3e72"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdSetTest.cs",
      "language": "C#",
      "line": 5,
      "offset": 1,
      "length": 24,
      "code": {
        "startLine": 3,
        "length": 24,
        "offset": 67,
        "surroundingCode": "using JetBrains.Collections.Viewable;\nusing JetBrains.Diagnostics;\nusing JetBrains.Rd.Impl;\nusing NUnit.Framework;\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "f568c193270bb1e6881997fc66d16ab3e279fef0bc23ad8a38ad6ea5a5854e04"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ActorTest.cs",
      "language": "C#",
      "line": 4,
      "offset": 1,
      "length": 23,
      "code": {
        "startLine": 2,
        "length": 23,
        "offset": 53,
        "surroundingCode": "using System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing JetBrains.Collections.Viewable;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "f7062928a084c87c467734dc7f3169bdc60fefc52369d1051b4a5e8fb73dc3e2"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Result.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 18,
      "code": {
        "startLine": 1,
        "length": 18,
        "offset": 48,
        "surroundingCode": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing JetBrains.Annotations;\nusing JetBrains.Lifetimes;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "f7cabd560b329904d080fb6c30574c06eb304bde649739c256e32d7f8de80aa8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/IViewableMap.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 38,
      "code": {
        "startLine": 1,
        "length": 38,
        "offset": 34,
        "surroundingCode": "using System.Collections.Generic;\nusing System.Diagnostics.CodeAnalysis;\n\nnamespace JetBrains.Collections.Viewable"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "f9bd6e9a4c96dc217f0173a91359a54cce2efbcf11882d62df9726e438eaae3f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/BitSlice.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 25,
      "code": {
        "startLine": 1,
        "length": 25,
        "offset": 14,
        "surroundingCode": "using System;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Runtime.CompilerServices;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "fbaf8cc1cab2d0e45f48bbf45fca69733d10035622c16effd36e90ee3bed636d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 9,
      "offset": 1,
      "length": 26,
      "code": {
        "startLine": 7,
        "length": 26,
        "offset": 51,
        "surroundingCode": "using JetBrains.Core;\nusing JetBrains.Diagnostics;\nusing JetBrains.Lifetimes;\nusing JetBrains.Util;\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "fca901b513e16670c8550fad74e410493029c7ae834b313308b944403fafe57c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/TaskHack.cs",
      "language": "C#",
      "line": 3,
      "offset": 1,
      "length": 29,
      "code": {
        "startLine": 1,
        "length": 29,
        "offset": 38,
        "surroundingCode": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing JetBrains.Lifetimes;\nusing JetBrains.Threading;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "fd200f987ba7f7db1be28358c346f8bedfdabdfab225bd4cd90dca7a6ef905a7"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/BlockingPriorityQueueTest.cs",
      "language": "C#",
      "line": 1,
      "offset": 1,
      "length": 13,
      "code": {
        "startLine": 1,
        "length": 13,
        "offset": 0,
        "surroundingCode": "using System;\nusing System.Linq;\nusing System.Threading;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "fe79e503e90230ccd22de86a037485b4980ee29871e4065d460312e303471551"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant using directive",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Using directive is not required by the code and can be safely removed",
  "detailsInfo": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ScopedAsyncLocal.cs",
      "language": "C#",
      "line": 2,
      "offset": 1,
      "length": 23,
      "code": {
        "startLine": 1,
        "length": 23,
        "offset": 14,
        "surroundingCode": "using System;\nusing System.Threading;\n\nnamespace JetBrains.Threading"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "RedundantUsingDirective"
  },
  "hash": "ffa9fae8259b7c3ec7ce969147200f05e10dc11a664f57ba01894758e661a70a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Code",
  "type": "Redundant verbatim prefix",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Redundant verbatim prefix",
  "detailsInfo": "'@' prefix can be safely removed from identifier",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/CastToTest.cs",
      "language": "C#",
      "line": 44,
      "offset": 92,
      "length": 1,
      "code": {
        "startLine": 42,
        "length": 1,
        "offset": 158,
        "surroundingCode": "            var to = new Tuple<uint,uint>(0x89abcdef,0x01234567);\n\n            Assert.Throws<TypeInitializationException>(() => CastTo<Tuple<uint,uint>>.From(@from));\n        }\n        "
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "RedundantVerbatimPrefix"
  },
  "hash": "7c0150c9a1393674825d6c46d75e675d37b112eb35423b6333d4299d75ecaf69"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Conditional expression can be rewritten as null-coalescing",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Conditional expression can be rewritten as null-coalescing",
  "detailsInfo": "Conditonal expression with a null check ('expr is {} x') or a type pattern ('expr is T x') can be rewritten as a null-coalescing ('??') expression",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdExtBase.cs",
      "language": "C#",
      "line": 61,
      "offset": 53,
      "length": 8,
      "code": {
        "startLine": 59,
        "length": 8,
        "offset": 64,
        "surroundingCode": "        );\n\n      var bindableParent = Parent is RdBindableBase bindable ? bindable : null;\n      var info = new ExtCreationInfo(Location, bindableParent?.ContainingExt?.RdId, SerializationHash, this);\n      ((Protocol) parentProtocol).SubmitExtCreated(info);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ReplaceConditionalExpressionWithNullCoalescing"
  },
  "hash": "09cb53d037a37c5cd51b11ec05497fb329c3a3a4802cc213b76b68cdfbe31cbc"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Conditional expression can be rewritten as null-coalescing",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Conditional expression can be rewritten as null-coalescing",
  "detailsInfo": "Conditonal expression with a null check ('expr is {} x') or a type pattern ('expr is T x') can be rewritten as a null-coalescing ('??') expression",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Result.cs",
      "language": "C#",
      "line": 326,
      "offset": 81,
      "length": 2,
      "code": {
        "startLine": 324,
        "length": 2,
        "offset": 169,
        "surroundingCode": "    /// Exception in case of (!<see cref=\"Succeed\"/>), null otherwise\n    /// </summary>\n    public Exception Exception => ExceptionOrExceptionDispatchInfo is Exception ex\n      ? ex\n      : (ExceptionOrExceptionDispatchInfo as ExceptionDispatchInfo)?.SourceException; "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ReplaceConditionalExpressionWithNullCoalescing"
  },
  "hash": "12a6f56f1c712e45594c11b0f18d80f6fd1f1a430ccb5cfac36d6ac030919a27"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Conditional expression can be rewritten as null-coalescing",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Conditional expression can be rewritten as null-coalescing",
  "detailsInfo": "Conditonal expression with a null check ('expr is {} x') or a type pattern ('expr is T x') can be rewritten as a null-coalescing ('??') expression",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Result.cs",
      "language": "C#",
      "line": 495,
      "offset": 81,
      "length": 2,
      "code": {
        "startLine": 493,
        "length": 2,
        "offset": 169,
        "surroundingCode": "    /// Exception in case of (!<see cref=\"Succeed\"/>), null otherwise\n    /// </summary>\n    public Exception Exception => ExceptionOrExceptionDispatchInfo is Exception ex\n      ? ex\n      : (ExceptionOrExceptionDispatchInfo as ExceptionDispatchInfo)?.SourceException;  "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ReplaceConditionalExpressionWithNullCoalescing"
  },
  "hash": "5a24bca76fd982584e9795385a45a5b3ba53ba092fab60e8fb6ee566196ef30c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Return type can be IEnumerable<T> (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Type can be 'IEnumerable'",
  "detailsInfo": "All usages of a method (or read-only property/indexer) use returned value as IEnumerable, but it is declared with more specific type (e.g. List) [Learn more...](https://www.jetbrains.com/help/rider/ReturnTypeCanBeEnumerable.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/ProtocolContexts.cs",
      "language": "C#",
      "line": 57,
      "offset": 12,
      "length": 26,
      "code": {
        "startLine": 55,
        "length": 26,
        "offset": 22,
        "surroundingCode": "    }\n    \n    public ICollection<RdContextBase> RegisteredContexts => myHandlersMap.Keys;\n\n    internal ISingleContextHandler<T> GetHandlerForContext<T>(RdContext<T> context)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "ReturnTypeCanBeEnumerable.Global"
  },
  "hash": "1fac35ec6295a61113370154d48876db9955525db2fb78efabc33e092ef40aad"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Add explicit 'return' or 'continue' before local functions",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Separate local functions with explicit 'return' statement",
  "detailsInfo": "Separate local functions at the end of a block with explicit 'return' or 'continue'. This will help readers understand where a method or a loop really ends without checking whether there is any executable code left after or between local functions.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/BitSliceTest.cs",
      "language": "C#",
      "line": 118,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 116,
        "length": 4,
        "offset": 15,
        "surroundingCode": "      }\n\n      void Enter(BoolBitSlice slice)\n      {\n        Assert.IsFalse(slice[state]);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SeparateLocalFunctionsWithJumpStatement"
  },
  "hash": "0713524ddbbfe999cc98fc025b173fecd60a4e5db23f39e16a450021aefa4500"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Add explicit 'return' or 'continue' before local functions",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Separate local functions with explicit 'return' statement",
  "detailsInfo": "Separate local functions at the end of a block with explicit 'return' or 'continue'. This will help readers understand where a method or a loop really ends without checking whether there is any executable code left after or between local functions.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1391,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 1389,
        "length": 4,
        "offset": 60,
        "surroundingCode": "      DoTest2(LifetimeTerminationTimeoutKind.Short);\n\n      void DoTest1(LifetimeTerminationTimeoutKind expected)\n      {\n        var definedLifetime = Lifetime.DefineIntersection(lf1.Lifetime, lf2.Lifetime);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SeparateLocalFunctionsWithJumpStatement"
  },
  "hash": "426d4a25983ce60a2b80fa0ab4928ffbc21882022f3ec47e27fe86e3599483f4"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Add explicit 'return' or 'continue' before local functions",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Separate local function with explicit 'return' statement",
  "detailsInfo": "Separate local functions at the end of a block with explicit 'return' or 'continue'. This will help readers understand where a method or a loop really ends without checking whether there is any executable code left after or between local functions.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/SchedulerWrapperTest.cs",
      "language": "C#",
      "line": 23,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 21,
        "length": 6,
        "offset": 53,
        "surroundingCode": "      DoTest(TestLifetime, schedulerWrapper);\n\n      static void DoTest(Lifetime lifetime, IScheduler scheduler)\n      {\n        var taskScheduler = scheduler.AsTaskScheduler();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SeparateLocalFunctionsWithJumpStatement"
  },
  "hash": "701dcb08807ca9ac617aba292ad6c12eac15d128d18ee603fa7f350b975e3e4f"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Add explicit 'return' or 'continue' before local functions",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Separate local functions with explicit 'continue' statement",
  "detailsInfo": "Separate local functions at the end of a block with explicit 'return' or 'continue'. This will help readers understand where a method or a loop really ends without checking whether there is any executable code left after or between local functions.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1317,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 1315,
        "length": 4,
        "offset": 42,
        "surroundingCode": "        Assert.AreEqual(0, sum);\n\n        void Creator()\n        {\n          while (Volatile.Read(ref count) <= magicNumber)"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SeparateLocalFunctionsWithJumpStatement"
  },
  "hash": "7c1f1bfee48ebd367d210eef13f592ebfbb113e7c65234be7f4a62d9a1887b75"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Struct can be made readonly",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Struct can be made readonly",
  "detailsInfo": "Struct has no mutable members and can be made readonly",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Util/PrettyPrinter.cs",
      "language": "C#",
      "line": 10,
      "offset": 19,
      "length": 25,
      "code": {
        "startLine": 8,
        "length": 25,
        "offset": 51,
        "surroundingCode": "  public class PrettyPrinter\n  {\n    public struct PrettyPrinterIndentCookie : IDisposable\n    {\n      private readonly PrettyPrinter myPrinter;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "StructCanBeMadeReadOnly"
  },
  "hash": "17bdf6755016e44996bb5af7d45fa1702eb6ef855550216d35ccebca354d2006"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Struct can be made readonly",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Struct can be made readonly",
  "detailsInfo": "Struct has no mutable members and can be made readonly",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogWithLevel.cs",
      "language": "C#",
      "line": 20,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 18,
        "length": 12,
        "offset": 160,
        "surroundingCode": "  /// <seealso cref=\"LogEx.Trace(JetBrains.Diagnostics.ILog,string)\"/>\n  /// <seealso cref=\"LogEx.Verbose(JetBrains.Diagnostics.ILog,string)\"/>\n  public struct LogWithLevel\n  {\n    [PublicAPI] public ILog Logger { get; }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "StructCanBeMadeReadOnly"
  },
  "hash": "208a49b2848e7bd5263be46549407939aca3a970d1794f32f51a80ebe9739832"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Struct can be made readonly",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Struct can be made readonly",
  "detailsInfo": "Struct has no mutable members and can be made readonly",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SendContext.cs",
      "language": "C#",
      "line": 13,
      "offset": 19,
      "length": 11,
      "code": {
        "startLine": 11,
        "length": 11,
        "offset": 23,
        "surroundingCode": "  }\n\n  internal struct SendContext<TEvt, TReactive> where TReactive : IRdReactive\n  {\n    public void Deconstruct(out SerializationCtx serializationContext, out TEvt @event, out TReactive map)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "StructCanBeMadeReadOnly"
  },
  "hash": "6075c756e44a3235705ddb1c4ebef57efadeaa60c112b82fd063915b78aaeca7"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Struct can be made readonly",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Struct can be made readonly",
  "detailsInfo": "Struct has no mutable members and can be made readonly",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/OuterLifetime.cs",
      "language": "C#",
      "line": 14,
      "offset": 17,
      "length": 13,
      "code": {
        "startLine": 12,
        "length": 13,
        "offset": 280,
        "surroundingCode": "  ///   <para>Another option is to define a nested lifetime, in which case you MUST ensure it's terminated explicitly, without relying on the outer lifetime. The outer lifetime is only a safety catch to make sure it does not live too long.</para>\n  /// </summary>\n  public struct OuterLifetime\n  {\n    #region Data"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "StructCanBeMadeReadOnly"
  },
  "hash": "74e7d5eb2d808d35cbcb2804cb086f47c586f746662d907aa8b08a5500812fe7"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Struct can be made readonly",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Struct can be made readonly",
  "detailsInfo": "Struct has no mutable members and can be made readonly",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSecureString.cs",
      "language": "C#",
      "line": 10,
      "offset": 17,
      "length": 14,
      "code": {
        "startLine": 8,
        "length": 14,
        "offset": 153,
        "surroundingCode": "  /// Unlike a normal string, this one won't be stored in logs or any other string representations of protocol entities\n  /// </summary>\n  public struct RdSecureString : IEquatable<RdSecureString>\n  {\n    public readonly string Contents;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "StructCanBeMadeReadOnly"
  },
  "hash": "856df001ec463e565c12d8a70c123ef05adff1e7707c582642de4d661a424581"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Struct can be made readonly",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Struct can be made readonly",
  "detailsInfo": "Struct has no mutable members and can be made readonly",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/RdId.cs",
      "language": "C#",
      "line": 7,
      "offset": 17,
      "length": 4,
      "code": {
        "startLine": 5,
        "length": 4,
        "offset": 41,
        "surroundingCode": "namespace JetBrains.Rd\n{\n  public struct RdId : IEquatable<RdId>\n  {\n    public static readonly RdId Nil = new RdId(0);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "StructCanBeMadeReadOnly"
  },
  "hash": "94ff4d9cfcd8bdb8ae077b31da817e55aafb6f644c1c8d6ce9e962cebedd2e27"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Struct can be made readonly",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Struct can be made readonly",
  "detailsInfo": "Struct has no mutable members and can be made readonly",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 721,
      "offset": 19,
      "length": 14,
      "code": {
        "startLine": 719,
        "length": 14,
        "offset": 20,
        "surroundingCode": "\n\n    public struct WireParameters\n    {\n      public readonly IScheduler Scheduler;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "StructCanBeMadeReadOnly"
  },
  "hash": "98e661f3921dcdc5425678a1d29124a0e257780030726c72267d9ff39980332a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Struct can be made readonly",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Struct can be made readonly",
  "detailsInfo": "Struct has no mutable members and can be made readonly",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/ProtocolContexts.cs",
      "language": "C#",
      "line": 28,
      "offset": 21,
      "length": 25,
      "code": {
        "startLine": 26,
        "length": 25,
        "offset": 30,
        "surroundingCode": "    \n    \n    internal struct SendWithoutContextsCookie : IDisposable\n    {\n      private readonly ProtocolContexts myContexts;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "StructCanBeMadeReadOnly"
  },
  "hash": "a88b60e268021959d98e0b9d2d17468bb305a5a5c87a3b3a97cac399827f5304"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Struct can be made readonly",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Struct can be made readonly",
  "detailsInfo": "Struct has no mutable members and can be made readonly",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/TextBufferVersion.cs",
      "language": "C#",
      "line": 5,
      "offset": 17,
      "length": 17,
      "code": {
        "startLine": 3,
        "length": 17,
        "offset": 57,
        "surroundingCode": "namespace JetBrains.Rd.Text.Intrinsics\n{\n  public struct TextBufferVersion\n  {\n    public static TextBufferVersion InitVersion = new TextBufferVersion(-1, -1);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "StructCanBeMadeReadOnly"
  },
  "hash": "b9a1643195009e9f197aaa3fa0316982cdab7bb42b31b76980238894eb50b331"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Struct can be made readonly",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Struct can be made readonly",
  "detailsInfo": "Struct has no mutable members and can be made readonly",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Maybe.cs",
      "language": "C#",
      "line": 13,
      "offset": 17,
      "length": 5,
      "code": {
        "startLine": 11,
        "length": 5,
        "offset": 72,
        "surroundingCode": "  /// </summary>\n  /// <typeparam name=\"T\"></typeparam>\n  public struct Maybe<T> : IEquatable<Maybe<T>>\n  {\n    [PublicAPI] public static readonly Maybe<T> None;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "StructCanBeMadeReadOnly"
  },
  "hash": "c777843e093fd52d4b294434eab4db9cb88145318b569fdd6db7d999b4b9de60"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Struct can be made readonly",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Struct can be made readonly",
  "detailsInfo": "Struct has no mutable members and can be made readonly",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 740,
      "offset": 19,
      "length": 20,
      "code": {
        "startLine": 738,
        "length": 20,
        "offset": 109,
        "surroundingCode": "    /// Must be used only by <see cref=\"Lifetime.UsingExecuteIfAlive\"/>\n    /// </summary>\n    public struct ExecuteIfAliveCookie : IDisposable\n    {\n      private readonly LifetimeDefinition myDef;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "StructCanBeMadeReadOnly"
  },
  "hash": "c7b551675a67dea2c83a8d730070f448947353c241b6becfbdcff89db13d135b"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Struct can be made readonly",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Struct can be made readonly",
  "detailsInfo": "Struct has no mutable members and can be made readonly",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ScopedAsyncLocal.cs",
      "language": "C#",
      "line": 7,
      "offset": 17,
      "length": 16,
      "code": {
        "startLine": 5,
        "length": 16,
        "offset": 31,
        "surroundingCode": "{\n  #if !NET35\n  public struct ScopedAsyncLocal<T> : IDisposable \n  {\n    private readonly AsyncLocal<T> myAsyncLocal;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "StructCanBeMadeReadOnly"
  },
  "hash": "d0c42c352d6b39c4ea7cc3aae8aed06ad5652e903336be5a037f261466a854a8"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Parameter can be declared with the base type",
  "tags": [
    "C#",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Parameter can be of type 'System.Reflection.MethodBase'",
  "detailsInfo": "Parameter can be declared with the base type. Note that when the base type is IEnumerable, another inspection 'Parameter type can be IEnumerable' will be applied.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 480,
      "offset": 84,
      "length": 10,
      "code": {
        "startLine": 478,
        "length": 10,
        "offset": 90,
        "surroundingCode": "    }\n\n    private static SerializerPair CreateFromMethodsImpl0<T>(MethodInfo readMethod, MethodInfo writeMethod)\n    {\n      void WriterDelegate(SerializationCtx ctx, UnsafeWriter writer, T value) =>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestBaseTypeForParameter"
  },
  "hash": "2a9e73de2fe11dd2a1867489d1d0ccdecd2df0b4161ff773d32c6eef98726091"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Parameter can be declared with the base type",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Parameter can be of type 'JetBrains.Collections.Viewable.IReadonlyProperty'",
  "detailsInfo": "Parameter can be declared with the base type. Note that when the base type is IEnumerable, another inspection 'Parameter type can be IEnumerable' will be applied.",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SocketWireTest.cs",
      "language": "C#",
      "line": 33,
      "offset": 35,
      "length": 13,
      "code": {
        "startLine": 31,
        "length": 13,
        "offset": 36,
        "surroundingCode": "\n\n    private void WaitAndAssert<T>(RdProperty<T> property, T expected, Maybe<T> prev = default(Maybe<T>))\n    {\n      var start = Environment.TickCount;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "SuggestBaseTypeForParameter"
  },
  "hash": "38083c6e315b7cb16765909c6d32beda61e86c59e3219484af3f09a99633927c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Parameter can be declared with the base type",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Parameter can be of type 'JetBrains.Rd.RdContextBase'",
  "detailsInfo": "Parameter can be declared with the base type. Note that when the base type is IEnumerable, another inspection 'Parameter type can be IEnumerable' will be applied.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/ProtocolContexts.cs",
      "language": "C#",
      "line": 73,
      "offset": 34,
      "length": 12,
      "code": {
        "startLine": 71,
        "length": 12,
        "offset": 40,
        "surroundingCode": "    }\n\n    private void DoAddHandler<T>(RdContext<T> context, ISingleContextHandler<T> handler)\n    {\n      if (myHandlersMap.TryAdd(context, handler))"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "SuggestBaseTypeForParameter"
  },
  "hash": "4bae8a61006e3ef600274d92acfb254b337059b9a89ec5f3f3e2b1814aebd030"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Parameter can be declared with the base type",
  "tags": [
    "C#",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Parameter can be of type 'System.Reflection.MethodBase'",
  "detailsInfo": "Parameter can be declared with the base type. Note that when the base type is IEnumerable, another inspection 'Parameter type can be IEnumerable' will be applied.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 480,
      "offset": 61,
      "length": 10,
      "code": {
        "startLine": 478,
        "length": 10,
        "offset": 67,
        "surroundingCode": "    }\n\n    private static SerializerPair CreateFromMethodsImpl0<T>(MethodInfo readMethod, MethodInfo writeMethod)\n    {\n      void WriterDelegate(SerializationCtx ctx, UnsafeWriter writer, T value) =>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestBaseTypeForParameter"
  },
  "hash": "5308571e79b96a1dae09eeaaa2e3578262c8a3797917ab811bc4398d9610ac99"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Parameter can be declared with the base type",
  "tags": [
    "C#",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Parameter can be of type 'System.Reflection.MethodBase'",
  "detailsInfo": "Parameter can be declared with the base type. Note that when the base type is IEnumerable, another inspection 'Parameter type can be IEnumerable' will be applied.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 513,
      "offset": 61,
      "length": 10,
      "code": {
        "startLine": 511,
        "length": 10,
        "offset": 62,
        "surroundingCode": "\n\n    private static SerializerPair CreateFromMethodsImpl2<T>(MethodInfo readMethod, MethodInfo writeMethod, SerializerPair keySerializer, SerializerPair valueSerializer)\n    {\n      var ctxKeyReadDelegate = keySerializer.Reader;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestBaseTypeForParameter"
  },
  "hash": "7407e023ecaead2811ab6ba4c643c3d8ae0171da42e3e954c3c286bdd8475f97"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Parameter can be declared with the base type",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Parameter can be of type 'System.Type'",
  "detailsInfo": "Parameter can be declared with the base type. Note that when the base type is IEnumerable, another inspection 'Parameter type can be IEnumerable' will be applied.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializerVerifier.cs",
      "language": "C#",
      "line": 160,
      "offset": 36,
      "length": 8,
      "code": {
        "startLine": 158,
        "length": 8,
        "offset": 42,
        "surroundingCode": "    }\n\n    private static bool IsNullable(TypeInfo typeInfo, Func<Type, bool> filter)\n    {\n      return typeInfo.IsValueType &&"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestBaseTypeForParameter"
  },
  "hash": "94d69d138f87a609daae0b080425d53c6b6e777a181db300c2352e435bd63fdc"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Parameter can be declared with the base type",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Parameter can be of type 'System.Reflection.MethodBase'",
  "detailsInfo": "Parameter can be declared with the base type. Note that when the base type is IEnumerable, another inspection 'Parameter type can be IEnumerable' will be applied.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 541,
      "offset": 91,
      "length": 10,
      "code": {
        "startLine": 539,
        "length": 10,
        "offset": 97,
        "surroundingCode": "    }\n\n    private static SerializerPair CreateFromNonProtocolMethodsT<T>(MethodInfo readMethod, MethodInfo writeMethod)\n    {\n      Assertion.Assert(readMethod.IsStatic, $\"Read method should be static ({readMethod.DeclaringType.ToString(true)})\");"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestBaseTypeForParameter"
  },
  "hash": "97fdf9902b2b7546c190b4de5bf9d3917b83dee17378e4b3368c2c0d5aea433a"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Parameter can be declared with the base type",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Parameter can be of type 'System.Collections.Generic.ISet'",
  "detailsInfo": "Parameter can be declared with the base type. Note that when the base type is IEnumerable, another inspection 'Parameter type can be IEnumerable' will be applied.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 128,
      "offset": 51,
      "length": 15,
      "code": {
        "startLine": 126,
        "length": 15,
        "offset": 120,
        "surroundingCode": "        ImplementInterface(baseInterface, memberNames, typebuilder);\n\n      void ImplementInterface(Type baseInterface, HashSet<string> hashSet, TypeBuilder typeBuilder)\n      {\n        foreach (var member in baseInterface.GetMembers(BindingFlags.Instance | BindingFlags.Public))"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestBaseTypeForParameter"
  },
  "hash": "9c2a5402c0905fa107821c330d93b3c28173543d04397ce9e740e31beb1e0b7e"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Parameter can be declared with the base type",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Parameter can be of type 'JetBrains.Rd.Base.ISingleContextHandler'",
  "detailsInfo": "Parameter can be declared with the base type. Note that when the base type is IEnumerable, another inspection 'Parameter type can be IEnumerable' will be applied.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/ProtocolContexts.cs",
      "language": "C#",
      "line": 73,
      "offset": 56,
      "length": 24,
      "code": {
        "startLine": 71,
        "length": 24,
        "offset": 62,
        "surroundingCode": "    }\n\n    private void DoAddHandler<T>(RdContext<T> context, ISingleContextHandler<T> handler)\n    {\n      if (myHandlersMap.TryAdd(context, handler))"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "SuggestBaseTypeForParameter"
  },
  "hash": "a281d1a18cf87ecb26059a26f0302b22844d7503e9eedd293b86161d7e28c28c"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Parameter can be declared with the base type",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Parameter can be of type 'System.Type'",
  "detailsInfo": "Parameter can be declared with the base type. Note that when the base type is IEnumerable, another inspection 'Parameter type can be IEnumerable' will be applied.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 356,
      "offset": 52,
      "length": 8,
      "code": {
        "startLine": 354,
        "length": 8,
        "offset": 58,
        "surroundingCode": "    }\n\n    private SerializerPair CreateGenericSerializer(TypeInfo typeInfo, TypeInfo implementingInfo)\n    {\n      var intrinsic = Intrinsic.TryGetIntrinsicSerializer(implementingInfo, t => GetOrRegisterStaticSerializerInternal(t, true));"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestBaseTypeForParameter"
  },
  "hash": "b178f82e8d86c772330acdcda3096c241eeb6ffe4e4dbf09fbfd5b62a51a4aa1"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Parameter can be declared with the base type",
  "tags": [
    "C#",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Parameter can be of type 'System.Reflection.MethodBase'",
  "detailsInfo": "Parameter can be declared with the base type. Note that when the base type is IEnumerable, another inspection 'Parameter type can be IEnumerable' will be applied.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 493,
      "offset": 84,
      "length": 10,
      "code": {
        "startLine": 491,
        "length": 10,
        "offset": 90,
        "surroundingCode": "    }\n\n    private static SerializerPair CreateFromMethodsImpl1<T>(MethodInfo readMethod, MethodInfo writeMethod, SerializerPair keySerializer)\n    {\n      var ctxKeyReadDelegate = keySerializer.Reader;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestBaseTypeForParameter"
  },
  "hash": "bc38625d8d032d663f0683970213ed106b12aed66a35163539dd5bf15fbaa451"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Parameter can be declared with the base type",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Parameter can be of type 'System.Reflection.MethodBase'",
  "detailsInfo": "Parameter can be declared with the base type. Note that when the base type is IEnumerable, another inspection 'Parameter type can be IEnumerable' will be applied.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 541,
      "offset": 68,
      "length": 10,
      "code": {
        "startLine": 539,
        "length": 10,
        "offset": 74,
        "surroundingCode": "    }\n\n    private static SerializerPair CreateFromNonProtocolMethodsT<T>(MethodInfo readMethod, MethodInfo writeMethod)\n    {\n      Assertion.Assert(readMethod.IsStatic, $\"Read method should be static ({readMethod.DeclaringType.ToString(true)})\");"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestBaseTypeForParameter"
  },
  "hash": "c34854be51f373a5a069b9aeaccc79afb78c77c110bf09024c33853d32e18a13"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Parameter can be declared with the base type",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Parameter can be of type 'JetBrains.Rd.IProtocol'",
  "detailsInfo": "Parameter can be declared with the base type. Note that when the base type is IEnumerable, another inspection 'Parameter type can be IEnumerable' will be applied.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Reflection.App/Program.cs",
      "language": "C#",
      "line": 100,
      "offset": 110,
      "length": 8,
      "code": {
        "startLine": 98,
        "length": 8,
        "offset": 116,
        "surroundingCode": "    }\n\n    private static void RunApplication(bool isServer, ReflectionSerializersFacade facade, Lifetime lifetime, Protocol protocol)\n    {\n      IRootExt root;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Reflection.App",
    "inspectionName": "SuggestBaseTypeForParameter"
  },
  "hash": "c6787c738ecde9cd3682409d68bc2b5a448e64927e6532a370a059dd5c68b86e"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Parameter can be declared with the base type",
  "tags": [
    "C#",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Parameter can be of type 'System.Reflection.MethodBase'",
  "detailsInfo": "Parameter can be declared with the base type. Note that when the base type is IEnumerable, another inspection 'Parameter type can be IEnumerable' will be applied.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 493,
      "offset": 61,
      "length": 10,
      "code": {
        "startLine": 491,
        "length": 10,
        "offset": 67,
        "surroundingCode": "    }\n\n    private static SerializerPair CreateFromMethodsImpl1<T>(MethodInfo readMethod, MethodInfo writeMethod, SerializerPair keySerializer)\n    {\n      var ctxKeyReadDelegate = keySerializer.Reader;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestBaseTypeForParameter"
  },
  "hash": "e3076a84d3937298a79a3532bcc8a7c95a0a3dd2b2790dc6eddc0d6555c68f28"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Parameter can be declared with the base type",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Parameter can be of type 'System.Reflection.IReflect'",
  "detailsInfo": "Parameter can be declared with the base type. Note that when the base type is IEnumerable, another inspection 'Parameter type can be IEnumerable' will be applied.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 128,
      "offset": 31,
      "length": 4,
      "code": {
        "startLine": 126,
        "length": 4,
        "offset": 100,
        "surroundingCode": "        ImplementInterface(baseInterface, memberNames, typebuilder);\n\n      void ImplementInterface(Type baseInterface, HashSet<string> hashSet, TypeBuilder typeBuilder)\n      {\n        foreach (var member in baseInterface.GetMembers(BindingFlags.Instance | BindingFlags.Public))"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestBaseTypeForParameter"
  },
  "hash": "f1aa4552618846cbcb0914908587489584f2e9e851816e4687186b747aebfaf9"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Parameter can be declared with the base type",
  "tags": [
    "C#",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Parameter can be of type 'System.Reflection.MethodBase'",
  "detailsInfo": "Parameter can be declared with the base type. Note that when the base type is IEnumerable, another inspection 'Parameter type can be IEnumerable' will be applied.",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 513,
      "offset": 84,
      "length": 10,
      "code": {
        "startLine": 511,
        "length": 10,
        "offset": 85,
        "surroundingCode": "\n\n    private static SerializerPair CreateFromMethodsImpl2<T>(MethodInfo readMethod, MethodInfo writeMethod, SerializerPair keySerializer, SerializerPair valueSerializer)\n    {\n      var ctxKeyReadDelegate = keySerializer.Reader;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestBaseTypeForParameter"
  },
  "hash": "f9414643f63b64a9a7d349346ba4d7e8f9fd9737c4432fa41194b19ad79ce844"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/TestStealingWorker.cs",
      "language": "C#",
      "line": 44,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 42,
        "length": 3,
        "offset": 104,
        "surroundingCode": "      var w = new StealingScheduler(new DefectiveScheduler(defectiveRuns));\n      int n = 0;\n      for (int i = 0; i < TestsCount; i++)\n        new Task(() => { Interlocked.Increment(ref n); }).Start(w);\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "0358e09508dc072810eb1723994a6d0a15514c55a576a148b39277dfddf04cf0"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ActorTest.cs",
      "language": "C#",
      "line": 82,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 80,
        "length": 3,
        "offset": 39,
        "surroundingCode": "      }, maxQueueSize: 0);\n\n      for (int i = 0; i < 10; i++)\n      {\n        actor.SendBlocking(i);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "03b9382e75c954090d7bd3469152647a9c9c6b50ce53db795070b74d8f9649f5"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 357,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 355,
        "length": 3,
        "offset": 73,
        "surroundingCode": "    public T?[]? ReadArray<T>(ReadDelegate<T?> readDelegate)\n    {\n      int len = ReadInt32();\n      if (len < 0) return null;\n      if (len == 0) return EmptyArray<T>.Instance;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "04bec93b683de6a8383c353280853e10ad3e06391871fa89870972302e347a1f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1304,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 1302,
        "length": 3,
        "offset": 64,
        "surroundingCode": "      const int magicNumber = (n + 1) * 1000;\n      \n      for (int i = 0; i < 1000; i++)\n      {\n        var count = 0;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "054d8efc53f94b0b6583c43efc3d85d1e60b4fd9340d6ab5ed1b9d2b5394be43"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ProactiveLazyTest.cs",
      "language": "C#",
      "line": 32,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 30,
        "length": 4,
        "offset": 56,
        "surroundingCode": "        {\n            var n = 100_000_000L;\n            long expected = n * (n - 1) / 2;\n\n            bool flag = false;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "05b4f73e77eed12eaeed5be3802e670922945f38fc2ba4fe8fcf57fbe25d2144"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/TestStealingWorker.cs",
      "language": "C#",
      "line": 32,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 30,
        "length": 3,
        "offset": 88,
        "surroundingCode": "      var w = new StealingScheduler(TaskScheduler.Default);\n      int n = 0;\n      for (int i = 0; i < TestsCount; i++)\n        new Task(() => { Interlocked.Increment(ref n); }).Start(w);\n      w.Join();"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "0827be1bef1ec1e8e455f9a62d28666808e1f1760e97c6d42ed0f470d8076ed0"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/JetPriorityQueue.cs",
      "language": "C#",
      "line": 164,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 162,
        "length": 3,
        "offset": 126,
        "surroundingCode": "      Assertion.Assert(idx >= 1 && idx < myStorage.Count, \"Index {0} is not in range [1, {1})\", idx, myStorage.Count);\n\n      int n = myStorage.Count;\n      int left = (idx << 1) | 0;\n      while (left < n)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "0a7e795b665c4e03ce7b1af6360bac5d488cd2524e1ecf5882fa449f9cd67431"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorSimpleTest.cs",
      "language": "C#",
      "line": 80,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 78,
        "length": 3,
        "offset": 59,
        "surroundingCode": "    {\n      var checkpoint = dotMemory.Check();\n      for (int i = 0; i < 100000; i++)\n      {\n        var serializers = new Serializers();"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "0b88d8030e861a3aebce7b5e2e19a68fbac69e15e48c72cf1984c0f231f44357"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/NativeMemoryPoolTests.cs",
      "language": "C#",
      "line": 78,
      "offset": 14,
      "length": 3,
      "code": {
        "startLine": 76,
        "length": 3,
        "offset": 35,
        "surroundingCode": "      }, x =>\n      {\n        for (int a = 0; a < 100_000_000; a++)\n        {\n          using (var y = UnsafeWriter.NewThreadLocalWriter())"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "0c32b1bd076af291a186d4173a70100a5b6050966b57bbdbf82cd32c16c03c54"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ProactiveLazyTest.cs",
      "language": "C#",
      "line": 34,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 32,
        "length": 4,
        "offset": 58,
        "surroundingCode": "            long expected = n * (n - 1) / 2;\n\n            bool flag = false;\n            var lazy = new ProactiveLazy<long>(Lifetime.Eternal, () =>\n            {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "0dbf2793f6920ecc948039df295795cdb1fb832152b7906b47a0f5e304ccde8a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SerializersEx.cs",
      "language": "C#",
      "line": 64,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 62,
        "length": 3,
        "offset": 127,
        "surroundingCode": "    public static T[]? ReadArray<T>(this UnsafeReader reader, CtxReadDelegate<T> itemReader, SerializationCtx ctx)\n    {\n      int count = reader.ReadInt32();\n      if (count < 0) return null;\n      var res = new T[count];"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "1018904ff872e39ab07a471ee79c805df8f4df1ad3a29ed5345b820a9d874033"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 212,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 210,
        "length": 4,
        "offset": 45,
        "surroundingCode": "      private bool ReadMsg()\n      {\n        long maxSeqnAtStart = myMaxReceivedSeqn;\n\n        myMsgLengthBuffer.Lo = myMsgLengthBuffer.Hi = 0;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "10763ba9ea47b7188c6bcdff7ac5a82658320a3f7f92219ef5b373cefcf5fbd5"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/SingleThreadSchedulerTest.cs",
      "language": "C#",
      "line": 40,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 38,
        "length": 3,
        "offset": 48,
        "surroundingCode": "    public void TestCurrentThread()\n    {\n      int x = 0;\n      Action a = () => { x++; };\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "1226ae010a49ea7aae4eb937ace89a3a5648c2c3e0de2796e3f08c45f8a9ef0c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1044,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 1042,
        "length": 3,
        "offset": 49,
        "surroundingCode": "    {\n      var entries = new List<int>();\n      int x= 0 ;\n      Lifetime.Using(lifetime =>\n      {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "143e231931c18260c3d9f16dc9736f2b14ba11f6294ae0f5cc21c10a7f39e35c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 258,
      "offset": 15,
      "length": 5,
      "code": {
        "startLine": 256,
        "length": 5,
        "offset": 61,
        "surroundingCode": "            if (len == PING_LEN)\n            {\n              Int32 receivedTimestamp = UnsafeReader.ReadInt32FromBytes(myPkgHeaderBuffer.Data, sizeof(Int32));\n              Int32 receivedCounterpartTimestamp = UnsafeReader.ReadInt32FromBytes(myPkgHeaderBuffer.Data, sizeof(Int32) + sizeof(Int32));\n              myCounterpartTimestamp = receivedTimestamp;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "14bbf42065bb86f19209972a4feb2af5f6029ca0bae5f79c3dacf4f7a51e6b83"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdTaskTest.cs",
      "language": "C#",
      "line": 89,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 87,
        "length": 4,
        "offset": 132,
        "surroundingCode": "      var clientEntity = BindToClient(LifetimeDefinition.Lifetime, CreateEndpoint<Unit, string>(x => x.ToString()), ourKey);\n\n      bool handlerFinished = false; \n      bool handlerCompletedSuccessfully = false; \n      clientEntity.Set(async (lf, req) =>"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "152b9864b58cbb8b64422ae6212db2a1a346784b8087b140e01dce544e758020"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/BindableChildrenUtil.cs",
      "language": "C#",
      "line": 46,
      "offset": 18,
      "length": 3,
      "code": {
        "startLine": 44,
        "length": 3,
        "offset": 70,
        "surroundingCode": "          using (printer.IndentCookie())\n          {\n            for (int i = 0; i < getters.Length; i++)\n            {\n              printer.Print(intros[i]);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "1540dd889d6a8b4023271f2b83ea627cff1ffa4bd050f919ce880e80e97c916f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdTaskTest.cs",
      "language": "C#",
      "line": 90,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 88,
        "length": 4,
        "offset": 44,
        "surroundingCode": "\n      bool handlerFinished = false; \n      bool handlerCompletedSuccessfully = false; \n      clientEntity.Set(async (lf, req) =>\n      {"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "16c48c0b7966ee826a440dd7a25c4a5f59647dc14f203b99cb7e81599d59f8a1"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ByteBufferAsyncProcessor.cs",
      "language": "C#",
      "line": 303,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 301,
        "length": 4,
        "offset": 10,
        "surroundingCode": "\n\n        long seqN = myChunkToProcess.IsNotProcessed ? 0 : myChunkToProcess.SeqN;\n        try\n        {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "16c81bec0a81cf230d70c4cad63610c567a4be233a229c6d7227bdbd7df094d1"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1047,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 1045,
        "length": 3,
        "offset": 49,
        "surroundingCode": "      Lifetime.Using(lifetime =>\n      {\n        int a = x++;\n        lifetime.OnTermination(() => entries.Add(a));\n        int b = x++;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "170b0592cde03dc3d9ab4ab14d2398400a6c8512ae418e3fc2d72ebcb914c04f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/SequentialLifetimesTest.cs",
      "language": "C#",
      "line": 19,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 17,
        "length": 3,
        "offset": 37,
        "surroundingCode": "\n      const int max = 3;\n      for (int i = 0; i < max; i++)\n      {\n        sb.AppendLine($\"before {i}\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "19dfbd033aae6d9c44ef4f63f50fb71f4fcaa645b9929ecf95196f0a83151b7f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/PriorityQueueTest.cs",
      "language": "C#",
      "line": 98,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 96,
        "length": 3,
        "offset": 104,
        "surroundingCode": "      var q = new BlockingPriorityQueue<Timed>(Lifetime.Eternal, 10, new Timed.Comparer());\n\n      for (int i = 0; i < 10; i++)\n      {\n        q.Add(new Timed(i.ToString(), DateTime.Now+TimeSpan.FromSeconds(10-i)));"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "1c321a48fd7195e9e7ee4520d569052df708146675bb0ff308a1f6a48ab8b7b2"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 398,
      "offset": 14,
      "length": 3,
      "code": {
        "startLine": 396,
        "length": 3,
        "offset": 75,
        "surroundingCode": "      {\n        // Others arguments, skip `this` argument (0)\n        for (int i = 0; i < parameters.Length; i++)\n        {\n          if (i != lifetimeArgument)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "1e8edb9545a4d765ad915f4e50fafe78bd0fb8aec624b97262a4eaf5173c2bbd"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/BlockingPriorityQueueTest.cs",
      "language": "C#",
      "line": 19,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 17,
        "length": 3,
        "offset": 60,
        "surroundingCode": "    public void ExtractOrBlockStressTest()\n    {\n      for (int j = 0; j < 50; j++)\n      {\n        var t = Lifetime.Using(lf =>"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "1ed2009c1b04087631e981d27190a23ce5e7872077853c54b0787241a9085115"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 254,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 252,
        "length": 5,
        "offset": 37,
        "surroundingCode": "              return 0;\n\n            Int32 len = UnsafeReader.ReadInt32FromBytes(myPkgHeaderBuffer.Data);\n\n            if (len == PING_LEN)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "1f384ec779633da418c1193a5470c5ddd6813a89077875baffffcd2a9084296d"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/SequentialLifetimesTest.cs",
      "language": "C#",
      "line": 62,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 60,
        "length": 3,
        "offset": 37,
        "surroundingCode": "\n      const int max = 3;\n      for (int i = 0; i < max; i++)\n      {\n        sb.AppendLine($\"before {i}\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "227292e8617ec88463b30c8e4f43d2c2df17dadc3b5273afa590dd9b9aaa8767"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/TestStealingWorker.cs",
      "language": "C#",
      "line": 19,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 17,
        "length": 3,
        "offset": 152,
        "surroundingCode": "    {\n      var w = new StealingScheduler(new ConcurrentExclusiveSchedulerPair(new DefectiveScheduler(defectiveRuns)).ExclusiveScheduler, false);\n      int n = 0;\n      for (int i = 0; i < TestsCount; i++)\n        new Task(() => { n++; }).Start(w);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "22944eae1fd2667637c72b28eda5a16eb775a013108cce5a4f89e6a36a3ddd7b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorCustomSignalTest.cs",
      "language": "C#",
      "line": 23,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 21,
        "length": 3,
        "offset": 100,
        "surroundingCode": "      var proxy = SFacade.ActivateProxy<IExtWithCustomSignal>(TestLifetime, ServerProtocol);\n\n      int val = 0;\n      proxy.Signal.Advise(TestLifetime, v => val = int.Parse(v.v1));\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "233f3aa365398b07fab708863b4ebce926d7d001db31bc553bb8188d6ba5cd32"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 33,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 31,
        "length": 3,
        "offset": 25,
        "surroundingCode": "\n      byte b = 0;\n      int l = 0;\n      var toProcess = 0;\n      for (int i = 0; i < 300; i++)"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "24cbf7f9303e6a1fca4d5cc4e0234cb4d1a4b6e959e74a61c829790e7868ab76"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetDefaultInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 49,
      "offset": 5,
      "length": 7,
      "code": {
        "startLine": 47,
        "length": 7,
        "offset": 43,
        "surroundingCode": "    myBuffer ??= new StringBuilder();\n\n    string? s = ToStringFormatted(value, format);\n    if (s is not null)\n    {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "27572e996674b5a03a0a9ec558b475a4c8c19c10eebec4932af3e0cad9ecb543"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/BitHacks.cs",
      "language": "C#",
      "line": 19,
      "offset": 14,
      "length": 3,
      "code": {
        "startLine": 17,
        "length": 3,
        "offset": 55,
        "surroundingCode": "      for (int i = 0; i < 8; i++)\n      {\n        for (int j = 1 << i; j < 1 << (i + 1); j++)\n          ourLogFloor2Lookup[j] = i;\n      }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "27efa72d120d4056b7245d76e69a3da9527ccfed87eadf5d7b5e4a399c348874"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 377,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 375,
        "length": 3,
        "offset": 47,
        "surroundingCode": "      ilgen.Emit(OpCodes.Ldfld, field);\n\n      int lifetimeArgument = -1;\n      // Lifetime\n      for (int i = 0; i < parameters.Length; i++)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "30c42f7ac81aa81cf5824ff499c81b7fc5607bff1d4ee0a647d5efc25c7f3efa"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/TestStealingWorker.cs",
      "language": "C#",
      "line": 20,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 18,
        "length": 3,
        "offset": 168,
        "surroundingCode": "      var w = new StealingScheduler(new ConcurrentExclusiveSchedulerPair(new DefectiveScheduler(defectiveRuns)).ExclusiveScheduler, false);\n      int n = 0;\n      for (int i = 0; i < TestsCount; i++)\n        new Task(() => { n++; }).Start(w);\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "32a3202bc19498b8149fa04c45800330aed4e1753720859073138a3c4d766c86"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 280,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 278,
        "length": 5,
        "offset": 27,
        "surroundingCode": "            }\n\n            Int64 seqN = UnsafeReader.ReadInt64FromBytes(myPkgHeaderBuffer.Data, sizeof(Int32));\n            if (len == ACK_MSG_LEN)\n            {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "3609e11eab62d39570bc1fa4a79bad46ff1f49ebdb45c2ccdc611209965a029e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 218,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 216,
        "length": 5,
        "offset": 33,
        "surroundingCode": "          return false;\n\n        Int32 len = UnsafeReader.ReadInt32FromBytes(myMsgLengthBuffer.Data);\n        var msgBuffer = new BufferWindow(len);\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "38173ae752d344cc3d8edd42c08859564655060b2a15659f5d82a9ca896f4b15"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ViewableList.cs",
      "language": "C#",
      "line": 113,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 111,
        "length": 3,
        "offset": 89,
        "surroundingCode": "    public void Advise(Lifetime lifetime, Action<ListEvent<T>> handler)\n    {\n      for (int index=0; index < myStorage.Count; index++)\n      {\n        try"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "383174b736961367974190da0e572b69daf820088e1ba449dee1a7d71766d97b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1358,
      "offset": 20,
      "length": 3,
      "code": {
        "startLine": 1356,
        "length": 3,
        "offset": 73,
        "surroundingCode": "            Task.Factory.StartNew(() =>\n            {\n              for (int k = 0; k < iterations; k++) \n                lifetime.OnTermination(() => count++);\n            }, TaskCreationOptions.AttachedToParent | TaskCreationOptions.LongRunning);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "3c7ddbc100a9fef2cb15794debfac9a07fedf9e53853205be1e6baf0f1397810"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/NativeMemoryPool.cs",
      "language": "C#",
      "line": 61,
      "offset": 14,
      "length": 3,
      "code": {
        "startLine": 59,
        "length": 3,
        "offset": 42,
        "surroundingCode": "      lock (ourLock)\n      {\n        for (int i = ourBlocks.Length - 1; i >= 0; i--)\n        {\n          var block = ourBlocks[i];"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "3ff05185bb8eab4866d1f4ccd9faaa2978b00353182ec08cdf4f6e4f6de18d02"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/NativeMemoryPool.cs",
      "language": "C#",
      "line": 118,
      "offset": 14,
      "length": 3,
      "code": {
        "startLine": 116,
        "length": 3,
        "offset": 119,
        "surroundingCode": "        var blocks = ourBlocks;\n        var start = Thread.CurrentThread.ManagedThreadId % blocks.Length;\n        for (int i = start; i < blocks.Length; i++)\n        {\n          var candidate = blocks[i];"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "4486189ef24572713a83b5212b19dc10631f9b1097fb7a379139bfbac076a89f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 204,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 202,
        "length": 6,
        "offset": 26,
        "surroundingCode": "      modify(doc);\n\n      string newLine = LineEndingUtil.Detect(path);\n      using (var writer = new StreamWriter(path, false, enc) {NewLine = newLine}) doc.Save(writer);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "4585c7936174e1e41c5bad22a57d2190d1d151f9699a5983a32874f538d4e9c6"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/SignalTest.cs",
      "language": "C#",
      "line": 60,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 58,
        "length": 3,
        "offset": 59,
        "surroundingCode": "      signal.Advise(lifetime, _ => advice2++);\n\n      for (int i = 0; i < 1000; i++)\n      {\n        signal.Fire();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "46062e9b0b9b2ae2ad8442a7aebc2e16a13ebd87c89a55d96abae15875c0a0a3"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/CastToTest.cs",
      "language": "C#",
      "line": 15,
      "offset": 13,
      "length": 3,
      "code": {
        "startLine": 13,
        "length": 3,
        "offset": 84,
        "surroundingCode": "        {\n            int updateOrdinal = (int) AddUpdateRemove.Update;\n            int removeOrdinal = (int) AddUpdateRemove.Remove;\n            \n            Assert.AreEqual(AddUpdateRemove.Update, CastTo<AddUpdateRemove>.From(updateOrdinal));"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "465ab2345e40d883969c9c76e665ff703d96f7fbfe81de3626456211a80b5fff"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorTestBase.cs",
      "language": "C#",
      "line": 60,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 58,
        "length": 6,
        "offset": 54,
        "surroundingCode": "        return base.CreateScheduler(isServer);\n\n      string name = (isServer ? \"server\" : \"client\") + \" scheduler\";\n      IScheduler result = null;\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "473d8478204ea38d4ae7348a5c9bfbd296ec0683583d9d1b6cc9b01063b34035"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1051,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 1049,
        "length": 3,
        "offset": 105,
        "surroundingCode": "        int b = x++;\n        lifetime.AddDispose(Disposable.CreateAction(() => entries.Add(b)));\n        int c = x++;\n        lifetime.OnTermination(Disposable.CreateAction(() => entries.Add(c)));\n        int d = x++;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "4818a032ff0c0c894e6fe730540318994c408b10d81a8a75165d0d4a8dd927f8"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Statics.cs",
      "language": "C#",
      "line": 85,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 83,
        "length": 3,
        "offset": 36,
        "surroundingCode": "      lock (myList)\n      {\n        int idx = myList.Count - 1;\n        if (failIfNotLast && (idx < 0 || myList[idx] != value))\n          Assertion.Fail(\"Precondition failed for Statics<{0}>. LastElement is not {1}, myStack.Count={2}\", typeof(T).FullName, value, idx + 1);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "4825b2e4156dd5e183486db66d4338429488acc97a2455f2c13a59e21cc3c501"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1064,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 1062,
        "length": 3,
        "offset": 49,
        "surroundingCode": "    {\n      var entries = new List<int>();\n      int x= 0 ;\n\n      Func<Action> FMakeAdder = () => { var a = x++; return () => entries.Add(a); };  // Fixes the X value at the moment of FMakeAdder call."
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "49efa01bf4eb43d63b0148933c57d22fc794f225149e79aac909a2132ebacc7e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/CastToTest.cs",
      "language": "C#",
      "line": 26,
      "offset": 13,
      "length": 3,
      "code": {
        "startLine": 24,
        "length": 3,
        "offset": 84,
        "surroundingCode": "        {\n            int updateOrdinal = (int) AddUpdateRemove.Update;\n            int removeOrdinal = (int) AddUpdateRemove.Remove;\n            \n            Assert.AreEqual(AddUpdateRemove.Update, Cast32BitEnum<AddUpdateRemove>.FromInt(updateOrdinal));"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "4a400f774ea73fbfa5f42351df53dec8ba08edc0415d1a5cecb5105a2e3f451b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 385,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 383,
        "length": 3,
        "offset": 47,
        "surroundingCode": "    public byte[]? ReadByteArray()\n    {\n      int len = ReadInt32();\n      if (len < 0) return null;\n      if (len == 0) return EmptyArray<byte>.Instance;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "4b1c83a06a1aab034d5c032bc3b169a67431f51a5a89635158da7e09c2b3f9fe"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/LocalStopwatchTest.cs",
      "language": "C#",
      "line": 14,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 12,
        "length": 3,
        "offset": 48,
        "surroundingCode": "    public void SimpleTest()\r\n    {\r\n      for (int j = 0; j < 10; j++)\r\n      {\r\n        var stopwatch2 = Stopwatch.StartNew();\r"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "4bdaebabf753695ed35e7d994c1f96e9b3534fc80251a05c35ae08152bafb6fa"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SerializersEx.cs",
      "language": "C#",
      "line": 14,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 12,
        "length": 3,
        "offset": 130,
        "surroundingCode": "    public static List<T>? ReadList<T>(this UnsafeReader reader, CtxReadDelegate<T> itemReader, SerializationCtx ctx)\n    {\n      int count = reader.ReadInt32();\n      if (count < 0) return null;\n      var res = new List<T>(count);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "4c42266e1897ef9528e6f9936067892ab7a7377ffa2ee4359998f4b4f0631933"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 246,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 244,
        "length": 3,
        "offset": 37,
        "surroundingCode": "    ~UnsafeWriter()\n    {\n      for (int i = 0; i < ReleaseResources; i++)\n        NativeMemoryPool.TryFreeMemory();\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "50a67ac7f5092a596768129d66610461081ee5cdb721000c6fd6224953ba8d31"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/SerializerReflectionUtil.cs",
      "language": "C#",
      "line": 151,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 149,
        "length": 4,
        "offset": 50,
        "surroundingCode": "        baseType = typeof(RdBindableBase);\n\n      bool isRdExtImpl = baseType == typeof(RdExtReflectionBindableBase) && !typeInfo.GetInterfaces().Contains(typeof(IProxyTypeMarker));\n      bool isRdRpcInterface = typeInfo.IsInterface; // can be specified in RdExt // && typeInfo.GetCustomAttribute<RdRpcAttribute>() != null;\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "57981bf74c6b4a1bac1d1ce64991f8dc439090c7fd83bee3d076a8bf1295e63f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1354,
      "offset": 16,
      "length": 3,
      "code": {
        "startLine": 1352,
        "length": 3,
        "offset": 61,
        "surroundingCode": "        Task.Factory.StartNew(() =>\n        {\n          for (int j = 0; j < threadsCount; j++)\n          {\n            Task.Factory.StartNew(() =>"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "5823dddbf31585b94266da6f44ed8c75ec03731df9303de2ef1b293dec6bfaa3"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/JetPriorityQueue.cs",
      "language": "C#",
      "line": 353,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 351,
        "length": 3,
        "offset": 36,
        "surroundingCode": "\n        myQueue.Add(item);\n        int count = myQueue.Count;\n        Monitor.Pulse(mySentry);\n        return count;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "588060c12bf02f4b3dffd469ba911adf7a17de9e84608ee1338905c8915d2df0"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/NativeMemoryPool.cs",
      "language": "C#",
      "line": 149,
      "offset": 16,
      "length": 3,
      "code": {
        "startLine": 147,
        "length": 3,
        "offset": 48,
        "surroundingCode": "        lock (ourLock)\n        {\n          for (int i = 0; i < ourBlocks.Length; i++)\n          {\n            if (ourBlocks[i] != null)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "59382a8aca347290f9cc0c5ec6902f6ecea3ad6f3c6227f6c8e45c84a271de66"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 379,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 377,
        "length": 3,
        "offset": 62,
        "surroundingCode": "      int lifetimeArgument = -1;\n      // Lifetime\n      for (int i = 0; i < parameters.Length; i++)\n      {\n        if (parameters[i].ParameterType == typeof(Lifetime))"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "59a25467569c070e3b0d0729cca0b6da1a227249d20c4901963676a541ee953e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 39,
      "offset": 14,
      "length": 3,
      "code": {
        "startLine": 37,
        "length": 3,
        "offset": 71,
        "surroundingCode": "        toProcess += l;\n        byte[] p = new byte[l++];\n        for (int j = 0; j < p.Length; j++)\n        {\n          p[j] = b++;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "5d6936f78c5df055082ab1ec613531a8380b7c9896e016dfb1c92984240c17da"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ActorTest.cs",
      "language": "C#",
      "line": 74,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 72,
        "length": 3,
        "offset": 49,
        "surroundingCode": "      var def = new LifetimeDefinition();\n\n      int sum = 0;\n      var e = new AutoResetEvent(false);\n      var actor = new Actor<int>(\"TestActor\", def.Lifetime,  x =>"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "5e7e23a8a942da2a1723b6771a25d84d2857159ee0a61c08375ebacf0bf38b8f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/JetPriorityQueue.cs",
      "language": "C#",
      "line": 165,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 163,
        "length": 3,
        "offset": 38,
        "surroundingCode": "\n      int n = myStorage.Count;\n      int left = (idx << 1) | 0;\n      while (left < n)\n      {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "5fa2dfea3032e52bd1a6603eab4b049baaf02323176fc9b9d5d1598b83b4ba55"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/CollectionSerializers.cs",
      "language": "C#",
      "line": 77,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 75,
        "length": 3,
        "offset": 89,
        "surroundingCode": "      CtxReadDelegate<Dictionary<TKey, TValue>?> read = (ctx, reader) =>\n      {\n        int count = reader.ReadInt();\n        if (count == -1)\n          return null;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "5fe08de8b106cb3c87817f46c620795de42034272b19ad26fda76e5cfebfdfc5"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 218,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 216,
        "length": 6,
        "offset": 35,
        "surroundingCode": "          return default;\n\n        object instance = FormatterServices.GetUninitializedObject(typeof(T));\n\n        for (var index = 0; index < memberDeserializers.Length; index++)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "6216d346a5d95d6b2f28ae3e8a93e5c5162af08678730a393c2c5531f15b3443"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/RdId.cs",
      "language": "C#",
      "line": 63,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 61,
        "length": 4,
        "offset": 38,
        "surroundingCode": "      if (s == null) return 0;\n\n      long hash = initValue;\n// ReSharper disable LoopCanBeConvertedToQuery \n// ReSharper disable ForCanBeConvertedToForeach"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "623e33bc0d3b16c95d6d5f69c374d3edc2abb1dc374bf15f085404c00fc4b80a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/UnsafeWriterTest.cs",
      "language": "C#",
      "line": 47,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 45,
        "length": 4,
        "offset": 51,
        "surroundingCode": "    public void TestFreeMemoryStress()\n    {\n      bool run = true;\n      var thread = new Thread(() =>\n      {"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "631d7b6037ea705adc83309fb650cf8fb97a10cb8b9c6a5af28b04e13480adfd"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 23,
      "offset": 14,
      "length": 3,
      "code": {
        "startLine": 21,
        "length": 3,
        "offset": 54,
        "surroundingCode": "        Assert.Greater(len, 0);\n        \n        for (int i = 0; i < len - 1; i++)\n        {\n          Assert.AreEqual(data[offset + i+1], (byte)(data[offset + i]+1));"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "638466bb3f6ce341fad4b4910f2a71211bcf06313aee1858524dccd2441c67dd"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/LocalStopwatchTest.cs",
      "language": "C#",
      "line": 22,
      "offset": 14,
      "length": 3,
      "code": {
        "startLine": 20,
        "length": 3,
        "offset": 69,
        "surroundingCode": "        var stopwatch1 = Stopwatch.StartNew();\r\n      \r\n        for (int i = 0; i < 50; i++)\r\n        {\r\n          var milliseconds1 = stopwatch1.ElapsedMilliseconds;\r"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "641c53fc69358e00faec9c13f24b491372156c1c6a346f88c0a73e998c58a4c4"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 197,
      "offset": 15,
      "length": 4,
      "code": {
        "startLine": 195,
        "length": 4,
        "offset": 63,
        "surroundingCode": "            fixed (byte* b = data)\n            {\n              long l = UnsafeReader.CreateReader(b, 8).ReadLong();\n              if (seqN != 0)\n                Assert.AreEqual(l, seqN);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "679df7436e41fbc4ecfece6d7979a0af9fb3655a1bb05ca875000f4fa71cd540"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1068,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 1066,
        "length": 4,
        "offset": 148,
        "surroundingCode": "      Func<Action> FMakeAdder = () => { var a = x++; return () => entries.Add(a); };  // Fixes the X value at the moment of FMakeAdder call.\n\n      bool flag = false;\n\n      Lifetime.Using(lifetime =>"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "68eadb636594df05e0a695ff1e9ed04bbd245309e39da8c9bd9756758e05723f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/LineEndingUtil.cs",
      "language": "C#",
      "line": 12,
      "offset": 17,
      "length": 4,
      "code": {
        "startLine": 10,
        "length": 4,
        "offset": 87,
        "surroundingCode": "            using (var fileStream = File.OpenRead(path))\n            {\n                char prevChar = '\\0';\n                for (int i = 0; i < 4000; i++)\n                {"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "6a48443b6af7e46884ff1625c67abf71897ba78fc6299c447f03c13e1cd60953"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/CollectionSerializers.cs",
      "language": "C#",
      "line": 83,
      "offset": 14,
      "length": 3,
      "code": {
        "startLine": 81,
        "length": 3,
        "offset": 123,
        "surroundingCode": "        var keyr = keySerializer.GetReader<TKey>();\n        var valuer = valueSerializer.GetReader<TValue>();\n        for (int i = 0; i < count; i++)\n        {\n          var key = keyr(ctx, reader);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "6ad197a062c8c5db2a859734edf858bb08dcb8fafc5a24e440fcedb92ca1c40f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 362,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 360,
        "length": 3,
        "offset": 41,
        "surroundingCode": "\n      var res = new T?[len];\n      for (int i = 0; i < len; i++) res[i] = readDelegate(this);\n      return res;\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "6c89bd89f76e0ac69b08fe88c1ec4e3896a2ccf6b1371dc76f8c2ca96ff04f3b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1345,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 1343,
        "length": 3,
        "offset": 65,
        "surroundingCode": "    public void SimpleOnTerminationStressTest()\n    {\n      for (int i = 0; i < 100; i++)\n      {\n        using var lifetimeDefinition = new LifetimeDefinition();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "6e95597484015e9734abe782ee53ba362535b22a4365bfbb9456d8ce3cf8926f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorPropertiesTest.cs",
      "language": "C#",
      "line": 56,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 54,
        "length": 4,
        "offset": 62,
        "surroundingCode": "      AddType(typeof(LifeModel));\n      // test signals\n      bool raised = false;\n      proxy.Signal.Advise(TestLifetime, s => raised = true);\n      client.Signal.Fire(\"test\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "6f78c6764a46bd24195cac448e948e3ed614b591bfe267c0c88f737e06ef8fb1"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 424,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 422,
        "length": 3,
        "offset": 82,
        "surroundingCode": "      Func<int, TDict> constructor) where TDict : IDictionary<TK, TV>\n    {\n      int count = ReadInt32();\n      if (count < 0) return default(TDict);\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "71b12dd28ac2138808b08408cbd1a819bc7118d8a7e37c855b18fda6af74631b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/PriorityQueueTest.cs",
      "language": "C#",
      "line": 182,
      "offset": 11,
      "length": 3,
      "code": {
        "startLine": 180,
        "length": 3,
        "offset": 23,
        "surroundingCode": "          }\n\n          int prevVal = -1;\n          int peekVal;\n          for (var i = 0; i < size; i++)"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "76308b2f81b466ff6883fbc8c35c40ccac82fd7c5fee3aa50a7c14a59dadaf50"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/LineEndingUtil.cs",
      "language": "C#",
      "line": 13,
      "offset": 22,
      "length": 3,
      "code": {
        "startLine": 11,
        "length": 3,
        "offset": 73,
        "surroundingCode": "            {\n                char prevChar = '\\0';\n                for (int i = 0; i < 4000; i++)\n                {\n                    int b;"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "7796d36ed7f8dc2463281386676f24c78f7b28d7f77df8d1c0428857bc184a5c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SerializersEx.cs",
      "language": "C#",
      "line": 51,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 49,
        "length": 3,
        "offset": 94,
        "surroundingCode": "      var cookie = new UnsafeWriter.Bookmark(writer);\n      writer.Write(-1); // length\n      int i = 0;\n      foreach (var item in value)\n      {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "79412feae22c6cb8ddc88e70a1dceb413d508352f97255541c632d292badcc9b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/WriteOncePropertyTest.cs",
      "language": "C#",
      "line": 66,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 64,
        "length": 3,
        "offset": 47,
        "surroundingCode": "      const int threadsCount = 10;\n\n      for (int i = 0; i < 200; i++)\n      {\n        using var def = new LifetimeDefinition();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "7a00588264f588763ca266a0eef06273f88d119dbe5c166800f646b925c7eee9"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1349,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 1347,
        "length": 3,
        "offset": 125,
        "surroundingCode": "        using var lifetimeDefinition = new LifetimeDefinition();\n        var lifetime = lifetimeDefinition.Lifetime;\n        int count = 0;\n        const int threadsCount = 10;\n        const int iterations = 1000;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "7ab4f30eb875ee3baf1aa8c1b7943132242bb022bf32fdb4b19d3b61cba8e8b2"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorInheritanceTest.cs",
      "language": "C#",
      "line": 45,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 43,
        "length": 4,
        "offset": 29,
        "surroundingCode": "\n      // test signals\n      bool raised = false;\n      proxy.Signal.Advise(TestLifetime, s => raised = true);\n      client.Signal.Fire(\"test\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "7b0f1c27f28c229e02991ddbfa0d65a687502dd5e2385433bd82f9fddc182635"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 38,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 36,
        "length": 6,
        "offset": 40,
        "surroundingCode": "      {\n        toProcess += l;\n        byte[] p = new byte[l++];\n        for (int j = 0; j < p.Length; j++)\n        {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "7c20b7fe2e6aade7125380621b0969e192f7440bfb90cbc2f6047d9c148af47d"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 35,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 33,
        "length": 3,
        "offset": 53,
        "surroundingCode": "      int l = 0;\n      var toProcess = 0;\n      for (int i = 0; i < 300; i++)\n      {\n        toProcess += l;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "7c72ef54439a9dcb41d1ecf97059c34de4631211ce2c6907bba2a071340d5022"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/SpinWaitLock.cs",
      "language": "C#",
      "line": 89,
      "offset": 11,
      "length": 4,
      "code": {
        "startLine": 87,
        "length": 4,
        "offset": 38,
        "surroundingCode": "        unchecked\n        {\n          long am = Process.GetCurrentProcess().ProcessorAffinity.ToInt64();\n          while (am != 0)\n          {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "7d12d878e4db477005c9351ba4421a84386b5acc9a2ea3cd60fcb0bbb0c7fc98"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/BitHacks.cs",
      "language": "C#",
      "line": 59,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 57,
        "length": 3,
        "offset": 109,
        "surroundingCode": "      \n      //Current implementation is suboptimal. Make it faster if you need more performance.\n      for (int i=0; i<62; i++)\n        if (1 << i >= x)\n          return i;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "7f5a13b5c711b3ae78ddee1b59665aebc70a6c11d09c9bbed5cf47ed815fae9e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/SingleThreadSchedulerTest.cs",
      "language": "C#",
      "line": 18,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 16,
        "length": 3,
        "offset": 89,
        "surroundingCode": "    {\n      var sc = SingleThreadScheduler.RunOnSeparateThread(TestLifetime, \"s\");\n      int x = 0;\n      Action a = () => { x++; };\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "808359bfa0ed7cebc0bba27a9509c6bb91f7f75416e40440fd0c3c2e67dc08d9"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/TestStealingWorker.cs",
      "language": "C#",
      "line": 31,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 29,
        "length": 3,
        "offset": 72,
        "surroundingCode": "    {\n      var w = new StealingScheduler(TaskScheduler.Default);\n      int n = 0;\n      for (int i = 0; i < TestsCount; i++)\n        new Task(() => { Interlocked.Increment(ref n); }).Start(w);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "818948fb2e24bdd06d63ffbfbd35169eae61f14b3fa47e4bf1a7980418e1d943"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/SpinWaitLock.cs",
      "language": "C#",
      "line": 71,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 69,
        "length": 4,
        "offset": 105,
        "surroundingCode": "    {\n      int oldThreadId = Interlocked.CompareExchange(ref _ownerThreadId, currentThreadId, 0);\n      bool result = oldThreadId == 0 || oldThreadId == currentThreadId;\n      if (result)\n      {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "8449d99d64c59a994b0867ddca15b1bc9898e2f033d8d1024912b0ea8d68e13f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/BitHacks.cs",
      "language": "C#",
      "line": 17,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 15,
        "length": 3,
        "offset": 45,
        "surroundingCode": "      ourLogFloor2Lookup[0] = 0;\n\n      for (int i = 0; i < 8; i++)\n      {\n        for (int j = 1 << i; j < 1 << (i + 1); j++)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "85de3787416dd5544fb837bef4323952c061b676068a8270ef5ac6243c6aa081"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/LineEndingUtil.cs",
      "language": "C#",
      "line": 19,
      "offset": 21,
      "length": 4,
      "code": {
        "startLine": 17,
        "length": 4,
        "offset": 52,
        "surroundingCode": "                        break;\n\n                    char curChar = (char)b;\n                    if (curChar == '\\n' )\n                    {"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "89a690f4dc806e56acf791ce8a8d2dc72d0666b207d7dccf3420447764a1f2e3"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/SpinWaitLock.cs",
      "language": "C#",
      "line": 70,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 68,
        "length": 3,
        "offset": 59,
        "surroundingCode": "    private bool TryEnter(int currentThreadId)\n    {\n      int oldThreadId = Interlocked.CompareExchange(ref _ownerThreadId, currentThreadId, 0);\n      bool result = oldThreadId == 0 || oldThreadId == currentThreadId;\n      if (result)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "8c60077a3fdace6b7edb5581694a861f9191c401472711b36fe958669d33ab77"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 271,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 269,
        "length": 4,
        "offset": 133,
        "surroundingCode": "      ReflectionSerializerVerifier.AssertRoot(typeInfo);\n      var isScalar = ReflectionSerializerVerifier.IsScalar(typeInfo);\n      bool allowNullable = ReflectionSerializerVerifier.HasRdModelAttribute(typeInfo) || (isScalar && ReflectionSerializerVerifier.CanBeNull(typeInfo));\n\n/*      var intrinsicSerializer = TryGetIntrinsicSerializer(typeInfo);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "8d167336948529a9f48aa726d3c5bb55a38e158f17176d657b6298559c671087"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 793,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 791,
        "length": 3,
        "offset": 49,
        "surroundingCode": "    public void TestTaskAttachment()\n    {\n      int executed = 0;\n      lt.ExecuteAsync(async () =>\n      {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "90c8cfdd98b16d223ed7ec4f6896fbaa27023377c3a2f754fe499f681708e77a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SocketWireTest.cs",
      "language": "C#",
      "line": 327,
      "offset": 11,
      "length": 3,
      "code": {
        "startLine": 325,
        "length": 3,
        "offset": 72,
        "surroundingCode": "\n          var wire = serverProtocol.Wire as SocketWire.Base;\n          int clientCount = 0;\n          wire.NotNull().Connected.WhenTrue(lifetime, _ =>\n          {"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "9502596d37e92cff31f15b2aa0054d97ba7dfafb3b2458a795f0461dda387aac"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/WriteOncePropertyTest.cs",
      "language": "C#",
      "line": 113,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 111,
        "length": 3,
        "offset": 47,
        "surroundingCode": "      const int threadsCount = 10;\n\n      for (int i = 0; i < 200; i++)\n      {\n        using var def = new LifetimeDefinition();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "981e3b2d70bb9be4203924e30a0ff4fcece2eadb9f25051d8c5d01d29771c3d5"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/CastToTest.cs",
      "language": "C#",
      "line": 25,
      "offset": 13,
      "length": 3,
      "code": {
        "startLine": 23,
        "length": 3,
        "offset": 59,
        "surroundingCode": "        public void CastEnum32Test()\n        {\n            int updateOrdinal = (int) AddUpdateRemove.Update;\n            int removeOrdinal = (int) AddUpdateRemove.Remove;\n            "
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "98f4a0b43f0b5fe4c3a158a5d2e66e10fdc2591423e04b25fafffa363e933454"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdFrameworkTestBase.cs",
      "language": "C#",
      "line": 63,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 61,
        "length": 3,
        "offset": 87,
        "surroundingCode": "        throw new InvalidOperationException(\"There is messages in ClientWire\");\n\n      int barrier = 0;\n      ServerProtocol.Scheduler.InvokeOrQueue(() => Interlocked.Increment(ref barrier));\n      ClientProtocol.Scheduler.InvokeOrQueue(() => Interlocked.Increment(ref barrier));"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "990ce64c6ea4d7607e206d733624e06f967cb9e5c59fe083cc47167b34b7ac07"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 428,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 426,
        "length": 3,
        "offset": 51,
        "surroundingCode": "\n      TDict dict = constructor(count);\n      for (int i = 0; i < count; i++)\n      {\n        dict[readKeyDelegate(this)] = readValueDelegate(this);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "9aecd324805d5a84c66cbf7912efb12e6997b33d725c0ba6c67edb0e6c1dcee3"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 272,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 270,
        "length": 3,
        "offset": 44,
        "surroundingCode": "    public string? ReadString()\n    {\n      int len = ReadInt32();\n\n      if (len < 0) return null;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "9bd9febf49f0323fffdf87cd9c8566ce6dac812c53f210ac3861e23bc4a3bdb4"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SocketWireTest.cs",
      "language": "C#",
      "line": 48,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 46,
        "length": 3,
        "offset": 85,
        "surroundingCode": "      TcpListener l = new TcpListener(IPAddress.Loopback, 0);\n      l.Start();\n      int port = ((IPEndPoint) l.LocalEndpoint).Port;\n      l.Stop();\n      return port;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "9ea7a15fe0d04cc2554f47525690f993a3a31fb32e64a7a329d26af2b97c1cc1"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ActorTest.cs",
      "language": "C#",
      "line": 52,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 50,
        "length": 3,
        "offset": 131,
        "surroundingCode": "      var actor = new Actor<int>(\"TestActor\", TestLifetime,  x => { sum += x; });\n      var tasks = new Task[nThreads];\n      for (int i = 0; i < 10; i++)\n      {\n        tasks[i] = Task.Run(() =>"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "9eb233837ada0af8e8601c2b9e864fcbb5051a6337fa698e632dc785ea75a3ee"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/NativeMemoryPool.cs",
      "language": "C#",
      "line": 71,
      "offset": 18,
      "length": 3,
      "code": {
        "startLine": 69,
        "length": 3,
        "offset": 135,
        "surroundingCode": "            ourBlocks[i] = null;\n            // try to fill the hole. ourBlocks array should be filled from the start\n            for (int j = ourBlocks.Length - 1; j > i; j--)\n            {\n              if (ourBlocks[j] != null)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "9f4bc7d3bb3b76ff8dd754b6551bcdde090b57ed15d384b6cfa41eca83ba41b0"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 64,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 62,
        "length": 3,
        "offset": 40,
        "surroundingCode": "    public void TestClean()\n    {\n      int x = 0;\n      var buffer = new ByteBufferAsyncProcessor(\"TestAsyncProcessor\", 1, delegate(byte[] data, int offset, int len, ref long seqN) { x += data[offset]; });\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "a5161734c224e18baece52de4b090e3b7dd461120ef8616a58e79c2e709ed06a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/SerializerReflectionUtil.cs",
      "language": "C#",
      "line": 152,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 150,
        "length": 4,
        "offset": 145,
        "surroundingCode": "\n      bool isRdExtImpl = baseType == typeof(RdExtReflectionBindableBase) && !typeInfo.GetInterfaces().Contains(typeof(IProxyTypeMarker));\n      bool isRdRpcInterface = typeInfo.IsInterface; // can be specified in RdExt // && typeInfo.GetCustomAttribute<RdRpcAttribute>() != null;\n\n      var fields = GetFields(typeInfo, baseType);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "a5f367e0a8081b578e8f4ea3ab3d98afc321822759cbbadc1726581b313df81c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 413,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 411,
        "length": 3,
        "offset": 49,
        "surroundingCode": "\n      TCol col = constructor(count);\n      for (int i = 0; i < count; i++)\n      {\n        col.Add(readDelegate(this));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "ad80fabd1c3bd232254d57a62a56955d1c14bf6ae9053efb6dc3db9c3e3f7a9d"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/SpinWaitLock.cs",
      "language": "C#",
      "line": 84,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 82,
        "length": 3,
        "offset": 97,
        "surroundingCode": "      // TODO //_processorCount = (int)ProcessorUtil.GetProcessorCountWithAffinityMask();\n\n      int procCount = 0;\n      try\n      {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "ae9e7bc76b501846a50772ba91b5f9909532e4824213c9ad01a7658ec3a7401f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 833,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 831,
        "length": 3,
        "offset": 50,
        "surroundingCode": "    {\n      var o = lt.CreateNested();\n      for (int i = 0; i < 100; i++)\n      {\n        var n = lt.CreateNested();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "b1b0c6c778f0ec4244f24f08ba774012e5a4a749d12f4181e2d67d51237ba9e3"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 625,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 623,
        "length": 3,
        "offset": 80,
        "surroundingCode": "      if(value == null)\n        throw new ArgumentNullException(\"value\");\n      int size = value.Length;\n      Prepare(size);\n      Marshal.Copy(value, 0, (IntPtr)myPtr, size); // Unlike MemoryUtil::CopyMemory, this is a CLR intrinsic call"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "b23f842e8a3d05ed5d189b4ca1c300af854f536240c903a8033c80a2c7a5a0ab"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ProactiveLazyTest.cs",
      "language": "C#",
      "line": 20,
      "offset": 22,
      "length": 3,
      "code": {
        "startLine": 18,
        "length": 3,
        "offset": 65,
        "surroundingCode": "            {\n                long res = 0;\n                for (int i = 0; i < n; i++)\n                    res += i;\n                return res;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "b2cc9190c6f20a89125eee4d2afe91133df6c3b3eea8a342d538636ebb5ca6e3"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ActorTest.cs",
      "language": "C#",
      "line": 56,
      "offset": 16,
      "length": 3,
      "code": {
        "startLine": 54,
        "length": 3,
        "offset": 59,
        "surroundingCode": "        tasks[i] = Task.Run(() =>\n        {\n          for (int j = 0; j < limit; j++)\n          {\n            actor.SendBlocking(j);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "b70baac6b76b02f7eb5a24e9f320eaf95648a91133c096707e86d3e72db56a42"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/SpinWaitLock.cs",
      "language": "C#",
      "line": 29,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 27,
        "length": 3,
        "offset": 36,
        "surroundingCode": "    public void Enter()\n    {\n      int currentThreadId = Thread.CurrentThread.GetHashCode();\n      if (!TryEnter(currentThreadId))\n      {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "b82f39e8ec397a1752d8de7afad212213be599edbd0e16d1dc9268cff4a37412"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/SpinWaitLock.cs",
      "language": "C#",
      "line": 42,
      "offset": 11,
      "length": 3,
      "code": {
        "startLine": 40,
        "length": 3,
        "offset": 33,
        "surroundingCode": "        else\n        {\n          int iterations = 16;\n          do\n          {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "b9074cb8e817cda8a72d875fb4c07e4c00efad13fe724e81545fab71d0bb9a74"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorSimpleTest.cs",
      "language": "C#",
      "line": 69,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 67,
        "length": 3,
        "offset": 54,
        "surroundingCode": "\n      var checkpoint = dotMemory.Check();\n      for (int i = 0; i < 100000; i++)\n      {\n        proxy.RunTests(new TestRunRequest());"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "bd6bc3563acf81f3f6c04018562e3898deccdccf3725ce2e9004ae2a68b9dad9"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ViewableList.cs",
      "language": "C#",
      "line": 61,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 59,
        "length": 3,
        "offset": 41,
        "surroundingCode": "    public void Clear()\n    {\n      for (int index = myStorage.Count - 1; index >= 0; index--) \n        RemoveAt(index);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "c3ff63bd8646cab5db884c3a6203a9b114ec93917dfbad7c70d0068b9c33095f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/RdId.cs",
      "language": "C#",
      "line": 66,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 64,
        "length": 3,
        "offset": 107,
        "surroundingCode": "// ReSharper disable LoopCanBeConvertedToQuery \n// ReSharper disable ForCanBeConvertedToForeach\n      for (int i = 0; i < s.Length; i++)\n      {\n        hash = hash*31 + s[i];"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "c5b6b4b324692a3e1c1ad8716607a50d8dc5bfa7366f60886eaf8bb231f3d476"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ProactiveLazyTest.cs",
      "language": "C#",
      "line": 16,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 14,
        "length": 4,
        "offset": 56,
        "surroundingCode": "        {\n            var n = 100_000_000L;\n            long expected = n * (n - 1) / 2;\n            var lazy = new ProactiveLazy<long>(Lifetime.Eternal, () =>\n            {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "c94451716f7155c80fb10c3082d86d65e586a58c06782747fb473bf3cc596389"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 369,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 367,
        "length": 3,
        "offset": 45,
        "surroundingCode": "    public int[]? ReadIntArray()\n    {\n      int len = ReadInt32();\n      if (len < 0) return null;\n      if (len == 0) return EmptyArray<int>.Instance;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "cb53fc5317a47b773fc651790e3b7e077d845f519226fb9bbe52d8102d17f255"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1053,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 1051,
        "length": 3,
        "offset": 108,
        "surroundingCode": "        int c = x++;\n        lifetime.OnTermination(Disposable.CreateAction(() => entries.Add(c)));\n        int d = x++;\n        lifetime.AddDispose(Disposable.CreateAction(() => entries.Add(d)));\n      });"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "cc09496a40b407e1240ea60db55bcadf3880d9300ef13c10b1d1c84241220af5"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/NativeMemoryPool.cs",
      "language": "C#",
      "line": 129,
      "offset": 14,
      "length": 3,
      "code": {
        "startLine": 127,
        "length": 3,
        "offset": 35,
        "surroundingCode": "          }\n        }\n        for (int i = 0; i < start; i++)\n        {\n          var candidate = blocks[i];"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "cde9e31272b116312bcb2dcf4b1f73462b28a5cd913c1bedda2fffdcedbf2834"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ActorTest.cs",
      "language": "C#",
      "line": 100,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 98,
        "length": 3,
        "offset": 36,
        "surroundingCode": "    {\n      const int n = 10;\n      int count = n;\n      Actor<int> actor = null;\n      var log = new List<int>();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "ce97d26d179b673411d06f6720149ec88e4fa53a7c62779d1dbcaaf69c84393b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 155,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 153,
        "length": 3,
        "offset": 54,
        "surroundingCode": "      var tasks = new List<Task>();\n      \n      for (int i=0; i<4; i++)\n        tasks.Add(Task.Run(() =>\n        {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "cf3937124a427e1bce0228ea7f3a1020a1e9392691bd6779a3eccc410d74d0ee"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Diagnostics/TextWriterLogTest.cs",
      "language": "C#",
      "line": 22,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 20,
        "length": 3,
        "offset": 54,
        "surroundingCode": "      var log2 = factory.GetLog(\"category 2\");\n\n      int extHandlersTriggered = 0;\n      log1.Handlers += lmsg => { extHandlersTriggered++; };\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "d3acb4fa2831fa28d12bb03490686193083e702883dd590404c2bce9278b0e9d"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 207,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 205,
        "length": 4,
        "offset": 117,
        "surroundingCode": "      // Add RdEndpoint for Impl class (counterpart of Proxy)\n      var interfaces = typeInfo.GetInterfaces();\n      bool isProxy = interfaces.Contains(typeof(IProxyTypeMarker));\n      var rpcInterface = ReflectionSerializerVerifier.GetRpcInterface(typeInfo);\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "d634b3e0454a0793e1e900531213bbf1a6a860a8ee75c960de319a454532e1ae"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/JetPriorityQueue.cs",
      "language": "C#",
      "line": 172,
      "offset": 11,
      "length": 3,
      "code": {
        "startLine": 170,
        "length": 3,
        "offset": 33,
        "surroundingCode": "        else\n        {\n          int right = (idx << 1) | 1;\n          nxt = Compare(left, right) < 0 ? left : right;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "d65f0a4c6e7e79ded8e8b2154ebba6b6e87b1566a5432ecffc93cce7dc1aebdd"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 259,
      "offset": 15,
      "length": 5,
      "code": {
        "startLine": 257,
        "length": 5,
        "offset": 140,
        "surroundingCode": "            {\n              Int32 receivedTimestamp = UnsafeReader.ReadInt32FromBytes(myPkgHeaderBuffer.Data, sizeof(Int32));\n              Int32 receivedCounterpartTimestamp = UnsafeReader.ReadInt32FromBytes(myPkgHeaderBuffer.Data, sizeof(Int32) + sizeof(Int32));\n              myCounterpartTimestamp = receivedTimestamp;\n              myCounterpartNotionTimestamp = receivedCounterpartTimestamp;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "d69d090ae395a08e1602b0e7b3ccdedefc1964a997302b7d8d9d05e275d99621"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/PriorityQueueTest.cs",
      "language": "C#",
      "line": 141,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 139,
        "length": 3,
        "offset": 90,
        "surroundingCode": "      var queue = new JetPriorityQueue<DateTime>(10, new DateTimeComparer());\n\n      for (int seed = 0; seed < 1000; seed++)\n      {\n        var random = new Random(seed);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "d98ec8e8f4586c90669340fbdc318705196d098f0eee9a419af8f6a98ddcc73e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 86,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 84,
        "length": 3,
        "offset": 40,
        "surroundingCode": "    public void TestPause()\n    {\n      int x = 0;\n      var buffer = new ByteBufferAsyncProcessor(\"TestAsyncProcessor\", 1, delegate(byte[] data, int offset, int len, ref long seqN) { x += data[offset]; });\n      var reason1 = \"reason1\";"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "da1c11b42c21eeca6595f5c80111448c4715997a0510945a4222e11b3d07af78"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 612,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 610,
        "length": 3,
        "offset": 27,
        "surroundingCode": "      else\n      {\n        int size = value.Length;\n        Write(size);\n        Prepare(size);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "dcce03bdb308c628e141b4933d0b58ea1aff92477e98b31a76f2b5696047a35a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/CastToTest.cs",
      "language": "C#",
      "line": 14,
      "offset": 13,
      "length": 3,
      "code": {
        "startLine": 12,
        "length": 3,
        "offset": 63,
        "surroundingCode": "        public void TestCastValueTypes()\n        {\n            int updateOrdinal = (int) AddUpdateRemove.Update;\n            int removeOrdinal = (int) AddUpdateRemove.Remove;\n            "
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "df86842ccd813b15aa03d5f1f83d5b3f1d999152303513ff876167830f6f6fad"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/BindableChildrenUtil.cs",
      "language": "C#",
      "line": 82,
      "offset": 16,
      "length": 3,
      "code": {
        "startLine": 80,
        "length": 3,
        "offset": 63,
        "surroundingCode": "        fillBindableFields = (obj) =>\n        {\n          for (int i = 0; i < bindableMembers.Length; i++)\n          {\n            var value = getters[i](obj);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "e38219e3472604b7cd447d73d52fb805cc9ffce01e0846fcb0504b0fc911d27b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/TestStealingWorker.cs",
      "language": "C#",
      "line": 43,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 41,
        "length": 3,
        "offset": 88,
        "surroundingCode": "    {\n      var w = new StealingScheduler(new DefectiveScheduler(defectiveRuns));\n      int n = 0;\n      for (int i = 0; i < TestsCount; i++)\n        new Task(() => { Interlocked.Increment(ref n); }).Start(w);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "e4ef11eed3817b99c44b0b7e162ad57363041f8b7093d8adfec4cda3e43ec2fb"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 409,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 407,
        "length": 3,
        "offset": 140,
        "surroundingCode": "    public TCol? ReadCollection<T, TCol>(ReadDelegate<T> readDelegate, Func<int, TCol> constructor) where TCol : ICollection<T>\n    {\n      int count = ReadInt32();\n      if (count < 0) return default(TCol);\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "e8edc3978e2b220f33b4410979c2bc3c1d87bbe7114c0288b63627b76a0c2e4d"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 307,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 305,
        "length": 3,
        "offset": 75,
        "surroundingCode": "    public string? ReadStringInterned(IRawStringIntern intern)\n    {\n      int len = ReadInt32();\n\n      if (len < 0) return null;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "ea771f395112f9cfce5c0f38508fa88b66bc4e6795df580589fb31ea7c9ba0bc"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/PriorityQueueTest.cs",
      "language": "C#",
      "line": 146,
      "offset": 14,
      "length": 3,
      "code": {
        "startLine": 144,
        "length": 3,
        "offset": 46,
        "surroundingCode": "\n        var now = DateTime.Now;\n        for (int i = 0; i < 11; i++)\n          queue.Add(now + TimeSpan.FromMilliseconds(random.Next(0, 1000)));\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "ee4c2b5df24a348c0f12b54eb93ea67a4e1a45e4d9246e51102a9f875e14ff0d"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/BlockingPriorityQueueTest.cs",
      "language": "C#",
      "line": 30,
      "offset": 16,
      "length": 3,
      "code": {
        "startLine": 28,
        "length": 3,
        "offset": 47,
        "surroundingCode": "          const int n = 10000;\n\n          for (int i = 0; i < n; i++)\n          {\n            queue.Enqueue(new PrioritizedAction(() =>"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "f2ed18391fb01140c1ba10b0e8a24c01bff3f085048674eaea6b3d870b913d60"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ByteBufferAsyncProcessor.cs",
      "language": "C#",
      "line": 143,
      "offset": 11,
      "length": 3,
      "code": {
        "startLine": 141,
        "length": 3,
        "offset": 62,
        "surroundingCode": "        {\n          var chunk = myChunkToFill.Next;\n          int res = 1;\n          while (chunk != myChunkToFill)\n          {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "f33cb64235fff0bbeae34783a4ff5a660e03b9687961a7bf0accf374f8378299"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 770,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 768,
        "length": 3,
        "offset": 75,
        "surroundingCode": "    public void TestAddTerminationActionToTerminatedLifetime()\n    {\n      int executed = 0;\n      def.Terminate();\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "f34fc9c831104e91881d30d36e214d88d5bce095a1b484f9ab5859b93bc6b75e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1049,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 1047,
        "length": 3,
        "offset": 83,
        "surroundingCode": "        int a = x++;\n        lifetime.OnTermination(() => entries.Add(a));\n        int b = x++;\n        lifetime.AddDispose(Disposable.CreateAction(() => entries.Add(b)));\n        int c = x++;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "f39b42beb43f7238356b117a971f6c56a6c6892cf55e4e192159abfc6718bc86"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1028,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 1026,
        "length": 3,
        "offset": 41,
        "surroundingCode": "    public void T000_Items()\n    {\n      int count = 0;\n      Lifetime.Using(lifetime =>\n      {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "f3d7033286ccc4d311e97dbdf031bc2c19fdd0458a5951622ecb8bad5bb8303c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (elsewhere)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (elsewhere)",
  "detailsInfo": "Convert if declaration is not of a built-in or simple type and is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_Elsewhere.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1066,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 1064,
        "length": 12,
        "offset": 24,
        "surroundingCode": "      int x= 0 ;\n\n      Func<Action> FMakeAdder = () => { var a = x++; return () => entries.Add(a); };  // Fixes the X value at the moment of FMakeAdder call.\n\n      bool flag = false;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_Elsewhere"
  },
  "hash": "58edfabb4b64f60946ac4064cad91f19e0dc1626eda446e26d27e33d78137af5"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (elsewhere)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (elsewhere)",
  "detailsInfo": "Convert if declaration is not of a built-in or simple type and is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_Elsewhere.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 315,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 313,
        "length": 10,
        "offset": 81,
        "surroundingCode": "\n      Assertion.Assert(parameters.Length <= 7, \"parameters.Length <= 7\");\n      List<Type> list = new List<Type>();\n      foreach (var p in parameters)\n      {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestVarOrType_Elsewhere"
  },
  "hash": "82a2ca2d64a4072fd0e27091911744783ba17753b816d3378aaf4dad65cfefdb"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (elsewhere)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (elsewhere)",
  "detailsInfo": "Convert if declaration is not of a built-in or simple type and is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_Elsewhere.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 188,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 186,
        "length": 10,
        "offset": 73,
        "surroundingCode": "      long prev = 0;\n      ByteBufferAsyncProcessor buffer = null;\n      List<long> log = new List<long>();\n      \n      buffer = new ByteBufferAsyncProcessor(\"TestAsyncProcessor\", 8,"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_Elsewhere"
  },
  "hash": "dca157dd2415977393b82860a5792635dad3acc04a757f30909a5595b35374d4"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (when type is simple)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (simple types)",
  "detailsInfo": "Convert if simple type (not an array and does not have generic parameters) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_SimpleTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 30,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 28,
        "length": 12,
        "offset": 76,
        "surroundingCode": "    public static UnsafeReader CreateReader(byte* ptr, int len)\n    {\n      UnsafeReader reader = new UnsafeReader();\n      reader.Reset(ptr, len);\n      return reader;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_SimpleTypes"
  },
  "hash": "0e1e2c8c1d9a5bc3d3a4849bbbe4175bd72aeccd83d076efcbda9e86147e941a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (when type is simple)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (simple types)",
  "detailsInfo": "Convert if simple type (not an array and does not have generic parameters) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_SimpleTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/SingleThreadSchedulerTest.cs",
      "language": "C#",
      "line": 19,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 17,
        "length": 6,
        "offset": 100,
        "surroundingCode": "      var sc = SingleThreadScheduler.RunOnSeparateThread(TestLifetime, \"s\");\n      int x = 0;\n      Action a = () => { x++; };\n      \n      Assert.True(sc.IsIdle);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_SimpleTypes"
  },
  "hash": "3119f681cc762bc662140414268b2516517679364c77bdb2e758d6c909ad5194"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (when type is simple)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (simple types)",
  "detailsInfo": "Convert if simple type (not an array and does not have generic parameters) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_SimpleTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 655,
      "offset": 15,
      "length": 18,
      "code": {
        "startLine": 653,
        "length": 18,
        "offset": 34,
        "surroundingCode": "\n      // All pairs\n      foreach(LifetimeDefinition alpha in definitions)\n      {\n        if(alpha == null)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_SimpleTypes"
  },
  "hash": "53f387357dc49065f510ac4e02dbe1dc70544fa84e87c84e390d3daed9ba64a2"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (when type is simple)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (simple types)",
  "detailsInfo": "Convert if simple type (not an array and does not have generic parameters) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_SimpleTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/SingleThreadSchedulerTest.cs",
      "language": "C#",
      "line": 41,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 39,
        "length": 6,
        "offset": 29,
        "surroundingCode": "    {\n      int x = 0;\n      Action a = () => { x++; };\n\n      var ld = Lifetime.Define();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_SimpleTypes"
  },
  "hash": "5d096a688dbea25020514c777e73708c6e7ae1448877ee1d3109ec2a790e8e2f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (when type is simple)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (simple types)",
  "detailsInfo": "Convert if simple type (not an array and does not have generic parameters) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_SimpleTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SingleThreadScheduler.cs",
      "language": "C#",
      "line": 121,
      "offset": 7,
      "length": 18,
      "code": {
        "startLine": 119,
        "length": 18,
        "offset": 52,
        "surroundingCode": "      Assertion.AssertCurrentThread(Thread);\n\n      PrioritizedAction? prioritizedAction = blockIfNoActionAvailable ? myQueue.Storage.ExtractOrBlock() : myQueue.Storage.ExtractOrDefault();\n\n      if (prioritizedAction == null) return;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_SimpleTypes"
  },
  "hash": "6a8bbf86e5d79d0eff9b8e2e3347d23bf03773682ce90500ed68ef2e595956cc"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (when type is simple)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (simple types)",
  "detailsInfo": "Convert if simple type (not an array and does not have generic parameters) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_SimpleTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SocketWireTest.cs",
      "language": "C#",
      "line": 46,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 44,
        "length": 11,
        "offset": 42,
        "surroundingCode": "    static int FindFreePort()\n    {\n      TcpListener l = new TcpListener(IPAddress.Loopback, 0);\n      l.Start();\n      int port = ((IPEndPoint) l.LocalEndpoint).Port;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "SuggestVarOrType_SimpleTypes"
  },
  "hash": "6aea6e1d97df26d68abadce62b47c7fb959ce04c42a01fbfbfc6f1f1ca3ab74b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (when type is simple)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (simple types)",
  "detailsInfo": "Convert if simple type (not an array and does not have generic parameters) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_SimpleTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 427,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 425,
        "length": 5,
        "offset": 51,
        "surroundingCode": "      if (count < 0) return default(TDict);\n\n      TDict dict = constructor(count);\n      for (int i = 0; i < count; i++)\n      {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_SimpleTypes"
  },
  "hash": "936eb9f43a3663ade2f8cf2f7b5e78ba7bffdf793464907847f8feedc7951f30"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (when type is simple)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (simple types)",
  "detailsInfo": "Convert if simple type (not an array and does not have generic parameters) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_SimpleTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 190,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 188,
        "length": 2,
        "offset": 123,
        "surroundingCode": "    public static T? GetPropertyValueSafe<T>(this object o, string propertyName, T? defaultValue = default(T))\n    {\n      T? result = defaultValue;\n      try\n      {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_SimpleTypes"
  },
  "hash": "98a2110e081cae0a26ac0d85213dcd92e58a23c2206c14f9329c7eee1624de4a"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (when type is simple)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (simple types)",
  "detailsInfo": "Convert if simple type (not an array and does not have generic parameters) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_SimpleTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 964,
      "offset": 9,
      "length": 14,
      "code": {
        "startLine": 962,
        "length": 14,
        "offset": 17,
        "surroundingCode": "      {\n\n        AutoResetEvent sync = new AutoResetEvent(false);\n        var task = lt.StartAttached(TaskScheduler.Default, () => sync.WaitOne());\n        def.Terminate();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_SimpleTypes"
  },
  "hash": "a03dde32edad7aa436976e1459dc5efc2fef017a39f72307fb4580f831b877aa"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (when type is simple)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (simple types)",
  "detailsInfo": "Convert if simple type (not an array and does not have generic parameters) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_SimpleTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 319,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 317,
        "length": 8,
        "offset": 71,
        "surroundingCode": "    private SerializerPair CreateValueTupleSerializer<T>()\n    {\n      TypeInfo typeInfo = typeof(T).GetTypeInfo();\n      ReflectionSerializerVerifier.AssertRoot(typeInfo);\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestVarOrType_SimpleTypes"
  },
  "hash": "a1a4336909ddeca5474105b0d669d691e5f9b3144e3ded24767d6bc2fc48696b"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (when type is simple)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (simple types)",
  "detailsInfo": "Convert if simple type (not an array and does not have generic parameters) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_SimpleTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 659,
      "offset": 17,
      "length": 18,
      "code": {
        "startLine": 657,
        "length": 18,
        "offset": 143,
        "surroundingCode": "        if(alpha == null)\n          throw new ArgumentNullException(nameof(definitions), \"All definitions must be non-Null.\");\n        foreach(LifetimeDefinition betta in definitions)\n        {          \n          if(alpha != betta)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_SimpleTypes"
  },
  "hash": "b1d2ea3dbad0cafe5c6cb51e5b4e49ba26db41eac4a2ec3a10ee61e71837faed"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (when type is simple)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (simple types)",
  "detailsInfo": "Convert if simple type (not an array and does not have generic parameters) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_SimpleTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 202,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 200,
        "length": 8,
        "offset": 123,
        "surroundingCode": "        Assertion.Fail($\"Invalid scalar type: {typeof(T).ToString(true)}. Scalar types should be concrete types.\");\n\n      TypeInfo typeInfo = typeof(T).GetTypeInfo();\n      var allowNullable = ReflectionSerializerVerifier.CanBeNull(typeInfo);\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestVarOrType_SimpleTypes"
  },
  "hash": "b2311309756da8486fc45da79a0ddfe2d6ac57b7b793640c371b6dd50e2cff7e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (when type is simple)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (simple types)",
  "detailsInfo": "Convert if simple type (not an array and does not have generic parameters) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_SimpleTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 268,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 266,
        "length": 8,
        "offset": 50,
        "surroundingCode": "      mySerializers.Add(typeof(T), null!);\n\n      TypeInfo typeInfo = typeof(T).GetTypeInfo();\n      ReflectionSerializerVerifier.AssertRoot(typeInfo);\n      var isScalar = ReflectionSerializerVerifier.IsScalar(typeInfo);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestVarOrType_SimpleTypes"
  },
  "hash": "c8b5f45f9dcc39ca694af51522d29cd8bbbd6611d97096eefa6d9868e4c51e33"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (when type is simple)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (simple types)",
  "detailsInfo": "Convert if simple type (not an array and does not have generic parameters) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_SimpleTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGeneratorUtil.cs",
      "language": "C#",
      "line": 74,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 72,
        "length": 11,
        "offset": 117,
        "surroundingCode": "        task.Result.Advise(nestedCallsScheduler.Lifetime, result => { nestedCallsScheduler.Terminate(); });\n\n        RpcTimeouts timeoutsToUse = RpcTimeouts.GetRpcTimeouts(timeouts);\n        responseScheduler.MessageTimeout = timeoutsToUse.ErrorAwaitTime;\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestVarOrType_SimpleTypes"
  },
  "hash": "cb16d9fadeb6f67fb23597e55aa467af9b3b3fbca19ee876c04f2244c2f51cab"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (when type is simple)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (simple types)",
  "detailsInfo": "Convert if simple type (not an array and does not have generic parameters) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_SimpleTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/ReflectionExtensions.cs",
      "language": "C#",
      "line": 33,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 31,
        "length": 9,
        "offset": 119,
        "surroundingCode": "                throw new ArgumentNullException(nameof(sFieldName));\n            var type = obj.GetType();\n            FieldInfo field = type.TryGetField(sFieldName);\n            if(field == null)\n            {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "SuggestVarOrType_SimpleTypes"
  },
  "hash": "dc55a1bada092647e7df35bdc8cecea4c6ebb48039ef8a419dc1ebc7c4158f71"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (when type is simple)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (simple types)",
  "detailsInfo": "Convert if simple type (not an array and does not have generic parameters) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_SimpleTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 371,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 369,
        "length": 11,
        "offset": 171,
        "surroundingCode": "        parameters.Select(param => param.GetRequiredCustomModifiers()).ToArray(),\n        parameters.Select(param => param.GetOptionalCustomModifiers()).ToArray());\n      ILGenerator ilgen = methodbuilder.GetILGenerator();\n\n      // load IRdCall field for further call"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestVarOrType_SimpleTypes"
  },
  "hash": "ddd420dcaf326dd48a3e749a7cc7cd9533591443fb8a2a4cfe5fa44c11cb910c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (when type is simple)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (simple types)",
  "detailsInfo": "Convert if simple type (not an array and does not have generic parameters) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_SimpleTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdList.cs",
      "language": "C#",
      "line": 165,
      "offset": 7,
      "length": 1,
      "code": {
        "startLine": 163,
        "length": 1,
        "offset": 58,
        "surroundingCode": "        \n      var kind = (AddUpdateRemove) opType;\n      V value = default(V);\n      var isPut = kind == AddUpdateRemove.Add || kind == AddUpdateRemove.Update;\n      if (isPut)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "SuggestVarOrType_SimpleTypes"
  },
  "hash": "df8ce37f410fa7c625f083db70e18973354ec804c4015f9ea3ed4cccb55470cc"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (when type is simple)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (simple types)",
  "detailsInfo": "Convert if simple type (not an array and does not have generic parameters) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_SimpleTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 314,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 312,
        "length": 4,
        "offset": 65,
        "surroundingCode": "\n        var bindableInstance = instance as IRdBindable;\n        RdId id = default(RdId);\n        if (bindableInstance != null)\n          id = unsafeReader.ReadRdId();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestVarOrType_SimpleTypes"
  },
  "hash": "e11f75a85186316f0c33dc900023b6d16c82b0ec79bd05d94b9ffb0c4a8bc56f"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (when type is simple)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (simple types)",
  "detailsInfo": "Convert if simple type (not an array and does not have generic parameters) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_SimpleTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 362,
      "offset": 7,
      "length": 13,
      "code": {
        "startLine": 360,
        "length": 13,
        "offset": 54,
        "surroundingCode": "\n      var parameters = method.GetParameters();\n      MethodBuilder methodbuilder = typebuilder.DefineMethod(method.Name,\n        MethodAttributes.Final | MethodAttributes.Virtual | MethodAttributes.Private,\n        method.CallingConvention,"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SuggestVarOrType_SimpleTypes"
  },
  "hash": "e2a5a38ff68735e34f1b19ed14f4c4e8471eb1592e05b08cf178eabfebd57752"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (when type is simple)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (simple types)",
  "detailsInfo": "Convert if simple type (not an array and does not have generic parameters) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_SimpleTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 412,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 410,
        "length": 4,
        "offset": 50,
        "surroundingCode": "      if (count < 0) return default(TCol);\n\n      TCol col = constructor(count);\n      for (int i = 0; i < count; i++)\n      {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_SimpleTypes"
  },
  "hash": "edc23ebb31e2956b29287dd332e7054364d45a082350858c0a69b2ad5e32c66e"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (when type is simple)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (simple types)",
  "detailsInfo": "Convert if simple type (not an array and does not have generic parameters) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_SimpleTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/InternRoot.cs",
      "language": "C#",
      "line": 45,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 43,
        "length": 8,
        "offset": 60,
        "surroundingCode": "      if (myInverseMap.TryAdd(value, pair))\n      {\n        InternId allocatedId = new InternId(Interlocked.Increment(ref myInternedIdCounter) * 2);\n        \n        Assertion.Assert(allocatedId.IsLocal, \"Newly allocated ID must be local\");"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "SuggestVarOrType_SimpleTypes"
  },
  "hash": "f2ba0ee696b5d72a76c6ef5840effc98356d7c8f34fbcf972bfbb41dfbfcb7eb"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use deconstruction to swap variables",
  "tags": [
    "C#",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Swap via deconstruction",
  "detailsInfo": "Replace multiple assignments with single deconstructing assignment to perform swapping",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/JetPriorityQueue.cs",
      "language": "C#",
      "line": 136,
      "offset": 7,
      "length": 80,
      "code": {
        "startLine": 134,
        "length": 80,
        "offset": 52,
        "surroundingCode": "    private void Swap(ref int i, int j)\n    {\n      var s = myStorage[i];\n      myStorage[i] = myStorage[j];\n      myStorage[j] = s;\n\n      var v = myVersions[i];"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SwapViaDeconstruction"
  },
  "hash": "72a172c7b9914014967fe29bfbcb571aec54b39f314aae5508e9832547a492f9"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use deconstruction to swap variables",
  "tags": [
    "C#",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Swap via deconstruction",
  "detailsInfo": "Replace multiple assignments with single deconstructing assignment to perform swapping",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/JetPriorityQueue.cs",
      "language": "C#",
      "line": 140,
      "offset": 7,
      "length": 84,
      "code": {
        "startLine": 138,
        "length": 84,
        "offset": 31,
        "surroundingCode": "      myStorage[j] = s;\n\n      var v = myVersions[i];\n      myVersions[i] = myVersions[j];\n      myVersions[j] = v;\n\n      i = j;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SwapViaDeconstruction"
  },
  "hash": "c639e9c6d86529368cf0529ffe2bd943b0d25d6f8c673f00e496f2184459c776"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Some values of the enum are not processed inside 'switch' statement and are handled via default section",
  "tags": [
    "C#",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Some values of the enum are not processed inside switch: All, Custom, NestedType...",
  "detailsInfo": "Some values of the enum are not processed inside 'switch' statement and fall into default section. This might indicate unintentional handling of all enum values added after the switch was introduced, consider handling missing enum values explicitly [Learn more...](https://www.jetbrains.com/help/rider/SwitchStatementHandlesSomeKnownEnumValuesWithDefault.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 253,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 251,
        "length": 6,
        "offset": 89,
        "surroundingCode": "    private void ImplementMember(TypeBuilder typebuilder, MemberInfo member)\n    {\n      switch (member.MemberType)\n      {\n        case MemberTypes.Constructor:"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SwitchStatementHandlesSomeKnownEnumValuesWithDefault"
  },
  "hash": "88c5f971ff9a0a5a7c8fb3d796b82ef9c16feda899143ca7f21065ff7dea75eb"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Some values of the enum are not processed inside 'switch' statement and are handled via default section",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Some values of the enum are not processed inside switch: TypeInfo, Custom, NestedType...",
  "detailsInfo": "Some values of the enum are not processed inside 'switch' statement and fall into default section. This might indicate unintentional handling of all enum values added after the switch was introduced, consider handling missing enum values explicitly [Learn more...](https://www.jetbrains.com/help/rider/SwitchStatementHandlesSomeKnownEnumValuesWithDefault.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 253,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 251,
        "length": 6,
        "offset": 89,
        "surroundingCode": "    private void ImplementMember(TypeBuilder typebuilder, MemberInfo member)\n    {\n      switch (member.MemberType)\n      {\n        case MemberTypes.Constructor:"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SwitchStatementHandlesSomeKnownEnumValuesWithDefault"
  },
  "hash": "f18436a595a9dc292c5fed6835e50771a73391555025945a262b08f86b842492"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Some values of the enum are not processed inside 'switch' statement",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Some values of the enum are not processed inside switch: Constructor, Event, Field...",
  "detailsInfo": "Some values of the enum are not processed inside 'switch' statement [Learn more...](https://www.jetbrains.com/help/rider/SwitchStatementMissingSomeEnumCasesNoDefault.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 471,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 469,
        "length": 6,
        "offset": 143,
        "surroundingCode": "      foreach (var member in rpcInterface.GetMembers(BindingFlags.Instance | BindingFlags.DeclaredOnly | BindingFlags.Public))\n      {\n        switch (member.MemberType)\n        {\n          case MemberTypes.Method:"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SwitchStatementMissingSomeEnumCasesNoDefault"
  },
  "hash": "3575814d03bae8bbf52851e4eb8746f8ddeba6835fd088445b3e457ef7b1532d"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Some values of the enum are not processed inside 'switch' statement",
  "tags": [
    "C#",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Some values of the enum are not processed inside switch: All, Constructor, Custom...",
  "detailsInfo": "Some values of the enum are not processed inside 'switch' statement [Learn more...](https://www.jetbrains.com/help/rider/SwitchStatementMissingSomeEnumCasesNoDefault.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 471,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 469,
        "length": 6,
        "offset": 143,
        "surroundingCode": "      foreach (var member in rpcInterface.GetMembers(BindingFlags.Instance | BindingFlags.DeclaredOnly | BindingFlags.Public))\n      {\n        switch (member.MemberType)\n        {\n          case MemberTypes.Method:"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "SwitchStatementMissingSomeEnumCasesNoDefault"
  },
  "hash": "abe1b4e74335172e6412e8aca2e27c0f3bfa020cc6ff4e6ab76645e4b8644210"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Tail recursive call can be replaced with loop",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Tail recursive call can be replaced with loop",
  "detailsInfo": "Tail recursive calls can be replaced with loop for better performance and protection from possible stack overflows",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/SerializersTest.cs",
      "language": "C#",
      "line": 46,
      "offset": 14,
      "length": 11,
      "code": {
        "startLine": 44,
        "length": 11,
        "offset": 108,
        "surroundingCode": "      if (!(a.Parent is RName aParent) || !(b.Parent is RName bParent))\n        return a == b;\n      return RNameEquals(aParent, bParent);\n    }\n  }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "TailRecursiveCall"
  },
  "hash": "625cda4697ec292e13b47ddafc9f880d0cef4dbf30c24e23a1aeb3927525be33"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Tail recursive call can be replaced with loop",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Tail recursive call can be replaced with loop",
  "detailsInfo": "Tail recursive calls can be replaced with loop for better performance and protection from possible stack overflows",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ExceptionEx.cs",
      "language": "C#",
      "line": 39,
      "offset": 53,
      "length": 19,
      "code": {
        "startLine": 37,
        "length": 19,
        "offset": 95,
        "surroundingCode": "                 \n                default:\n                    return exception.InnerException.IsOperationCanceled();\n            }\n        }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "TailRecursiveCall"
  },
  "hash": "a981c2916c203d688ea72d37240e4b233cf05ce9ba5773ec08644aacd05d7172"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Type parameter could be declared as covariant or contravariant",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "The type parameter 'TReq' could be declared as covariant",
  "detailsInfo": "Type parameter could be declared as covariant or contravariant",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/Interfaces.cs",
      "language": "C#",
      "line": 15,
      "offset": 32,
      "length": 4,
      "code": {
        "startLine": 13,
        "length": 4,
        "offset": 38,
        "surroundingCode": "  }\n  \n  public interface IRdEndpoint<TReq, TRes>\n  {\n    void Set(Func<Lifetime, TReq, RdTask<TRes>> handler, IScheduler? cancellationScheduler = null, IScheduler? handlerScheduler = null);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "TypeParameterCanBeVariant"
  },
  "hash": "24385e9a15acd359c62eb831a4e5ec6a27ee7ea32b864ee9b3f4242cd5f95fed"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Type parameter could be declared as covariant or contravariant",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "The type parameter 'TBase' could be declared as contravariant",
  "detailsInfo": "Type parameter could be declared as covariant or contravariant",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/IInternRoot.cs",
      "language": "C#",
      "line": 11,
      "offset": 32,
      "length": 5,
      "code": {
        "startLine": 9,
        "length": 5,
        "offset": 88,
        "surroundingCode": "  /// Interns values sent over protocol\n  /// </summary>\n  public interface IInternRoot<TBase> : IRdReactive\n  {\n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "TypeParameterCanBeVariant"
  },
  "hash": "6c0415c2bc7ae682ba7d915420fe8bb8045cd3d20059eb476889527dceb7a565"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Type parameter could be declared as covariant or contravariant",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "The type parameter 'T' could be declared as contravariant",
  "detailsInfo": "Type parameter could be declared as covariant or contravariant",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 21,
      "offset": 33,
      "length": 1,
      "code": {
        "startLine": 19,
        "length": 1,
        "offset": 37,
        "surroundingCode": "  }\n\n  public interface ISendChannel<T>\n  {\n    void SendBlocking(T msg);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "TypeParameterCanBeVariant"
  },
  "hash": "8db1d3dc291bbfbf7e32d40d6d56668817a29540bd2bda4530835fc5b9dc391b"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Field 'Value9' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 243,
      "offset": 19,
      "length": 6,
      "code": {
        "startLine": 241,
        "length": 6,
        "offset": 70,
        "surroundingCode": "      public long Value7;\n      public long Value8;\n      public long Value9;\n      public long Value10;\n      public long Value11;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "03bcdcd9709be19b8acede7f51302605fa9516c27ea221d5282b2b08d7406f1e"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Field 'Value8' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 242,
      "offset": 19,
      "length": 6,
      "code": {
        "startLine": 240,
        "length": 6,
        "offset": 70,
        "surroundingCode": "      public long Value6;\n      public long Value7;\n      public long Value8;\n      public long Value9;\n      public long Value10;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "1d5be5f6c2eb13f0e6cc944b4d751331fc907acb4a6eb3faa291cc210bce1664"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Field 'Value2' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 236,
      "offset": 19,
      "length": 6,
      "code": {
        "startLine": 234,
        "length": 6,
        "offset": 70,
        "surroundingCode": "      public long Value0;\n      public long Value1;\n      public long Value2;\n      public long Value3;\n      public long Value4;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "2110b7af0666cf5cf5b206b9af8d76acf7fd522e184d01f25b02cef21af9670c"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Field 'Value10' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 244,
      "offset": 19,
      "length": 7,
      "code": {
        "startLine": 242,
        "length": 7,
        "offset": 70,
        "surroundingCode": "      public long Value8;\n      public long Value9;\n      public long Value10;\n      public long Value11;\n      public long Value12;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "220f2231a1c3a7e99f0a230d3e4ec4605dc6ccd2e76eb427cf292fcd68381f23"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Field 'Value12' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 246,
      "offset": 19,
      "length": 7,
      "code": {
        "startLine": 244,
        "length": 7,
        "offset": 72,
        "surroundingCode": "      public long Value10;\n      public long Value11;\n      public long Value12;\n      public long Value13;\n      public long Value14;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "2b347c7e9a7f730b07a2c2c19b1196f05198d7213642adbd1437dc7410d6364b"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Field 'Value0' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 234,
      "offset": 19,
      "length": 6,
      "code": {
        "startLine": 232,
        "length": 6,
        "offset": 54,
        "surroundingCode": "    private struct HugeStruct\n    {\n      public long Value0;\n      public long Value1;\n      public long Value2;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "3800598678710a6765245297f9ea2f490d6bc60f66be845ea1052dad5399b329"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Field 'Value25' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 259,
      "offset": 19,
      "length": 7,
      "code": {
        "startLine": 257,
        "length": 7,
        "offset": 72,
        "surroundingCode": "      public long Value23;\n      public long Value24;\n      public long Value25;\n      public long Value26;\n      public long Value27;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "40e669594f8ccee166adf8af4d20689c64df620885b451fc028d89baaf04035c"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Field 'Value4' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 238,
      "offset": 19,
      "length": 6,
      "code": {
        "startLine": 236,
        "length": 6,
        "offset": 70,
        "surroundingCode": "      public long Value2;\n      public long Value3;\n      public long Value4;\n      public long Value5;\n      public long Value6;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "46e6504d4285b9502b041f870eae76e189b370f063bf8da52a3a13f48b8b7256"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Field 'Value26' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 260,
      "offset": 19,
      "length": 7,
      "code": {
        "startLine": 258,
        "length": 7,
        "offset": 72,
        "surroundingCode": "      public long Value24;\n      public long Value25;\n      public long Value26;\n      public long Value27;\n      public long Value28;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "4836de5bd793b36c21c57069e154eeeb7f913f923dd626c9e4d28aca9893a478"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Field 'Value21' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 255,
      "offset": 19,
      "length": 7,
      "code": {
        "startLine": 253,
        "length": 7,
        "offset": 72,
        "surroundingCode": "      public long Value19;\n      public long Value20;\n      public long Value21;\n      public long Value22;\n      public long Value23;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "4e75b191f62567013f5a97e48116b303f4e37f0c6707a292130345cb60c8534e"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Field 'Value13' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 247,
      "offset": 19,
      "length": 7,
      "code": {
        "startLine": 245,
        "length": 7,
        "offset": 72,
        "surroundingCode": "      public long Value11;\n      public long Value12;\n      public long Value13;\n      public long Value14;\n      public long Value15;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "5b28f18d356bf60be80b554d02f64d56277def76c4c3b0e6401d7ce454108ae2"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Field 'Value17' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 251,
      "offset": 19,
      "length": 7,
      "code": {
        "startLine": 249,
        "length": 7,
        "offset": 72,
        "surroundingCode": "      public long Value15;\n      public long Value16;\n      public long Value17;\n      public long Value18;\n      public long Value19;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "5bc67893c80ad2508133c98a0b3e8a83d996c71a32a3e020702d7976acebfbc0"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Field 'Value5' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 239,
      "offset": 19,
      "length": 6,
      "code": {
        "startLine": 237,
        "length": 6,
        "offset": 70,
        "surroundingCode": "      public long Value3;\n      public long Value4;\n      public long Value5;\n      public long Value6;\n      public long Value7;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "5ca5511a0107da7882ce5de45197e3a42359aea447b66ae468e02766e54a3ba2"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Field 'Value1' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 235,
      "offset": 19,
      "length": 6,
      "code": {
        "startLine": 233,
        "length": 6,
        "offset": 50,
        "surroundingCode": "    {\n      public long Value0;\n      public long Value1;\n      public long Value2;\n      public long Value3;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "65238752cd43e47328a61220b21d5931ec03477eb6f00977a60ca01f93130750"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Field 'Value19' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 253,
      "offset": 19,
      "length": 7,
      "code": {
        "startLine": 251,
        "length": 7,
        "offset": 72,
        "surroundingCode": "      public long Value17;\n      public long Value18;\n      public long Value19;\n      public long Value20;\n      public long Value21;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "65855c3aa37947bdd3cd18ae5065a31e7f5177209947d281ba1e94ab5ea3b94d"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Field 'Value6' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 240,
      "offset": 19,
      "length": 6,
      "code": {
        "startLine": 238,
        "length": 6,
        "offset": 70,
        "surroundingCode": "      public long Value4;\n      public long Value5;\n      public long Value6;\n      public long Value7;\n      public long Value8;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "6e090483d5b41b3959389eac09009a9500a9ace1296a18e9b0ee9ae99349acd7"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Field 'Value27' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 261,
      "offset": 19,
      "length": 7,
      "code": {
        "startLine": 259,
        "length": 7,
        "offset": 72,
        "surroundingCode": "      public long Value25;\n      public long Value26;\n      public long Value27;\n      public long Value28;\n      public long Value29;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "72872d37071e295e0941def8a21f370e1f90e012cbd04015af1355d21e575007"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Field 'Value15' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 249,
      "offset": 19,
      "length": 7,
      "code": {
        "startLine": 247,
        "length": 7,
        "offset": 72,
        "surroundingCode": "      public long Value13;\n      public long Value14;\n      public long Value15;\n      public long Value16;\n      public long Value17;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "7347e4f73c3f6cfba4d48756a8cabd06bedfdf9b57862a76d26a9fe4b488304e"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Field 'Value16' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 250,
      "offset": 19,
      "length": 7,
      "code": {
        "startLine": 248,
        "length": 7,
        "offset": 72,
        "surroundingCode": "      public long Value14;\n      public long Value15;\n      public long Value16;\n      public long Value17;\n      public long Value18;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "81aad57050fbeabe111329fcb72c8a3e9aa2da0158b13cda2d4d2068f87de494"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Field 'Value11' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 245,
      "offset": 19,
      "length": 7,
      "code": {
        "startLine": 243,
        "length": 7,
        "offset": 71,
        "surroundingCode": "      public long Value9;\n      public long Value10;\n      public long Value11;\n      public long Value12;\n      public long Value13;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "91e49444bb966fa5999e35bec20012a53bbbb3ffbaf0ef1add012d4f69d63648"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Field 'Value3' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 237,
      "offset": 19,
      "length": 6,
      "code": {
        "startLine": 235,
        "length": 6,
        "offset": 70,
        "surroundingCode": "      public long Value1;\n      public long Value2;\n      public long Value3;\n      public long Value4;\n      public long Value5;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "92ffc6e9d966c962b465b4ea30629cdf192a83581bc3ea77c7ec5218d41ce3a9"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Field 'Value20' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 254,
      "offset": 19,
      "length": 7,
      "code": {
        "startLine": 252,
        "length": 7,
        "offset": 72,
        "surroundingCode": "      public long Value18;\n      public long Value19;\n      public long Value20;\n      public long Value21;\n      public long Value22;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "9968f68e64096498340e453d7b3c2aeceaf9910ea15424376a81b16d18b297f8"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Field 'Value24' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 258,
      "offset": 19,
      "length": 7,
      "code": {
        "startLine": 256,
        "length": 7,
        "offset": 72,
        "surroundingCode": "      public long Value22;\n      public long Value23;\n      public long Value24;\n      public long Value25;\n      public long Value26;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "b0f0c9969a600f9a7315b5632de51a7e97d303f327fa6c1d6cb9068865626094"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Field 'Value28' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 262,
      "offset": 19,
      "length": 7,
      "code": {
        "startLine": 260,
        "length": 7,
        "offset": 72,
        "surroundingCode": "      public long Value26;\n      public long Value27;\n      public long Value28;\n      public long Value29;\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "b19881bf98aa2fe554556bd9c1932a2533fffab7d649edca3d4e4f9e37bfd60e"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Field 'Value22' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 256,
      "offset": 19,
      "length": 7,
      "code": {
        "startLine": 254,
        "length": 7,
        "offset": 72,
        "surroundingCode": "      public long Value20;\n      public long Value21;\n      public long Value22;\n      public long Value23;\n      public long Value24;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "b80056d6a0de2d24b3f1af738b79dec6e1f44fb5d22b82a1e844d3a88f132231"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Field 'Value14' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 248,
      "offset": 19,
      "length": 7,
      "code": {
        "startLine": 246,
        "length": 7,
        "offset": 72,
        "surroundingCode": "      public long Value12;\n      public long Value13;\n      public long Value14;\n      public long Value15;\n      public long Value16;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "bb1b8c1e947d73f5876cec522931ec1503ee350dd3fe1c4144cd9505265772b4"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Field 'Value29' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 263,
      "offset": 19,
      "length": 7,
      "code": {
        "startLine": 261,
        "length": 7,
        "offset": 72,
        "surroundingCode": "      public long Value27;\n      public long Value28;\n      public long Value29;\n\n      public static unsafe HugeStruct Create()"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "d2f39eee1118af1f8d718ea7d497923b7e2e04bcae3d583f38d809e547593f47"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Field 'Value18' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 252,
      "offset": 19,
      "length": 7,
      "code": {
        "startLine": 250,
        "length": 7,
        "offset": 72,
        "surroundingCode": "      public long Value16;\n      public long Value17;\n      public long Value18;\n      public long Value19;\n      public long Value20;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "f091b66bf1d102b8eb9bbb765b2071123c8b1f1939861cb662c8c45fcc73c16b"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Field 'Value7' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 241,
      "offset": 19,
      "length": 6,
      "code": {
        "startLine": 239,
        "length": 6,
        "offset": 70,
        "surroundingCode": "      public long Value5;\n      public long Value6;\n      public long Value7;\n      public long Value8;\n      public long Value9;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "f91fe3469438564a15993d462d108e7df102143473859a61e7287f2fdb5601df"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Unassigned field",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Field 'Value23' is never assigned",
  "detailsInfo": "Field is never assigned (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimedListTest.cs",
      "language": "C#",
      "line": 257,
      "offset": 19,
      "length": 7,
      "code": {
        "startLine": 255,
        "length": 7,
        "offset": 72,
        "surroundingCode": "      public long Value21;\n      public long Value22;\n      public long Value23;\n      public long Value24;\n      public long Value25;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnassignedField.Compiler"
  },
  "hash": "fba2546e6bed545279d1d6a5e6ca74b1bdad729727526253cf084446a736a76c"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Unassigned field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'IsMaster' is never assigned",
  "detailsInfo": "Field is never assigned",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdPerContextMap.cs",
      "language": "C#",
      "line": 25,
      "offset": 21,
      "length": 8,
      "code": {
        "startLine": 23,
        "length": 8,
        "offset": 31,
        "surroundingCode": "        }\n\n        public bool IsMaster;\n\n        public override void OnWireReceived(UnsafeReader reader)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnassignedField.Global"
  },
  "hash": "0fc7167962e05e0cd6c1af78c07ef7e4f3de48aaf108a9b33e9e8d9bd411c8b7"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Unassigned field (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Next' is never assigned",
  "detailsInfo": "Field is never assigned",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 237,
      "offset": 26,
      "length": 4,
      "code": {
        "startLine": 235,
        "length": 4,
        "offset": 67,
        "surroundingCode": "      public sealed class RedNode\n      {\n        public BlackNode Next;\n      }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnassignedField.Global"
  },
  "hash": "9b7f6ef592afdb51135819821c0aa9eb0c2063f1121e042ac430cddf2f499198"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Auto-property accessor is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Auto-property accessor 'ReturnValue.get' is never used",
  "detailsInfo": "Accessor in auto-property is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/NullableAttributes.cs",
      "language": "C#",
      "line": 143,
      "offset": 35,
      "length": 4,
      "code": {
        "startLine": 141,
        "length": 4,
        "offset": 99,
        "surroundingCode": "\n        /// <summary>Gets the return value condition.</summary>\n        public bool ReturnValue { get; }\n\n        /// <summary>Gets field or property member names.</summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedAutoPropertyAccessor.Global"
  },
  "hash": "04a13041e206975ece46c402e1f3f552a65dab978a75cb04af6673775f3a55c7"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Auto-property accessor is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Auto-property accessor 'WriteValueDelegate.get' is never used",
  "detailsInfo": "Accessor in auto-property is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/Example/CustomReactive.cs",
      "language": "C#",
      "line": 18,
      "offset": 54,
      "length": 4,
      "code": {
        "startLine": 16,
        "length": 4,
        "offset": 195,
        "surroundingCode": "    public CtxWriteDelegate<T1> WriteKeyDelegate { get; private set; }\n    public CtxReadDelegate<T2> ReadValueDelegate { get; private set; }\n    public CtxWriteDelegate<T2> WriteValueDelegate { get; private set; }\n\n    [UsedImplicitly]"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedAutoPropertyAccessor.Global"
  },
  "hash": "0b6e4aba97d533e89f3fdd20ae2baecbe160e891ce8255c3bf72c4b32f95caa2"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Auto-property accessor is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Auto-property accessor 'ReturnValue.get' is never used",
  "detailsInfo": "Accessor in auto-property is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/NullableAttributes.cs",
      "language": "C#",
      "line": 52,
      "offset": 35,
      "length": 4,
      "code": {
        "startLine": 50,
        "length": 4,
        "offset": 99,
        "surroundingCode": "\n        /// <summary>Gets the return value condition.</summary>\n        public bool ReturnValue { get; }\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedAutoPropertyAccessor.Global"
  },
  "hash": "161d9fa73b2b03df5a51fa51ff8da295fc176e9bd95a2219461e4665b17c1639"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Auto-property accessor is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Auto-property accessor 'Scheduler.get' is never used",
  "detailsInfo": "Accessor in auto-property is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/IWire.cs",
      "language": "C#",
      "line": 37,
      "offset": 38,
      "length": 4,
      "code": {
        "startLine": 35,
        "length": 4,
        "offset": 97,
        "surroundingCode": "  {    \n    protected readonly MessageBroker MessageBroker;\n    protected IScheduler Scheduler { get; }\n    private ProtocolContexts myContexts;\n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedAutoPropertyAccessor.Global"
  },
  "hash": "1913e2ca6bb99848135aaf3984c766021a05dc182e7c422ede2dd0f9969f60bf"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Auto-property accessor is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Auto-property accessor 'Value.get' is never used",
  "detailsInfo": "Accessor in auto-property is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 418,
      "offset": 27,
      "length": 4,
      "code": {
        "startLine": 416,
        "length": 4,
        "offset": 35,
        "surroundingCode": "      }\n\n      public long Value { get; set; }\n      public int SetOnly { get; }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedAutoPropertyAccessor.Global"
  },
  "hash": "2cbfca142b96e1e52e910cd7d2369dfba430053f17345fe249f5345b84b1ff7f"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Auto-property accessor is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Auto-property accessor 'Members.get' is never used",
  "detailsInfo": "Accessor in auto-property is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/NullableAttributes.cs",
      "language": "C#",
      "line": 146,
      "offset": 35,
      "length": 4,
      "code": {
        "startLine": 144,
        "length": 4,
        "offset": 103,
        "surroundingCode": "\n        /// <summary>Gets field or property member names.</summary>\n        public string[] Members { get; }\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedAutoPropertyAccessor.Global"
  },
  "hash": "740a5f54a2e4d091f361daa12c98e250051d0b87792c3f3f9a047b72cef72d02"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Auto-property accessor is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Auto-property accessor 'ParameterValue.get' is never used",
  "detailsInfo": "Accessor in auto-property is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/NullableAttributes.cs",
      "language": "C#",
      "line": 85,
      "offset": 38,
      "length": 4,
      "code": {
        "startLine": 83,
        "length": 4,
        "offset": 105,
        "surroundingCode": "\n        /// <summary>Gets the condition parameter value.</summary>\n        public bool ParameterValue { get; }\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedAutoPropertyAccessor.Global"
  },
  "hash": "796d55bf21b8f96e5dc12d2513b32b8411763b9af1cbc53bbbdeb6812399a874"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Auto-property accessor is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Auto-property accessor 'ParameterName.get' is never used",
  "detailsInfo": "Accessor in auto-property is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/CallerArgumentExpressionAttribute.cs",
      "language": "C#",
      "line": 18,
      "offset": 35,
      "length": 4,
      "code": {
        "startLine": 16,
        "length": 4,
        "offset": 41,
        "surroundingCode": "    }\n\n    public string ParameterName { get; }\n  }\n}"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedAutoPropertyAccessor.Global"
  },
  "hash": "82bb8e852e5266bc826d3c99a4ef15616d7686668bbb5acd811544416d4a4076"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Auto-property accessor is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Auto-property accessor 'Arguments.get' is never used",
  "detailsInfo": "Accessor in auto-property is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/InterpolatedStringHandlerArgumentAttribute.cs",
      "language": "C#",
      "line": 25,
      "offset": 33,
      "length": 4,
      "code": {
        "startLine": 23,
        "length": 4,
        "offset": 242,
        "surroundingCode": "    /// <summary>Gets the names of the arguments that should be passed to the handler.</summary>\n    /// <remarks><see langword=\"null\"/> may be used as the name of the receiver in an instance method.</remarks>\n    public string[] Arguments { get; }\n  }\n}"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedAutoPropertyAccessor.Global"
  },
  "hash": "87395da44322d11af113240aca873a479f55729cb49dc2aeb7f1a8135227d6f8"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Auto-property accessor is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Auto-property accessor 'EnabledLevel.get' is never used",
  "detailsInfo": "Accessor in auto-property is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.Cross/Util/Logging.cs",
      "language": "C#",
      "line": 113,
      "offset": 40,
      "length": 4,
      "code": {
        "startLine": 111,
        "length": 4,
        "offset": 96,
        "surroundingCode": "  public class CrossTestsLogFactory : LogFactoryBase\n  {\n    public LoggingLevel EnabledLevel { get; }\n    public TextWriter Writer { get; }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.Cross",
    "inspectionName": "UnusedAutoPropertyAccessor.Global"
  },
  "hash": "886be51911af07acb40ef990cafe8fa12c20b8f28a8f6133c1cca2a5d5787f52"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Auto-property accessor is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Auto-property accessor 'ReadValueDelegate.get' is never used",
  "detailsInfo": "Accessor in auto-property is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/Example/CustomReactive.cs",
      "language": "C#",
      "line": 17,
      "offset": 52,
      "length": 4,
      "code": {
        "startLine": 15,
        "length": 4,
        "offset": 191,
        "surroundingCode": "    public CtxReadDelegate<T1> ReadKeyDelegate { get; private set; }\n    public CtxWriteDelegate<T1> WriteKeyDelegate { get; private set; }\n    public CtxReadDelegate<T2> ReadValueDelegate { get; private set; }\n    public CtxWriteDelegate<T2> WriteValueDelegate { get; private set; }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedAutoPropertyAccessor.Global"
  },
  "hash": "89454baba875de2c2c3e5fb56d2f6ac6f785a35e8e22b580125dca09318a491e"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Auto-property accessor is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Auto-property accessor 'SetOnly.get' is never used",
  "detailsInfo": "Accessor in auto-property is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 419,
      "offset": 28,
      "length": 4,
      "code": {
        "startLine": 417,
        "length": 4,
        "offset": 66,
        "surroundingCode": "\n      public long Value { get; set; }\n      public int SetOnly { get; }\n    }\n  }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedAutoPropertyAccessor.Global"
  },
  "hash": "90b7589fc28b0ca87bc1af37e869218751c39dcfa3e22f404e85bdbdce008893"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Auto-property accessor is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Auto-property accessor 'ParameterName.get' is never used",
  "detailsInfo": "Accessor in auto-property is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/NullableAttributes.cs",
      "language": "C#",
      "line": 66,
      "offset": 39,
      "length": 4,
      "code": {
        "startLine": 64,
        "length": 4,
        "offset": 106,
        "surroundingCode": "\n        /// <summary>Gets the associated parameter name.</summary>\n        public string ParameterName { get; }\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedAutoPropertyAccessor.Global"
  },
  "hash": "b0841a92422339c1d32fd221d4cb5c5b27d20890ce84996a3c53247ed095b38b"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Auto-property accessor is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Auto-property accessor 'ReturnValue.get' is never used",
  "detailsInfo": "Accessor in auto-property is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/NullableAttributes.cs",
      "language": "C#",
      "line": 38,
      "offset": 35,
      "length": 4,
      "code": {
        "startLine": 36,
        "length": 4,
        "offset": 99,
        "surroundingCode": "\n        /// <summary>Gets the return value condition.</summary>\n        public bool ReturnValue { get; }\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedAutoPropertyAccessor.Global"
  },
  "hash": "c9c98303f437fede0a42b1b028a33824c2acc6f5c5961044fceb94f87ded4e27"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Auto-property accessor is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Auto-property accessor 'WriteKeyDelegate.get' is never used",
  "detailsInfo": "Accessor in auto-property is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/Example/CustomReactive.cs",
      "language": "C#",
      "line": 16,
      "offset": 52,
      "length": 4,
      "code": {
        "startLine": 14,
        "length": 4,
        "offset": 121,
        "surroundingCode": "\n    public CtxReadDelegate<T1> ReadKeyDelegate { get; private set; }\n    public CtxWriteDelegate<T1> WriteKeyDelegate { get; private set; }\n    public CtxReadDelegate<T2> ReadValueDelegate { get; private set; }\n    public CtxWriteDelegate<T2> WriteValueDelegate { get; private set; }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedAutoPropertyAccessor.Global"
  },
  "hash": "c9f28211ef251e02a9f197f13c2e8633ac8584b218b7fa5317aab3bf43e8b418"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Auto-property accessor is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Auto-property accessor 'Members.get' is never used",
  "detailsInfo": "Accessor in auto-property is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/NullableAttributes.cs",
      "language": "C#",
      "line": 109,
      "offset": 35,
      "length": 4,
      "code": {
        "startLine": 107,
        "length": 4,
        "offset": 103,
        "surroundingCode": "\n        /// <summary>Gets field or property member names.</summary>\n        public string[] Members { get; }\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedAutoPropertyAccessor.Global"
  },
  "hash": "d9f10554efa1c1342f9c38c9af2bdd94b123c651b87ccef394ed4366e4245011"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Auto-property accessor is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Auto-property accessor 'Registrar.get' is never used",
  "detailsInfo": "Accessor in auto-property is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFacade.cs",
      "language": "C#",
      "line": 20,
      "offset": 40,
      "length": 4,
      "code": {
        "startLine": 18,
        "length": 4,
        "offset": 91,
        "surroundingCode": "    public IProxyGenerator ProxyGenerator { get; }\n\n    public ITypesRegistrar Registrar { get; }\n\n    public ReflectionSerializersFacade() : this(null)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedAutoPropertyAccessor.Global"
  },
  "hash": "dfd28db7b5974e7f085a080c688b313ec5a3d3c716e2c46bc9fe7d3e28272c81"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Auto-property accessor is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Auto-property accessor 'ReadKeyDelegate.get' is never used",
  "detailsInfo": "Accessor in auto-property is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/Example/CustomReactive.cs",
      "language": "C#",
      "line": 15,
      "offset": 50,
      "length": 4,
      "code": {
        "startLine": 13,
        "length": 4,
        "offset": 77,
        "surroundingCode": "    public int EventCount;\n\n    public CtxReadDelegate<T1> ReadKeyDelegate { get; private set; }\n    public CtxWriteDelegate<T1> WriteKeyDelegate { get; private set; }\n    public CtxReadDelegate<T2> ReadValueDelegate { get; private set; }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedAutoPropertyAccessor.Global"
  },
  "hash": "fca189af44984bebf233d118fc5e66662df8722995d56ab828bb84b740eda0a6"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'ReadAbstract' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 18,
      "offset": 39,
      "length": 12,
      "code": {
        "startLine": 16,
        "length": 12,
        "offset": 161,
        "surroundingCode": "    public static readonly CtxWriteDelegate<T> Write = (ctx, writer, value) => ctx.Serializers.Write(ctx, writer, value);\n\n    public static CtxReadDelegate<T?> ReadAbstract(CtxReadDelegate<T> unknownInstanceReader)\n    {\n      return (ctx, reader) => ctx.Serializers.Read<T>(ctx, reader, unknownInstanceReader);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "00c6f2d4f4d90a8fd4568c64cccc438f9a61f979b61e380269fdefa59ac9d74d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'NextFalseValueAsync' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ReactiveEx.cs",
      "language": "C#",
      "line": 407,
      "offset": 30,
      "length": 19,
      "code": {
        "startLine": 405,
        "length": 19,
        "offset": 40,
        "surroundingCode": "    }\n    \n    public static Task<bool> NextFalseValueAsync(this ISource<bool> source, Lifetime lifetime)\n    {\n      return source.NextValueAsync(lifetime, value => !value);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "00dd5645b757a5bb7b1e12e982e4a62165f9d3a825013fa4f1e1f1dc8b052dac"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Write' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSignal.cs",
      "language": "C#",
      "line": 28,
      "offset": 24,
      "length": 5,
      "code": {
        "startLine": 26,
        "length": 5,
        "offset": 30,
        "surroundingCode": "    }\n\n    public static void Write(SerializationCtx ctx, UnsafeWriter writer, RdSignal<T> value)\n    {\n      writer.Write(value.RdId);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "0143fd1eda5e828434f078867f687af674219f397b1e415b1477891be9b66657"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'Read' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/PolymorphicScalarIntrinsicTest.cs",
      "language": "C#",
      "line": 86,
      "offset": 26,
      "length": 4,
      "code": {
        "startLine": 84,
        "length": 4,
        "offset": 63,
        "surroundingCode": "      public Guid Mark { get; set; }\n\n      public static Base Read(UnsafeReader reader)\n      {\n        Assert.AreEqual(\"base\", reader.ReadString());"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "021aac3013f19279ce742e30d746dbc59002862cc9dafb0f33d4e2c54372e2e8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'AddRef' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 641,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 639,
        "length": 6,
        "offset": 65,
        "surroundingCode": "\n    [Obsolete(\"Use `KeepAlive() instead`\")]\n    public Lifetime AddRef(object @object) => KeepAlive(@object);\n\n    "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "03f3dc77e077e4f73d417c62cfc248e97d831fc16819362c8890f7610df04e47"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'ByteDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 554,
      "offset": 48,
      "length": 12,
      "code": {
        "startLine": 552,
        "length": 12,
        "offset": 145,
        "surroundingCode": "\n    public static readonly WriteDelegate<bool> BooleanDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<byte> ByteDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Guid> GuidDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<char> CharDelegate = (writer, x) => writer.Write(x);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "04d04006f58d603724e33c3d31accebf7745b8bb1c96213bd09378b54d71791e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'With' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 36,
      "offset": 24,
      "length": 4,
      "code": {
        "startLine": 34,
        "length": 4,
        "offset": 87,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public static void With(byte[] data, Action<UnsafeReader> action)\n    {\n      fixed (byte* resptr = data)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "05a715ec5c82e34bcc10c51abd7b6d102d800a8b84beaf5b84e1c1f5c7099cd1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Enum member 'PROCESS_VM_WRITE' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Interop/Windows.cs",
      "language": "C#",
      "line": 47,
      "offset": 9,
      "length": 16,
      "code": {
        "startLine": 45,
        "length": 16,
        "offset": 76,
        "surroundingCode": "        PROCESS_VM_OPERATION = 0x8,\n        PROCESS_VM_READ = 0x10,\n        PROCESS_VM_WRITE = 0x20,\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "0619088e3c407186d71fd01e181f19bf2a437dab4bef67fbc8dbb3f712e94815"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'InterpolatedStringHandlerArgumentAttribute' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/InterpolatedStringHandlerArgumentAttribute.cs",
      "language": "C#",
      "line": 21,
      "offset": 12,
      "length": 42,
      "code": {
        "startLine": 19,
        "length": 42,
        "offset": 229,
        "surroundingCode": "    /// <param name=\"arguments\">The names of the arguments that should be passed to the handler.</param>\n    /// <remarks><see langword=\"null\"/> may be used as the name of the receiver in an instance method.</remarks>\n    public InterpolatedStringHandlerArgumentAttribute(params string[] arguments) => Arguments = arguments;\n\n    /// <summary>Gets the names of the arguments that should be passed to the handler.</summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "06387beb94efa9fcb844fec093a91fa63374067cd2ca62a3eff98b819738c2e0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'UInt32Delegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 564,
      "offset": 50,
      "length": 14,
      "code": {
        "startLine": 562,
        "length": 14,
        "offset": 243,
        "surroundingCode": "    public static readonly WriteDelegate<Int64> Int64Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<UInt16> UInt16Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<UInt32> UInt32Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<UInt64> UInt64Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<DateTime> DateTimeDelegate = (writer, x) => writer.Write(x);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "0759b6308fe0bb23107505378bbb6cde18058f3a726c80733d4fb9d85636f167"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'ActivateProxy' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFacade.cs",
      "language": "C#",
      "line": 37,
      "offset": 23,
      "length": 13,
      "code": {
        "startLine": 35,
        "length": 13,
        "offset": 29,
        "surroundingCode": "    }\n\n    public TInterface ActivateProxy<TInterface>(Lifetime lifetime, IProtocol protocol) where TInterface : class\n    {\n      var type = ProxyGenerator.CreateType<TInterface>();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "075f9341955c49a73a1ef6ac9a3a9553c1d6d071daf0fc7a1b34b6767513cf7b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Alloc' is never used (except inside its declaration)",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 659,
      "offset": 21,
      "length": 5,
      "code": {
        "startLine": 657,
        "length": 5,
        "offset": 158,
        "surroundingCode": "    /// <returns><see cref=\"Bookmark\"/> to the allocated buffer </returns>\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public Bookmark Alloc(int length)\n    {\n      var result = new Bookmark(this);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "083165e8bd9654cb185eefb58616af0fd952e00594b81588384734ef76dca45d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'IncrementSlave' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/TextBufferVersion.cs",
      "language": "C#",
      "line": 87,
      "offset": 30,
      "length": 14,
      "code": {
        "startLine": 85,
        "length": 14,
        "offset": 36,
        "surroundingCode": "    }\n\n    public TextBufferVersion IncrementSlave()\n    {\n      return new TextBufferVersion(Master, Slave + 1);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "0934141f55a6e0a5fa4a0fd2ab6a51cacc3fcfb15248ae55c97c82009992b787"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Read' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdPerContextMap.cs",
      "language": "C#",
      "line": 96,
      "offset": 45,
      "length": 4,
      "code": {
        "startLine": 94,
        "length": 4,
        "offset": 55,
        "surroundingCode": "        }\n\n        public static RdPerContextMap<K, V> Read(SerializationCtx context, UnsafeReader reader, RdContext<K> key, Func<bool, V> func)\n        {\n            var id = RdId.Read(reader);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "0a5f2f3e95c5315744a5307657de80584193ca99a4dac2688d6ee806e9af7b4f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Assert' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Assertion.cs",
      "language": "C#",
      "line": 102,
      "offset": 24,
      "length": 6,
      "code": {
        "startLine": 100,
        "length": 6,
        "offset": 113,
        "surroundingCode": "    [AssertionMethod, StringFormatMethod(\"message\")]\n    [Conditional(\"JET_MODE_ASSERT\")]\n    public static void Assert([DoesNotReturnIf(false)] bool condition, string message, params object?[] args)\n    {\n      if (Mode.IsAssertion && !condition)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "0ac10a38e83790def7bf968fb20c8f01cf76ca08d09f29859181ee5aa2ab4030"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'WriteInt32ToBytes' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 404,
      "offset": 24,
      "length": 17,
      "code": {
        "startLine": 402,
        "length": 17,
        "offset": 87,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public static void WriteInt32ToBytes(Int32 value, byte[] data, int offset)\n    {\n      fixed (byte* bb = data)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "0af8487695f45fcb80fb269916717877074d978ff80a46fd15d6ff3b238d5fd0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogVerboseInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 31,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 29,
        "length": 15,
        "offset": 196,
        "surroundingCode": "  public void AppendFormatted<T>(T value) => myHandler.AppendFormatted(value);\n  public void AppendFormatted<T>(T value, string? format) => myHandler.AppendFormatted(value, format);\n  public void AppendFormatted<T>(T value, int alignment) => myHandler.AppendFormatted(value, alignment);\n  public void AppendFormatted<T>(T value, int alignment, string? format) => myHandler.AppendFormatted(value, alignment, format);\n  "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "0bcae9291057f8218e8e2da2a09148fffe8ddcd2bdceec27403cdddfeecd14e9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'Instance' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/EmptyAction.cs",
      "language": "C#",
      "line": 7,
      "offset": 35,
      "length": 8,
      "code": {
        "startLine": 5,
        "length": 8,
        "offset": 72,
        "surroundingCode": "  public static class EmptyAction\n  {\n    public static readonly Action Instance = () => { };\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "0c9b0dedcf1592bb6b4be2a1f44a1415b559edf0b9e195e711c851c8ac45feb9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogErrorInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 39,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 37,
        "length": 15,
        "offset": 99,
        "surroundingCode": "  \n  public void AppendFormatted(string? value) => myHandler.AppendFormatted(value);\n  public void AppendFormatted(string? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);\n  \n  public void AppendFormatted(object? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "0de372c10006d0caa5cbf9f51f55c92434555582bad1aeb81a096ef16b9f9c48"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Verbose' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogEx.cs",
      "language": "C#",
      "line": 238,
      "offset": 24,
      "length": 7,
      "code": {
        "startLine": 236,
        "length": 7,
        "offset": 60,
        "surroundingCode": "\n    [StringFormatMethod(\"message\")]\n    public static void Verbose<T1, T2, T3, T4>(this ILog @this, string message, T1 t1, T2 t2, T3 t3, T4 t4)\n    {\n      @this.LogFormat(LoggingLevel.VERBOSE, message, t1, t2, t3, t4);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "0e6c7c51353f0e5213082f193364dcc253449b12d219bac55ac38ad286f49d78"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Write' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 78,
      "offset": 55,
      "length": 5,
      "code": {
        "startLine": 76,
        "length": 5,
        "offset": 62,
        "surroundingCode": "    };\n\n    public static CtxWriteDelegate<RdTextBufferState> Write = (ctx, writer, value) =>\n    {\n      value.RdId.Write(writer);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "0ec835f44a28e05194eb52eca3a39b3174e21315cd8833981b8f350ea3ddb49b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'ByteArrayDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 569,
      "offset": 50,
      "length": 17,
      "code": {
        "startLine": 567,
        "length": 17,
        "offset": 239,
        "surroundingCode": "    public static readonly WriteDelegate<Uri> UriDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<string> StringDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<byte[]> ByteArrayDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<int[]> IntArrayDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<string[]> StringArrayDelegate = (writer, x) => writer.Write(StringDelegate, x);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "0eda360ad1440f8d0aa6c376380da8a199f9b7315a7a8b7c70efbc84d5037a48"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'GetServerPort' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/WireEx.cs",
      "language": "C#",
      "line": 9,
      "offset": 23,
      "length": 13,
      "code": {
        "startLine": 7,
        "length": 13,
        "offset": 55,
        "surroundingCode": "  public static class WireEx\n  {\n    public static int GetServerPort(this IWire wire)\n    {\n      var serverSocketWire = wire as SocketWire.Server;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "0f8b8cfbeca864895eac7ff3b211044f2cc95d7032143d9e9c99cc0a26d9e5c3"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'RdExtAttribute' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 28,
      "offset": 12,
      "length": 14,
      "code": {
        "startLine": 26,
        "length": 14,
        "offset": 53,
        "surroundingCode": "    public Type? RdRpcInterface { get; }\n\n    public RdExtAttribute() { }\n\n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "0f8c6f14ffdf0540b2e6f5b40812205d238eddbab91f8041688684bbaf31e95a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'Rounds' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorAsyncCallsTest.cs",
      "language": "C#",
      "line": 48,
      "offset": 26,
      "length": 6,
      "code": {
        "startLine": 46,
        "length": 6,
        "offset": 68,
        "surroundingCode": "    public class AsyncTestFixture<T>\n    {\n      public virtual int Rounds => 1;\n\n      public virtual void Client(int round) { }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "100567ce1a3df3f99f6823a00ce003231f2003f4ffffb6011965f2b51e583685"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Trace' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogEx.cs",
      "language": "C#",
      "line": 724,
      "offset": 33,
      "length": 5,
      "code": {
        "startLine": 722,
        "length": 5,
        "offset": 72,
        "surroundingCode": "\n    [Obsolete(\"Renamed to WhenTrace\")]\n    public static LogWithLevel? Trace(this ILog logger) => logger.WhenTrace();\n\n    [Obsolete(\"Renamed to WhenVerbose\")]"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "107e23aaeb7506d12ccfff09fcbb089a0cf8acce56a759d481f3943b1fd8c809"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'Read' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 67,
      "offset": 54,
      "length": 4,
      "code": {
        "startLine": 65,
        "length": 4,
        "offset": 194,
        "surroundingCode": "    public static CtxWriteDelegate<RdTextBufferChange?> WriteRdTextBufferChangeNullable = RdTextBufferChange.WriteDelegate.NullableClass();\n\n    public static CtxReadDelegate<RdTextBufferState> Read = (ctx, reader) =>\n    {\n      var _id = RdId.Read(reader);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "11d37f95846898deb877771c8b3702234e043e6041b22348ec70e72135cf4009"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'WriteRaw' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 621,
      "offset": 17,
      "length": 8,
      "code": {
        "startLine": 619,
        "length": 8,
        "offset": 80,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public void WriteRaw(byte[] value)\n    {\n      if(value == null)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "12d9b3ccee5d9cee6a782b0437a9ef5689fccada9fe64f7ae29de2e96795cf7c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'FakeTuple' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 50,
      "offset": 14,
      "length": 9,
      "code": {
        "startLine": 48,
        "length": 9,
        "offset": 196,
        "surroundingCode": "    public struct FakeTuple<T1, T2, T3, T4, T5, T6, T7> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6; public T7 Item7;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; Item7 = item7; }\n    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6, T7, TRest> {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "133449fcb02e603e28de4418c4e65f5f463f49b32500755c0894e48e9dd0ef73"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Register' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/SimpleTypesCatalog.cs",
      "language": "C#",
      "line": 25,
      "offset": 17,
      "length": 8,
      "code": {
        "startLine": 23,
        "length": 8,
        "offset": 23,
        "surroundingCode": "    }\n\n    public void Register<T>() => AddType(typeof(T));\n  }\n}"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "13688f8866392b0c8b0d468e03f74cfc048e9c9c311e2a307b092c54e985b78f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'GetEnumerator' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/EmptyEnumerator.cs",
      "language": "C#",
      "line": 25,
      "offset": 27,
      "length": 13,
      "code": {
        "startLine": 23,
        "length": 13,
        "offset": 57,
        "surroundingCode": "    public void Dispose() { }\n\n    public IEnumerator<T> GetEnumerator() => this;\n  }\n}"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "13819c81f2f3c5da2babbe7e2955be0f361dc9fb1e0c93d14d52416db04994a7"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Property 'ApprovedProcessorCount' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/SpinWaitLock.cs",
      "language": "C#",
      "line": 17,
      "offset": 23,
      "length": 22,
      "code": {
        "startLine": 15,
        "length": 22,
        "offset": 83,
        "surroundingCode": "    static SpinWaitLock() { CalcApprovedProcessorCount(); }\n\n    public static int ApprovedProcessorCount\n    {\n      get { return _processorCount; }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "13a0464ab84dc0ae02a62e6109f172d7603d58d74c1e1aae53a4c6aa395139cf"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'InternedInProtocol' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 92,
      "offset": 48,
      "length": 18,
      "code": {
        "startLine": 90,
        "length": 18,
        "offset": 251,
        "surroundingCode": "    [NotNull] public IViewableProperty<string> InternedLocally { get { return _InternedLocally; }}\n    [NotNull] public IViewableProperty<string> InternedExternally { get { return _InternedExternally; }}\n    [NotNull] public IViewableProperty<string> InternedInProtocol { get { return _InternedInProtocol; }}\n    \n    //private fields"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "13d5b1c45cb8a3f11a0a7af8e6f1666707acb1e9545045ffc5088d749da53b45"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadStringInternedAtTest' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 311,
      "offset": 43,
      "length": 24,
      "code": {
        "startLine": 309,
        "length": 24,
        "offset": 71,
        "surroundingCode": "      return _result;\n    };\n    public static CtxReadDelegate<string> ReadStringInternedAtTest = Serializers.ReadString.Interned(\"Test\");\n    public static CtxReadDelegate<InterningNestedTestStringModel> ReadInterningNestedTestStringModelNullable = InterningNestedTestStringModel.Read.NullableClass();\n    "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "13d60a5e4256a709242e8eff8a33b102a5bdd6c45d8fe7e18f7aee32cef9c13a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'IntArrayDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 346,
      "offset": 49,
      "length": 16,
      "code": {
        "startLine": 344,
        "length": 16,
        "offset": 265,
        "surroundingCode": "    public static readonly ReadDelegate<byte[]?> ByteArrayDelegate = reader => reader.ReadByteArray();\n    public static readonly ReadDelegate<bool[]?> BoolArrayDelegate = reader => reader.ReadArray(BooleanDelegate);\n    public static readonly ReadDelegate<int[]?> IntArrayDelegate = reader => reader.ReadIntArray();\n    public static readonly ReadDelegate<string?[]?> StringArrayDelegate = reader => reader.ReadArray(StringDelegate);\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "154cf8c3b17aade1694c9d89f4ef6d96495417ca4d066935e5030faf3479b098"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'MakeBookmark' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 644,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 642,
        "length": 12,
        "offset": 133,
        "surroundingCode": "    /// Creates <see cref=\"Bookmark\"/> for the current <see cref=\"UnsafeWriter\"/>'s position.\n    /// </summary>\n    public Bookmark MakeBookmark()\n    {\n      return new Bookmark(this);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "16532069e401f23ae29f5e481a8fdbe0038a59fcce68ebce0401d2ed572a1aeb"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'ReadDictionary' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 421,
      "offset": 19,
      "length": 14,
      "code": {
        "startLine": 419,
        "length": 14,
        "offset": 82,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public TDict? ReadDictionary<TK, TV, TDict>(ReadDelegate<TK> readKeyDelegate, ReadDelegate<TV> readValueDelegate,\n      Func<int, TDict> constructor) where TDict : IDictionary<TK, TV>\n    {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "1680d5f0821b06b5fd00fc45da16b11ded98a1167a6ba16d0a9a995fb14f1ab4"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'ToSmartList' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 207,
      "offset": 34,
      "length": 11,
      "code": {
        "startLine": 205,
        "length": 11,
        "offset": 79,
        "surroundingCode": "  public static class SmartListExtensions\n  {\n    public static CompactList<T> ToSmartList<T>(this IEnumerable<T> source)\n    {\n      var result = new CompactList<T>();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "17e4f5e1e05e099b6cadba0b79e52a8bf8e5d858ec22f83509a60990cc939e9b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'StartClient' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Reflection.App/Program.cs",
      "language": "C#",
      "line": 41,
      "offset": 24,
      "length": 11,
      "code": {
        "startLine": 39,
        "length": 11,
        "offset": 124,
        "surroundingCode": "    private static readonly IPEndPoint ourIpEndPoint = new IPEndPoint(IPAddress.Loopback, ourPort);\n\n    public static void StartClient() => Main(new [] {\"client\"});\n    public static void StartServer() => Main(new [] {\"server\"});\n    "
      }
    }
  ],
  "attributes": {
    "module": "Test.Reflection.App",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "17e744f3cf02bc89f42489842fa99bf75b3a4e56b0bdc3f43e5c2aa425ace784"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Enum member 'PROCESS_SET_INFORMATION' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Interop/Windows.cs",
      "language": "C#",
      "line": 41,
      "offset": 9,
      "length": 23,
      "code": {
        "startLine": 39,
        "length": 23,
        "offset": 103,
        "surroundingCode": "        PROCESS_QUERY_INFORMATION = 0x400,\n        PROCESS_QUERY_LIMITED_INFORMATION = 0x1000,\n        PROCESS_SET_INFORMATION = 0x200,\n        PROCESS_SET_QUOTA = 0x100,\n        PROCESS_SUSPEND_RESUME = 0x800,"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "1859b173975f887922eb9d3b4fe824f66a1c2769773fb25d7919a6848cfd1f8d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Verbose' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogEx.cs",
      "language": "C#",
      "line": 727,
      "offset": 33,
      "length": 7,
      "code": {
        "startLine": 725,
        "length": 7,
        "offset": 74,
        "surroundingCode": "\n    [Obsolete(\"Renamed to WhenVerbose\")]\n    public static LogWithLevel? Verbose(this ILog logger) => logger.WhenVerbose();\n\n    #endregion"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "18c4d1bd470706436709700649c06d97fe1964d7cc7af8a47846d6e01456060f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'WhenFalse' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ReactiveEx.cs",
      "language": "C#",
      "line": 339,
      "offset": 24,
      "length": 9,
      "code": {
        "startLine": 337,
        "length": 9,
        "offset": 30,
        "surroundingCode": "    }\n\n    public static void WhenFalse(this IReadonlyProperty<bool> property, Lifetime lifetime, Action<Lifetime> handler)\n    {\n      if (property == null) throw new ArgumentNullException(nameof(property));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "1969a955e307a857c7d8827ef22bb58d322c07f6e9474c8f6e8cbd27683ad836"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'ShortDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 333,
      "offset": 48,
      "length": 13,
      "code": {
        "startLine": 331,
        "length": 13,
        "offset": 233,
        "surroundingCode": "    public static readonly ReadDelegate<float> FloatDelegate = reader => reader.ReadFloat();\n    public static readonly ReadDelegate<Int16> Int16Delegate = reader => reader.ReadInt16();\n    public static readonly ReadDelegate<short> ShortDelegate = reader => reader.ReadInt16(); //alias\n    public static readonly ReadDelegate<Int32> Int32Delegate = reader => reader.ReadInt32();\n    public static readonly ReadDelegate<int> IntDelegate = reader => reader.ReadInt32(); //alias"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "199b6a84f8db1c445b47a335a04e9d80d2ab9df7545be35ade3af066c9ae5809"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'DateTimeDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 341,
      "offset": 51,
      "length": 16,
      "code": {
        "startLine": 339,
        "length": 16,
        "offset": 242,
        "surroundingCode": "    public static readonly ReadDelegate<UInt32> UInt32Delegate = reader => reader.ReadUInt32();\n    public static readonly ReadDelegate<UInt64> UInt64Delegate = reader => reader.ReadUInt64();\n    public static readonly ReadDelegate<DateTime> DateTimeDelegate = reader => reader.ReadDateTime();\n    public static readonly ReadDelegate<Uri> UriDelegate = reader => reader.ReadUri();\n    public static readonly ReadDelegate<string?> StringDelegate = reader => reader.ReadString();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "19f6fac186782fbf535c3db8a89538b4a775f242b2568e72877997d577561653"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'FakeTuple' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 54,
      "offset": 14,
      "length": 9,
      "code": {
        "startLine": 52,
        "length": 9,
        "offset": 222,
        "surroundingCode": "    public struct FakeTuple<T1, T2, T3, T4, T5, T6, T7, TRest> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6; public T7 Item7; public TRest Rest;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; Item7 = item7; Rest = rest; }\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "1a039ab0165b8cb0ca183a93221bdcc3ff5ddcca552940a7f4494ac85c095e9c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Enum member 'PROCESS_DUP_HANDLE' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Interop/Windows.cs",
      "language": "C#",
      "line": 38,
      "offset": 9,
      "length": 18,
      "code": {
        "startLine": 36,
        "length": 18,
        "offset": 84,
        "surroundingCode": "        PROCESS_CREATE_PROCESS = 0x80,\n        PROCESS_CREATE_THREAD = 0x2,\n        PROCESS_DUP_HANDLE = 0x40,\n        PROCESS_QUERY_INFORMATION = 0x400,\n        PROCESS_QUERY_LIMITED_INFORMATION = 0x1000,"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "1a2aacd60a9e0d3d16be6f62b7729e343d386d2782dd3e3ce8f51bb5b5d42043"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'Server' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 616,
      "offset": 14,
      "length": 6,
      "code": {
        "startLine": 614,
        "length": 6,
        "offset": 50,
        "surroundingCode": "    public class Server : Base\n    {\n      public Server(Lifetime lifetime, IScheduler scheduler, IPEndPoint? endPoint = null, string? optId = null) : this(lifetime, scheduler, optId)\n      {\n        var serverSocket = CreateServerSocket(endPoint);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "1c6167dd0faee277def3487752900fb5b02638aebc5206caa15acce39d5eae25"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'Write' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/PolymorphicScalarIntrinsicTest.cs",
      "language": "C#",
      "line": 103,
      "offset": 23,
      "length": 5,
      "code": {
        "startLine": 101,
        "length": 5,
        "offset": 31,
        "surroundingCode": "      }\n\n      public new void Write(UnsafeWriter writer) => writer.Write(\"type1\");\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "1c7262327ba5a41b3c3b94f78c13b10c1ad0e5898250313216be2040d52b5215"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'NumberOfBitSet' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/BitHacks.cs",
      "language": "C#",
      "line": 71,
      "offset": 23,
      "length": 14,
      "code": {
        "startLine": 69,
        "length": 14,
        "offset": 83,
        "surroundingCode": "    /// <param name=\"x\"></param>\n    /// <returns></returns>\n    public static int NumberOfBitSet(int x)\n    {\n      unchecked"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "1cfc8be98d0cc95ece7fae7e70ce3e54436b871c505735c3c1f41eaf87e93d23"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadUByte' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 100,
      "offset": 50,
      "length": 9,
      "code": {
        "startLine": 98,
        "length": 9,
        "offset": 59,
        "surroundingCode": "    \n    \n    public static readonly CtxReadDelegate<byte> ReadUByte = (ctx, reader) => reader.ReadUByte();\n    public static readonly CtxReadDelegate<ushort> ReadUShort = (ctx, reader) => reader.ReadUShort();\n    public static readonly CtxReadDelegate<uint> ReadUInt = (ctx, reader) => reader.ReadUInt();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "1dad89638307cb3d2efdfb77489cda28cc3d366a2a9feb559b1cc5efd2ade5d6"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'HasTrueValue' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ReactiveEx.cs",
      "language": "C#",
      "line": 296,
      "offset": 24,
      "length": 12,
      "code": {
        "startLine": 294,
        "length": 12,
        "offset": 30,
        "surroundingCode": "    }\n\n    public static bool HasTrueValue(this IReadonlyProperty<bool> me)\n    {\n      return me.Maybe.HasValue && me.Maybe.Value;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "1ee5cef6294ced94dd9298e6d2c16fb195bc67425e92d89b61b27c648b8ef74c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'CreateOverExisting' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SingleThreadScheduler.cs",
      "language": "C#",
      "line": 103,
      "offset": 41,
      "length": 18,
      "code": {
        "startLine": 101,
        "length": 18,
        "offset": 42,
        "surroundingCode": "\n\n    public static SingleThreadScheduler CreateOverExisting(SingleThreadScheduler existingScheduler, string name, int actionPriority = PrioritizedAction.NormalPriority)\n    {\n      if (existingScheduler == null) throw new ArgumentNullException(nameof(existingScheduler));"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "1f3338ae448c8499b8e9556456b70a878c68f1dbd56e1210af4c02acb3264de5"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Trace' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogEx.cs",
      "language": "C#",
      "line": 129,
      "offset": 24,
      "length": 5,
      "code": {
        "startLine": 127,
        "length": 5,
        "offset": 60,
        "surroundingCode": "\n    [StringFormatMethod(\"message\")]\n    public static void Trace<T1, T2, T3>(this ILog @this, string message, T1 t1, T2 t2, T3 t3)\n    {\n      @this.LogFormat(LoggingLevel.TRACE, message, t1, t2, t3);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "1face0fbcb5abfd3285c9cbece223aeb426d6be73ac0d638ccda333a4c1bad27"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'Write' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorSimpleTest.cs",
      "language": "C#",
      "line": 118,
      "offset": 21,
      "length": 5,
      "code": {
        "startLine": 116,
        "length": 5,
        "offset": 114,
        "surroundingCode": "      {\n        public static IntrinsicType Read(UnsafeReader reader) => new IntrinsicType();\n        public void Write(UnsafeWriter writer)\n        {\n        }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "1fe137ec21a6aed1cec84f118523909ca8471e49a9c806150a8d6f47a9e9bdde"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Realloc' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/NativeMemoryPool.cs",
      "language": "C#",
      "line": 202,
      "offset": 23,
      "length": 7,
      "code": {
        "startLine": 200,
        "length": 7,
        "offset": 67,
        "surroundingCode": "      public int Length => myHolder.Length;\n\n      internal IntPtr Realloc(int size)\n      {\n        return myHolder.Realloc(size);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "20d30603b5ee08b782796be8ed3a1738e4fa4d9f051eeadf7f82bbd4044ebfb0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'LastIndexOf' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 73,
      "offset": 16,
      "length": 11,
      "code": {
        "startLine": 71,
        "length": 11,
        "offset": 22,
        "surroundingCode": "    }\n\n    public int LastIndexOf(T item, IEqualityComparer<T?> comparer)\n    {\n      switch (Count)      "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "218f3cc36e5d7e01d60fd4f80a8dfc01b4ae3ec80c593c32ffba645917e033df"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'List' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SerializersEx.cs",
      "language": "C#",
      "line": 182,
      "offset": 45,
      "length": 4,
      "code": {
        "startLine": 180,
        "length": 4,
        "offset": 51,
        "surroundingCode": "    }\n\n    public static CtxWriteDelegate<List<T>> List<T>(this CtxWriteDelegate<T> inner)\n    {\n      return (ctx, reader, value) => reader.WriteList(inner, ctx, value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "2270b10acc7c637370876ee4c37aaab44aade3f5fe00bab84a440c156f9d7b35"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogWarnInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 32,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 30,
        "length": 15,
        "offset": 222,
        "surroundingCode": "  public void AppendFormatted<T>(T value, string? format) => myHandler.AppendFormatted(value, format);\n  public void AppendFormatted<T>(T value, int alignment) => myHandler.AppendFormatted(value, alignment);\n  public void AppendFormatted<T>(T value, int alignment, string? format) => myHandler.AppendFormatted(value, alignment, format);\n  \n  // Commented out, because the compiler will require System.Memory for a project that uses string interpolation "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "22bd6c3e823b976da81bee55273bc92167f382d62fc2afe5b9b0229fa5b1f1a6"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogTraceInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 31,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 29,
        "length": 15,
        "offset": 196,
        "surroundingCode": "  public void AppendFormatted<T>(T value) => myHandler.AppendFormatted(value);\n  public void AppendFormatted<T>(T value, string? format) => myHandler.AppendFormatted(value, format);\n  public void AppendFormatted<T>(T value, int alignment) => myHandler.AppendFormatted(value, alignment);\n  public void AppendFormatted<T>(T value, int alignment, string? format) => myHandler.AppendFormatted(value, alignment, format);\n  "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "22c31465077d1df2bca30e8677a92564595bd1dc8ab9a534175111a41d5ec7ef"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'ReadUInt64FromBytes' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 196,
      "offset": 26,
      "length": 19,
      "code": {
        "startLine": 194,
        "length": 19,
        "offset": 36,
        "surroundingCode": "    }\n    \n    public static UInt64 ReadUInt64FromBytes(byte[] bytes)\n    {\n      fixed (byte* bb = bytes)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "22eafd1b3962b6f00d14924ae0d194dd682f47f5574161a77454eb9aba74eb8f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'UInt64Delegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 565,
      "offset": 50,
      "length": 14,
      "code": {
        "startLine": 563,
        "length": 14,
        "offset": 245,
        "surroundingCode": "    public static readonly WriteDelegate<UInt16> UInt16Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<UInt32> UInt32Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<UInt64> UInt64Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<DateTime> DateTimeDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Uri> UriDelegate = (writer, x) => writer.Write(x);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "235c9fc7c123bffc83287d365bf142c3849d257f8cf2579041f2f9c0b14b086e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'RdScalarAttribute' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 75,
      "offset": 12,
      "length": 17,
      "code": {
        "startLine": 73,
        "length": 17,
        "offset": 108,
        "surroundingCode": "    /// receiver side if receiver want to have an inheritor from this interface\n    /// </param>\n    public RdScalarAttribute(Type marshaller)\n    {\n      Marshaller = marshaller;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "2394c5cf79e0bfb4ec2b42e81caf7bd37051327fec14b7ab9eb910191c85eac2"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogInfoInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 32,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 30,
        "length": 15,
        "offset": 222,
        "surroundingCode": "  public void AppendFormatted<T>(T value, string? format) => myHandler.AppendFormatted(value, format);\n  public void AppendFormatted<T>(T value, int alignment) => myHandler.AppendFormatted(value, alignment);\n  public void AppendFormatted<T>(T value, int alignment, string? format) => myHandler.AppendFormatted(value, alignment, format);\n  \n  // Commented out, because the compiler will require System.Memory for a project that uses string interpolation "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "246c1ba45f20d5fd2654c7a74bc1974abca5e0c9f960f0885d47442d4de0258b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'RegisterPolymorphicSerializer' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 600,
      "offset": 10,
      "length": 29,
      "code": {
        "startLine": 598,
        "length": 29,
        "offset": 88,
        "surroundingCode": "    /// <param name=\"type\"></param>\n    /// <param name=\"serializers\"></param>\n    void RegisterPolymorphicSerializer(Type type, SerializerPair serializers);\n\n    void GetOrCreate<T>(out CtxReadDelegate<T> reader, out CtxWriteDelegate<T> writer);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "247b938b333bdc962cdf86cc41b552ecf130526af26e67730b0ff68c5ee942b4"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'ExecuteAsync' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 853,
      "offset": 19,
      "length": 12,
      "code": {
        "startLine": 851,
        "length": 12,
        "offset": 25,
        "surroundingCode": "    }\n\n    internal Task ExecuteAsync(Func<Task> closure) => Attached(Execute(closure));\n    internal Task<T> ExecuteAsync<T>(Func<Task<T>> closure) => Attached(Execute(closure));\n    "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "24988dfa80664fd8fdb573f7b9e0ccee82a89db2f421fea15047c6c356bc5d83"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetNotNullConditionalInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 39,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 37,
        "length": 15,
        "offset": 99,
        "surroundingCode": "  \n  public void AppendFormatted(string? value) => myHandler.AppendFormatted(value);\n  public void AppendFormatted(string? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);\n  \n  public void AppendFormatted(object? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "2518f4209eeb98866bb3959aef917d57dc3b3d11c4bcd65aeb1d911ea16ffac9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'GuidDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 555,
      "offset": 48,
      "length": 12,
      "code": {
        "startLine": 553,
        "length": 12,
        "offset": 238,
        "surroundingCode": "    public static readonly WriteDelegate<bool> BooleanDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<byte> ByteDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Guid> GuidDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<char> CharDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<decimal> DecimalDelegate = (writer, x) => writer.Write(x);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "25ac4e19e11dc19a6ab1c0bf03b31216f4d72f85b7d9ea6a1699fb7f7efa2cb5"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'ViewNotNull' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ReactiveEx.cs",
      "language": "C#",
      "line": 83,
      "offset": 24,
      "length": 11,
      "code": {
        "startLine": 81,
        "length": 11,
        "offset": 34,
        "surroundingCode": "    }\n    \n    public static void ViewNotNull<T>(this IReadonlyProperty<T?> me, Lifetime lifetime, Action<Lifetime, T> handler) where T: struct\n    {\n      me.View(lifetime, (lf, v) =>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "25b1ac8dc9efec9dddeb5f732e11c8b20f7ac773f15f243f68ff4d79d5156bcf"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogVerboseInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 32,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 30,
        "length": 15,
        "offset": 222,
        "surroundingCode": "  public void AppendFormatted<T>(T value, string? format) => myHandler.AppendFormatted(value, format);\n  public void AppendFormatted<T>(T value, int alignment) => myHandler.AppendFormatted(value, alignment);\n  public void AppendFormatted<T>(T value, int alignment, string? format) => myHandler.AppendFormatted(value, alignment, format);\n  \n  // Commented out, because the compiler will require System.Memory for a project that uses string interpolation "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "26c5e3d3954fcccf19ce3ce8162b0ff42db97ab7c0ba295d7c5ed9f09f7f654b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Enum member 'WRITE_DAC' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Interop/Windows.cs",
      "language": "C#",
      "line": 34,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 32,
        "length": 9,
        "offset": 72,
        "surroundingCode": "        READ_CONTROL = 0x20000,\n        SYNCHRONIZE = 0x100000,\n        WRITE_DAC = 0x40000,\n        WRITE_OWNER = 0x80000,\n        PROCESS_CREATE_PROCESS = 0x80,"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "274d7b8d19da0b70b212a6820a84fba3da36f1fa62c5fb7ccd02da06d895df2d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'TryGetInterned' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/IInternRoot.cs",
      "language": "C#",
      "line": 16,
      "offset": 14,
      "length": 14,
      "code": {
        "startLine": 14,
        "length": 14,
        "offset": 112,
        "surroundingCode": "    /// Tries to get an ID for a value. Doesn't intern it if it's not interned.\n    /// </summary>\n    InternId TryGetInterned(TBase value);\n    \n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "27f20e06716ef04d02b3ee84dfa2d9576a7e4a6ea920f1509601f77098dce8ab"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'Int32Delegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 334,
      "offset": 48,
      "length": 13,
      "code": {
        "startLine": 332,
        "length": 13,
        "offset": 241,
        "surroundingCode": "    public static readonly ReadDelegate<Int16> Int16Delegate = reader => reader.ReadInt16();\n    public static readonly ReadDelegate<short> ShortDelegate = reader => reader.ReadInt16(); //alias\n    public static readonly ReadDelegate<Int32> Int32Delegate = reader => reader.ReadInt32();\n    public static readonly ReadDelegate<int> IntDelegate = reader => reader.ReadInt32(); //alias\n    public static readonly ReadDelegate<Int64> Int64Delegate = reader => reader.ReadInt64();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "28a0212225e8f88c855dd8d6b64b4ff211192f6b20c6b28e9ac582c49f9d7970"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Read' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdCall.cs",
      "language": "C#",
      "line": 186,
      "offset": 38,
      "length": 4,
      "code": {
        "startLine": 184,
        "length": 4,
        "offset": 44,
        "surroundingCode": "    }\n\n    public static RdCall<TReq, TRes> Read(SerializationCtx ctx, UnsafeReader reader, CtxReadDelegate<TReq> readRequest, CtxWriteDelegate<TReq> writeRequest, CtxReadDelegate<TRes> readResponse, CtxWriteDelegate<TRes> writeResponse)\n    {\n      return new RdCall<TReq, TRes>(readRequest, writeRequest, readResponse, writeResponse).WithId(reader.ReadRdId());"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "28dec0cdd0cc500aee3eaa1635c501c7b3852868d6172ce750324b38b3e2d919"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Sync' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/Interfaces.cs",
      "language": "C#",
      "line": 22,
      "offset": 10,
      "length": 4,
      "code": {
        "startLine": 20,
        "length": 4,
        "offset": 55,
        "surroundingCode": "  public interface IRdCall<in TReq, TRes>\n  {\n    TRes Sync(TReq request, RpcTimeouts? timeouts = null);\n    \n    [Obsolete(\"Use overload with Lifetime\")]"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "2971f4b8b82291a083f6e196c773895ae53a4aa1ccee2eae3b89cc00468a585e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'FloatDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 331,
      "offset": 48,
      "length": 13,
      "code": {
        "startLine": 329,
        "length": 13,
        "offset": 242,
        "surroundingCode": "    public static readonly ReadDelegate<decimal> DecimalDelegate = reader => reader.ReadDecimal();\n    public static readonly ReadDelegate<double> DoubleDelegate = reader => reader.ReadDouble();\n    public static readonly ReadDelegate<float> FloatDelegate = reader => reader.ReadFloat();\n    public static readonly ReadDelegate<Int16> Int16Delegate = reader => reader.ReadInt16();\n    public static readonly ReadDelegate<short> ShortDelegate = reader => reader.ReadInt16(); //alias"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "29feeb3bfd0cd25cd9eb0335ba03a697222bb79bca25d5c2fa8de5c67bea0619"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'MasterVersionSlaveVersionComparer' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/TextBufferVersion.cs",
      "language": "C#",
      "line": 57,
      "offset": 56,
      "length": 33,
      "code": {
        "startLine": 55,
        "length": 33,
        "offset": 111,
        "surroundingCode": "      new MasterVersionSlaveVersionEqualityComparer();\n\n    public static IEqualityComparer<TextBufferVersion> MasterVersionSlaveVersionComparer\n    {\n      get { return ourMasterVersionSlaveVersionComparerInstance; }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "2af6cdc58e42589b2ba0bfdddb23be84b5c50505b51e215af5a7ee704b4475b8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteUByte' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 141,
      "offset": 51,
      "length": 10,
      "code": {
        "startLine": 139,
        "length": 10,
        "offset": 52,
        "surroundingCode": "\n\n    public static readonly CtxWriteDelegate<byte> WriteUByte = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<ushort> WriteUShort = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<uint> WriteUInt = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "2afedadc202305c02e2a97411e873e9ea8b4e33ae2249b9bcf0b2b354917c7e8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'X' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 224,
      "offset": 21,
      "length": 1,
      "code": {
        "startLine": 222,
        "length": 1,
        "offset": 56,
        "surroundingCode": "    public class NonScalarPtr\n    {\n      public Action X;\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "2bb65b75d7627c0fafe94bc617a2761af3c61fb98725a3e1cf6389234b9951db"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'LongDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 337,
      "offset": 47,
      "length": 12,
      "code": {
        "startLine": 335,
        "length": 12,
        "offset": 236,
        "surroundingCode": "    public static readonly ReadDelegate<int> IntDelegate = reader => reader.ReadInt32(); //alias\n    public static readonly ReadDelegate<Int64> Int64Delegate = reader => reader.ReadInt64();\n    public static readonly ReadDelegate<long> LongDelegate = reader => reader.ReadInt64(); //alias\n    public static readonly ReadDelegate<UInt16> UInt16Delegate = reader => reader.ReadUInt16();\n    public static readonly ReadDelegate<UInt32> UInt32Delegate = reader => reader.ReadUInt32();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "2ce444f0463d40816dcb4cf177c8b838312bc8200db43f712978615e675136a0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'RegisterEnum' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/ISerializers.cs",
      "language": "C#",
      "line": 11,
      "offset": 10,
      "length": 12,
      "code": {
        "startLine": 9,
        "length": 12,
        "offset": 116,
        "surroundingCode": "    void Register<T>(CtxReadDelegate<T> reader, CtxWriteDelegate<T> writer, long? predefinedType = null);\n\n    void RegisterEnum<T>() where T :\n#if !NET35\n    unmanaged, "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "2d480cdb5ce89dd2ca7600fa87351bcf5e013a555a2dfa9c423aa4c8226c7d18"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'Int16Delegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 332,
      "offset": 48,
      "length": 13,
      "code": {
        "startLine": 330,
        "length": 13,
        "offset": 236,
        "surroundingCode": "    public static readonly ReadDelegate<double> DoubleDelegate = reader => reader.ReadDouble();\n    public static readonly ReadDelegate<float> FloatDelegate = reader => reader.ReadFloat();\n    public static readonly ReadDelegate<Int16> Int16Delegate = reader => reader.ReadInt16();\n    public static readonly ReadDelegate<short> ShortDelegate = reader => reader.ReadInt16(); //alias\n    public static readonly ReadDelegate<Int32> Int32Delegate = reader => reader.ReadInt32();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "306bc9302ce5c0e89e0c006f0dd3166248bd4760eddce727a17c8addac67d7c8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'UpdateToVersion' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 76,
      "offset": 24,
      "length": 15,
      "code": {
        "startLine": 74,
        "length": 15,
        "offset": 29,
        "surroundingCode": "    \n\n    public static void UpdateToVersion()\n    {\n      if (string.IsNullOrEmpty(RiderFolderPath))"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "31f83eddc166b8e22c2cbdd970d3ac43e4870be30462a6cd6c1d6da40c773a0f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Read' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSignal.cs",
      "language": "C#",
      "line": 17,
      "offset": 31,
      "length": 4,
      "code": {
        "startLine": 15,
        "length": 4,
        "offset": 90,
        "surroundingCode": "    public CtxWriteDelegate<T> WriteValueDelegate { get; }\n\n    public static RdSignal<T> Read(SerializationCtx ctx, UnsafeReader reader)\n    {\n      return Read(ctx, reader, Polymorphic<T>.Read, Polymorphic<T>.Write);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "34671c89b8e0a6277e8e0928c7f9afaa4f0eeaab554179dfed352ef444cf5744"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'ToArray' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 114,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 112,
        "length": 7,
        "offset": 23,
        "surroundingCode": "    }\n\n    public T?[] ToArray()\n    {\n      switch (Count)      "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "35dca5861a5ca8ef7ee313c684fe89e6e7453f9d93f2aa916a8d3eba1a6bea21"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Trace' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogEx.cs",
      "language": "C#",
      "line": 147,
      "offset": 24,
      "length": 5,
      "code": {
        "startLine": 145,
        "length": 5,
        "offset": 60,
        "surroundingCode": "\n    [StringFormatMethod(\"message\")]\n    public static void Trace<T1, T2, T3, T4, T5, T6>(this ILog @this, string message, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6)\n    {\n      @this.LogFormat(LoggingLevel.TRACE, message, t1, t2, t3, t4, t5, t6);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "37368056655b0eec6f704b4a0d3242601e234c2a8bd46355ccfede631c982fb4"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'BindEx' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IRdBindable.cs",
      "language": "C#",
      "line": 101,
      "offset": 24,
      "length": 6,
      "code": {
        "startLine": 99,
        "length": 6,
        "offset": 65,
        "surroundingCode": "\n    // ASSHEATING C# OVERLOAD RESOLUTION\n    public static void BindEx<T>(this List<T>? items, Lifetime lifetime, IRdDynamic parent, string name) where T : IRdBindable\n    {\n      Bind0(items, lifetime, parent, name);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "375bc2de94b441ec374b8e383c44b148535a01e75d47bfbe0e869722e25e2c95"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'Signaller' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 128,
      "offset": 38,
      "length": 9,
      "code": {
        "startLine": 126,
        "length": 9,
        "offset": 117,
        "surroundingCode": "    //public fields\n    [NotNull] public string SearchLabel {get; private set;}\n    [NotNull] public ISignal<string> Signaller { get { return _Signaller; }}\n    \n    //private fields"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "37efe6352931d27a584d88706bef8f5fee0e08f741befc0ed7491baa163f4df4"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'Int16Delegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 560,
      "offset": 49,
      "length": 13,
      "code": {
        "startLine": 558,
        "length": 13,
        "offset": 242,
        "surroundingCode": "    public static readonly WriteDelegate<double> DoubleDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<float> FloatDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Int16> Int16Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Int32> Int32Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Int64> Int64Delegate = (writer, x) => writer.Write(x);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "3858d6d9718584686944030ac5555f571929eeae8e8f1a27973d5e3e6867ecae"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'NotNull' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Assertion.cs",
      "language": "C#",
      "line": 262,
      "offset": 21,
      "length": 7,
      "code": {
        "startLine": 260,
        "length": 7,
        "offset": 148,
        "surroundingCode": "    [ContractAnnotation(\"value:null => void; => value:notnull\")]\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public static T NotNull<T>(this T? value, [CallerArgumentExpression(\"value\")] string? message = null)\n      where T : struct\n    {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "3893d26413788c27cc573facb4fea3f77033f758f7a544597d62e85d56bbfbf8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'DoubleDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 558,
      "offset": 50,
      "length": 14,
      "code": {
        "startLine": 556,
        "length": 14,
        "offset": 243,
        "surroundingCode": "    public static readonly WriteDelegate<char> CharDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<decimal> DecimalDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<double> DoubleDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<float> FloatDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Int16> Int16Delegate = (writer, x) => writer.Write(x);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "38daa0036596c603a224449bf2ea7895fba9dd49f58742ea62426b0549d19e6e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Deconstruct' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SendContext.cs",
      "language": "C#",
      "line": 15,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 13,
        "length": 11,
        "offset": 97,
        "surroundingCode": "  internal struct SendContext<TEvt, TReactive> where TReactive : IRdReactive\n  {\n    public void Deconstruct(out SerializationCtx serializationContext, out TEvt @event, out TReactive map)\n    {\n      serializationContext = SzrCtx;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "39e38e5daef9eaa4e4ff8f1870fcd5663c5c56af6dae9695ebc7f6b896e099a1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Assert' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogEx.cs",
      "language": "C#",
      "line": 522,
      "offset": 24,
      "length": 6,
      "code": {
        "startLine": 520,
        "length": 6,
        "offset": 30,
        "surroundingCode": "    }\n\n    public static void Assert<T>(this ILog @this, bool condition, string message, T t1)\n    {\n      if (!condition)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "3b3fb6630fef44d1c1711b3300c41734522ef6fdec99ddda4d36a6e466b839ce"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteStringInternedAtProtocol' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 543,
      "offset": 44,
      "length": 29,
      "code": {
        "startLine": 541,
        "length": 29,
        "offset": 132,
        "surroundingCode": "      ctx.WriteInterned(writer, value.Text, \"Protocol\", Serializers.WriteString);\n    };\n    public static CtxWriteDelegate<string> WriteStringInternedAtProtocol = Serializers.WriteString.Interned(\"Protocol\");\n    //custom body\n    //equals trait"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "3be39bebbea34cffaaa26b35034b4a0869c539ce22c5974c2f07fb0f95060805"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Constant 'ExceptionDataKey' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/FirstChanceExceptionInterceptor.cs",
      "language": "C#",
      "line": 24,
      "offset": 25,
      "length": 16,
      "code": {
        "startLine": 22,
        "length": 16,
        "offset": 91,
        "surroundingCode": "    [ThreadStatic] private static Stack? ourThreadLocalDebugInfo;\n\n    public const string ExceptionDataKey = \"ThreadLocalDebugInfo\"; \n    \n    static FirstChanceExceptionInterceptor()"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "3bf79396fbd0b04814ccf0258642700d60dbf4d3f4015e0191d771c87952aa9e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogWarnInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 41,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 39,
        "length": 15,
        "offset": 160,
        "surroundingCode": "  public void AppendFormatted(string? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);\n  \n  public void AppendFormatted(object? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "3c13282947726f28c808acb174afc248e7e43a69bcf923f1a5270f31688903e5"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteStringInternedAtTest' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 618,
      "offset": 44,
      "length": 25,
      "code": {
        "startLine": 616,
        "length": 25,
        "offset": 128,
        "surroundingCode": "      ctx.WriteInterned(writer, value.Text, \"Test\", Serializers.WriteString);\n    };\n    public static CtxWriteDelegate<string> WriteStringInternedAtTest = Serializers.WriteString.Interned(\"Test\");\n    //custom body\n    //equals trait"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "3c6028f8f67ca42c36eb3706c8e6a04ac160d87b75338add983fe7da4608c574"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'DateTimeDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 566,
      "offset": 52,
      "length": 16,
      "code": {
        "startLine": 564,
        "length": 16,
        "offset": 247,
        "surroundingCode": "    public static readonly WriteDelegate<UInt32> UInt32Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<UInt64> UInt64Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<DateTime> DateTimeDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Uri> UriDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<string> StringDelegate = (writer, x) => writer.Write(x);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "3c89a3b9bade8ad14d87ca319283539ef33934bcb9d37da838d00abba202d51a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Info' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogEx.cs",
      "language": "C#",
      "line": 324,
      "offset": 24,
      "length": 4,
      "code": {
        "startLine": 322,
        "length": 4,
        "offset": 103,
        "surroundingCode": "    /// <param name=\"ex\"></param>\n    /// <param name=\"messageHandler\"></param>\n    public static void Info(this ILog logger, Exception ex, [InterpolatedStringHandlerArgument(\"logger\")] ref JetLogInfoInterpolatedStringHandler messageHandler)\n    {\n      if (messageHandler.IsEnabled)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "3e36e7c1f487ed8a5f9e2eccc314fac66cef1874a51f7dcf794170abc54dcd8a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Compose' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ReactiveEx.cs",
      "language": "C#",
      "line": 313,
      "offset": 40,
      "length": 7,
      "code": {
        "startLine": 311,
        "length": 7,
        "offset": 46,
        "surroundingCode": "    }\n\n    public static IReadonlyProperty<T> Compose<T1, T2, T>(this IReadonlyProperty<T1> first, Lifetime lifetime, IReadonlyProperty<T2> second, Func<T1, T2, T> composer)\n    {\n      var res = new ViewableProperty<T>();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "3e6fe16d4fab886ef79978f956d239e79174617a49b804bc271540c204897482"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'PrintToStringNoLimits' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IRdBindable.cs",
      "language": "C#",
      "line": 244,
      "offset": 26,
      "length": 21,
      "code": {
        "startLine": 242,
        "length": 21,
        "offset": 32,
        "surroundingCode": "    }\n\n    public static string PrintToStringNoLimits(this object? me)\n    {\n      var prettyPrinter = new PrettyPrinter { CollectionMaxLength = Int32.MaxValue };"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "3e712cc71e5c519ca3f35bc5003a34ae94a52f1ee91f6af6ed82516ed0aab66c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'VolatileWrite' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 78,
      "offset": 24,
      "length": 13,
      "code": {
        "startLine": 76,
        "length": 13,
        "offset": 91,
        "surroundingCode": "    \n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public static void VolatileWrite<T>(ref T location, T value) where T : class\n    {\n#if (NET35)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "3e79cd39b64a89edefcb906e5be3e4ce85b226c6b09ecce30689ec0a5d5695b3"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'GetInterningExt' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 79,
      "offset": 32,
      "length": 15,
      "code": {
        "startLine": 77,
        "length": 15,
        "offset": 97,
        "surroundingCode": "  public static class InterningExtensionHolderInterningExtEx\n   {\n    public static InterningExt GetInterningExt(this InterningExtensionHolder interningExtensionHolder)\n    {\n      return interningExtensionHolder.GetOrCreateExtension(\"interningExt\", () => new InterningExt());"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "3edb22d19ed73b20cfb934b2e4632316b3a6dea8c96b6604f7735b7f757da56f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'FakeTuple' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 34,
      "offset": 14,
      "length": 9,
      "code": {
        "startLine": 32,
        "length": 9,
        "offset": 112,
        "surroundingCode": "    public struct FakeTuple<T1, T2, T3> {\n      public T1 Item1; public T2 Item2; public T3 Item3;\n      public FakeTuple(T1 item1, T2 item2, T3 item3) { Item1 = item1; Item2 = item2; Item3 = item3; }\n    }\n    public struct FakeTuple<T1, T2, T3, T4> {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "3ef8a55366a01622135c4a48031b612dfee8677ff379b086e2a3b49c73b73dce"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Property 'Data' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/NativeMemoryPool.cs",
      "language": "C#",
      "line": 199,
      "offset": 21,
      "length": 4,
      "code": {
        "startLine": 197,
        "length": 4,
        "offset": 68,
        "surroundingCode": "      public bool IsValid => myHolder != null;\n\n      public IntPtr Data => myHolder.Data;\n      public int Length => myHolder.Length;\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "3f2ebde817c03d1c2f63da3f175b3a72ff2f30883b345a590e0e98a86d8af79c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Property 'ChunkCount' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ByteBufferAsyncProcessor.cs",
      "language": "C#",
      "line": 136,
      "offset": 16,
      "length": 10,
      "code": {
        "startLine": 134,
        "length": 10,
        "offset": 22,
        "surroundingCode": "    }\n\n    public int ChunkCount\n    {\n      get"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "3fa459a2071453120183a37fd0b4cb402792b80c03db9bf200873a4d88f5a16a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'Generator' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 41,
      "offset": 28,
      "length": 9,
      "code": {
        "startLine": 39,
        "length": 9,
        "offset": 112,
        "surroundingCode": "    public ReflectionSerializersFactory SerializersFactory => mySerializersFactory;\n\n    public IProxyGenerator Generator => myProxyGenerator;\n\n    public ITypesCatalog? TypesCatalog => myTypesCatalog;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "41258203dc91e7abeb765b3760b318ba40f6450b01775e1a4a880bd168ec6147"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'BindEx' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IRdBindable.cs",
      "language": "C#",
      "line": 106,
      "offset": 24,
      "length": 6,
      "code": {
        "startLine": 104,
        "length": 6,
        "offset": 30,
        "surroundingCode": "    }\n\n    public static void BindEx<T>(this T[]? items, Lifetime lifetime, IRdDynamic parent, string name) where T : IRdBindable\n    {\n      Bind0(items, lifetime, parent, name);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "41a0f43a3235213fd0ed417ddd657f1f14c4437f3bf077a81caf7a29b0f24a72"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'Serializers' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 48,
      "offset": 12,
      "length": 11,
      "code": {
        "startLine": 46,
        "length": 11,
        "offset": 18,
        "surroundingCode": "    }\n\n    public Serializers(ITypesRegistrar? registrar)\n      : this()\n    {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "42514e40d0ed7a56fd3e55218eac1347ac61ec2f88fedbe3ee2e49b653a9baf1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Read' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSet.cs",
      "language": "C#",
      "line": 35,
      "offset": 28,
      "length": 4,
      "code": {
        "startLine": 33,
        "length": 4,
        "offset": 100,
        "surroundingCode": "    public CtxWriteDelegate<T> WriteValueDelegate { get; private set; }\n\n    public static RdSet<T> Read(SerializationCtx ctx, UnsafeReader reader)\n    {\n      return Read(ctx, reader, Polymorphic<T>.Read, Polymorphic<T>.Write);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "4377a718d57dd8c360bedb4ad71a4f014970e3e9bed5a618989c9446dfacc46f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'SetStaticInstanceProperty' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 222,
      "offset": 21,
      "length": 25,
      "code": {
        "startLine": 220,
        "length": 25,
        "offset": 40,
        "surroundingCode": "    \n    #if !NET35\n    public static T SetStaticInstanceProperty<T>(Lifetime lifetime, Type type)\n    {\n      const BindingFlags propertiesFlags = BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Static;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "442959a703bd8515b3f36221f6c4db7aadf11ec1ad3b5297d8e6d37aa3484a55"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'SerializersFactory' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 39,
      "offset": 41,
      "length": 18,
      "code": {
        "startLine": 37,
        "length": 18,
        "offset": 93,
        "surroundingCode": "    private readonly ITypesCatalog? myTypesCatalog;\n\n    public ReflectionSerializersFactory SerializersFactory => mySerializersFactory;\n\n    public IProxyGenerator Generator => myProxyGenerator;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "4470b92675f8b8b70fa6986334b33803ea72a09769d5d0e68bfff5b45687605d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Catch' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogLog.cs",
      "language": "C#",
      "line": 332,
      "offset": 22,
      "length": 5,
      "code": {
        "startLine": 330,
        "length": 5,
        "offset": 33,
        "surroundingCode": "#endif\n    \n    public static T? Catch<T>(Func<T> action)\n    {\n      try"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "447cf0b47662827edff17245cbb55801b069d85179591a3334f45db27dad6148"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'Issues' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 371,
      "offset": 68,
      "length": 6,
      "code": {
        "startLine": 369,
        "length": 6,
        "offset": 147,
        "surroundingCode": "    //public fields\n    [NotNull] public string SearchLabel {get; private set;}\n    [NotNull] public IViewableMap<int, ProtocolWrappedStringModel> Issues { get { return _Issues; }}\n    \n    //private fields"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "466ff86aace9e2f86eb6a0680b8690d63333199ae0c65d7293567adf913edbfc"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'ExecuteAsync' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 854,
      "offset": 22,
      "length": 12,
      "code": {
        "startLine": 852,
        "length": 12,
        "offset": 104,
        "surroundingCode": "\n    internal Task ExecuteAsync(Func<Task> closure) => Attached(Execute(closure));\n    internal Task<T> ExecuteAsync<T>(Func<Task<T>> closure) => Attached(Execute(closure));\n    \n    #endregion"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "473a45673248420731398effe1702396896252d0196149901446e2efe9be41c0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Enqueued' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CollectionEx.cs",
      "language": "C#",
      "line": 66,
      "offset": 21,
      "length": 8,
      "code": {
        "startLine": 64,
        "length": 8,
        "offset": 131,
        "surroundingCode": "    /// <typeparam name=\"T\"></typeparam>\n    /// <returns>Added element <paramref name=\"toEnqueue\"/></returns>\n    public static T Enqueued<T>(this Queue<T> queue, T toEnqueue)\n    {\n      queue.Enqueue(toEnqueue);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "4761ea5b2c110cd8c40397ea0a6e45210ed639057c93a2fbaebdc80937a53e0e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'Write' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdCall.cs",
      "language": "C#",
      "line": 191,
      "offset": 24,
      "length": 5,
      "code": {
        "startLine": 189,
        "length": 5,
        "offset": 30,
        "surroundingCode": "    }\n\n    public static void Write(SerializationCtx ctx, UnsafeWriter writer, RdCall<TReq, TRes> value)\n    {\n      value.RdId.Write(writer);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "48a497231973be6b1aa223bbca6f0cb155fc180fd77797b1f5f6771d39bf780c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'StartTypingSession' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/ITextBuffer.cs",
      "language": "C#",
      "line": 23,
      "offset": 20,
      "length": 18,
      "code": {
        "startLine": 21,
        "length": 18,
        "offset": 85,
        "surroundingCode": "  public interface ITextBufferWithTypingSession : ITextBuffer\n  {\n    ITypingSession StartTypingSession(Lifetime lifetime);\n  }\n}"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "4b8b5cef61ef3d4f432dbee62aee7dcfedcf9cb7e69f754bc0a57a63bc23e78d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Clear' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 67,
      "offset": 17,
      "length": 5,
      "code": {
        "startLine": 65,
        "length": 5,
        "offset": 23,
        "surroundingCode": "    }\n\n    public void Clear()\n    {\n      mySingleValue = default(T);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "4dcf865ee62013e7d16ad7178724a87535995bb8f0b98fcb191f79348841b58e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'IntArrayDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 570,
      "offset": 49,
      "length": 16,
      "code": {
        "startLine": 568,
        "length": 16,
        "offset": 247,
        "surroundingCode": "    public static readonly WriteDelegate<string> StringDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<byte[]> ByteArrayDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<int[]> IntArrayDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<string[]> StringArrayDelegate = (writer, x) => writer.Write(StringDelegate, x);\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "4e597ff72b87dd480c8a3f2176aef9fac4e3b0dc195dfd6dd35b64bdd7edaacf"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Enum member 'PROCESS_VM_OPERATION' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Interop/Windows.cs",
      "language": "C#",
      "line": 45,
      "offset": 9,
      "length": 20,
      "code": {
        "startLine": 43,
        "length": 20,
        "offset": 81,
        "surroundingCode": "        PROCESS_SUSPEND_RESUME = 0x800,\n        PROCESS_TERMINATE = 0x1,\n        PROCESS_VM_OPERATION = 0x8,\n        PROCESS_VM_READ = 0x10,\n        PROCESS_VM_WRITE = 0x20,"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "4f1004b253848ef090391c8a8642053c96bb6b18cc23da7c86768b1b7415b14c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'PumpAndWaitFor' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SingleThreadScheduler.cs",
      "language": "C#",
      "line": 180,
      "offset": 17,
      "length": 14,
      "code": {
        "startLine": 178,
        "length": 14,
        "offset": 23,
        "surroundingCode": "    }\n\n    public bool PumpAndWaitFor(Lifetime lifetime, Func<bool> condition)\n    {\n      return PumpAndWaitFor(lifetime, TimeSpan.MaxValue, condition);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "4f265e1d90c260ea517674806b2cc5e1461acae3a74b4ee58ccefe3095938100"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Trace' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogEx.cs",
      "language": "C#",
      "line": 141,
      "offset": 24,
      "length": 5,
      "code": {
        "startLine": 139,
        "length": 5,
        "offset": 60,
        "surroundingCode": "\n    [StringFormatMethod(\"message\")]\n    public static void Trace<T1, T2, T3, T4, T5>(this ILog @this, string message, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5)\n    {\n      @this.LogFormat(LoggingLevel.TRACE, message, t1, t2, t3, t4, t5);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "4f31462177cdb4bc51579eff234887af58a1268f6e558f3496b868f23324c939"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteUByteArray' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 146,
      "offset": 54,
      "length": 15,
      "code": {
        "startLine": 144,
        "length": 15,
        "offset": 167,
        "surroundingCode": "    public static readonly CtxWriteDelegate<ulong> WriteULong = (ctx, writer, value) => writer.Write(value);\n    \n    public static readonly CtxWriteDelegate<byte[]?> WriteUByteArray = (ctx, writer, value) => writer.WriteArray(WriteByte, ctx, value);\n    public static readonly CtxWriteDelegate<ushort[]?> WriteUShortArray = (ctx, writer, value) => writer.WriteArray(WriteUShort, ctx, value);\n    public static readonly CtxWriteDelegate<uint[]?> WriteUIntArray = (ctx, writer, value) => writer.WriteArray(WriteUInt, ctx, value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "4f59804a4a3de90d707fe42c66a098ece22fe90f8abd95ffcdf1d06d9cc13735"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Verbose' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogLog.cs",
      "language": "C#",
      "line": 234,
      "offset": 24,
      "length": 7,
      "code": {
        "startLine": 232,
        "length": 7,
        "offset": 34,
        "surroundingCode": "    }\n    \n    public static void Verbose(string? category, string message)\n    {\n      if (message == null) throw new ArgumentException(\"message is null\");"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "4f5a1a5fa98a7b07ab707927820096c6e905e22d20150dbd7dc62ea8f45ac98f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'IsFileReady' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Cross/Util/FileSystem.cs",
      "language": "C#",
      "line": 8,
      "offset": 28,
      "length": 11,
      "code": {
        "startLine": 6,
        "length": 11,
        "offset": 68,
        "surroundingCode": "    public static class FileSystem\n    {\n        public static bool IsFileReady(string filename)\n        {\n            try"
      }
    }
  ],
  "attributes": {
    "module": "Test.Cross",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "4fb2655d8ed3a9c2455a3827ac4d33a2616256c33167e248dd43177a633211f9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'InternedLocally' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 90,
      "offset": 48,
      "length": 15,
      "code": {
        "startLine": 88,
        "length": 15,
        "offset": 80,
        "surroundingCode": "    //fields\n    //public fields\n    [NotNull] public IViewableProperty<string> InternedLocally { get { return _InternedLocally; }}\n    [NotNull] public IViewableProperty<string> InternedExternally { get { return _InternedExternally; }}\n    [NotNull] public IViewableProperty<string> InternedInProtocol { get { return _InternedInProtocol; }}"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "501856d422c730fa4a7bdae3c776ffdc9472d98997153c470833b16b149ffd39"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Warn' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogLog.cs",
      "language": "C#",
      "line": 210,
      "offset": 24,
      "length": 4,
      "code": {
        "startLine": 208,
        "length": 4,
        "offset": 63,
        "surroundingCode": "    \n    [StringFormatMethod(\"format\")]\n    public static void Warn(string format, params object[] args)\n    {\n      if (format == null) throw new ArgumentException(\"message is null\");"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "5252a02a44999935b1e1e9072d3df85186f0d765ede98a0fdc59df8714297de8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Assert' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogEx.cs",
      "language": "C#",
      "line": 514,
      "offset": 24,
      "length": 6,
      "code": {
        "startLine": 512,
        "length": 6,
        "offset": 43,
        "surroundingCode": "    #region Assert\n\n    public static void Assert(this ILog @this, bool condition, [CallerArgumentExpression(\"condition\")] string? message = null)\n    {\n      if (!condition)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "52aa0c0b2a43b218ff38033d163a6f9de0ccedbbfba4376e98b5a4616d46eb88"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Enum member 'WRITE_OWNER' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Interop/Windows.cs",
      "language": "C#",
      "line": 35,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 33,
        "length": 11,
        "offset": 69,
        "surroundingCode": "        SYNCHRONIZE = 0x100000,\n        WRITE_DAC = 0x40000,\n        WRITE_OWNER = 0x80000,\n        PROCESS_CREATE_PROCESS = 0x80,\n        PROCESS_CREATE_THREAD = 0x2,"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "532196e9856a555fa9a8c598b23552cb105cc7f1ccb65b08fdb5d19f66341578"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'UsingNestedAsync' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/OuterLifetime.cs",
      "language": "C#",
      "line": 93,
      "offset": 17,
      "length": 16,
      "code": {
        "startLine": 91,
        "length": 16,
        "offset": 119,
        "surroundingCode": "    /// </summary>\n    /// <param name=\"action\">The code to execute with a temporary lifetime.</param>\n    public Task UsingNestedAsync([InstantHandle] Func<Lifetime, Task> action) => myLifetime.UsingNestedAsync(action);\n    \n    internal LifetimeDefinition Def => myLifetime.Definition;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "53807f271ecf31d1d3036d34977c121957828da6dffa9d063e688e75745fa88c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'CommitRemoteChanges' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/ITextBuffer.cs",
      "language": "C#",
      "line": 18,
      "offset": 10,
      "length": 19,
      "code": {
        "startLine": 16,
        "length": 19,
        "offset": 47,
        "surroundingCode": "  public interface ITypingSession\n  {\n    void CommitRemoteChanges();\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "549a5c3a7b1fba47b1e34921d5278caa2e15d709ec50a7642179792a51aaf453"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Property 'Default' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/ReferenceEqualityComparer.cs",
      "language": "C#",
      "line": 22,
      "offset": 40,
      "length": 7,
      "code": {
        "startLine": 20,
        "length": 7,
        "offset": 110,
        "surroundingCode": "    public int GetHashCode(T obj) => RuntimeHelpers.GetHashCode(obj);\n\n    public static IEqualityComparer<T> Default => ourDefault;\n  }\n}"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "54b20bea2e45d3de3fcbfaa5462f8a0452ea3dc57b364a97ec4f87ce752dd1e8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'WithInternRootsHere' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/SerializationCtx.cs",
      "language": "C#",
      "line": 27,
      "offset": 29,
      "length": 19,
      "code": {
        "startLine": 25,
        "length": 19,
        "offset": 35,
        "surroundingCode": "    }\n\n    public SerializationCtx WithInternRootsHere(RdBindableBase owner, params string[] keys)\n    {\n      var newInternRoots = new Dictionary<string, IInternRoot<object>>(InternRoots);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "54cda268702ba90d95b38f02dfe6a42ee86acb1a87c3987fa3c01695689bb5c6"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Enum member 'PROCESS_VM_READ' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Interop/Windows.cs",
      "language": "C#",
      "line": 46,
      "offset": 9,
      "length": 15,
      "code": {
        "startLine": 44,
        "length": 15,
        "offset": 77,
        "surroundingCode": "        PROCESS_TERMINATE = 0x1,\n        PROCESS_VM_OPERATION = 0x8,\n        PROCESS_VM_READ = 0x10,\n        PROCESS_VM_WRITE = 0x20,\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "553e45b14e7d7059ec101d99a81add67a48277594b9e8617dc7fd5123bb935b0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadStringInternedAtTest' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 612,
      "offset": 43,
      "length": 24,
      "code": {
        "startLine": 610,
        "length": 24,
        "offset": 71,
        "surroundingCode": "      return _result;\n    };\n    public static CtxReadDelegate<string> ReadStringInternedAtTest = Serializers.ReadString.Interned(\"Test\");\n    \n    public static CtxWriteDelegate<WrappedStringModel> Write = (ctx, writer, value) => "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "566e1fddbf7d10043df89bb6133eceff6a1194df807438def4dcd8c7551429a2"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Enum member 'SYNCHRONIZE' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Interop/Windows.cs",
      "language": "C#",
      "line": 33,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 31,
        "length": 11,
        "offset": 66,
        "surroundingCode": "        DELETE = 0x10000,\n        READ_CONTROL = 0x20000,\n        SYNCHRONIZE = 0x100000,\n        WRITE_DAC = 0x40000,\n        WRITE_OWNER = 0x80000,"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "570a4722d8bd8abd6c4894d40eb5343217d347d2b85a7d38ccfe269bdcdd0610"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'VersionBeforeTypingSession' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 17,
      "offset": 49,
      "length": 26,
      "code": {
        "startLine": 15,
        "length": 26,
        "offset": 154,
        "surroundingCode": "    //public fields\n    public IViewableProperty<RdTextBufferChange?> Changes { get { return _Changes; }}\n    public IViewableProperty<TextBufferVersion> VersionBeforeTypingSession { get { return _VersionBeforeTypingSession; }}\n    public IViewableProperty<RdAssertion> AssertedMasterText { get { return _AssertedMasterText; }}\n    public IViewableProperty<RdAssertion> AssertedSlaveText { get { return _AssertedSlaveText; }}"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "570b1eb1f1faa75c795dd99346cf43893db3990527efc6b2d032e373a1ae8f64"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Trace' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogLog.cs",
      "language": "C#",
      "line": 261,
      "offset": 24,
      "length": 5,
      "code": {
        "startLine": 259,
        "length": 5,
        "offset": 63,
        "surroundingCode": "    \n    [StringFormatMethod(\"format\")]\n    public static void Trace(string? category, string format, params object[] args)\n    {\n      if (format == null) throw new ArgumentException(\"message is null\");"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "58494de860fbbc8682dc63e69fbd2b01975d3008cff784797326b472b8612d1b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'WriteStringContent' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 476,
      "offset": 17,
      "length": 18,
      "code": {
        "startLine": 474,
        "length": 18,
        "offset": 116,
        "surroundingCode": "    /// <param name=\"value\"></param>\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public void WriteStringContent(string? value)\n    {\n      if (value == null) return;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "58a11b1ac68bf3d0a7c5107dcd0e678edd8359b231af2c76ac77b314edf2e66f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'FailWithResult' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Assertion.cs",
      "language": "C#",
      "line": 380,
      "offset": 21,
      "length": 14,
      "code": {
        "startLine": 378,
        "length": 14,
        "offset": 62,
        "surroundingCode": "    [AssertionMethod]\n    [DoesNotReturn]\n    public static T FailWithResult<T>(T result, string message, object? arg1, object? arg2)\n    {\n      Fail(message, arg1, arg2);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "59504527b6caa9dea32c819682cd5a08cb9567f8d7449dbc383c0ddf064a7d5c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'RemoveAt' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 89,
      "offset": 17,
      "length": 8,
      "code": {
        "startLine": 87,
        "length": 8,
        "offset": 23,
        "surroundingCode": "    }\n\n    public bool RemoveAt(int index)\n    {\n      Assertion.Assert(index >= 0, \"{0} >= 0\", index);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "5b7432f9796ec7df4cd79fa0a8e8b821258792ee0a6840d6e5bba881d249afaa"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'FailWithResult' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Assertion.cs",
      "language": "C#",
      "line": 358,
      "offset": 21,
      "length": 14,
      "code": {
        "startLine": 356,
        "length": 14,
        "offset": 62,
        "surroundingCode": "    [AssertionMethod]\n    [DoesNotReturn]\n    public static T FailWithResult<T>(T result, string message)\n    {\n      Fail(message);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "5c9a0e5a4341d5bdc728439bf1ce9ab9ddf85b54fbdd5454ede5f7ae8001e8e9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'Instance' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Internal/NullLog.cs",
      "language": "C#",
      "line": 8,
      "offset": 36,
      "length": 8,
      "code": {
        "startLine": 6,
        "length": 8,
        "offset": 69,
        "surroundingCode": "  public class NullLog : ILog\n  {\n    public static readonly NullLog Instance = new NullLog();        \n    \n    private NullLog() {}"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "5ccfa6720bfffe909b71be2f058a43a46ab3b71798df106e21f866217f4b9c49"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'StringArrayDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 347,
      "offset": 53,
      "length": 19,
      "code": {
        "startLine": 345,
        "length": 19,
        "offset": 266,
        "surroundingCode": "    public static readonly ReadDelegate<bool[]?> BoolArrayDelegate = reader => reader.ReadArray(BooleanDelegate);\n    public static readonly ReadDelegate<int[]?> IntArrayDelegate = reader => reader.ReadIntArray();\n    public static readonly ReadDelegate<string?[]?> StringArrayDelegate = reader => reader.ReadArray(StringDelegate);\n\n    #endregion"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "5ce932350fa9beb32dd37c3e685c73f4a0624b55a146cd23ad02850f7316c415"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'StartServer' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Reflection.App/Program.cs",
      "language": "C#",
      "line": 42,
      "offset": 24,
      "length": 11,
      "code": {
        "startLine": 40,
        "length": 11,
        "offset": 89,
        "surroundingCode": "\n    public static void StartClient() => Main(new [] {\"client\"});\n    public static void StartServer() => Main(new [] {\"server\"});\n    \n    //try to start both client and server"
      }
    }
  ],
  "attributes": {
    "module": "Test.Reflection.App",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "5d76454a2df7949911f3f49e9aa8a3829c4d20ee2cfaee47bc03b2104f46e9cc"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Val' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorSimpleTest.cs",
      "language": "C#",
      "line": 113,
      "offset": 28,
      "length": 3,
      "code": {
        "startLine": 111,
        "length": 3,
        "offset": 65,
        "surroundingCode": "    public class TestRunRequest\n    {\n      public IntrinsicType Val;\n\n      public sealed class IntrinsicType"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "5e0fe6838c64783a3aa4307e2a0cb4203fcc01d70f97b085d367ce29aecec46d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'FailWithResult' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Assertion.cs",
      "language": "C#",
      "line": 402,
      "offset": 21,
      "length": 14,
      "code": {
        "startLine": 400,
        "length": 14,
        "offset": 62,
        "surroundingCode": "    [AssertionMethod]\n    [DoesNotReturn]\n    public static T FailWithResult<T>(T result, string message, params object?[] args)\n    {\n      Fail(message, args);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "5e22a84106a7ac2f8964a564cb1210b1b67f616b0bfdf54b5ea7e0e0261cd0ee"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Property 'IsTerminated' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimeDefinition.cs",
      "language": "C#",
      "line": 419,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 417,
        "length": 12,
        "offset": 84,
        "surroundingCode": "\n    [Obsolete(\"Use `Lifetime.IsAlive` or `Status` field instead\")]\n    public bool IsTerminated => Status >= LifetimeStatus.Terminating;\n      \n    "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "5e7e70670e49b45ac31ea2cbf7862bf2ff299bd73dfd00e44b6050afebff2843"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Indexer 'this' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IPerContextMap.cs",
      "language": "C#",
      "line": 41,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 39,
        "length": 4,
        "offset": 126,
        "surroundingCode": "    /// When this map is not bound, this will automatically create a new mapping instead of throwing\n    /// </summary>\n    V this[K key] { get; }\n    \n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "5ea7196bbe46a2eb245b3cad3e2e55bda2ba9e378a9aa2932b072eae9f645965"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Enum member 'Master' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdChangeOrigin.cs",
      "language": "C#",
      "line": 5,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 3,
        "length": 6,
        "offset": 46,
        "surroundingCode": "  public enum RdChangeOrigin {\n    Slave,\n    Master\n  }\n}"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "5eabe8b545b944c93c40390cab82517a295a1de6d73869364c8b126366987b46"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'ViewNull' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ReactiveEx.cs",
      "language": "C#",
      "line": 99,
      "offset": 24,
      "length": 8,
      "code": {
        "startLine": 97,
        "length": 8,
        "offset": 34,
        "surroundingCode": "    }\n    \n    public static void ViewNull<T>(this IReadonlyProperty<T?> me, Lifetime lifetime, Action<Lifetime> handler) where T: struct\n    {\n      me.View(lifetime, (lf, v) =>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "5ece46c91c7eb77a1562814b5f8c1186dee58a6130705365b75e727328ecac6e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Enum member 'Server' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/RdId.cs",
      "language": "C#",
      "line": 133,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 131,
        "length": 6,
        "offset": 20,
        "surroundingCode": "  {\n    Client,\n    Server\n  }  \n}"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "5f74bcdb1b884c8dbc010637f0f85558db7a7098e5ac779933ae308c8cfafade"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'Signal' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorInheritanceNegativeTest.cs",
      "language": "C#",
      "line": 18,
      "offset": 23,
      "length": 6,
      "code": {
        "startLine": 16,
        "length": 6,
        "offset": 56,
        "surroundingCode": "    public interface ITest2\n    {\n      ISignal<string> Signal { get; }\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "60cf40e43d84a9d380c3fd74da430633e95aeb73d1fef1083775e32b2fef1819"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'GetOrCreateExtension' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdBindableBase.cs",
      "language": "C#",
      "line": 175,
      "offset": 14,
      "length": 20,
      "code": {
        "startLine": 173,
        "length": 20,
        "offset": 20,
        "surroundingCode": "    }\n\n    public T GetOrCreateExtension<T>(string name, Func<T> create) where T : class =>\n      GetOrCreateExtension(name, false, create);\n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "6147535e38bf068aa748f455af712a75c66a3af4d63fd462371e9dee15489050"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetNotNullConditionalInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 31,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 29,
        "length": 15,
        "offset": 196,
        "surroundingCode": "  public void AppendFormatted<T>(T value) => myHandler.AppendFormatted(value);\n  public void AppendFormatted<T>(T value, string? format) => myHandler.AppendFormatted(value, format);\n  public void AppendFormatted<T>(T value, int alignment) => myHandler.AppendFormatted(value, alignment);\n  public void AppendFormatted<T>(T value, int alignment, string? format) => myHandler.AppendFormatted(value, alignment, format);\n  "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "61921f7942f38e79f913bcbf9eecc50ee7f21eaa491d92359bc0f744f89b0474"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'Array' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SerializersEx.cs",
      "language": "C#",
      "line": 177,
      "offset": 41,
      "length": 5,
      "code": {
        "startLine": 175,
        "length": 5,
        "offset": 55,
        "surroundingCode": "\n    //Writers\n    public static CtxWriteDelegate<T[]> Array<T>(this CtxWriteDelegate<T> inner)\n    {\n      return (ctx, reader, value) => reader.WriteArray(inner, ctx, value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "64444e372845d406600785716949deeaa470c7688b0c411d5c3242c0f637e8b2"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'AssertNotNull' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Assertion.cs",
      "language": "C#",
      "line": 177,
      "offset": 24,
      "length": 13,
      "code": {
        "startLine": 175,
        "length": 13,
        "offset": 113,
        "surroundingCode": "    [AssertionMethod, StringFormatMethod(\"message\")]\n    [Conditional(\"JET_MODE_ASSERT\")]\n    public static void AssertNotNull([CodeAnalysis.NotNull] object? condition, string message, object? arg)\n    {\n      if (condition == null)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "6455d6d6716ec74d21519a850f892aa6ecd29535f78299d9ac7f5227a42b0293"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogVerboseInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 30,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 28,
        "length": 15,
        "offset": 96,
        "surroundingCode": "  \n  public void AppendFormatted<T>(T value) => myHandler.AppendFormatted(value);\n  public void AppendFormatted<T>(T value, string? format) => myHandler.AppendFormatted(value, format);\n  public void AppendFormatted<T>(T value, int alignment) => myHandler.AppendFormatted(value, alignment);\n  public void AppendFormatted<T>(T value, int alignment, string? format) => myHandler.AppendFormatted(value, alignment, format);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "6484ced0a485e4b491366897cfb06a45d1cd353005a12eb3e9c6afd80e00dd64"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Property 'IsTerminated' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/OuterLifetime.cs",
      "language": "C#",
      "line": 37,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 35,
        "length": 12,
        "offset": 121,
        "surroundingCode": "    ///   <para>It's an error to continue scheduling on a terminated lifetime.</para>\n    /// </summary>\n    public bool IsTerminated\n    {\n      get"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "68a54de4c01d92a0ed9b80b5fad3744b56e89c572a70c763ceb25d33c522cad1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogInfoInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 30,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 28,
        "length": 15,
        "offset": 96,
        "surroundingCode": "  \n  public void AppendFormatted<T>(T value) => myHandler.AppendFormatted(value);\n  public void AppendFormatted<T>(T value, string? format) => myHandler.AppendFormatted(value, format);\n  public void AppendFormatted<T>(T value, int alignment) => myHandler.AppendFormatted(value, alignment);\n  public void AppendFormatted<T>(T value, int alignment, string? format) => myHandler.AppendFormatted(value, alignment, format);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "69191e56c9ba9b5079e7de7a9857b3f7b88a71f13a767522b7ea53c54d2b94ed"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'GetForCurrentContext' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IPerContextMap.cs",
      "language": "C#",
      "line": 32,
      "offset": 7,
      "length": 20,
      "code": {
        "startLine": 30,
        "length": 20,
        "offset": 175,
        "surroundingCode": "    /// If the context doesn't have a value set, or key's protocol value set does not contain the current context value, this will throw an exception\n    /// </summary>\n    V GetForCurrentContext();\n    \n    void View(Lifetime lifetime, Action<Lifetime, KeyValuePair<K, V>> handler);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "695974a3b017b3bd55f01c3da113c94bac0ac93167ad9abaed05edcc11248855"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'CharDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 328,
      "offset": 47,
      "length": 12,
      "code": {
        "startLine": 326,
        "length": 12,
        "offset": 226,
        "surroundingCode": "    public static readonly ReadDelegate<byte> ByteDelegate = reader => reader.ReadByte();\n    public static readonly ReadDelegate<Guid> GuidDelegate = reader => reader.ReadGuid();\n    public static readonly ReadDelegate<char> CharDelegate = reader => reader.ReadChar();\n    public static readonly ReadDelegate<decimal> DecimalDelegate = reader => reader.ReadDecimal();\n    public static readonly ReadDelegate<double> DoubleDelegate = reader => reader.ReadDouble();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "697bfc94720a89dda98ce2483946923b5758fa05da1ce536b1069d162b9d730b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'TestValue' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/RdId.cs",
      "language": "C#",
      "line": 12,
      "offset": 33,
      "length": 9,
      "code": {
        "startLine": 10,
        "length": 9,
        "offset": 81,
        "surroundingCode": "    public static readonly RdId Root = Nil;\n    \n    public static readonly RdId TestValue = new RdId(1);\n    public const int MaxStaticId = 1000000;\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "697e788b1f8578d173dcbdb21c270e4a933f18deb62e77a9dbd8d1239aa55e43"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Join' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/StealingScheduler.cs",
      "language": "C#",
      "line": 56,
      "offset": 17,
      "length": 4,
      "code": {
        "startLine": 54,
        "length": 4,
        "offset": 23,
        "surroundingCode": "    }\n\n    public void Join()\n    {\n      while (true)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "6a19e0e2294dd53397bc253e67380b97e75032f2fc12e9f3e1bea1fdd46d0d72"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'Serializers' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 55,
      "offset": 12,
      "length": 11,
      "code": {
        "startLine": 53,
        "length": 11,
        "offset": 70,
        "surroundingCode": "\n    [Obsolete(\"Lifetime is not required anymore\", false)]\n    public Serializers(Lifetime lifetime, TaskScheduler? scheduler, ITypesRegistrar? registrar)\n    : this(scheduler, registrar)\n    {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "6a1cd3d306639a8caad696e8adb4b8267f6788c59ef893d635437e0e1fff92cf"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'GetString' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 298,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 296,
        "length": 9,
        "offset": 46,
        "surroundingCode": "      public char* Data;\n\n      public string GetString()\n      {\n        return new string(Data, 0, Length);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "6af9dfa5bddf319c04c39074da3eb1a52ff8ab55b5ae09b3e7afdab517594c58"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'TryEnter' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/SpinWaitLock.cs",
      "language": "C#",
      "line": 22,
      "offset": 17,
      "length": 8,
      "code": {
        "startLine": 20,
        "length": 8,
        "offset": 23,
        "surroundingCode": "    }\n\n    public bool TryEnter()\n    {\n      return TryEnter(Thread.CurrentThread.GetHashCode());"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "6b6487d9d33f008a513adc7ce54863aed168ebe37e57f0e8ded4496cbb1993c2"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Verbose' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogEx.cs",
      "language": "C#",
      "line": 244,
      "offset": 24,
      "length": 7,
      "code": {
        "startLine": 242,
        "length": 7,
        "offset": 60,
        "surroundingCode": "\n    [StringFormatMethod(\"message\")]\n    public static void Verbose<T1, T2, T3, T4, T5>(this ILog @this, string message, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5)\n    {\n      @this.LogFormat(LoggingLevel.VERBOSE, message, t1, t2, t3, t4, t5);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "6c1864f383df686ee78fb0f090054e385d1497e3e0b9c37ede8772b4fe54d855"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Write' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSet.cs",
      "language": "C#",
      "line": 46,
      "offset": 24,
      "length": 5,
      "code": {
        "startLine": 44,
        "length": 5,
        "offset": 30,
        "surroundingCode": "    }\n\n    public static void Write(SerializationCtx ctx, UnsafeWriter writer, RdSet<T> value)\n    {\n      Assertion.Assert(!value.RdId.IsNil, \"!value.RdId.IsNil\");"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "6c192722e9ddebede714b845892aade58831bd04a3fc4e71b3a6cfc21ef0e380"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'Write' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/PolymorphicScalarIntrinsicTest.cs",
      "language": "C#",
      "line": 92,
      "offset": 19,
      "length": 5,
      "code": {
        "startLine": 90,
        "length": 5,
        "offset": 27,
        "surroundingCode": "      }\n\n      public void Write(UnsafeWriter writer) => writer.Write(\"base\");\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "6d3d347fcec276f803c2d40d80be657a990d9760b53aa26573b2ae8cc0f701df"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Exit' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/SpinWaitLock.cs",
      "language": "C#",
      "line": 60,
      "offset": 17,
      "length": 4,
      "code": {
        "startLine": 58,
        "length": 4,
        "offset": 23,
        "surroundingCode": "    }\n\n    public void Exit()\n    {\n      if (Interlocked.Decrement(ref _lockCount) == 0)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "6d9b9cf62ac672a2a5654a9e6ccf81e13057550b8c7564ee521c8b11d5efe74c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'Serializers' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdReactiveBase.cs",
      "language": "C#",
      "line": 59,
      "offset": 28,
      "length": 11,
      "code": {
        "startLine": 57,
        "length": 11,
        "offset": 51,
        "surroundingCode": "    #region Delegation\n\n    protected ISerializers Serializers => Proto.Serializers;\n    \n    internal IWire Wire => Proto.Wire;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "6e64479809a51161c065110f51f3d4a1631876371fd1ad997b7a25f46a1a3d98"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Enable' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Linearization.cs",
      "language": "C#",
      "line": 15,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 13,
        "length": 6,
        "offset": 45,
        "surroundingCode": "    private bool myEnabled;\n\n    public void Enable()\n    {\n      lock (myLock)"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "6e75e7a4738729c9422fafc50f339f11a3ceee1ad297f46c98545171db4536b9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AddOrReplaceLifetimed' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ReactiveEx.cs",
      "language": "C#",
      "line": 126,
      "offset": 24,
      "length": 21,
      "code": {
        "startLine": 124,
        "length": 21,
        "offset": 102,
        "surroundingCode": "\n    [Obsolete(\"This method has horrible performance when adding 100+ items\")]\n    public static void AddOrReplaceLifetimed<K, V>(this IViewableMap<K, V> me, Lifetime lifetime, K k, Func<Lifetime, V> vfun) where K : notnull\n    {\n      var def = lifetime.CreateNested();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "6ee24302c25e34308ab311dbc5a4b996e576fc12d676b4cdaf294b365b68f938"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'TryGetNonStaticField' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 146,
      "offset": 27,
      "length": 20,
      "code": {
        "startLine": 144,
        "length": 20,
        "offset": 28,
        "surroundingCode": "\n\n    public static object? TryGetNonStaticField(object ownerObject, string memberName)\n    {\n      try"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "6ee40657678ad9fbff8cd60ff48c9e114677b5d1f9bed1ffa77e4179784c116c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogTraceInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 32,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 30,
        "length": 15,
        "offset": 222,
        "surroundingCode": "  public void AppendFormatted<T>(T value, string? format) => myHandler.AppendFormatted(value, format);\n  public void AppendFormatted<T>(T value, int alignment) => myHandler.AppendFormatted(value, alignment);\n  public void AppendFormatted<T>(T value, int alignment, string? format) => myHandler.AppendFormatted(value, alignment, format);\n  \n  // Commented out, because the compiler will require System.Memory for a project that uses string interpolation "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "6ffafb9e061a1ed769fc74982f79cea4047405f583dd995afcfeb25081dbb835"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Factory' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/TestLogger.cs",
      "language": "C#",
      "line": 14,
      "offset": 40,
      "length": 7,
      "code": {
        "startLine": 12,
        "length": 7,
        "offset": 124,
        "surroundingCode": "  {\n    public static readonly TestLogger ExceptionLogger = new TestLogger(\"Tests\");\n    public static readonly ILogFactory Factory = new TestLogFactory();\n\n    private readonly object myMonitor = new object();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Cross",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "709e0701c3a71a39378b188e2c28a7df9a2ad5c6f6948d2c36a9b4703ff446a8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogErrorInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 32,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 30,
        "length": 15,
        "offset": 222,
        "surroundingCode": "  public void AppendFormatted<T>(T value, string? format) => myHandler.AppendFormatted(value, format);\n  public void AppendFormatted<T>(T value, int alignment) => myHandler.AppendFormatted(value, alignment);\n  public void AppendFormatted<T>(T value, int alignment, string? format) => myHandler.AppendFormatted(value, alignment, format);\n  \n  // Commented out, because the compiler will require System.Memory for a project that uses string interpolation "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "71123eb28d2eaa94dc8e7abc32c7ee45c35293703330c55cb91454c74c260d40"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'EnumerateEnumValues' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 173,
      "offset": 34,
      "length": 19,
      "code": {
        "startLine": 171,
        "length": 19,
        "offset": 43,
        "surroundingCode": "    \n    \n    public static IEnumerable<T> EnumerateEnumValues<T>()\n    {\n      foreach (var value in Enum.GetValues(typeof (T)))"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "72f0bc22cd9ca8d55b634fe76453d492666c45daa0665261cdd35d7b3ef5fe51"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'List' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SerializersEx.cs",
      "language": "C#",
      "line": 155,
      "offset": 45,
      "length": 4,
      "code": {
        "startLine": 153,
        "length": 4,
        "offset": 51,
        "surroundingCode": "    }\n\n    public static CtxReadDelegate<List<T>?> List<T>(this CtxReadDelegate<T> inner)\n    {\n      return (ctx, reader) => reader.ReadList(inner, ctx);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "7308632f62c2949105721581aca79b74bb8cece2f833c7de28da70c65bc8f80d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'MessageBroker' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/MessageBroker.cs",
      "language": "C#",
      "line": 32,
      "offset": 12,
      "length": 13,
      "code": {
        "startLine": 30,
        "length": 13,
        "offset": 54,
        "surroundingCode": "    private bool myIsQueueingAllMessages;\n\n    public MessageBroker(IScheduler scheduler)\n    {\n      myScheduler = scheduler;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "74b7a1fa0d51d58d7f0e2a3fe8fff03c784e7426bafb1564780517b92e99357c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'Reset' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/ITextBuffer.cs",
      "language": "C#",
      "line": 12,
      "offset": 10,
      "length": 5,
      "code": {
        "startLine": 10,
        "length": 5,
        "offset": 37,
        "surroundingCode": "    bool IsMaster { get; }\n\n    void Reset(string text);\n    void AssertState(string allText);\n  }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "7537e03aeee7370ee3a5365334800b3f2cd9a92b38894f29512c636e70478109"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Interned' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SerializersEx.cs",
      "language": "C#",
      "line": 170,
      "offset": 38,
      "length": 8,
      "code": {
        "startLine": 168,
        "length": 8,
        "offset": 44,
        "surroundingCode": "    }\n\n    public static CtxReadDelegate<T> Interned<T>(this CtxReadDelegate<T> inner, string internKey)\n    {\n      return (ctx, reader) => ctx.ReadInterned(reader, internKey, inner);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "758f76b7da2a0effc56399a4c028bd962f51e1fd17bb6d598f7c949d25640a81"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Enum member 'PROCESS_QUERY_INFORMATION' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Interop/Windows.cs",
      "language": "C#",
      "line": 39,
      "offset": 9,
      "length": 25,
      "code": {
        "startLine": 37,
        "length": 25,
        "offset": 80,
        "surroundingCode": "        PROCESS_CREATE_THREAD = 0x2,\n        PROCESS_DUP_HANDLE = 0x40,\n        PROCESS_QUERY_INFORMATION = 0x400,\n        PROCESS_QUERY_LIMITED_INFORMATION = 0x1000,\n        PROCESS_SET_INFORMATION = 0x200,"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "760502193e790fe39af357d92b8738b2bd8385228491c40221fdcba2990635b0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'TestLiveFiltering' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Synchronized/TestSynchronizedDictionary.cs",
      "language": "C#",
      "line": 9,
      "offset": 21,
      "length": 17,
      "code": {
        "startLine": 7,
        "length": 17,
        "offset": 90,
        "surroundingCode": "    public class TestSynchronizedDictionary : LifetimesTestBase\n    {\n        public void TestLiveFiltering()\n        {\n            var dict = new SynchronizedDictionary<int, string>"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "7768b3deed3418a1d35f9c7c1e7efb8b440579a7bb131699cc1220e7ab3057b1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogTraceInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 41,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 39,
        "length": 15,
        "offset": 160,
        "surroundingCode": "  public void AppendFormatted(string? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);\n  \n  public void AppendFormatted(object? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "781014697dedf7fed013d8541382b986eeda0d6fda94b48d0cfa41e26e33b8b4"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogInfoInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 39,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 37,
        "length": 15,
        "offset": 99,
        "surroundingCode": "  \n  public void AppendFormatted(string? value) => myHandler.AppendFormatted(value);\n  public void AppendFormatted(string? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);\n  \n  public void AppendFormatted(object? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "788e9abe5d3b421846332d3a363f5881d380e2a86fd1c155106e9eb5b6cf5dd3"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'BoolDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 324,
      "offset": 47,
      "length": 12,
      "code": {
        "startLine": 322,
        "length": 12,
        "offset": 132,
        "surroundingCode": "    #region Delegates\n    public delegate T ReadDelegate<out T>(UnsafeReader reader);\n    public static readonly ReadDelegate<bool> BoolDelegate = reader => reader.ReadBoolean();\n    public static readonly ReadDelegate<bool> BooleanDelegate = reader => reader.ReadBoolean(); //alias\n    public static readonly ReadDelegate<byte> ByteDelegate = reader => reader.ReadByte();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "78db6a8158714dbf80ad0f40a449e117b9070a6daffc7584ca2e81cb1e343945"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Enum member 'PROCESS_SUSPEND_RESUME' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Interop/Windows.cs",
      "language": "C#",
      "line": 43,
      "offset": 9,
      "length": 22,
      "code": {
        "startLine": 41,
        "length": 22,
        "offset": 84,
        "surroundingCode": "        PROCESS_SET_INFORMATION = 0x200,\n        PROCESS_SET_QUOTA = 0x100,\n        PROCESS_SUSPEND_RESUME = 0x800,\n        PROCESS_TERMINATE = 0x1,\n        PROCESS_VM_OPERATION = 0x8,"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "7939928b4dd39131e3664f8786cb54ff8c24cb110f4814edca82f72e34d31229"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Static' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IRdReactive.cs",
      "language": "C#",
      "line": 36,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 34,
        "length": 6,
        "offset": 27,
        "surroundingCode": "    }\n\n    public static T Static<T>(this T thIs, int id) where T : IRdBindable\n    {\n      Assertion.Require(id > 0 && id < RdId.MaxStaticId, \"id > 0 && id < RdId.MaxStaticId\");"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "79c6b6f99f22b6a2998267c6ecefda3925204618c022bce3a45623379770f0d3"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'UsingNestedAsync' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/OuterLifetime.cs",
      "language": "C#",
      "line": 85,
      "offset": 26,
      "length": 16,
      "code": {
        "startLine": 83,
        "length": 16,
        "offset": 128,
        "surroundingCode": "    /// </summary>\n    /// <param name=\"action\">The code to execute with a temporary lifetime.</param>\n    public Task<TRetVal> UsingNestedAsync<TRetVal>([InstantHandle] Func<Lifetime, Task<TRetVal>> action) => myLifetime.UsingNestedAsync(action);\n\n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "7b07122fa1d7359dfac21365eb30c3f1b10b9c7d2ec124ada6d8365bdf68dd49"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AdviseUntil' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ReactiveEx.cs",
      "language": "C#",
      "line": 39,
      "offset": 24,
      "length": 11,
      "code": {
        "startLine": 37,
        "length": 11,
        "offset": 30,
        "surroundingCode": "    }\n\n    public static void AdviseUntil<T>(this ISource<T> me, Lifetime lifetime, Func<T, bool> handler)\n    {\n      if (!lifetime.IsAlive) return;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "7becb837b93b8cf202dbfd3246aae717aef2926170b783298e90bb6991acef4b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Accessor 'SeverityFilter.set' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogLog.cs",
      "language": "C#",
      "line": 46,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 44,
        "length": 3,
        "offset": 44,
        "surroundingCode": "    {\n      get => ourSeverityFilter;\n      set\n      {\n        var old = ourSeverityFilter;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "7c075d45601700751551362318c01e7a3b1fdf6495534c0e438e59eaed4ef4af"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'Signal' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorInheritanceNegativeTest.cs",
      "language": "C#",
      "line": 13,
      "offset": 23,
      "length": 6,
      "code": {
        "startLine": 11,
        "length": 6,
        "offset": 56,
        "surroundingCode": "    public interface ITest1\n    {\n      ISignal<string> Signal { get; }\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "7d03105c3f521e6c21f1bc48ab6eb2b9f486964d21887ac5a8bb8d7c3236f1aa"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'Int32Delegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 561,
      "offset": 49,
      "length": 13,
      "code": {
        "startLine": 559,
        "length": 13,
        "offset": 240,
        "surroundingCode": "    public static readonly WriteDelegate<float> FloatDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Int16> Int16Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Int32> Int32Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Int64> Int64Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<UInt16> UInt16Delegate = (writer, x) => writer.Write(x);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "7d43010ff166bab7c2075ed519301275f76b74cb800a097f0dbef5f07d191d38"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Reset' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Linearization.cs",
      "language": "C#",
      "line": 52,
      "offset": 17,
      "length": 5,
      "code": {
        "startLine": 50,
        "length": 5,
        "offset": 23,
        "surroundingCode": "    }\n\n    public void Reset()\n    {\n      lock (myLock)"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "7efa1e786937ff3620c44285d450f4ebab88104a9f54d4bf315db5ba0228ed1a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Trace' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogLog.cs",
      "language": "C#",
      "line": 250,
      "offset": 24,
      "length": 5,
      "code": {
        "startLine": 248,
        "length": 5,
        "offset": 34,
        "surroundingCode": "    }\n    \n    public static void Trace(string? category, string message)\n    {\n      if (message == null) throw new ArgumentException(\"message is null\");"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "7f883fa2a163d07a69a25ced2f983320d90ff006537c34f5e30467a14c6f5503"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'FakeTuple' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 42,
      "offset": 14,
      "length": 9,
      "code": {
        "startLine": 40,
        "length": 9,
        "offset": 154,
        "surroundingCode": "    public struct FakeTuple<T1, T2, T3, T4, T5> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; }\n    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6> {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "80236d211d5da310257677e5b7db9e6a0e41211790a5b793cb2a19646f89eace"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'Read' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/Example/CustomReactive.cs",
      "language": "C#",
      "line": 53,
      "offset": 42,
      "length": 4,
      "code": {
        "startLine": 51,
        "length": 4,
        "offset": 64,
        "surroundingCode": "    #region Intrinsic\n\n    public static CustomReactive<T1, T2> Read(SerializationCtx ctx, UnsafeReader reader,\n      CtxReadDelegate<T1> readKey, CtxWriteDelegate<T1> writeKey,\n      CtxReadDelegate<T2> readValue, CtxWriteDelegate<T2> writeValue)"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "803b6601a312f7b2f067e0d66b2eb523be8f5e6d42e6ab69bfd5782a1a4bedc6"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'FakeTuple' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 46,
      "offset": 14,
      "length": 9,
      "code": {
        "startLine": 44,
        "length": 9,
        "offset": 175,
        "surroundingCode": "    public struct FakeTuple<T1, T2, T3, T4, T5, T6> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4; public T5 Item5; public T6 Item6;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; Item5 = item5; Item6 = item6; }\n    }\n    public struct FakeTuple<T1, T2, T3, T4, T5, T6, T7> {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "804e68492751c6708894c44e784305195de371b2ec73f8afe047fa0dc4b8320c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'TryUnIntern' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/IInternRoot.cs",
      "language": "C#",
      "line": 31,
      "offset": 10,
      "length": 11,
      "code": {
        "startLine": 29,
        "length": 11,
        "offset": 114,
        "surroundingCode": "    /// Gets a value from an interned ID. Returns true if successful, false otherwise\n    /// </summary>\n    bool TryUnIntern<T>(InternId id, out T result) where T : TBase;\n    \n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "80fe91ff9ad205a434193be94de0bbfa301d4f10415670ba129cc6f9d0fb5b99"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Enum member 'PROCESS_CREATE_THREAD' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Interop/Windows.cs",
      "language": "C#",
      "line": 37,
      "offset": 9,
      "length": 21,
      "code": {
        "startLine": 35,
        "length": 21,
        "offset": 78,
        "surroundingCode": "        WRITE_OWNER = 0x80000,\n        PROCESS_CREATE_PROCESS = 0x80,\n        PROCESS_CREATE_THREAD = 0x2,\n        PROCESS_DUP_HANDLE = 0x40,\n        PROCESS_QUERY_INFORMATION = 0x400,"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "81118ae1a26b8e257418c813e1fd0d2e23b94ffa012dcc1aad8b04933de20495"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'InternedExternally' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 91,
      "offset": 48,
      "length": 18,
      "code": {
        "startLine": 89,
        "length": 18,
        "offset": 166,
        "surroundingCode": "    //public fields\n    [NotNull] public IViewableProperty<string> InternedLocally { get { return _InternedLocally; }}\n    [NotNull] public IViewableProperty<string> InternedExternally { get { return _InternedExternally; }}\n    [NotNull] public IViewableProperty<string> InternedInProtocol { get { return _InternedInProtocol; }}\n    "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "81c9732f385d2217e6bcca03a792aca55554743c690f7c0e4201357b2e7c83e7"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Disable' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/SwitchingScheduler.cs",
      "language": "C#",
      "line": 49,
      "offset": 24,
      "length": 7,
      "code": {
        "startLine": 47,
        "length": 7,
        "offset": 30,
        "surroundingCode": "    }\n\n    public static void Disable(Lifetime time)\n    {\n      time.Bracket("
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "8206ca4728911d72c6c84312965a5f68215900bc4dabc225e6b4a0a45f33b29c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AssertNotNull' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Assertion.cs",
      "language": "C#",
      "line": 199,
      "offset": 24,
      "length": 13,
      "code": {
        "startLine": 197,
        "length": 13,
        "offset": 113,
        "surroundingCode": "    [AssertionMethod, StringFormatMethod(\"message\")]\n    [Conditional(\"JET_MODE_ASSERT\")]\n    public static void AssertNotNull([CodeAnalysis.NotNull] object? condition, string message, object? arg1, object? arg2, object? arg3)\n    {\n      if (condition == null)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "83c2b49809ee95114f69507227d5faee5d010275f26ce0c9a456c9b372bc8732"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'ViewNull' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ReactiveEx.cs",
      "language": "C#",
      "line": 91,
      "offset": 24,
      "length": 8,
      "code": {
        "startLine": 89,
        "length": 8,
        "offset": 30,
        "surroundingCode": "    }\n\n    public static void ViewNull<T>(this IReadonlyProperty<T> me, Lifetime lifetime, Action<Lifetime> handler) where T: class\n    {\n      me.View(lifetime, (lf, v) =>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "84703934ebbca984b7feb15aead922c491e137b59539af666da7981fce280f7f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'TryGetNonStaticProperty' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 159,
      "offset": 27,
      "length": 23,
      "code": {
        "startLine": 157,
        "length": 23,
        "offset": 37,
        "surroundingCode": "    }\n    \n    public static object? TryGetNonStaticProperty(object ownerObject, string memberName)\n    {\n      try"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "8589915ba20bcf53674f96ef9858b069c5cc4fd8d100af70c38622785b18a1a2"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Info' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogEx.cs",
      "language": "C#",
      "line": 334,
      "offset": 24,
      "length": 4,
      "code": {
        "startLine": 332,
        "length": 4,
        "offset": 60,
        "surroundingCode": "\n    [StringFormatMethod(\"message\")]\n    public static void Info(this ILog @this, string message, params object[] args)\n    {\n      @this.LogFormat(LoggingLevel.INFO, message, args);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "85c9b5f2e2595c15116ac51bd0fb19581e9266908f68d3af98b6f0dd8a15357a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Indexer 'this' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 128,
      "offset": 15,
      "length": 4,
      "code": {
        "startLine": 126,
        "length": 4,
        "offset": 25,
        "surroundingCode": "    }\n    \n    public T? this[int index]\n    {\n      get"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "868bdae4c87cd85de47a5b0777224ad5e6e21ace9a2892fb00c52418f6fef6bc"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Enum member 'Slave' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdChangeOrigin.cs",
      "language": "C#",
      "line": 4,
      "offset": 5,
      "length": 5,
      "code": {
        "startLine": 2,
        "length": 5,
        "offset": 37,
        "surroundingCode": "{\n  public enum RdChangeOrigin {\n    Slave,\n    Master\n  }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "87756977f6fc03d62270a627647d9374c917ef316969a5f4b8a4400422a1d648"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AssertNotNull' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Assertion.cs",
      "language": "C#",
      "line": 188,
      "offset": 24,
      "length": 13,
      "code": {
        "startLine": 186,
        "length": 13,
        "offset": 113,
        "surroundingCode": "    [AssertionMethod, StringFormatMethod(\"message\")]\n    [Conditional(\"JET_MODE_ASSERT\")]\n    public static void AssertNotNull([CodeAnalysis.NotNull] object? condition, string message, object? arg1, object? arg2)\n    {\n      if (condition == null)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "87f81b2f84ec1289de776482f5fc15e54ab4eb84d43f2faefc3ac4fab0fb3c89"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Enum member 'READ_CONTROL' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Interop/Windows.cs",
      "language": "C#",
      "line": 32,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 30,
        "length": 12,
        "offset": 40,
        "surroundingCode": "    {\n        DELETE = 0x10000,\n        READ_CONTROL = 0x20000,\n        SYNCHRONIZE = 0x100000,\n        WRITE_DAC = 0x40000,"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "8c014e8b577b560a78690bc9f95b4bbdeaa3b203ed565ef178e1495727c129b8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'Int64Delegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 562,
      "offset": 49,
      "length": 13,
      "code": {
        "startLine": 560,
        "length": 13,
        "offset": 240,
        "surroundingCode": "    public static readonly WriteDelegate<Int16> Int16Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Int32> Int32Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Int64> Int64Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<UInt16> UInt16Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<UInt32> UInt32Delegate = (writer, x) => writer.Write(x);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "8d22570eb01073ff29ed9bcb2c51be31d3adc67ca5d12d7c5c17bd8dc6855b14"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'Scalars' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 117,
      "offset": 31,
      "length": 7,
      "code": {
        "startLine": 115,
        "length": 7,
        "offset": 111,
        "surroundingCode": "    private readonly Queue<Type> myCurrentSerializersChain = new Queue<Type>();\n\n    public IScalarSerializers Scalars => myScalars;\n\n    public ISerializersContainer Cache { get; }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "8d397581568335bc733489963fbbccee9834fd0d27a728837a819db09fd024ef"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogErrorInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 30,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 28,
        "length": 15,
        "offset": 96,
        "surroundingCode": "  \n  public void AppendFormatted<T>(T value) => myHandler.AppendFormatted(value);\n  public void AppendFormatted<T>(T value, string? format) => myHandler.AppendFormatted(value, format);\n  public void AppendFormatted<T>(T value, int alignment) => myHandler.AppendFormatted(value, alignment);\n  public void AppendFormatted<T>(T value, int alignment, string? format) => myHandler.AppendFormatted(value, alignment, format);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "8f42b5452c91ee35b48a6d01f7c7384024f5eb7cfcd3e3b7790a6d143ebcb951"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Property 'DefaultFactory' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Log.cs",
      "language": "C#",
      "line": 35,
      "offset": 31,
      "length": 14,
      "code": {
        "startLine": 33,
        "length": 14,
        "offset": 150,
        "surroundingCode": "    /// This setting is effectively overriden (in a stack-like way) by <see cref=\"UsingLogFactory\"/>\n    /// </summary>\n    public static ILogFactory DefaultFactory\n    {\n      get => ourStatics.PeekFirst() ?? ConsoleVerboseFactory;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "900ae0cdb6dc2b646a383aa0ffb5df9b6d975b88199536d55aa3dc45117178b1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'FlowInto' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ReactiveEx.cs",
      "language": "C#",
      "line": 112,
      "offset": 24,
      "length": 8,
      "code": {
        "startLine": 110,
        "length": 8,
        "offset": 30,
        "surroundingCode": "    }\n\n    public static void FlowInto<K, V>(this IViewableMap<K, V> me, Lifetime lifetime, IDictionary<K, V> storage) where K : notnull\n    {\n      me.Advise(lifetime, e =>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "904bdca5cc9cfe652ab6cab939dfad15fbc446114d1ed8b13b5d93749596b198"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'InitBind' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFacade.cs",
      "language": "C#",
      "line": 45,
      "offset": 14,
      "length": 8,
      "code": {
        "startLine": 43,
        "length": 8,
        "offset": 20,
        "surroundingCode": "    }\n\n    public T InitBind<T>(T instance, Lifetime lifetime, IProtocol protocol)\n      where T : IRdBindable\n    {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "90f5ff4b32d0a939230431431ea660fef57b094fa70a198e86c30681bad83efe"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Synchronize' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 649,
      "offset": 24,
      "length": 11,
      "code": {
        "startLine": 647,
        "length": 11,
        "offset": 107,
        "surroundingCode": "    /// </summary>\n    [Obsolete(\"Reconsider your architecture and use Intersect\")]\n    public static void Synchronize(params LifetimeDefinition[] definitions)\n    {\n      if(definitions == null)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "9162651211eda5ad9b58165535e702e33891e0db72108c8c52cc1cdc07f0e322"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AssertTerminatesIn' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 1204,
      "offset": 23,
      "length": 18,
      "code": {
        "startLine": 1202,
        "length": 18,
        "offset": 196,
        "surroundingCode": "    /// <param name=\"timeout\">Maximum timeout to wait this lifetime is terminated</param>\n    /// <param name=\"comment\">Optional comment to log when assertion failed</param>\n    public async void AssertTerminatesIn(TimeSpan timeout, string? comment = null)\n    {\n      try"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "916b31b3aeb1675211fd38c3784ab7abe104a393a44461e7118624706818bf9f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'Client' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorAsyncCallsTest.cs",
      "language": "C#",
      "line": 50,
      "offset": 27,
      "length": 6,
      "code": {
        "startLine": 48,
        "length": 6,
        "offset": 65,
        "surroundingCode": "      public virtual int Rounds => 1;\n\n      public virtual void Client(int round) { }\n      public virtual void Server(int round) { }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "91f24f597195e59584ca9d5d19d617af617f9e46906e37a3016dfe5ba15c9010"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'GuidDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 327,
      "offset": 47,
      "length": 12,
      "code": {
        "startLine": 325,
        "length": 12,
        "offset": 240,
        "surroundingCode": "    public static readonly ReadDelegate<bool> BooleanDelegate = reader => reader.ReadBoolean(); //alias\n    public static readonly ReadDelegate<byte> ByteDelegate = reader => reader.ReadByte();\n    public static readonly ReadDelegate<Guid> GuidDelegate = reader => reader.ReadGuid();\n    public static readonly ReadDelegate<char> CharDelegate = reader => reader.ReadChar();\n    public static readonly ReadDelegate<decimal> DecimalDelegate = reader => reader.ReadDecimal();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "9338b0279aeec5376f85029e0c85f4c496854d70bea2f7d8925aa3120db9f4ef"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'FakeTuple' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 38,
      "offset": 14,
      "length": 9,
      "code": {
        "startLine": 36,
        "length": 9,
        "offset": 133,
        "surroundingCode": "    public struct FakeTuple<T1, T2, T3, T4> {\n      public T1 Item1; public T2 Item2; public T3 Item3; public T4 Item4;\n      public FakeTuple(T1 item1, T2 item2, T3 item3, T4 item4) { Item1 = item1; Item2 = item2; Item3 = item3; Item4 = item4; }\n    }\n    public struct FakeTuple<T1, T2, T3, T4, T5> {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "93825ccb4b5d347b6b1868145246712aa1a38eb4827c13cd2f99fea82aace6ce"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Select' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ReactiveEx.cs",
      "language": "C#",
      "line": 390,
      "offset": 40,
      "length": 6,
      "code": {
        "startLine": 388,
        "length": 6,
        "offset": 46,
        "surroundingCode": "    }\n\n    public static IReadonlyProperty<R> Select<T, R>(this IViewableProperty<T> source, Func<T, R> f)\n    {\n      return new MappedProperty<T,R>(source, f);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "941fdf95e4201ff62f818c461818ebec97d6258bd2f3b0352258645ec4c0a854"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'ByteArrayDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 344,
      "offset": 50,
      "length": 17,
      "code": {
        "startLine": 342,
        "length": 17,
        "offset": 233,
        "surroundingCode": "    public static readonly ReadDelegate<Uri> UriDelegate = reader => reader.ReadUri();\n    public static readonly ReadDelegate<string?> StringDelegate = reader => reader.ReadString();\n    public static readonly ReadDelegate<byte[]?> ByteArrayDelegate = reader => reader.ReadByteArray();\n    public static readonly ReadDelegate<bool[]?> BoolArrayDelegate = reader => reader.ReadArray(BooleanDelegate);\n    public static readonly ReadDelegate<int[]?> IntArrayDelegate = reader => reader.ReadIntArray();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "94314c6f6d6c0af4f50a087e5800d31ca51991e1093ff717cd0735125483a9f3"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AddAction' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 634,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 632,
        "length": 9,
        "offset": 69,
        "surroundingCode": "\n    [Obsolete(\"Use `OnTermination()` instead\")]\n    public Lifetime AddAction(Action action) => OnTermination(action);\n\n    [Obsolete(\"For most cases you need `IsNotAlive` which means lifetime is terminated or soon will be terminated (somebody called Terminate() on this lifetime or its parent).\" +"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "9477516db16335f3ee041326e3214a4af8d084ddbeee814bd50047936b809a83"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Read' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdProperty.cs",
      "language": "C#",
      "line": 46,
      "offset": 33,
      "length": 4,
      "code": {
        "startLine": 44,
        "length": 4,
        "offset": 105,
        "surroundingCode": "    public CtxWriteDelegate<T> WriteValueDelegate { get; private set; }\n\n    public static RdProperty<T> Read(SerializationCtx ctx, UnsafeReader reader)\n    {\n      return Read(ctx, reader, Polymorphic<T>.Read, Polymorphic<T>.Write);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "94ce8fefe4dccdeda2acc9fde55a85323cad6e6e5c940d5a07e087f95116ea60"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'ByteDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 326,
      "offset": 47,
      "length": 12,
      "code": {
        "startLine": 324,
        "length": 12,
        "offset": 243,
        "surroundingCode": "    public static readonly ReadDelegate<bool> BoolDelegate = reader => reader.ReadBoolean();\n    public static readonly ReadDelegate<bool> BooleanDelegate = reader => reader.ReadBoolean(); //alias\n    public static readonly ReadDelegate<byte> ByteDelegate = reader => reader.ReadByte();\n    public static readonly ReadDelegate<Guid> GuidDelegate = reader => reader.ReadGuid();\n    public static readonly ReadDelegate<char> CharDelegate = reader => reader.ReadChar();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "95208cbbc80c695ccc528b930bf584ea992031a0516b2ed2801f906b13ae4eae"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadUByteArray' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 105,
      "offset": 53,
      "length": 14,
      "code": {
        "startLine": 103,
        "length": 14,
        "offset": 156,
        "surroundingCode": "    public static readonly CtxReadDelegate<ulong> ReadULong = (ctx, reader) => reader.ReadULong();\n    \n    public static readonly CtxReadDelegate<byte[]?> ReadUByteArray = (ctx, reader) => reader.ReadArray(ReadByte, ctx);\n    public static readonly CtxReadDelegate<ushort[]?> ReadUShortArray = (ctx, reader) => reader.ReadArray(ReadUShort, ctx);\n    public static readonly CtxReadDelegate<uint[]?> ReadUIntArray = (ctx, reader) => reader.ReadArray(ReadUInt, ctx);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "95518c47a57ab3d39c23d2e46e46c672824a7f39039be24e702d920203e74529"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'UInt16Delegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 563,
      "offset": 50,
      "length": 14,
      "code": {
        "startLine": 561,
        "length": 14,
        "offset": 241,
        "surroundingCode": "    public static readonly WriteDelegate<Int32> Int32Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Int64> Int64Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<UInt16> UInt16Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<UInt32> UInt32Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<UInt64> UInt64Delegate = (writer, x) => writer.Write(x);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "957b4f8fe31ae417f53cef2724dfd68fb17c5408b0f986ce5802f42e81b54516"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'VolatileRead' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 109,
      "offset": 24,
      "length": 12,
      "code": {
        "startLine": 107,
        "length": 12,
        "offset": 91,
        "surroundingCode": "    \n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public static bool VolatileRead(ref bool location)\n    {\n#if (NET35)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "97afa362c65169022dd7904e8195eaf16267d27ea6f3aef25aa5002bb8640e35"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'InvokeSync' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SchedulerEx.cs",
      "language": "C#",
      "line": 36,
      "offset": 24,
      "length": 10,
      "code": {
        "startLine": 34,
        "length": 10,
        "offset": 30,
        "surroundingCode": "    }\n\n    public static void InvokeSync(this IScheduler sc, Action action)\n    {\n      if (sc.IsActive) action();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "9ac24b3d51cb2fc9aafc1f16e4b7223c9e83c69c58c347dd094e75f4f235647a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'ReadStringInternedAtProtocol' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 537,
      "offset": 43,
      "length": 28,
      "code": {
        "startLine": 535,
        "length": 28,
        "offset": 71,
        "surroundingCode": "      return _result;\n    };\n    public static CtxReadDelegate<string> ReadStringInternedAtProtocol = Serializers.ReadString.Interned(\"Protocol\");\n    \n    public static CtxWriteDelegate<ProtocolWrappedStringModel> Write = (ctx, writer, value) => "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "9be592ba35244544695133cd7d9d1ef40c7663bb4787d8c33471584b6d3d4df9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'DoubleDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 330,
      "offset": 49,
      "length": 14,
      "code": {
        "startLine": 328,
        "length": 14,
        "offset": 237,
        "surroundingCode": "    public static readonly ReadDelegate<char> CharDelegate = reader => reader.ReadChar();\n    public static readonly ReadDelegate<decimal> DecimalDelegate = reader => reader.ReadDecimal();\n    public static readonly ReadDelegate<double> DoubleDelegate = reader => reader.ReadDouble();\n    public static readonly ReadDelegate<float> FloatDelegate = reader => reader.ReadFloat();\n    public static readonly ReadDelegate<Int16> Int16Delegate = reader => reader.ReadInt16();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "9c716c19b11073c2bd68396cb82fc2ffdec15fa36d9012d6388b0d326c4e9043"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'Instance' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/EmptyAction.cs",
      "language": "C#",
      "line": 24,
      "offset": 47,
      "length": 8,
      "code": {
        "startLine": 22,
        "length": 8,
        "offset": 96,
        "surroundingCode": "  public static class EmptyAction<T1, T2, T3>\n  {\n    public static readonly Action<T1, T2, T3> Instance = (t1, t2, t3) => { };\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "9d9e90c925c3a950b97cda38092b9b2d0cd9415b052c512ae80216b7f48341eb"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AdviseNotNull' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ReactiveEx.cs",
      "language": "C#",
      "line": 34,
      "offset": 24,
      "length": 13,
      "code": {
        "startLine": 32,
        "length": 13,
        "offset": 34,
        "surroundingCode": "    }\n    \n    public static void AdviseNotNull<T>(this ISource<T?> me, Lifetime lifetime, Action<T> handler) where T : struct\n    {\n      me.Advise(lifetime, v => { if (v != null) handler(v.Value); });"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "9ed635d8b3683bd309aa1c3695e12793eee0c4607d8f8eb896a803d9c6310ddb"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetNotNullConditionalInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 41,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 39,
        "length": 15,
        "offset": 160,
        "surroundingCode": "  public void AppendFormatted(string? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);\n  \n  public void AppendFormatted(object? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);\n}\n#endif"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "9f41fa33e5110c9e70c85673640f7d130833084633196a2b92c103f7191d4750"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'ReadStringInterned' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 305,
      "offset": 20,
      "length": 18,
      "code": {
        "startLine": 303,
        "length": 18,
        "offset": 83,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public string? ReadStringInterned(IRawStringIntern intern)\n    {\n      int len = ReadInt32();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "9fae2437904b39e84a9f02a5f0c09a98a94365f80426f24fc9833528e7ed9d0c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'AssertState' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/ITextBuffer.cs",
      "language": "C#",
      "line": 13,
      "offset": 10,
      "length": 11,
      "code": {
        "startLine": 11,
        "length": 11,
        "offset": 39,
        "surroundingCode": "\n    void Reset(string text);\n    void AssertState(string allText);\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "a005eeb3f7ca2fa864364491c2548b891696a62a6a82ea28657cef441c1aa706"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Trace' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogEx.cs",
      "language": "C#",
      "line": 123,
      "offset": 24,
      "length": 5,
      "code": {
        "startLine": 121,
        "length": 5,
        "offset": 60,
        "surroundingCode": "\n    [StringFormatMethod(\"message\")]\n    public static void Trace<T1, T2>(this ILog @this, string message, T1 t1, T2 t2)\n    {\n      @this.LogFormat(LoggingLevel.TRACE, message, t1, t2);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "a08bc6a6aa594e7e05c8b2b260fcd92f0d056c7105e3d915886b8fc795b34370"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Name' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 406,
      "offset": 21,
      "length": 4,
      "code": {
        "startLine": 404,
        "length": 4,
        "offset": 51,
        "surroundingCode": "    public class Scalar1\n    {\n      public string Name;\n      public Scalar2 Value;\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "a0ac9063396558c55d47429aec788857fcc396ab9fc4f2c5371118a5343a48f4"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'UInt32Delegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 339,
      "offset": 49,
      "length": 14,
      "code": {
        "startLine": 337,
        "length": 14,
        "offset": 243,
        "surroundingCode": "    public static readonly ReadDelegate<long> LongDelegate = reader => reader.ReadInt64(); //alias\n    public static readonly ReadDelegate<UInt16> UInt16Delegate = reader => reader.ReadUInt16();\n    public static readonly ReadDelegate<UInt32> UInt32Delegate = reader => reader.ReadUInt32();\n    public static readonly ReadDelegate<UInt64> UInt64Delegate = reader => reader.ReadUInt64();\n    public static readonly ReadDelegate<DateTime> DateTimeDelegate = reader => reader.ReadDateTime();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "a1239ab3e1ca890e1d814032375fc9f392a55902e9daeb9f855be36058023297"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'Int64Delegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 336,
      "offset": 48,
      "length": 13,
      "code": {
        "startLine": 334,
        "length": 13,
        "offset": 237,
        "surroundingCode": "    public static readonly ReadDelegate<Int32> Int32Delegate = reader => reader.ReadInt32();\n    public static readonly ReadDelegate<int> IntDelegate = reader => reader.ReadInt32(); //alias\n    public static readonly ReadDelegate<Int64> Int64Delegate = reader => reader.ReadInt64();\n    public static readonly ReadDelegate<long> LongDelegate = reader => reader.ReadInt64(); //alias\n    public static readonly ReadDelegate<UInt16> UInt16Delegate = reader => reader.ReadUInt16();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "a131b9da3bc39fe99c588bc583e5331019b592bd940ca8af8f55ccaa68c3d467"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'Changes' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 16,
      "offset": 51,
      "length": 7,
      "code": {
        "startLine": 14,
        "length": 7,
        "offset": 83,
        "surroundingCode": "    //fields\n    //public fields\n    public IViewableProperty<RdTextBufferChange?> Changes { get { return _Changes; }}\n    public IViewableProperty<TextBufferVersion> VersionBeforeTypingSession { get { return _VersionBeforeTypingSession; }}\n    public IViewableProperty<RdAssertion> AssertedMasterText { get { return _AssertedMasterText; }}"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "a1eb0c60ef3784e559dbe2e593f861efee98d4318ccae0586e7f91ded0fc9dfe"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'SetActive' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SynchronousScheduler.cs",
      "language": "C#",
      "line": 19,
      "offset": 17,
      "length": 9,
      "code": {
        "startLine": 17,
        "length": 9,
        "offset": 66,
        "surroundingCode": "    [ThreadStatic] private static int ourActive;\n\n    public void SetActive(Lifetime lifetime)\n    {      \n      lifetime.Bracket(() => { ourActive++; }, () => { ourActive--; });"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "a47d626c4f733d69ee372fe587df3a72b25cfc3a8baedf955900a77bbae80dff"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'ViewNotNull' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ReactiveEx.cs",
      "language": "C#",
      "line": 75,
      "offset": 24,
      "length": 11,
      "code": {
        "startLine": 73,
        "length": 11,
        "offset": 30,
        "surroundingCode": "    }\n\n    public static void ViewNotNull<T>(this IReadonlyProperty<T> me, Lifetime lifetime, Action<Lifetime, T> handler) where T: class\n    {\n      me.View(lifetime, (lf, v) =>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "a4d97dc1428fd0dd26dba0419d2dbbc162bcf9972802b7cc99e5ceb1e9f805ae"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Define' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 874,
      "offset": 38,
      "length": 6,
      "code": {
        "startLine": 872,
        "length": 6,
        "offset": 76,
        "surroundingCode": "    /// <returns></returns>\n    [Pure]\n    public static LifetimeDefinition Define(string? id = null) => new LifetimeDefinition {Id = id};\n    \n    #endregion"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "a61308e41b91b2baa4bc709fefc87af3ca0ca2c4f944c45ec9d3ab2560bb6bd9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'VolatileWrite' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 99,
      "offset": 24,
      "length": 13,
      "code": {
        "startLine": 97,
        "length": 13,
        "offset": 91,
        "surroundingCode": "    \n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public static void VolatileWrite(ref int location, int value)\n    {\n#if (NET35)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "a6f5369a2cd7c03b30c8ad1575b4b7171976dcc8c135ce9ce07ca37ed108f8d8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'Server' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorAsyncCallsTest.cs",
      "language": "C#",
      "line": 51,
      "offset": 27,
      "length": 6,
      "code": {
        "startLine": 49,
        "length": 6,
        "offset": 75,
        "surroundingCode": "\n      public virtual void Client(int round) { }\n      public virtual void Server(int round) { }\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "a70262bcfdeb847c2ca09a0727e78dc2f3be809d05c84c6ca47bd46140988dba"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogWarnInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 30,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 28,
        "length": 15,
        "offset": 96,
        "surroundingCode": "  \n  public void AppendFormatted<T>(T value) => myHandler.AppendFormatted(value);\n  public void AppendFormatted<T>(T value, string? format) => myHandler.AppendFormatted(value, format);\n  public void AppendFormatted<T>(T value, int alignment) => myHandler.AppendFormatted(value, alignment);\n  public void AppendFormatted<T>(T value, int alignment, string? format) => myHandler.AppendFormatted(value, alignment, format);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "a781ddf25d4a55722dcd17d6acc32c7617107be7b50c514b37fa8697bb821c80"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Disable' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Linearization.cs",
      "language": "C#",
      "line": 24,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 22,
        "length": 7,
        "offset": 23,
        "surroundingCode": "    }\n\n    public void Disable()\n    {\n      lock (myLock)"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "a9b428aa3f87de0b18fee982ac0798847a46158aa9ca42724e820dcc4c55cd8d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'VolatileWrite' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Memory.cs",
      "language": "C#",
      "line": 121,
      "offset": 24,
      "length": 13,
      "code": {
        "startLine": 119,
        "length": 13,
        "offset": 91,
        "surroundingCode": "    \n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public static void VolatileWrite(ref bool location, bool value)\n    {\n#if (NET35)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "aaf7282dc89e511766c3da4ba68fe6f2904addc8deb1189d81886ed6da32f3c2"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Terminate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/ByteBufferAsyncProcessor.cs",
      "language": "C#",
      "line": 441,
      "offset": 17,
      "length": 9,
      "code": {
        "startLine": 439,
        "length": 9,
        "offset": 275,
        "surroundingCode": "    /// <param name=\"timeoutMs\">Timeout to wait. <see cref=\"Timeout.Infinite\"/> for infinite waiting.</param>\n    /// <returns>'true' if Join(timeoutMs) was successful, false otherwise. Also returns 'false' if thread is already stopped or killed.\"></returns>\n    public bool Terminate(int timeoutMs = Timeout.Infinite)\n    {\n      return TerminateInternal(timeoutMs, StateKind.Terminating, \"TERMINATE\");"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "ab184a27a3018a288bf2f301e14fce50162563e49325dcf27cb2f023e2193556"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'StringArrayDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 571,
      "offset": 52,
      "length": 19,
      "code": {
        "startLine": 569,
        "length": 19,
        "offset": 251,
        "surroundingCode": "    public static readonly WriteDelegate<byte[]> ByteArrayDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<int[]> IntArrayDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<string[]> StringArrayDelegate = (writer, x) => writer.Write(StringDelegate, x);\n\n    #endregion"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "abe5a6d8d327ebe928e3f74aa2fb3f942d0c85f9452bbe82746bbb8088d91f12"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Point' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Linearization.cs",
      "language": "C#",
      "line": 33,
      "offset": 17,
      "length": 5,
      "code": {
        "startLine": 31,
        "length": 5,
        "offset": 23,
        "surroundingCode": "    }\n\n    public void Point(int id)\n    {\n      Assertion.Require(id >= 0, \"{0} >= 0\", id);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "abe8e1cacc1dacec46047cf3dfb48bade13f882872ec397021a9a0a77c06b20b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'BooleanDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 553,
      "offset": 48,
      "length": 15,
      "code": {
        "startLine": 551,
        "length": 15,
        "offset": 124,
        "surroundingCode": "    public delegate void WriteDelegate<in T>(UnsafeWriter writer, T value);\n\n    public static readonly WriteDelegate<bool> BooleanDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<byte> ByteDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Guid> GuidDelegate = (writer, x) => writer.Write(x);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "ac1b0ea7290d14eb5312afbdc540656abe39b0b86feb4c0f7c10211420b726d8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogTraceInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 30,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 28,
        "length": 15,
        "offset": 96,
        "surroundingCode": "  \n  public void AppendFormatted<T>(T value) => myHandler.AppendFormatted(value);\n  public void AppendFormatted<T>(T value, string? format) => myHandler.AppendFormatted(value, format);\n  public void AppendFormatted<T>(T value, int alignment) => myHandler.AppendFormatted(value, alignment);\n  public void AppendFormatted<T>(T value, int alignment, string? format) => myHandler.AppendFormatted(value, alignment, format);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "ac397619989a41efe24f800be4d284de2490279def908bbefb563f8343260dc9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Compose' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ReactiveEx.cs",
      "language": "C#",
      "line": 301,
      "offset": 24,
      "length": 7,
      "code": {
        "startLine": 299,
        "length": 7,
        "offset": 30,
        "surroundingCode": "    }\n\n    public static void Compose<T1, T2>(this IReadonlyProperty<T1> first, Lifetime lifetime, IReadonlyProperty<T2> second, Action<T1, T2> composer)\n    {\n      first.Advise(lifetime, v =>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "ac457b220bb90fb00ab96c9acc5413cdda338001cde4f74c166765569adf9d27"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Reverse' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/RdTextChange.cs",
      "language": "C#",
      "line": 52,
      "offset": 25,
      "length": 7,
      "code": {
        "startLine": 50,
        "length": 7,
        "offset": 31,
        "surroundingCode": "    }\n\n    public RdTextChange Reverse() {\n      var newKind = ReverseKind(Kind);\n      var fullTextLength = FullTextLength == -1 ? -1 : FullTextLength - this.GetDelta();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "ace32643eadca3dbec98bcbeac5250d3f42d0c8a88b6d0fbf2144341bb5d98c9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'Read' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/PolymorphicScalarIntrinsicTest.cs",
      "language": "C#",
      "line": 97,
      "offset": 31,
      "length": 4,
      "code": {
        "startLine": 95,
        "length": 4,
        "offset": 66,
        "surroundingCode": "    public class Type1 : Base\n    {\n      public new static Type1 Read(UnsafeReader reader)\n      {\n        Assert.AreEqual(\"type1\", reader.ReadString());"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "ad5a259007bb8229e585ba7613870c10d0121321444998a403a57e1f2bfcd13f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'IsMaster' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSet.cs",
      "language": "C#",
      "line": 56,
      "offset": 17,
      "length": 8,
      "code": {
        "startLine": 54,
        "length": 8,
        "offset": 39,
        "surroundingCode": "    #region Mastering\n\n    public bool IsMaster = false;\n\n    #endregion"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "aeb90a25a8e82a75c06fa8334f3a9a4e749e9c1d07cf2ac77462e9a16c8e699f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'IdentifyEx' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IRdBindable.cs",
      "language": "C#",
      "line": 145,
      "offset": 24,
      "length": 10,
      "code": {
        "startLine": 143,
        "length": 10,
        "offset": 113,
        "surroundingCode": "\n    //PLEASE DON'T MERGE these two methods into one with IEnumerable<T>, just believe me\n    public static void IdentifyEx<T>(this List<T>? items, IIdentities ids, RdId id) where T : IRdBindable\n    {\n      items.Identify0(ids, id);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "af2f2e423e4df30e4336814541c204101df630fcce1c75649ff0366b2299784c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'Write' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SerializersEx.cs",
      "language": "C#",
      "line": 124,
      "offset": 24,
      "length": 5,
      "code": {
        "startLine": 122,
        "length": 5,
        "offset": 87,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public static void Write(this UnsafeWriter writer, RdSecureString @string)\n    {\n      writer.Write(@string.Contents);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "af36e4ca4a67cd2fb5ed1f419be4190b59ba2194dea38c1ce0372b2a440f835b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AtLeast' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LoggingLevel.cs",
      "language": "C#",
      "line": 48,
      "offset": 32,
      "length": 7,
      "code": {
        "startLine": 46,
        "length": 7,
        "offset": 38,
        "surroundingCode": "    }\n\n    public static LoggingLevel AtLeast(this LoggingLevel? level, LoggingLevel least)\n    {\n      if (level == null || level.Value < least) return least;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "b14bd70962c430f102c64d9623ac14197805343d3ce93d86bc02e26904276a5a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Assert' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogEx.cs",
      "language": "C#",
      "line": 530,
      "offset": 24,
      "length": 6,
      "code": {
        "startLine": 528,
        "length": 6,
        "offset": 30,
        "surroundingCode": "    }\n\n    public static void Assert(this ILog @this, bool condition, string message, params object[] args)\n    {\n      if (!condition)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "b267c411014a8a7aa18c0dcd74c684213e1cda0404605471fee0dc9a05cb92d0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Trace' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogEx.cs",
      "language": "C#",
      "line": 135,
      "offset": 24,
      "length": 5,
      "code": {
        "startLine": 133,
        "length": 5,
        "offset": 60,
        "surroundingCode": "\n    [StringFormatMethod(\"message\")]\n    public static void Trace<T1, T2, T3, T4>(this ILog @this, string message, T1 t1, T2 t2, T3 t3, T4 t4)\n    {\n      @this.LogFormat(LoggingLevel.TRACE, message, t1, t2, t3, t4);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "b47767998255bab22bf70d63b12c4af45520554888b0477d1303dcc7a0bdfcd0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'WriteStringContent' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 489,
      "offset": 17,
      "length": 18,
      "code": {
        "startLine": 487,
        "length": 18,
        "offset": 116,
        "surroundingCode": "    /// <param name=\"count\"></param>\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public void WriteStringContent(string? value, int offset, int count)\n    {\n      if (value == null) return;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "b4bc8bb2879333d93b7f40004bb792190c8b2d14a8c97b5573efb3272c7237c5"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'WithIdFromName' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IRdReactive.cs",
      "language": "C#",
      "line": 42,
      "offset": 21,
      "length": 14,
      "code": {
        "startLine": 40,
        "length": 14,
        "offset": 31,
        "surroundingCode": "    }\n    \n    public static T WithIdFromName<T>(this T thIs, string name) where T : IRdReactive\n    {\n      return thIs.WithId(RdId.Nil.Mix(name));"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "b659310fdaa72e1fc68e93657c0e0dea10aa7ab819163b7d9cbf74a39c630a07"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'AsTaskScheduler' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SchedulerEx.cs",
      "language": "C#",
      "line": 57,
      "offset": 33,
      "length": 15,
      "code": {
        "startLine": 55,
        "length": 15,
        "offset": 39,
        "surroundingCode": "    }\n\n    public static TaskScheduler AsTaskScheduler(this IScheduler scheduler) => scheduler as TaskScheduler ?? new SchedulerWrapper(scheduler);\n  }\n}"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "b6f1bdf32fb5bea2fcff0be25141232cf345ebe73310bd086af201e2a3502dde"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'IsCommitting' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/RdTextBuffer.cs",
      "language": "C#",
      "line": 26,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 24,
        "length": 12,
        "offset": 71,
        "surroundingCode": "    private TextBufferTypingSession? myActiveSession;\n\n    public bool IsCommitting => myActiveSession != null && myActiveSession.IsCommitting;\n\n    public TextBufferVersion BufferVersion { get; private set; }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "b85a23e107d20d182fb2f68898c097f8109e186aba88aa5035379712db9eb6f9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'MemberNotNullWhenAttribute' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/NullableAttributes.cs",
      "language": "C#",
      "line": 136,
      "offset": 16,
      "length": 26,
      "code": {
        "startLine": 134,
        "length": 26,
        "offset": 121,
        "surroundingCode": "        /// The list of field and property members that are promised to be not-null.\n        /// </param>\n        public MemberNotNullWhenAttribute(bool returnValue, params string[] members)\n        {\n            ReturnValue = returnValue;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "b8674027e29e4c1615a6ef7d3494fadb41676a91e609228e6e5c158848038d8e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AssertEverTerminated' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 1192,
      "offset": 21,
      "length": 20,
      "code": {
        "startLine": 1190,
        "length": 20,
        "offset": 221,
        "surroundingCode": "    /// <para>As this method operates on a <see cref=\"Lifetime\"/> object you do not own, it cannot terminate the lifetime automatically when a missed termination is detected.</para>\n    /// </remarks>\n    public Lifetime AssertEverTerminated(string? comment = null)\n    {\n      Definition.AssertEverTerminated(comment);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "b97e8a4df07e5ffb2275658c13d360b934214770b16ee61a0b2344c4c59cedc5"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'InterningMtModel' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 150,
      "offset": 12,
      "length": 16,
      "code": {
        "startLine": 148,
        "length": 16,
        "offset": 45,
        "surroundingCode": "    }\n    //secondary constructor\n    public InterningMtModel (\n      [NotNull] string searchLabel\n    ) : this ("
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "ba7249453e96efe63e15ecbaebe80633167cdf5770add888f3aa919c17421967"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Constant 'HighPriority' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SingleThreadScheduler.cs",
      "language": "C#",
      "line": 15,
      "offset": 22,
      "length": 12,
      "code": {
        "startLine": 13,
        "length": 12,
        "offset": 91,
        "surroundingCode": "  public class PrioritizedAction : IComparable<PrioritizedAction>\n  {\n    public const int HighPriority = 32;\n    public const int NormalPriority = 0;\n    public const int LowPriority = -32;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "bb019a30ef95459a93d14242f3420df04e056106f310885f1788b533d5f6dbf0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'Instance' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/EmptyAction.cs",
      "language": "C#",
      "line": 14,
      "offset": 38,
      "length": 8,
      "code": {
        "startLine": 12,
        "length": 8,
        "offset": 78,
        "surroundingCode": "  public static class EmptyAction<T>\n  {\n    public static readonly Action<T> Instance = t => { };\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "bbe6479aa83908c60469f9c18672b9a0186c583a515e6dc53778044a5b4ae564"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'AdviseNotNull' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ReactiveEx.cs",
      "language": "C#",
      "line": 29,
      "offset": 24,
      "length": 13,
      "code": {
        "startLine": 27,
        "length": 13,
        "offset": 30,
        "surroundingCode": "    }\n\n    public static void AdviseNotNull<T>(this ISource<T?> me, Lifetime lifetime, Action<T> handler) where T : class\n    {\n      me.Advise(lifetime, v => { if  (v != null) handler(v); });"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "bbed8bc79750e594680bfdf389ae28ea2b09ac2e919888cd884091f969198714"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'View' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IPerContextMap.cs",
      "language": "C#",
      "line": 35,
      "offset": 10,
      "length": 4,
      "code": {
        "startLine": 33,
        "length": 4,
        "offset": 94,
        "surroundingCode": "    \n    void View(Lifetime lifetime, Action<Lifetime, KeyValuePair<K, V>> handler);\n    void View(Lifetime lifetime, Action<Lifetime, K, V> handler);\n    \n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "bdb993f719f104498d83d02b03975e75582bda0414113faf3f26f0cbdb142bb1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Property 'Ptr' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 277,
      "offset": 18,
      "length": 3,
      "code": {
        "startLine": 275,
        "length": 3,
        "offset": 24,
        "surroundingCode": "    }\n\n    public byte* Ptr\n    {\n      [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "bf11a494c18ffaed1b9924db2c6b947fc5a4242dcc7c5ba0c78bfd2fbc163a0a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Enum member 'PROCESS_CREATE_PROCESS' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Interop/Windows.cs",
      "language": "C#",
      "line": 36,
      "offset": 9,
      "length": 22,
      "code": {
        "startLine": 34,
        "length": 22,
        "offset": 68,
        "surroundingCode": "        WRITE_DAC = 0x40000,\n        WRITE_OWNER = 0x80000,\n        PROCESS_CREATE_PROCESS = 0x80,\n        PROCESS_CREATE_THREAD = 0x2,\n        PROCESS_DUP_HANDLE = 0x40,"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "bf2c7589fa2a7e3964f1405387df460d3f0ce810ccbdf897eee6e42fbbef4459"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'Instance' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/EmptyAction.cs",
      "language": "C#",
      "line": 19,
      "offset": 43,
      "length": 8,
      "code": {
        "startLine": 17,
        "length": 8,
        "offset": 88,
        "surroundingCode": "  public static class EmptyAction<T1, T2>\n  {\n    public static readonly Action<T1, T2> Instance = (t1, t2) => { };\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "bfc9fb73f9d7cf7b7b9354b6d3139ca61e42f4dafbeb903513aef6b7c6d14f9e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogErrorInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 31,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 29,
        "length": 15,
        "offset": 196,
        "surroundingCode": "  public void AppendFormatted<T>(T value) => myHandler.AppendFormatted(value);\n  public void AppendFormatted<T>(T value, string? format) => myHandler.AppendFormatted(value, format);\n  public void AppendFormatted<T>(T value, int alignment) => myHandler.AppendFormatted(value, alignment);\n  public void AppendFormatted<T>(T value, int alignment, string? format) => myHandler.AppendFormatted(value, alignment, format);\n  "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "c1a9880056f4fd207ab572c9af5f71dc060b480cc135874da50156bf93dfc7ef"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'RdExtAttribute' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 37,
      "offset": 12,
      "length": 14,
      "code": {
        "startLine": 35,
        "length": 14,
        "offset": 127,
        "surroundingCode": "    ///   RdRpc interface type. Must be implemented by type, which marked by this RdExt attribute.\n    /// </param>\n    public RdExtAttribute(Type rdRpcInterface)\n    {\n      RdRpcInterface = rdRpcInterface;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "c21bd59ab51d2e0f6736b863453561e90388867364e4e5182354776506908949"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'SetIfEmpty' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ViewableProperty.cs",
      "language": "C#",
      "line": 66,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 64,
        "length": 10,
        "offset": 49,
        "surroundingCode": "    \n    //todo make interlocked\n    public bool SetIfEmpty(T value)\n    {\n      if (Maybe.HasValue)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "c25c961f36b49fe4d68e36d8a1ebc792730e54634fca63bd5bb6c3214842b1f9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Enum member 'OFF' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LoggingLevel.cs",
      "language": "C#",
      "line": 9,
      "offset": 5,
      "length": 3,
      "code": {
        "startLine": 7,
        "length": 3,
        "offset": 92,
        "surroundingCode": "    /// Do not use it in logging. Only in config to disable logging.\n    /// </summary>\n    OFF = 0,\n    /// <summary>\n    /// For errors that lead to application failure "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "c2e09408cdf98ac87b4b76e66fc8828513148c3608bc61559db618d0f9a427c1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'GetPropertyValueSafe' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 188,
      "offset": 22,
      "length": 20,
      "code": {
        "startLine": 186,
        "length": 20,
        "offset": 151,
        "surroundingCode": "    /// <typeparam name=\"T\">Expected return type</typeparam>\n    /// <returns>Evaluated property value or default value</returns>\n    public static T? GetPropertyValueSafe<T>(this object o, string propertyName, T? defaultValue = default(T))\n    {\n      T? result = defaultValue;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "c32d86435b612b10d3846849555fe3405ed2820bba47aed423b65c482f79039b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Enter' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/SpinWaitLock.cs",
      "language": "C#",
      "line": 27,
      "offset": 17,
      "length": 5,
      "code": {
        "startLine": 25,
        "length": 5,
        "offset": 23,
        "surroundingCode": "    }\n\n    public void Enter()\n    {\n      int currentThreadId = Thread.CurrentThread.GetHashCode();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "c32fad7893c7dc23641ef7d3c2f03caa52aa0455b95bd58af69329d92f98b509"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Define' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/RdId.cs",
      "language": "C#",
      "line": 22,
      "offset": 24,
      "length": 6,
      "code": {
        "startLine": 20,
        "length": 6,
        "offset": 30,
        "surroundingCode": "    }\n\n    public static RdId Define(Type type, long? id = null)\n    {\n      return new RdId(id ?? Hash(type.Name));"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "c3f52a46688cd414c4dddf155f24d78dc2f0d2547adf94c47e5ae232e93508f8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogErrorInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 41,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 39,
        "length": 15,
        "offset": 160,
        "surroundingCode": "  public void AppendFormatted(string? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);\n  \n  public void AppendFormatted(object? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);\n}\n#endif"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "c4b69d3c94709aab73642e8f93ff4ddd92aaff207af83cbfc5109e17c571bb61"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetNotNullConditionalInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 32,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 30,
        "length": 15,
        "offset": 222,
        "surroundingCode": "  public void AppendFormatted<T>(T value, string? format) => myHandler.AppendFormatted(value, format);\n  public void AppendFormatted<T>(T value, int alignment) => myHandler.AppendFormatted(value, alignment);\n  public void AppendFormatted<T>(T value, int alignment, string? format) => myHandler.AppendFormatted(value, alignment, format);\n  \n  // Commented out, because the compiler will require System.Memory for a project that uses string interpolation "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "c5d14ca9c2dd8a542d80b874cc985c69841e75cf99b912aa6ae50ddccaa6867b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'FailWithResult' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Assertion.cs",
      "language": "C#",
      "line": 391,
      "offset": 21,
      "length": 14,
      "code": {
        "startLine": 389,
        "length": 14,
        "offset": 62,
        "surroundingCode": "    [AssertionMethod]\n    [DoesNotReturn]\n    public static T FailWithResult<T>(T result, string message, object? arg1, object? arg2, object? arg3)\n    {\n      Fail(message, arg1, arg2, arg3);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "c7ebebd1a87cec1bd3da36be32d961b0484d50f6af163aa879b58e1ffd9284e1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'FloatDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 559,
      "offset": 49,
      "length": 13,
      "code": {
        "startLine": 557,
        "length": 13,
        "offset": 246,
        "surroundingCode": "    public static readonly WriteDelegate<decimal> DecimalDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<double> DoubleDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<float> FloatDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Int16> Int16Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Int32> Int32Delegate = (writer, x) => writer.Write(x);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "c83dea4ffa6ae4cd1ec06031c44a8cba98e00c5ecbf051836ecd62e7f3f88099"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Enum member 'PROCESS_SET_QUOTA' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Interop/Windows.cs",
      "language": "C#",
      "line": 42,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 40,
        "length": 17,
        "offset": 101,
        "surroundingCode": "        PROCESS_QUERY_LIMITED_INFORMATION = 0x1000,\n        PROCESS_SET_INFORMATION = 0x200,\n        PROCESS_SET_QUOTA = 0x100,\n        PROCESS_SUSPEND_RESUME = 0x800,\n        PROCESS_TERMINATE = 0x1,"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "c92763e565a997d65dea774d8d4ce10237970eb8eb275bcf1f48f82cd138750a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'IntDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 335,
      "offset": 46,
      "length": 11,
      "code": {
        "startLine": 333,
        "length": 11,
        "offset": 239,
        "surroundingCode": "    public static readonly ReadDelegate<short> ShortDelegate = reader => reader.ReadInt16(); //alias\n    public static readonly ReadDelegate<Int32> Int32Delegate = reader => reader.ReadInt32();\n    public static readonly ReadDelegate<int> IntDelegate = reader => reader.ReadInt32(); //alias\n    public static readonly ReadDelegate<Int64> Int64Delegate = reader => reader.ReadInt64();\n    public static readonly ReadDelegate<long> LongDelegate = reader => reader.ReadInt64(); //alias"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "c9875dc7f7b4f80b59942a4c6415f8a874334fdfcbe742da82c87df5fdf56bed"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Property 'Length' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/NativeMemoryPool.cs",
      "language": "C#",
      "line": 200,
      "offset": 18,
      "length": 6,
      "code": {
        "startLine": 198,
        "length": 6,
        "offset": 61,
        "surroundingCode": "\n      public IntPtr Data => myHolder.Data;\n      public int Length => myHolder.Length;\n\n      internal IntPtr Realloc(int size)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "c9d959fe09163bc18281abbd1f4a54c99efec49d54be7439a7747105ec9d9835"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogInfoInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 31,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 29,
        "length": 15,
        "offset": 196,
        "surroundingCode": "  public void AppendFormatted<T>(T value) => myHandler.AppendFormatted(value);\n  public void AppendFormatted<T>(T value, string? format) => myHandler.AppendFormatted(value, format);\n  public void AppendFormatted<T>(T value, int alignment) => myHandler.AppendFormatted(value, alignment);\n  public void AppendFormatted<T>(T value, int alignment, string? format) => myHandler.AppendFormatted(value, alignment, format);\n  "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "ca69eade26369e55405aa9da213a0011390acaddd0ce9d268b20bc900d921e7e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogInfoInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 41,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 39,
        "length": 15,
        "offset": 160,
        "surroundingCode": "  public void AppendFormatted(string? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);\n  \n  public void AppendFormatted(object? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);\n}\n#endif"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "cb05a10fd7f929c6955c94d8c7f728fc00768117a7bcf40ae992ae5692488f2c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'ActivateBind' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 70,
      "offset": 14,
      "length": 12,
      "code": {
        "startLine": 68,
        "length": 12,
        "offset": 82,
        "surroundingCode": "    /// <typeparam name=\"T\"></typeparam>\n    /// <returns></returns>\n    public T ActivateBind<T>(Lifetime lifetime, IProtocol protocol) where T : RdBindableBase\n    {\n      var instance = Activate<T>();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "cb1b756419b45dd9cd4a5d5cbaa6c77663e6b14009fbfcecea5ed1c62f7a6669"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'FakeTuple' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 26,
      "offset": 14,
      "length": 9,
      "code": {
        "startLine": 24,
        "length": 9,
        "offset": 70,
        "surroundingCode": "    public struct FakeTuple<T1> {\n      public T1 Item1;\n      public FakeTuple(T1 item1) { Item1 = item1; }\n    }\n    public struct FakeTuple<T1, T2> {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "cc259e8511bffe260a574c69c9ff4b5d0e2a9c8eca2bb9970fa6a6a8add93811"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'InterningProtocolLevelModel' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 391,
      "offset": 12,
      "length": 27,
      "code": {
        "startLine": 389,
        "length": 27,
        "offset": 45,
        "surroundingCode": "    }\n    //secondary constructor\n    public InterningProtocolLevelModel (\n      [NotNull] string searchLabel\n    ) : this ("
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "ccb06f7adf19978991172d9ce74bc1c8573659ba5acd9124582b123620c58788"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogVerboseInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 39,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 37,
        "length": 15,
        "offset": 99,
        "surroundingCode": "  \n  public void AppendFormatted(string? value) => myHandler.AppendFormatted(value);\n  public void AppendFormatted(string? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);\n  \n  public void AppendFormatted(object? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "cde4208203740cafbc1f382caa87e97ab91df5a84b50d32352b487bf3a651bf5"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'Array' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SerializersEx.cs",
      "language": "C#",
      "line": 150,
      "offset": 41,
      "length": 5,
      "code": {
        "startLine": 148,
        "length": 5,
        "offset": 55,
        "surroundingCode": "\n    //Readers\n    public static CtxReadDelegate<T[]?> Array<T>(this CtxReadDelegate<T> inner)\n    {\n      return (ctx, reader) => reader.ReadArray(inner, ctx);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "d00e298923587d4b91105b32dee35c1ee041e1a17be2ea136cf82084401b5c27"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'AssertedSlaveText' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 19,
      "offset": 43,
      "length": 17,
      "code": {
        "startLine": 17,
        "length": 17,
        "offset": 264,
        "surroundingCode": "    public IViewableProperty<TextBufferVersion> VersionBeforeTypingSession { get { return _VersionBeforeTypingSession; }}\n    public IViewableProperty<RdAssertion> AssertedMasterText { get { return _AssertedMasterText; }}\n    public IViewableProperty<RdAssertion> AssertedSlaveText { get { return _AssertedSlaveText; }}\n\n    //private fields"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "d06350293f12d0b65d45f2e233d00b416b903e3962b0ef471420968694fef5d1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Verbose' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogEx.cs",
      "language": "C#",
      "line": 250,
      "offset": 24,
      "length": 7,
      "code": {
        "startLine": 248,
        "length": 7,
        "offset": 60,
        "surroundingCode": "\n    [StringFormatMethod(\"message\")]\n    public static void Verbose<T1, T2, T3, T4, T5, T6>(this ILog @this, string message, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6)\n    {\n      @this.LogFormat(LoggingLevel.VERBOSE, message, t1, t2, t3, t4, t5, t6);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "d11a2eca0b962c90290f60de2b7e9ffe8cc60fc67cd5849ef5d8f9481a2703f5"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'BufferVersion' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/ITextBuffer.cs",
      "language": "C#",
      "line": 9,
      "offset": 23,
      "length": 13,
      "code": {
        "startLine": 7,
        "length": 13,
        "offset": 81,
        "surroundingCode": "  public interface ITextBuffer : ISignal<RdTextChange>\n  {\n    TextBufferVersion BufferVersion { get; }\n    bool IsMaster { get; }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "d1aa7557988c825d5181cae323dbf8aabae5361b70109c82591cda70afcded0b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'ReflectionSerializersFacade' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFacade.cs",
      "language": "C#",
      "line": 22,
      "offset": 12,
      "length": 27,
      "code": {
        "startLine": 20,
        "length": 27,
        "offset": 58,
        "surroundingCode": "    public ITypesRegistrar Registrar { get; }\n\n    public ReflectionSerializersFacade() : this(null)\n    {\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "d1c22157843434e601a341318962e995d21d4158eb9d3dbbfaf8c2cd69c062e0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'ReadUInt16FromBytes' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 178,
      "offset": 26,
      "length": 19,
      "code": {
        "startLine": 176,
        "length": 19,
        "offset": 36,
        "surroundingCode": "    }\n    \n    public static UInt16 ReadUInt16FromBytes(byte[] bytes)\n    {\n      fixed (byte* bb = bytes)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "d1c97fbe8da58dab89d5ecc6848d7c258a35186a57ce72e381a4d9b2b29f7e64"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'DecimalDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 329,
      "offset": 50,
      "length": 15,
      "code": {
        "startLine": 327,
        "length": 15,
        "offset": 229,
        "surroundingCode": "    public static readonly ReadDelegate<Guid> GuidDelegate = reader => reader.ReadGuid();\n    public static readonly ReadDelegate<char> CharDelegate = reader => reader.ReadChar();\n    public static readonly ReadDelegate<decimal> DecimalDelegate = reader => reader.ReadDecimal();\n    public static readonly ReadDelegate<double> DoubleDelegate = reader => reader.ReadDouble();\n    public static readonly ReadDelegate<float> FloatDelegate = reader => reader.ReadFloat();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "d2b5392887ea411b73f0cab6672e8da39abc705a26448d1f7f3f61f11ae5a759"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Info' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogEx.cs",
      "language": "C#",
      "line": 339,
      "offset": 24,
      "length": 4,
      "code": {
        "startLine": 337,
        "length": 4,
        "offset": 30,
        "surroundingCode": "    }\n\n    public static void Info(this ILog @this, Exception ex, string? message = null)\n    {\n      @this.Log(LoggingLevel.INFO, message, ex);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "d3cfd4525e7a1bcc122230a1666dbe24c7907ff85bb6e81ab670390752032dab"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'IdentifyEx' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IRdBindable.cs",
      "language": "C#",
      "line": 150,
      "offset": 24,
      "length": 10,
      "code": {
        "startLine": 148,
        "length": 10,
        "offset": 30,
        "surroundingCode": "    }\n\n    public static void IdentifyEx<T>(this T[]? items, IIdentities ids, RdId id) where T : IRdBindable\n    {\n      items.Identify0(ids, id);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "d44e31bfa0d208cb9f7dffeae8955e82af4e4745073fa550e599cedf2122a035"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Property 'IsDisposed' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/NativeMemoryPool.cs",
      "language": "C#",
      "line": 230,
      "offset": 19,
      "length": 10,
      "code": {
        "startLine": 228,
        "length": 10,
        "offset": 62,
        "surroundingCode": "\n      public bool IsUsed => myUse == Used;\n      public bool IsDisposed => myUse == Disposed;\n\n      public int Length { get; private set; }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "d4aae74d35544480c2b44e8c2c0ad6c7d339f3604fcda1b233607a637462182e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'Value' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 407,
      "offset": 22,
      "length": 5,
      "code": {
        "startLine": 405,
        "length": 5,
        "offset": 53,
        "surroundingCode": "    {\n      public string Name;\n      public Scalar2 Value;\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "d4cab64dd8d7dc29bfe2d8e55a746357e78b7de6a1d26ab1f0fddccb208721c4"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'AssertedMasterText' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 18,
      "offset": 43,
      "length": 18,
      "code": {
        "startLine": 16,
        "length": 18,
        "offset": 250,
        "surroundingCode": "    public IViewableProperty<RdTextBufferChange?> Changes { get { return _Changes; }}\n    public IViewableProperty<TextBufferVersion> VersionBeforeTypingSession { get { return _VersionBeforeTypingSession; }}\n    public IViewableProperty<RdAssertion> AssertedMasterText { get { return _AssertedMasterText; }}\n    public IViewableProperty<RdAssertion> AssertedSlaveText { get { return _AssertedSlaveText; }}\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "d5aefceba2fab264f5f6d306be5a4cd548b64c55fd845abb0a5da64bbf99020a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'DecimalDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 557,
      "offset": 51,
      "length": 15,
      "code": {
        "startLine": 555,
        "length": 15,
        "offset": 238,
        "surroundingCode": "    public static readonly WriteDelegate<Guid> GuidDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<char> CharDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<decimal> DecimalDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<double> DoubleDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<float> FloatDelegate = (writer, x) => writer.Write(x);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "d93d110dfeecb1fa25fc4322d1a8c399e56b8cd6c22e2bfe49f2f13f56eacdf7"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'BoolArrayDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 345,
      "offset": 50,
      "length": 17,
      "code": {
        "startLine": 343,
        "length": 17,
        "offset": 249,
        "surroundingCode": "    public static readonly ReadDelegate<string?> StringDelegate = reader => reader.ReadString();\n    public static readonly ReadDelegate<byte[]?> ByteArrayDelegate = reader => reader.ReadByteArray();\n    public static readonly ReadDelegate<bool[]?> BoolArrayDelegate = reader => reader.ReadArray(BooleanDelegate);\n    public static readonly ReadDelegate<int[]?> IntArrayDelegate = reader => reader.ReadIntArray();\n    public static readonly ReadDelegate<string?[]?> StringArrayDelegate = reader => reader.ReadArray(StringDelegate);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "d95f94178cd8fe9c99c5f35fed2a9d905c5496c1270793b0e6208954acf71ca2"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'GetExtension' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdBindableBase.cs",
      "language": "C#",
      "line": 160,
      "offset": 15,
      "length": 12,
      "code": {
        "startLine": 158,
        "length": 12,
        "offset": 16,
        "surroundingCode": "\n\n    public T? GetExtension<T>(string name) where T:class\n    {\n      lock (myExtensions)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "da74b4695d136dba49a253aeb3bb48fa5520e19f0aac2c2fb036e0f6569cff94"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogWarnInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 39,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 37,
        "length": 15,
        "offset": 99,
        "surroundingCode": "  \n  public void AppendFormatted(string? value) => myHandler.AppendFormatted(value);\n  public void AppendFormatted(string? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);\n  \n  public void AppendFormatted(object? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "da7ca202f1ea53cf582fe20a369bbf288c3e1322fc949fe11eaff7c927e1684e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'FakeTuple' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 30,
      "offset": 14,
      "length": 9,
      "code": {
        "startLine": 28,
        "length": 9,
        "offset": 91,
        "surroundingCode": "    public struct FakeTuple<T1, T2> {\n      public T1 Item1; public T2 Item2;\n      public FakeTuple(T1 item1, T2 item2) { Item1 = item1; Item2 = item2; }\n    }\n    public struct FakeTuple<T1, T2, T3> {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "da9c1e131384c89bbf30951c6a89720d59637ed0f0d522eea648dbfc3e570f7a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'WriteStringInternedAtTest' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 319,
      "offset": 44,
      "length": 25,
      "code": {
        "startLine": 317,
        "length": 25,
        "offset": 127,
        "surroundingCode": "      WriteInterningNestedTestStringModelNullable(ctx, writer, value.Inner);\n    };\n    public static CtxWriteDelegate<string> WriteStringInternedAtTest = Serializers.WriteString.Interned(\"Test\");\n    public static CtxWriteDelegate<InterningNestedTestStringModel> WriteInterningNestedTestStringModelNullable = InterningNestedTestStringModel.Write.NullableClass();\n    //custom body"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "db90e6328fbdf2e9f499513801e56443ec22dece549b083346cd537823597b22"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'CharDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 556,
      "offset": 48,
      "length": 12,
      "code": {
        "startLine": 554,
        "length": 12,
        "offset": 235,
        "surroundingCode": "    public static readonly WriteDelegate<byte> ByteDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Guid> GuidDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<char> CharDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<decimal> DecimalDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<double> DoubleDelegate = (writer, x) => writer.Write(x);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "dca72df0199a48398ae5ba272925c48787c30567da6cdd729e6c7420b2361039"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'Instance' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/EmptyEnumerator.cs",
      "language": "C#",
      "line": 13,
      "offset": 47,
      "length": 8,
      "code": {
        "startLine": 11,
        "length": 8,
        "offset": 109,
        "surroundingCode": "  public sealed class EmptyEnumerator<T> : IEnumerator<T> \n  {\n    public static readonly EmptyEnumerator<T> Instance = new EmptyEnumerator<T>();\n\n    public T Current => throw new InvalidOperationException($\"{nameof(EmptyEnumerator<T>)}.{nameof(Current)} is undefined\");"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "dcee7674abad1f0b97afbf4d70dca1d55a55eb4f3501c419c5a6fa8604ea1b54"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'UInt64Delegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 340,
      "offset": 49,
      "length": 14,
      "code": {
        "startLine": 338,
        "length": 14,
        "offset": 240,
        "surroundingCode": "    public static readonly ReadDelegate<UInt16> UInt16Delegate = reader => reader.ReadUInt16();\n    public static readonly ReadDelegate<UInt32> UInt32Delegate = reader => reader.ReadUInt32();\n    public static readonly ReadDelegate<UInt64> UInt64Delegate = reader => reader.ReadUInt64();\n    public static readonly ReadDelegate<DateTime> DateTimeDelegate = reader => reader.ReadDateTime();\n    public static readonly ReadDelegate<Uri> UriDelegate = reader => reader.ReadUri();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "dfb875cf16ac2a1d4a63dd97b73408e19d1095176abc4f612352a64a50964042"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'AssertDocumentLength' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/RdTextChangeEx.cs",
      "language": "C#",
      "line": 10,
      "offset": 24,
      "length": 20,
      "code": {
        "startLine": 8,
        "length": 20,
        "offset": 117,
        "surroundingCode": "    public static int GetDelta(this RdTextChange that) => that.New.Length - that.Old.Length;\n\n    public static void AssertDocumentLength(this RdTextChange that, int currentLen)\n    {\n      if (that.Kind != RdTextChangeKind.Reset && that.FullTextLength != -1)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "e0079acdc6367636013e7a99f7a423b6f7861d6c48aef5ca0d1a56ad8153e3de"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'AllowUnsafeWriterCaching' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 135,
      "offset": 24,
      "length": 24,
      "code": {
        "startLine": 133,
        "length": 24,
        "offset": 70,
        "surroundingCode": "    /// </summary>\n    [Obsolete(\"Don't use\")]\n    public static bool AllowUnsafeWriterCaching\n    {\n      get => true;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "e02495a28ff451237cdc8f50961129b0368f736f0b1f7271466dff90cd0898d4"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogTraceInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 39,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 37,
        "length": 15,
        "offset": 99,
        "surroundingCode": "  \n  public void AppendFormatted(string? value) => myHandler.AppendFormatted(value);\n  public void AppendFormatted(string? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);\n  \n  public void AppendFormatted(object? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "e11e0c28a0bba369dc5df0909d474cd66c5f279eda34c713cb510cf457634507"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Enum member 'DELETE' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Interop/Windows.cs",
      "language": "C#",
      "line": 31,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 29,
        "length": 6,
        "offset": 52,
        "surroundingCode": "    internal enum ProcessAccessRights\n    {\n        DELETE = 0x10000,\n        READ_CONTROL = 0x20000,\n        SYNCHRONIZE = 0x100000,"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "e241083005b631be86714ba606f560773b9f49aada18b6e338c57dd95c2e700b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Log2Floor' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/BitHacks.cs",
      "language": "C#",
      "line": 29,
      "offset": 23,
      "length": 9,
      "code": {
        "startLine": 27,
        "length": 9,
        "offset": 141,
        "surroundingCode": "    /// <param name=\"x\">Must be greater than or equal to zero.</param>\n    /// <returns><c>y : 2^y&lt;=x</c></returns>\n    public static int Log2Floor(int x)\n    {\n      if (x < 0) throw new ArgumentException(\"x must be greater than 0\");"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "e584bfba11886bb2803959b0ccffb795eca6f5a1ce90489ced1dc6fae2ddfc46"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'View' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IPerContextMap.cs",
      "language": "C#",
      "line": 34,
      "offset": 10,
      "length": 4,
      "code": {
        "startLine": 32,
        "length": 4,
        "offset": 44,
        "surroundingCode": "    V GetForCurrentContext();\n    \n    void View(Lifetime lifetime, Action<Lifetime, KeyValuePair<K, V>> handler);\n    void View(Lifetime lifetime, Action<Lifetime, K, V> handler);\n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "e685a38968571b02bcb694ff8d3a5caf66df5b8fb04d4f7e89526bf8f42f07de"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Field 'InitVersion' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/TextBufferVersion.cs",
      "language": "C#",
      "line": 7,
      "offset": 37,
      "length": 11,
      "code": {
        "startLine": 5,
        "length": 11,
        "offset": 74,
        "surroundingCode": "  public struct TextBufferVersion\n  {\n    public static TextBufferVersion InitVersion = new TextBufferVersion(-1, -1);\n\n    public TextBufferVersion(int master, int slave) : this()"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "e7e8f8ba3a6fff4eb1b4dac42ed4015fa60196a42c7b0f238cca7601af34e6f3"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'RdScalarAttribute' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 63,
      "offset": 12,
      "length": 17,
      "code": {
        "startLine": 61,
        "length": 17,
        "offset": 49,
        "surroundingCode": "    public Type? Marshaller { get; }\n\n    public RdScalarAttribute()\n    {\n    }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "e7fcbef9e4e70016c016f439db02f8d16afdbb3dc9c403a68e88753d9b0519f7"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Write' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 685,
      "offset": 17,
      "length": 5,
      "code": {
        "startLine": 683,
        "length": 5,
        "offset": 80,
        "surroundingCode": "\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public void Write<TK, TV, TDict>(WriteDelegate<TK> writeKeyDelegate, WriteDelegate<TV> writeValueDelegate, TDict value) where TDict : IDictionary<TK, TV>\n    {\n      if (value == null) Write(-1);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "e7ff6c61c4c8c864846fc4fa198ddd097661c312b5a5f5dbe47e954c353780c7"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'Write' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdPerContextMap.cs",
      "language": "C#",
      "line": 91,
      "offset": 28,
      "length": 5,
      "code": {
        "startLine": 89,
        "length": 5,
        "offset": 29,
        "surroundingCode": "\n\n        public static void Write(SerializationCtx context, UnsafeWriter writer, RdPerContextMap<K, V> value)\n        {\n            RdId.Write(writer, value.RdId);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "e900fb432baa7065f9210f9f6152ba2a963302f7c7328751504dbbcccd1e07c6"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'Read' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorSimpleTest.cs",
      "language": "C#",
      "line": 117,
      "offset": 37,
      "length": 4,
      "code": {
        "startLine": 115,
        "length": 4,
        "offset": 84,
        "surroundingCode": "      public sealed class IntrinsicType\n      {\n        public static IntrinsicType Read(UnsafeReader reader) => new IntrinsicType();\n        public void Write(UnsafeWriter writer)\n        {"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "e967c254f4c1744d0544a7b98d225bcd9d157bd131be6b33796a449b8963729f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'NextNotNullValueAsync' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ReactiveEx.cs",
      "language": "C#",
      "line": 397,
      "offset": 27,
      "length": 21,
      "code": {
        "startLine": 395,
        "length": 21,
        "offset": 38,
        "surroundingCode": "\n#if !NET35\n    public static Task<T> NextNotNullValueAsync<T>(this ISource<T> source, Lifetime lifetime)\n    {\n      return source.NextValueAsync(lifetime, value => value != null);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "e9ff2bcf705e524ad6a3de7efa508e6521ce7eb8a868f7e21ab76f99e9d2ac97"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'IsMaster' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Components/TestWire.cs",
      "language": "C#",
      "line": 28,
      "offset": 17,
      "length": 8,
      "code": {
        "startLine": 26,
        "length": 8,
        "offset": 62,
        "surroundingCode": "    public TestWire Connection { get; set; }\n\n    public bool IsMaster\n    {\n      get { return myIsMaster; }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "eb1b3d5860dba093849ea5f4ca5d747a7068b67387f9de70c8b2fd7cfd59dad8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Enum member 'PROCESS_TERMINATE' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Interop/Windows.cs",
      "language": "C#",
      "line": 44,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 42,
        "length": 17,
        "offset": 83,
        "surroundingCode": "        PROCESS_SET_QUOTA = 0x100,\n        PROCESS_SUSPEND_RESUME = 0x800,\n        PROCESS_TERMINATE = 0x1,\n        PROCESS_VM_OPERATION = 0x8,\n        PROCESS_VM_READ = 0x10,"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "eb1ddfdcd067918b74dc605112170aef835597ef442bdc5d1812be636604e281"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'FailWithResult' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Assertion.cs",
      "language": "C#",
      "line": 369,
      "offset": 21,
      "length": 14,
      "code": {
        "startLine": 367,
        "length": 14,
        "offset": 62,
        "surroundingCode": "    [AssertionMethod]\n    [DoesNotReturn]\n    public static T FailWithResult<T>(T result, string message, object? arg)\n    {\n      Fail(message, arg);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "ebe05311c5f1f7535c7deae1f694bec46d14be4b57d4b0c5a1b316896af6d35c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Advise' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ReactiveEx.cs",
      "language": "C#",
      "line": 24,
      "offset": 24,
      "length": 6,
      "code": {
        "startLine": 22,
        "length": 6,
        "offset": 30,
        "surroundingCode": "    }\n\n    public static void Advise(this ISource<Unit> me, Lifetime lifetime, Action handler)\n    {\n      me.Advise(lifetime, _ => { handler(); });"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "ecdf1983ff10afe076f5f0e8c194977eee4924f2be4593b1029e179d84cd2be3"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Catch' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogLog.cs",
      "language": "C#",
      "line": 300,
      "offset": 24,
      "length": 5,
      "code": {
        "startLine": 298,
        "length": 5,
        "offset": 39,
        "surroundingCode": "#endif    \n    \n    public static void Catch(string comment, Action action)\n    {\n      try"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "ed6b66d705ef1fd448c8a75dfd6bafd3f554261699aa8a71c3f87ff03943d5bb"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Constant 'LowPriority' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SingleThreadScheduler.cs",
      "language": "C#",
      "line": 17,
      "offset": 22,
      "length": 11,
      "code": {
        "startLine": 15,
        "length": 11,
        "offset": 102,
        "surroundingCode": "    public const int HighPriority = 32;\n    public const int NormalPriority = 0;\n    public const int LowPriority = -32;\n    \n    public PrioritizedAction(Action action, int priority = NormalPriority)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "ee0ce7f028984fb87ba50f7e1b5e36fc8f3fe0e5e484f5c09fe8b6754f6d61d9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Property 'DynamicAssembly' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 75,
      "offset": 28,
      "length": 15,
      "code": {
        "startLine": 73,
        "length": 15,
        "offset": 86,
        "surroundingCode": "    private readonly Lazy<ModuleBuilder> myModuleBuilder;\n\n    public AssemblyBuilder DynamicAssembly => myAssemblyBuilder.Value;\n    public ModuleBuilder DynamicModule => myModuleBuilder.Value;\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "ee322c7d1fb641bf731214b0ca301f7535aaa0edcf71610cb84782242e52b5c1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'With' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/GeneralEx.cs",
      "language": "C#",
      "line": 12,
      "offset": 25,
      "length": 4,
      "code": {
        "startLine": 10,
        "length": 4,
        "offset": 108,
        "surroundingCode": "        [DebuggerStepThrough]\n        [EditorBrowsable(EditorBrowsableState.Never)]\n        public static T With<T>(this T control, [InstantHandle, NotNull] Action<T> action)\n        {\n            action(control);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "f06ac2e38fc459409c9380c6e16c1727e10c65a10f46120112a1e6ff37801c28"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'UInt16Delegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 338,
      "offset": 49,
      "length": 14,
      "code": {
        "startLine": 336,
        "length": 14,
        "offset": 240,
        "surroundingCode": "    public static readonly ReadDelegate<Int64> Int64Delegate = reader => reader.ReadInt64();\n    public static readonly ReadDelegate<long> LongDelegate = reader => reader.ReadInt64(); //alias\n    public static readonly ReadDelegate<UInt16> UInt16Delegate = reader => reader.ReadUInt16();\n    public static readonly ReadDelegate<UInt32> UInt32Delegate = reader => reader.ReadUInt32();\n    public static readonly ReadDelegate<UInt64> UInt64Delegate = reader => reader.ReadUInt64();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "f164c8d5990747ebc2ef5d33a39aa1bf5e22f9481059b5376f0a956ec732933d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AssertNotNull' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Assertion.cs",
      "language": "C#",
      "line": 210,
      "offset": 24,
      "length": 13,
      "code": {
        "startLine": 208,
        "length": 13,
        "offset": 113,
        "surroundingCode": "    [AssertionMethod, StringFormatMethod(\"message\")]\n    [Conditional(\"JET_MODE_ASSERT\")]\n    public static void AssertNotNull([CodeAnalysis.NotNull] object? condition, string message, params object?[] args)\n    {\n      if (condition == null)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "f1e1fc3ef44aa6182b40d3edcafa248bb72e0f694562aaee59a773d793b6a3e8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Accessor 'BackwardsCompatibleWireFormat.set' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/IWire.cs",
      "language": "C#",
      "line": 59,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 57,
        "length": 3,
        "offset": 58,
        "surroundingCode": "    {\n      get => myBackwardsCompatibleWireFormat;\n      set\n      {\n        myBackwardsCompatibleWireFormat = value;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "f21f2b8021fc00c1f3db03bc8c69a5cd4aa1885b243d58b40e4c9504e1977068"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'IsMaster' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/ITextBuffer.cs",
      "language": "C#",
      "line": 10,
      "offset": 10,
      "length": 8,
      "code": {
        "startLine": 8,
        "length": 8,
        "offset": 58,
        "surroundingCode": "  {\n    TextBufferVersion BufferVersion { get; }\n    bool IsMaster { get; }\n\n    void Reset(string text);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "f3e7c2eed37c9f8ffff3b8db586ffb9d267d8760debaa4592983a5143c6f5e3b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'TrackAction' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Cross/Util/Logging.cs",
      "language": "C#",
      "line": 20,
      "offset": 21,
      "length": 11,
      "code": {
        "startLine": 18,
        "length": 11,
        "offset": 27,
        "surroundingCode": "    }\n\n    public static T TrackAction<T>(string message, Func<T> action)\n    {\n      using (new LoggingCookie(message))"
      }
    }
  ],
  "attributes": {
    "module": "Test.Cross",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "f500213575170d78c79adc1d4d5b1eec5338c3a2e8b1566e7b1ba8037bee1822"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Property 'TypesCatalog' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 43,
      "offset": 27,
      "length": 12,
      "code": {
        "startLine": 41,
        "length": 12,
        "offset": 85,
        "surroundingCode": "    public IProxyGenerator Generator => myProxyGenerator;\n\n    public ITypesCatalog? TypesCatalog => myTypesCatalog;\n\n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "f5384377cae44e03c54a6d8e6390f9a805554b939ba01535ae299c8765fbf845"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetNotNullConditionalInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 30,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 28,
        "length": 15,
        "offset": 96,
        "surroundingCode": "  \n  public void AppendFormatted<T>(T value) => myHandler.AppendFormatted(value);\n  public void AppendFormatted<T>(T value, string? format) => myHandler.AppendFormatted(value, format);\n  public void AppendFormatted<T>(T value, int alignment) => myHandler.AppendFormatted(value, alignment);\n  public void AppendFormatted<T>(T value, int alignment, string? format) => myHandler.AppendFormatted(value, alignment, format);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "f6b731f3ccdca74cbe4286d4578a7d5f9c7fb36698137da22cb6985c1de01e47"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'Write' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/data/Example/CustomReactive.cs",
      "language": "C#",
      "line": 63,
      "offset": 24,
      "length": 5,
      "code": {
        "startLine": 61,
        "length": 5,
        "offset": 30,
        "surroundingCode": "    }\n\n    public static void Write(SerializationCtx ctx, UnsafeWriter writer, CustomReactive<T1, T2> value)\n    {\n      writer.Write(true);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "f6d2ec58e84bb2ee34759b30dd24a40a1beb79832d5d2d307d86352bde066ea9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'TryDequeue' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CollectionEx.cs",
      "language": "C#",
      "line": 45,
      "offset": 24,
      "length": 10,
      "code": {
        "startLine": 43,
        "length": 10,
        "offset": 171,
        "surroundingCode": "    /// <typeparam name=\"T\"></typeparam>\n    /// <returns>`true` if <paramref name=\"queue\"/>.Count > 0 at method start, `false` otherwise</returns>\n    public static bool TryDequeue<T>(this Queue<T> queue, [MaybeNullWhen(false)] out T res)\n    {\n      if (queue.Count > 0)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "f708d6a997072d1aaf31e533fb4061a53608ba6133c67d2104ba13fc4e13502f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Field 'myAction' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorScalarInterfaceSerializerTest.cs",
      "language": "C#",
      "line": 62,
      "offset": 21,
      "length": 8,
      "code": {
        "startLine": 60,
        "length": 8,
        "offset": 85,
        "surroundingCode": "    {\n      // this filed makes MyImpl1 serialization unpossible\n      public Action myAction;\n    } \n    public class MyImpl2 : IMyInterface { }   "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "f7641adbc5c3d24cb0c093bcfb031ec1dad0546ea7ffbc6d7663b5981ebfa443"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'NextTrueValueAsync' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ReactiveEx.cs",
      "language": "C#",
      "line": 402,
      "offset": 30,
      "length": 18,
      "code": {
        "startLine": 400,
        "length": 18,
        "offset": 36,
        "surroundingCode": "    }\n\n    public static Task<bool> NextTrueValueAsync(this ISource<bool> source, Lifetime lifetime)\n    {\n      return source.NextValueAsync(lifetime, value => value);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "f7bc4cd8ac69caa4695a0319c533bf56f6a9b7cec6ad7e06c3b6acd9e0aa3c78"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Property 'IsIdle' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SingleThreadScheduler.cs",
      "language": "C#",
      "line": 113,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 111,
        "length": 6,
        "offset": 18,
        "surroundingCode": "\n\n    public bool IsIdle => myQueue.ToProcessCount == 0;\n\n    //Could be annotated by CallStackAnnotation.AnnotateAction()"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "f9d50c5e0c3fcc96baa2471db8af0e78f95474b3497177c91bd74c6d36c37e3f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogVerboseInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 41,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 39,
        "length": 15,
        "offset": 160,
        "surroundingCode": "  public void AppendFormatted(string? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);\n  \n  public void AppendFormatted(object? value, int alignment = 0, string? format = null) => myHandler.AppendFormatted(value, alignment, format);\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "fa9e0e6c6b4abc5fd35f7bc2bef3202fb47875c026a893e8fe7cbd8382e906f4"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'UriDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 567,
      "offset": 47,
      "length": 11,
      "code": {
        "startLine": 565,
        "length": 11,
        "offset": 246,
        "surroundingCode": "    public static readonly WriteDelegate<UInt64> UInt64Delegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<DateTime> DateTimeDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<Uri> UriDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<string> StringDelegate = (writer, x) => writer.Write(x);\n    public static readonly WriteDelegate<byte[]> ByteArrayDelegate = (writer, x) => writer.Write(x);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "fb78b175dd82a54784c61ba0d788bb2308b948ccdcdccaf8bcd9bd9e0b4367a3"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Verbose' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogEx.cs",
      "language": "C#",
      "line": 256,
      "offset": 24,
      "length": 7,
      "code": {
        "startLine": 254,
        "length": 7,
        "offset": 60,
        "surroundingCode": "\n    [StringFormatMethod(\"message\")]\n    public static void Verbose(this ILog @this, string message, object[] args)\n    {\n      @this.LogFormat(LoggingLevel.VERBOSE, message, args);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "fbd9408a4190b3079bc5dcbe2c054b7c1cfacd03e6c51b6e61062e7645980cb4"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Interned' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SerializersEx.cs",
      "language": "C#",
      "line": 197,
      "offset": 39,
      "length": 8,
      "code": {
        "startLine": 195,
        "length": 8,
        "offset": 49,
        "surroundingCode": "    }\n    \n    public static CtxWriteDelegate<T> Interned<T>(this CtxWriteDelegate<T> inner, string internKey)\n    {\n      return (ctx, reader, value) => ctx.WriteInterned(reader, value, internKey, inner);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "fc31ad4ac3f17b133c4dcba7742262e1d372310a230114c5ae507f992beda7b4"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'IncrementMaster' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/TextBufferVersion.cs",
      "language": "C#",
      "line": 82,
      "offset": 30,
      "length": 15,
      "code": {
        "startLine": 80,
        "length": 15,
        "offset": 48,
        "surroundingCode": "    #region Utils\n\n    public TextBufferVersion IncrementMaster()\n    {\n      return new TextBufferVersion(Master + 1, Slave);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "fc4562f73a8ad88b6ad0314781cb39e8d3a2a5877fc154b8b904be9e866926c6"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'NewThreadLocalWriterNoCaching' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 162,
      "offset": 26,
      "length": 29,
      "code": {
        "startLine": 160,
        "length": 29,
        "offset": 133,
        "surroundingCode": "    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    [Obsolete(\"Use NewThreadLocalWriter()\")]\n    public static Cookie NewThreadLocalWriterNoCaching()\n    {\n      return NewThreadLocalWriterImpl(false);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "fdf976485f71b304290d478a0f74d258a8ccd982b49d98e5caf3b2a02f73014b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Where' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/LifetimedList.cs",
      "language": "C#",
      "line": 285,
      "offset": 50,
      "length": 5,
      "code": {
        "startLine": 283,
        "length": 5,
        "offset": 60,
        "surroundingCode": "    }\n    \n    public static IEnumerable<ValueLifetimed<T>> Where<T>(this LifetimedList<T> source, Func<ValueLifetimed<T>, bool> predicate)\n    {\n      foreach (var value in source)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "fe0c04caa94509ee5bd2a0248a83c8bea9a1cb6f009316124252fe95124406a2"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Constructor 'Serializers' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 63,
      "offset": 12,
      "length": 11,
      "code": {
        "startLine": 61,
        "length": 11,
        "offset": 76,
        "surroundingCode": "    public Serializers() => RegisterFrameworkMarshallers(this);\n\n    public Serializers(ITypesRegistrar? registrar)\n      : this()\n    {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "fe33a68054472aecd7a6d3d2e49fc3885c04d65d17504a4445d004fa657e70d1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AppendFormatted' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/StringInterpolation/JetLogWarnInterpolatedStringHandler.cs",
      "language": "C#",
      "line": 31,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 29,
        "length": 15,
        "offset": 196,
        "surroundingCode": "  public void AppendFormatted<T>(T value) => myHandler.AppendFormatted(value);\n  public void AppendFormatted<T>(T value, string? format) => myHandler.AppendFormatted(value, format);\n  public void AppendFormatted<T>(T value, int alignment) => myHandler.AppendFormatted(value, alignment);\n  public void AppendFormatted<T>(T value, int alignment, string? format) => myHandler.AppendFormatted(value, alignment, format);\n  "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "fee0504a6a6de48fc2da851db2abeda8bcf1d1caecfd03ee525ec85b8d2ad7af"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'AddBracket' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/Lifetime.cs",
      "language": "C#",
      "line": 630,
      "offset": 21,
      "length": 10,
      "code": {
        "startLine": 628,
        "length": 10,
        "offset": 111,
        "surroundingCode": "    // ReSharper disable InconsistentNaming\n    [Obsolete(\"Use `Bracket` method instead\")]\n    public Lifetime AddBracket([InstantHandle] Action FOpening, Action FClosing) { Bracket(FOpening, FClosing); return this; }\n    // ReSharper restore InconsistentNaming\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "fee9e6f3978d1367585bcd703f845f76b451a86ef114ac5af0c759330b195134"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Field 'UriDelegate' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 342,
      "offset": 46,
      "length": 11,
      "code": {
        "startLine": 340,
        "length": 11,
        "offset": 243,
        "surroundingCode": "    public static readonly ReadDelegate<UInt64> UInt64Delegate = reader => reader.ReadUInt64();\n    public static readonly ReadDelegate<DateTime> DateTimeDelegate = reader => reader.ReadDateTime();\n    public static readonly ReadDelegate<Uri> UriDelegate = reader => reader.ReadUri();\n    public static readonly ReadDelegate<string?> StringDelegate = reader => reader.ReadString();\n    public static readonly ReadDelegate<byte[]?> ByteArrayDelegate = reader => reader.ReadByteArray();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Global"
  },
  "hash": "ffa9892b8b1614b27db19d2caf9f9deb920f929c53519a2253dface9c5578244"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Property 'Id' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdIdHierarchyGuardTest.cs",
      "language": "C#",
      "line": 60,
      "offset": 19,
      "length": 2,
      "code": {
        "startLine": 58,
        "length": 2,
        "offset": 27,
        "surroundingCode": "      }\n\n      public RdId Id { get { return myValue.RdId; } }\n\n      public static Model Read(SerializationCtx ctx, UnsafeReader reader)"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMember.Local"
  },
  "hash": "02cfecc99dcaebd5375ec334931ee81f5acfdc847837bea2accee7362d4c979b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Method 'GetThreadLocalDebugInfo' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/FirstChanceExceptionInterceptor.cs",
      "language": "C#",
      "line": 57,
      "offset": 29,
      "length": 23,
      "code": {
        "startLine": 55,
        "length": 23,
        "offset": 35,
        "surroundingCode": "    }\n\n    private static object[] GetThreadLocalDebugInfo()\n    {\n      var info = ourThreadLocalDebugInfo;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Local"
  },
  "hash": "163f83a85faafec923d8b5e38b5d899e32de150d73828d1e6cd3e49b828ec23f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Enum member 'Single' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/BitSliceTest.cs",
      "language": "C#",
      "line": 16,
      "offset": 23,
      "length": 6,
      "code": {
        "startLine": 14,
        "length": 6,
        "offset": 83,
        "surroundingCode": "    private enum ELong : long { Single = long.MaxValue}\n    \n    private enum E1 { Single }\n    private enum E4 : uint { Zero, One, Two, Three }\n    "
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedMember.Local"
  },
  "hash": "33d4c7b19482ffb14e47b89cc9e9d479c2621dd7d1ec1b54fae2ccfa781f44c5"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Enum member 'Single' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/BitSliceTest.cs",
      "language": "C#",
      "line": 12,
      "offset": 27,
      "length": 6,
      "code": {
        "startLine": 10,
        "length": 6,
        "offset": 53,
        "surroundingCode": "  {\n    private enum E0 {}\n    private enum EMinus { Single = -1}\n    private enum EUint : uint { Single = uint.MaxValue}\n    private enum ELong : long { Single = long.MaxValue}"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedMember.Local"
  },
  "hash": "700142d11241852bb52966a5fffe131344081b9e2235ed527d8a1f2226b72969"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Enum member 'Single' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/BitSliceTest.cs",
      "language": "C#",
      "line": 13,
      "offset": 33,
      "length": 6,
      "code": {
        "startLine": 11,
        "length": 6,
        "offset": 94,
        "surroundingCode": "    private enum E0 {}\n    private enum EMinus { Single = -1}\n    private enum EUint : uint { Single = uint.MaxValue}\n    private enum ELong : long { Single = long.MaxValue}\n    "
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedMember.Local"
  },
  "hash": "9b4d117793d0b3aab90e7c5d4ae061b919dc40d91b152eea6deb83aa3eb174ef"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Field 'log' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 21,
      "offset": 25,
      "length": 3,
      "code": {
        "startLine": 19,
        "length": 3,
        "offset": 104,
        "surroundingCode": "  public class ScalarSerializer : IScalarSerializers, ISerializersContainer\n  {\n    private static ILog log = Log.GetLog(typeof(ScalarSerializer));\n\n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMember.Local"
  },
  "hash": "9b5053382d043d0b6bfabd3705ff10ff9bbed306329436b41bfdb10ca99edbdb"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Enum member 'Single' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/BitSliceTest.cs",
      "language": "C#",
      "line": 14,
      "offset": 33,
      "length": 6,
      "code": {
        "startLine": 12,
        "length": 6,
        "offset": 127,
        "surroundingCode": "    private enum EMinus { Single = -1}\n    private enum EUint : uint { Single = uint.MaxValue}\n    private enum ELong : long { Single = long.MaxValue}\n    \n    private enum E1 { Single }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedMember.Local"
  },
  "hash": "df13b1db03cd2e630d9589bd61024c9e6dcdf938f24f1d45a5f4de0e52c308fe"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Enum member 'Three' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/BitSliceTest.cs",
      "language": "C#",
      "line": 17,
      "offset": 46,
      "length": 5,
      "code": {
        "startLine": 15,
        "length": 5,
        "offset": 81,
        "surroundingCode": "    \n    private enum E1 { Single }\n    private enum E4 : uint { Zero, One, Two, Three }\n    \n    private BitSlice<int> mySliceInt;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedMember.Local"
  },
  "hash": "fbb6f4fa92dd802b31123156484781c5bb10fb13afa95ac890d6baee7a9e2f24"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never accessed via base type (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Only implementations of method 'View' are used",
  "detailsInfo": "Type member is never used with base type or interface, it is always accessed via more specific type",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IPerContextMap.cs",
      "language": "C#",
      "line": 35,
      "offset": 10,
      "length": 4,
      "code": {
        "startLine": 33,
        "length": 4,
        "offset": 94,
        "surroundingCode": "    \n    void View(Lifetime lifetime, Action<Lifetime, KeyValuePair<K, V>> handler);\n    void View(Lifetime lifetime, Action<Lifetime, K, V> handler);\n    \n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMemberInSuper.Global"
  },
  "hash": "00325dc74fa2f16a522aad74a83b1337f449d875dee7fbd2a01ee20d1b9b1cbe"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never accessed via base type (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Only implementations of method 'ReceiveBlocking' are used",
  "detailsInfo": "Type member is never used with base type or interface, it is always accessed via more specific type",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 17,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 15,
        "length": 15,
        "offset": 48,
        "surroundingCode": "  public interface IReceiveChannel<T>\n  {\n    T ReceiveBlocking();\n    Task<T> ReceiveAsync();\n  }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMemberInSuper.Global"
  },
  "hash": "04f6983e0cce40c302fa4b712904e60c6f0178093427033f1ecac743394cab34"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never accessed via base type (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Only implementations of indexer 'this' are used",
  "detailsInfo": "Type member is never used with base type or interface, it is always accessed via more specific type",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IPerContextMap.cs",
      "language": "C#",
      "line": 41,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 39,
        "length": 4,
        "offset": 126,
        "surroundingCode": "    /// When this map is not bound, this will automatically create a new mapping instead of throwing\n    /// </summary>\n    V this[K key] { get; }\n    \n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMemberInSuper.Global"
  },
  "hash": "0dbec61639a794bcb845c819524524cba1124b083b937783375d2c77b00e8861"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never accessed via base type (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Only implementations of property 'BufferVersion' are used",
  "detailsInfo": "Type member is never used with base type or interface, it is always accessed via more specific type",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/ITextBuffer.cs",
      "language": "C#",
      "line": 9,
      "offset": 23,
      "length": 13,
      "code": {
        "startLine": 7,
        "length": 13,
        "offset": 81,
        "surroundingCode": "  public interface ITextBuffer : ISignal<RdTextChange>\n  {\n    TextBufferVersion BufferVersion { get; }\n    bool IsMaster { get; }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMemberInSuper.Global"
  },
  "hash": "15a84e32d7524fb0d33b1e394d2539d5b4145a24cf38fea1e13c8555cd06bbaf"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never accessed via base type (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Only implementations of property 'Context' are used",
  "detailsInfo": "Type member is never used with base type or interface, it is always accessed via more specific type",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IPerContextMap.cs",
      "language": "C#",
      "line": 26,
      "offset": 18,
      "length": 7,
      "code": {
        "startLine": 24,
        "length": 7,
        "offset": 97,
        "surroundingCode": "    /// The context that is used by this map. Must be heavy.\n    /// </summary>\n    RdContext<K> Context { get; }\n    \n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMemberInSuper.Global"
  },
  "hash": "1bf98ecadf62db7e988fcdf4a134f5ad451309f8fde6e10353e965ef5e679fca"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never accessed via base type (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Only implementations of property 'Count' are used",
  "detailsInfo": "Type member is never used with base type or interface, it is always accessed via more specific type",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/IViewableMap.cs",
      "language": "C#",
      "line": 23,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 21,
        "length": 5,
        "offset": 52,
        "surroundingCode": "\n    // note: solve interface ambiguity\n    new int Count { get; }\n    new ICollection<K> Keys { get; }\n    new ICollection<V> Values { get; }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMemberInSuper.Global"
  },
  "hash": "1fea7bee24dce37f6b07d9ad397c65ceb575d2b297945219905ccaa8283045ad"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never accessed via base type (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Only implementations of property 'RdProperty' are used",
  "detailsInfo": "Type member is never used with base type or interface, it is always accessed via more specific type",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorPropertiesTest.cs",
      "language": "C#",
      "line": 71,
      "offset": 33,
      "length": 10,
      "code": {
        "startLine": 69,
        "length": 10,
        "offset": 69,
        "surroundingCode": "    public interface IPartSync\n    {\n      IViewableProperty<string> RdProperty { get; }\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMemberInSuper.Global"
  },
  "hash": "33d02a0df9e7b4278ba137427d6871466b06839cec5a1ad4bc9a097070ffac8d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never accessed via base type (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Only implementations of property 'Scheduler' are used",
  "detailsInfo": "Type member is never used with base type or interface, it is always accessed via more specific type",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ISignal.cs",
      "language": "C#",
      "line": 14,
      "offset": 17,
      "length": 9,
      "code": {
        "startLine": 12,
        "length": 9,
        "offset": 86,
        "surroundingCode": "    /// This scheduler is reserved for future use.\n    /// </summary>\n    IScheduler? Scheduler { get; set; }\n    \n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMemberInSuper.Global"
  },
  "hash": "3a0378cb374236a63c67a844ea3cabc836f008e02f4c095a403e8e795f2863ec"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never accessed via base type (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Only implementations of property 'Change' are used",
  "detailsInfo": "Type member is never used with base type or interface, it is always accessed via more specific type",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/IViewableList.cs",
      "language": "C#",
      "line": 23,
      "offset": 27,
      "length": 6,
      "code": {
        "startLine": 21,
        "length": 6,
        "offset": 99,
        "surroundingCode": "    /// items of this <see cref=\"ViewableList{T}\"/>. \n    /// </summary>\n    ISource<ListEvent<T>> Change { get; } \n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMemberInSuper.Global"
  },
  "hash": "49adfa870cf71d5817b738e2c12ec3c0efa1ac94e4603380ef5323e3e3347136"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never accessed via base type (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Only implementations of method 'TryGetValue' are used",
  "detailsInfo": "Type member is never used with base type or interface, it is always accessed via more specific type",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IPerContextMap.cs",
      "language": "C#",
      "line": 47,
      "offset": 10,
      "length": 11,
      "code": {
        "startLine": 45,
        "length": 11,
        "offset": 136,
        "surroundingCode": "    /// When this map is not bound, this will automatically create a new mapping instead of returning false\n    /// </summary>\n    bool TryGetValue(K key, out V value);\n  }\n}"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMemberInSuper.Global"
  },
  "hash": "52b371e16d6ab605dfe02ce8f23df04537596bdbf89578f7772f8fc67c6d48e5"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never accessed via base type (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Only implementations of method 'SendAsync' are used",
  "detailsInfo": "Type member is never used with base type or interface, it is always accessed via more specific type",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 24,
      "offset": 10,
      "length": 9,
      "code": {
        "startLine": 22,
        "length": 9,
        "offset": 43,
        "surroundingCode": "  {\n    void SendBlocking(T msg);\n    Task SendAsync(T msg);\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMemberInSuper.Global"
  },
  "hash": "61da25791f0163ce476e0eb6d9804454118272df3a4784457ec807842a750ec9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never accessed via base type (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Only implementations of property 'Count' are used",
  "detailsInfo": "Type member is never used with base type or interface, it is always accessed via more specific type",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/JetPriorityQueue.cs",
      "language": "C#",
      "line": 23,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 21,
        "length": 5,
        "offset": 27,
        "surroundingCode": "    #endif\n  {\n    new int Count { get; }\n\n    bool TryExtract(out T? res);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMemberInSuper.Global"
  },
  "hash": "633f0dce945d9a675cc14e9c4bf9831ab484cd33101831621dadb925d0a3f7a9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never accessed via base type (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Only implementations of method 'GetOrCreate' are used",
  "detailsInfo": "Type member is never used with base type or interface, it is always accessed via more specific type",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 583,
      "offset": 20,
      "length": 11,
      "code": {
        "startLine": 581,
        "length": 11,
        "offset": 83,
        "surroundingCode": "    /// <param name=\"type\"></param>\n    /// <returns></returns>\n    SerializerPair GetOrCreate(Type type);\n\n    /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMemberInSuper.Global"
  },
  "hash": "6dab0fe65edbc274ef28cfd130db33f6f2d9abf46fa37bd86adb32be3867a62e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never accessed via base type (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Only implementations of method 'Remove' are used",
  "detailsInfo": "Type member is never used with base type or interface, it is always accessed via more specific type",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/IInternRoot.cs",
      "language": "C#",
      "line": 37,
      "offset": 10,
      "length": 6,
      "code": {
        "startLine": 35,
        "length": 6,
        "offset": 169,
        "surroundingCode": "    /// Not thread-safe. It's up to user to ensure that the value being removed is not being used in messages written on background threads.\n    /// </summary>\n    void Remove(TBase value);\n  }\n  "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMemberInSuper.Global"
  },
  "hash": "7011d6903ed19c8b3b5f8a0d133cf60dced33bce34646b4c0e5480f64948f4bb"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never accessed via base type (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Only implementations of method 'ReceiveAsync' are used",
  "detailsInfo": "Type member is never used with base type or interface, it is always accessed via more specific type",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 18,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 16,
        "length": 12,
        "offset": 41,
        "surroundingCode": "  {\n    T ReceiveBlocking();\n    Task<T> ReceiveAsync();\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMemberInSuper.Global"
  },
  "hash": "9a9cc11e3d8d7f0ac1df66086862ac527665e355119288dd45c0872cf00c9f53"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never accessed via base type (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Only implementations of accessor 'Async.get' are used",
  "detailsInfo": "Type member is never used with base type or interface, it is always accessed via more specific type",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/IRdReactive.cs",
      "language": "C#",
      "line": 10,
      "offset": 18,
      "length": 3,
      "code": {
        "startLine": 8,
        "length": 3,
        "offset": 79,
        "surroundingCode": "  public interface IRdReactive : IRdBindable, IRdWireable\n  {\n    bool Async { get; set; }\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMemberInSuper.Global"
  },
  "hash": "9d1a1997be6ed2049a5b7a90f45a2c4ac7c58c5e466e332293e7776f77cd413a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never accessed via base type (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Only implementations of method 'M' are used",
  "detailsInfo": "Type member is never used with base type or interface, it is always accessed via more specific type",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorInheritanceTest.cs",
      "language": "C#",
      "line": 14,
      "offset": 12,
      "length": 1,
      "code": {
        "startLine": 12,
        "length": 1,
        "offset": 55,
        "surroundingCode": "    {\n      ISignal<string> Signal { get; }\n      void M();\n    }\n    public interface IMiddle : IBaseNonRpcInterace"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMemberInSuper.Global"
  },
  "hash": "a69786ef39e8e709f667f3196731c2e3fd395578ec3704dabf72c6155b29b6fb"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never accessed via base type (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Only implementations of property 'IsMaster' are used",
  "detailsInfo": "Type member is never used with base type or interface, it is always accessed via more specific type",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/ITextBuffer.cs",
      "language": "C#",
      "line": 10,
      "offset": 10,
      "length": 8,
      "code": {
        "startLine": 8,
        "length": 8,
        "offset": 58,
        "surroundingCode": "  {\n    TextBufferVersion BufferVersion { get; }\n    bool IsMaster { get; }\n\n    void Reset(string text);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMemberInSuper.Global"
  },
  "hash": "b625fac5643737e5ab299a73cf3d273ec73c0562373d2bc16ec09804fa6f01db"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never accessed via base type (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Only implementations of property 'Context' are used",
  "detailsInfo": "Type member is never used with base type or interface, it is always accessed via more specific type",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/ISingleContextHandler.cs",
      "language": "C#",
      "line": 19,
      "offset": 18,
      "length": 7,
      "code": {
        "startLine": 17,
        "length": 7,
        "offset": 91,
        "surroundingCode": "  internal interface ISingleContextHandler<T> : ISingleContextHandler\n  {\n    RdContext<T> Context { get; }\n\n    T? ReadValue(SerializationCtx context, UnsafeReader reader);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMemberInSuper.Global"
  },
  "hash": "c12b4fe9321194239067024bae858dec9200216e2af1c9b409887db8c6cbf73c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never accessed via base type (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Only implementations of method 'Sync' are used",
  "detailsInfo": "Type member is never used with base type or interface, it is always accessed via more specific type",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/Interfaces.cs",
      "language": "C#",
      "line": 22,
      "offset": 10,
      "length": 4,
      "code": {
        "startLine": 20,
        "length": 4,
        "offset": 55,
        "surroundingCode": "  public interface IRdCall<in TReq, TRes>\n  {\n    TRes Sync(TReq request, RpcTimeouts? timeouts = null);\n    \n    [Obsolete(\"Use overload with Lifetime\")]"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMemberInSuper.Global"
  },
  "hash": "c214991a8af428b7e1b92a6bf9a462421fb2007e2881823b1b184d973e0f57db"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never accessed via base type (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Only implementations of method 'SendBlocking' are used",
  "detailsInfo": "Type member is never used with base type or interface, it is always accessed via more specific type",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Channel.cs",
      "language": "C#",
      "line": 23,
      "offset": 10,
      "length": 12,
      "code": {
        "startLine": 21,
        "length": 12,
        "offset": 48,
        "surroundingCode": "  public interface ISendChannel<T>\n  {\n    void SendBlocking(T msg);\n    Task SendAsync(T msg);\n  }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMemberInSuper.Global"
  },
  "hash": "d190ce08eb9d583cfbebf25d6541842ed611e1463dae00115b00920c08539202"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never accessed via base type (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Only implementations of property 'Values' are used",
  "detailsInfo": "Type member is never used with base type or interface, it is always accessed via more specific type",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/IViewableMap.cs",
      "language": "C#",
      "line": 25,
      "offset": 24,
      "length": 6,
      "code": {
        "startLine": 23,
        "length": 6,
        "offset": 87,
        "surroundingCode": "    new int Count { get; }\n    new ICollection<K> Keys { get; }\n    new ICollection<V> Values { get; }\n    new bool ContainsKey(K key);\n    new V this[K key] { get; set; }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMemberInSuper.Global"
  },
  "hash": "d5379de463395db69f2b2ff44401ef12776909a630d34a0222d6219850c4bbf0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never accessed via base type (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Only implementations of accessor 'Mark.set' are used",
  "detailsInfo": "Type member is never used with base type or interface, it is always accessed via more specific type",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/PolymorphicScalarIntrinsicTest.cs",
      "language": "C#",
      "line": 79,
      "offset": 24,
      "length": 3,
      "code": {
        "startLine": 77,
        "length": 3,
        "offset": 111,
        "surroundingCode": "      /// This Guid always change during intrinsic deserialization\n      /// </summary>\n      Guid Mark { get; set; }\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedMemberInSuper.Global"
  },
  "hash": "e394c6eced54959f92be982d147e55260e6777209c91483e05671fbf188fdf7c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never accessed via base type (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Only implementations of method 'ReadValue' are used",
  "detailsInfo": "Type member is never used with base type or interface, it is always accessed via more specific type",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/ISingleContextHandler.cs",
      "language": "C#",
      "line": 21,
      "offset": 8,
      "length": 9,
      "code": {
        "startLine": 19,
        "length": 9,
        "offset": 42,
        "surroundingCode": "    RdContext<T> Context { get; }\n\n    T? ReadValue(SerializationCtx context, UnsafeReader reader);\n  }\n}"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMemberInSuper.Global"
  },
  "hash": "e747a6b73cbed8caf4f395490b5f89ddc8da96984935a66a55412a9a0d15fc0c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Method return value is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Reset' return value is never used",
  "detailsInfo": "Method return value is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeReader.cs",
      "language": "C#",
      "line": 44,
      "offset": 12,
      "length": 12,
      "code": {
        "startLine": 42,
        "length": 12,
        "offset": 134,
        "surroundingCode": "    //allows to reuse this instance (and get rid of boxing)\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    public UnsafeReader Reset(byte* ptr, int len)\n    {\n      myInitialPtr = ptr;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMethodReturnValue.Global"
  },
  "hash": "01f23599b795e94d5ec1b5994ca8d66adb224ebf28688111afb057a1bb3cad93"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Method return value is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'RemoveLastReferenceEqual' return value is never used",
  "detailsInfo": "Method return value is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/Statics.cs",
      "language": "C#",
      "line": 79,
      "offset": 12,
      "length": 4,
      "code": {
        "startLine": 77,
        "length": 4,
        "offset": 18,
        "surroundingCode": "    }\n\n    public bool RemoveLastReferenceEqual(T value, bool failIfNotLast = false)\n    {\n      var result = false;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMethodReturnValue.Global"
  },
  "hash": "0f4276b0f9b08c205002f7e2da002bfb8d2f88eb22d6cb45c3f168eb1656726f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Method return value is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'SendAsync' return value is never used",
  "detailsInfo": "Method return value is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Threading/Actor.cs",
      "language": "C#",
      "line": 194,
      "offset": 12,
      "length": 4,
      "code": {
        "startLine": 192,
        "length": 4,
        "offset": 18,
        "surroundingCode": "    }\n\n    public Task SendAsync(T msg) {\n      myScheduler.Queue(() => myProcessor(msg));\n      return myCompletedTask;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMethodReturnValue.Global"
  },
  "hash": "289a112e8ce431f23d3b94d99581ba428094754be4d75d821e00a71fac188587"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Method return value is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'TryPushLocalChange' return value is never used",
  "detailsInfo": "Method return value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/RdTextBuffer.cs",
      "language": "C#",
      "line": 244,
      "offset": 14,
      "length": 4,
      "code": {
        "startLine": 242,
        "length": 4,
        "offset": 77,
        "surroundingCode": "      public bool IsCommitting => myState == State.Committing;\n\n      public bool TryPushLocalChange(RdTextChange change)\n      {\n        if (myState != State.Opened) return false;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedMethodReturnValue.Global"
  },
  "hash": "69e8ffcc319930335a5161ebdcdc5b14125a03a016f4e9701ac8919b7c178626"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Method return value is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Method 'ReflectionInit' return value is never used",
  "detailsInfo": "Method return value is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionRdActivator.cs",
      "language": "C#",
      "line": 166,
      "offset": 12,
      "length": 6,
      "code": {
        "startLine": 164,
        "length": 6,
        "offset": 18,
        "surroundingCode": "    }\n\n    public object ReflectionInit(object instance)\n    {\n      if (Mode.IsAssertion)"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedMethodReturnValue.Global"
  },
  "hash": "6aee1904240364cf927254117cc6ae91a03c9c56340a9d41cfe3faad29472141"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Method return value is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'ContentHashCode' return value is never used",
  "detailsInfo": "Method return value is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CollectionEx.cs",
      "language": "C#",
      "line": 23,
      "offset": 19,
      "length": 3,
      "code": {
        "startLine": 21,
        "length": 3,
        "offset": 188,
        "surroundingCode": "    /// <returns>((seed * factor + hash(collection[0])) * factor + hash(collection[1])) * factor + ... </returns>\n    [Pure, CollectionAccess(CollectionAccessType.Read)]\n    public static int ContentHashCode<T>(this ICollection<T>? collection,\n      IEqualityComparer<T>? comparer = null)\n    {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMethodReturnValue.Global"
  },
  "hash": "7c97d17d8961be5e21d57bc24cad97e80cb0217bd1bd634d559e80e41a94d969"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Method return value is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Method 'Add' return value is never used",
  "detailsInfo": "Method return value is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/ViewableSet.cs",
      "language": "C#",
      "line": 89,
      "offset": 16,
      "length": 4,
      "code": {
        "startLine": 87,
        "length": 4,
        "offset": 70,
        "surroundingCode": "        #region Simple write methods\n        #if NET35\n        public bool Add(T item)\n        {\n          if (myStorage.Contains(item))"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMethodReturnValue.Global"
  },
  "hash": "c568d47fb87704ed0addb1b396d978ea7f16754423d2ab4a79b44f411cac700e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Method return value is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Method 'Unreachable' return value is never used",
  "detailsInfo": "Method return value is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Nothing.cs",
      "language": "C#",
      "line": 32,
      "offset": 19,
      "length": 7,
      "code": {
        "startLine": 30,
        "length": 7,
        "offset": 76,
        "surroundingCode": "    /// </summary>\n    /// <returns>always fail</returns>\n    public static Nothing Unreachable() => throw new InvalidOperationException(\"This method should never be called. It's unreachable for execution flow.\");\n  }\n}"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMethodReturnValue.Global"
  },
  "hash": "fba850a45c6b4798cadf5aaa9f2026e674820d5f6667b66c5d96c4a7a8c7e2b5"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Parameter 'lifetime' is not used in any of the implementations",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Lifetimes/ITerminationHandler.cs",
      "language": "C#",
      "line": 9,
      "offset": 33,
      "length": 8,
      "code": {
        "startLine": 7,
        "length": 8,
        "offset": 75,
        "surroundingCode": "  public interface ITerminationHandler\n  {\n    void OnTermination(Lifetime lifetime);\n  }\n}"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedParameter.Global"
  },
  "hash": "0ea563ea41b9903e959d6624b22002e1ed55272e737ba8b7676f18ea822f100c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Parameter 'reader' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SerializersEx.cs",
      "language": "C#",
      "line": 139,
      "offset": 51,
      "length": 6,
      "code": {
        "startLine": 137,
        "length": 6,
        "offset": 57,
        "surroundingCode": "    }\n\n    public static Unit ReadVoid(this UnsafeReader reader)\n    {\n      return Unit.Instance;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Global"
  },
  "hash": "150455ae95cda4c0e52b09458917436379f04dea9bf7869328ca31434883e98f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdCall.cs",
      "language": "C#",
      "line": 191,
      "offset": 47,
      "length": 3,
      "code": {
        "startLine": 189,
        "length": 3,
        "offset": 53,
        "surroundingCode": "    }\n\n    public static void Write(SerializationCtx ctx, UnsafeWriter writer, RdCall<TReq, TRes> value)\n    {\n      value.RdId.Write(writer);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Global"
  },
  "hash": "1670756e92229d23663f050c8b2639cdb711806107e4a5066ef3f229660f79cb"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSignal.cs",
      "language": "C#",
      "line": 28,
      "offset": 47,
      "length": 3,
      "code": {
        "startLine": 26,
        "length": 3,
        "offset": 53,
        "surroundingCode": "    }\n\n    public static void Write(SerializationCtx ctx, UnsafeWriter writer, RdSignal<T> value)\n    {\n      writer.Write(value.RdId);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Global"
  },
  "hash": "17a6df39cb0abf8518ddcdf5b59a6483e23aead9f2550f1d66e42a3b87d390ab"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Parameter 'writer' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SerializersEx.cs",
      "language": "C#",
      "line": 144,
      "offset": 48,
      "length": 6,
      "code": {
        "startLine": 142,
        "length": 6,
        "offset": 54,
        "surroundingCode": "    }\n\n    public static void Write(this UnsafeWriter writer, Unit value) {}\n\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Global"
  },
  "hash": "1cfdbeee731562d21c46360a104ec7920a80c7f6a62db2185d71b8fd34cd6c53"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Parameter 'round' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorAsyncCallsTest.cs",
      "language": "C#",
      "line": 50,
      "offset": 38,
      "length": 5,
      "code": {
        "startLine": 48,
        "length": 5,
        "offset": 76,
        "surroundingCode": "      public virtual int Rounds => 1;\n\n      public virtual void Client(int round) { }\n      public virtual void Server(int round) { }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Global"
  },
  "hash": "1f41f6627442dc31e6d83b8963652afcc31e533a95e52bd585b91006222bc720"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Parameter 'context' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdPerContextMap.cs",
      "language": "C#",
      "line": 96,
      "offset": 67,
      "length": 7,
      "code": {
        "startLine": 94,
        "length": 7,
        "offset": 77,
        "surroundingCode": "        }\n\n        public static RdPerContextMap<K, V> Read(SerializationCtx context, UnsafeReader reader, RdContext<K> key, Func<bool, V> func)\n        {\n            var id = RdId.Read(reader);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Global"
  },
  "hash": "3774c5672828eadeeaed4e138d450605e0ae352b49ca968f0fb1bb44df0efef1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (non-private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdCall.cs",
      "language": "C#",
      "line": 186,
      "offset": 60,
      "length": 3,
      "code": {
        "startLine": 184,
        "length": 3,
        "offset": 66,
        "surroundingCode": "    }\n\n    public static RdCall<TReq, TRes> Read(SerializationCtx ctx, UnsafeReader reader, CtxReadDelegate<TReq> readRequest, CtxWriteDelegate<TReq> writeRequest, CtxReadDelegate<TRes> readResponse, CtxWriteDelegate<TRes> writeResponse)\n    {\n      return new RdCall<TReq, TRes>(readRequest, writeRequest, readResponse, writeResponse).WithId(reader.ReadRdId());"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Global"
  },
  "hash": "3ae2eeae55374f0fe7445f2d328e9f320363f94e592e9ed023541134408d9c5a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSignal.cs",
      "language": "C#",
      "line": 22,
      "offset": 53,
      "length": 3,
      "code": {
        "startLine": 20,
        "length": 3,
        "offset": 59,
        "surroundingCode": "    }\n\n    public static RdSignal<T> Read(SerializationCtx ctx, UnsafeReader reader, CtxReadDelegate<T> readValue, CtxWriteDelegate<T> writeValue)\n    {\n      var id = reader.ReadRdId();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Global"
  },
  "hash": "4247b1ecf4586164fe223904ae27583ae0e9f6e58c9e4401ff083330bb1e7aa5"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSet.cs",
      "language": "C#",
      "line": 40,
      "offset": 50,
      "length": 3,
      "code": {
        "startLine": 38,
        "length": 3,
        "offset": 56,
        "surroundingCode": "    }\n\n    public static RdSet<T> Read(SerializationCtx ctx, UnsafeReader reader, CtxReadDelegate<T> readValue, CtxWriteDelegate<T> writeValue)\n    {\n      var id = reader.ReadRdId();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Global"
  },
  "hash": "4c870a032300da740ea90cc89a531d145dae048175a6070b80a530f514e63036"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Parameter 'reader' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorSimpleTest.cs",
      "language": "C#",
      "line": 117,
      "offset": 55,
      "length": 6,
      "code": {
        "startLine": 115,
        "length": 6,
        "offset": 102,
        "surroundingCode": "      public sealed class IntrinsicType\n      {\n        public static IntrinsicType Read(UnsafeReader reader) => new IntrinsicType();\n        public void Write(UnsafeWriter writer)\n        {"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Global"
  },
  "hash": "5888de2e7b040956ea2806690a5a25c641a6b1b63d6de9de84b12283a3af1908"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Parameter 'valueSerializer' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/CollectionSerializers.cs",
      "language": "C#",
      "line": 44,
      "offset": 132,
      "length": 15,
      "code": {
        "startLine": 42,
        "length": 15,
        "offset": 138,
        "surroundingCode": "    }\n\n    public static SerializerPair CreateReadOnlyDictionarySerializerPair<TKey, TValue>(SerializerPair keySerializer, SerializerPair valueSerializer)\n    {\n#if NET35"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedParameter.Global"
  },
  "hash": "5b2c8be60d6ec01ac07bddf8e87d5ca41dc22f5094cd6ec1af0b678cc72a057e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Parameter 'context' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdPerContextMap.cs",
      "language": "C#",
      "line": 91,
      "offset": 51,
      "length": 7,
      "code": {
        "startLine": 89,
        "length": 7,
        "offset": 52,
        "surroundingCode": "\n\n        public static void Write(SerializationCtx context, UnsafeWriter writer, RdPerContextMap<K, V> value)\n        {\n            RdId.Write(writer, value.RdId);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Global"
  },
  "hash": "6c70c325fb151073985bd9dfcb0647e2a3f53a076666d7f8d8945e3bc5599255"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Parameter 'round' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorAsyncCallsTest.cs",
      "language": "C#",
      "line": 51,
      "offset": 38,
      "length": 5,
      "code": {
        "startLine": 49,
        "length": 5,
        "offset": 86,
        "surroundingCode": "\n      public virtual void Client(int round) { }\n      public virtual void Server(int round) { }\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Global"
  },
  "hash": "78ff5bc6b090f56d60ffbf35fce87ccc9b04d0b2bfc7a6f4f87b8dfed6d66231"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Parameter 'writer' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorSimpleTest.cs",
      "language": "C#",
      "line": 118,
      "offset": 40,
      "length": 6,
      "code": {
        "startLine": 116,
        "length": 6,
        "offset": 133,
        "surroundingCode": "      {\n        public static IntrinsicType Read(UnsafeReader reader) => new IntrinsicType();\n        public void Write(UnsafeWriter writer)\n        {\n        }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Global"
  },
  "hash": "7a4b42ef7d2b88ca7a18aff84d914fa1605501f1368ee89acafa31de8b4492b8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdSet.cs",
      "language": "C#",
      "line": 46,
      "offset": 47,
      "length": 3,
      "code": {
        "startLine": 44,
        "length": 3,
        "offset": 53,
        "surroundingCode": "    }\n\n    public static void Write(SerializationCtx ctx, UnsafeWriter writer, RdSet<T> value)\n    {\n      Assertion.Assert(!value.RdId.IsNil, \"!value.RdId.IsNil\");"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Global"
  },
  "hash": "8ebca67bc9f5f61a9d79b023c55b432fb053ffb6bc81b1d77473c095e298d186"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Parameter 'socket' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 515,
      "offset": 53,
      "length": 6,
      "code": {
        "startLine": 513,
        "length": 6,
        "offset": 54,
        "surroundingCode": "\n\n      protected virtual bool AcceptHandshake(Socket socket)\n      {\n        return true;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Global"
  },
  "hash": "9123e3a73d26ff126ab81260029f984cf27b8108e2d230e1eb94284fe19ea986"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Parameter 'value' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SerializersEx.cs",
      "language": "C#",
      "line": 144,
      "offset": 61,
      "length": 5,
      "code": {
        "startLine": 142,
        "length": 5,
        "offset": 67,
        "surroundingCode": "    }\n\n    public static void Write(this UnsafeWriter writer, Unit value) {}\n\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Global"
  },
  "hash": "caf99ca90d85c8fb34017460eaffd95c59a9e1d66b3e0dde057cd88722e2b304"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Parameter 'keySerializer' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/CollectionSerializers.cs",
      "language": "C#",
      "line": 44,
      "offset": 102,
      "length": 13,
      "code": {
        "startLine": 42,
        "length": 13,
        "offset": 108,
        "surroundingCode": "    }\n\n    public static SerializerPair CreateReadOnlyDictionarySerializerPair<TKey, TValue>(SerializerPair keySerializer, SerializerPair valueSerializer)\n    {\n#if NET35"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedParameter.Global"
  },
  "hash": "fae26ab036130a6f4f5b86c1cee7e7931aec608a72600ebde034fd16b577edf6"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'len' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 191,
      "offset": 47,
      "length": 3,
      "code": {
        "startLine": 189,
        "length": 3,
        "offset": 122,
        "surroundingCode": "      \n      buffer = new ByteBufferAsyncProcessor(\"TestAsyncProcessor\", 8,\n        delegate(byte[] data, int offset, int len, ref long seqN)\n        {\n          try"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "018fafe0e3622f4362c0a10b803fa2bf3b9b8e439bb5bad5f1071febe785b037"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'offset' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 123,
      "offset": 35,
      "length": 6,
      "code": {
        "startLine": 121,
        "length": 6,
        "offset": 149,
        "surroundingCode": "      ByteBufferAsyncProcessor buffer = null;\n      buffer = new ByteBufferAsyncProcessor(\"TestAsyncProcessor\", 8,\n        delegate(byte[] data, int offset, int len, ref long seqN)\n        {\n          long l = 0;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "0218cd68f77da5fec2dced9118669e536456e7681ed3a256903bb1d545d4ddb2"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'lifetime' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdMapTest.cs",
      "language": "C#",
      "line": 90,
      "offset": 52,
      "length": 8,
      "code": {
        "startLine": 88,
        "length": 8,
        "offset": 92,
        "surroundingCode": "\n      serverMap.Add(1, \"Server value\");\n      serverMap.View(LifetimeDefinition.Lifetime, (lifetime, i, s) => itemRemoved =  i+\":\"+s);\n      ServerWire.TransmitOneMessage();\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "04a2a8805b79b33a8725e194848e51d2cea6bbce921ba7717abc1cc3415a745f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/TextBufferVersionSerializer.cs",
      "language": "C#",
      "line": 5,
      "offset": 70,
      "length": 3,
      "code": {
        "startLine": 3,
        "length": 3,
        "offset": 123,
        "surroundingCode": "  public static class TextBufferVersionSerializer\n  {\n    public static CtxReadDelegate<TextBufferVersion> ReadDelegate = (ctx, stream) =>\n    {\n      var masterVersion = stream.ReadInt();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "070de5ed992577fa9ffbe0010382b4529ba793c39e9eabf4d8a336d49a735e1d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter '__' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextBasicTest.cs",
      "language": "C#",
      "line": 33,
      "offset": 55,
      "length": 2,
      "code": {
        "startLine": 31,
        "length": 2,
        "offset": 138,
        "surroundingCode": "      protected internal override void RegisterOn(ISerializers serializers)\n      {\n        serializers.Register((_, __) => Instance, (_, __, ___) => { });\n      }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "07ecf2cd764d907ec99125625f40ef39812a92a0d28e123ef08ff3a2a634a9dd"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter '__' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextBasicTest.cs",
      "language": "C#",
      "line": 117,
      "offset": 34,
      "length": 2,
      "code": {
        "startLine": 115,
        "length": 2,
        "offset": 117,
        "surroundingCode": "      protected internal override void RegisterOn(ISerializers serializers)\n      {\n        serializers.Register((_, __) => Instance, (_, __, ___) => { });\n      }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "08a2a261b154f7eedddd7d46aee07575f761e40b2d71cf80cc924c923518aa93"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter '__' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextBasicTest.cs",
      "language": "C#",
      "line": 47,
      "offset": 34,
      "length": 2,
      "code": {
        "startLine": 45,
        "length": 2,
        "offset": 117,
        "surroundingCode": "      protected internal override void RegisterOn(ISerializers serializers)\n      {\n        serializers.Register((_, __) => Instance, (_, __, ___) => { });\n      }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "0b5fc02d313a255326cf68821507d02e63100894cb82b304aa2d13d6d2684d56"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'lifetime' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Protocol.cs",
      "language": "C#",
      "line": 73,
      "offset": 66,
      "length": 8,
      "code": {
        "startLine": 71,
        "length": 8,
        "offset": 72,
        "surroundingCode": "    }\n\n    private InternRoot<object> CreateProtocolInternRoot(Lifetime lifetime)\n    {\n      var root = new InternRoot<object>();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "0f4785d033a1279149f219f469c7e0ff1ed2f81307ee2ad96ec587203c3fabc3"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/TextBufferVersionSerializer.cs",
      "language": "C#",
      "line": 12,
      "offset": 72,
      "length": 3,
      "code": {
        "startLine": 10,
        "length": 3,
        "offset": 79,
        "surroundingCode": "    };\n\n    public static CtxWriteDelegate<TextBufferVersion> WriteDelegate = (ctx, writer, value) =>\n    {\n      writer.Write(value.Master);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "127b5186a788e54231f87c811f56d470ce5b665da1eab50fe4eef575c6e33591"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 83,
      "offset": 70,
      "length": 3,
      "code": {
        "startLine": 81,
        "length": 3,
        "offset": 268,
        "surroundingCode": "    public static readonly CtxReadDelegate<string?> ReadString = (ctx, reader) => reader.ReadString();\n    public static readonly CtxReadDelegate<Guid> ReadGuid = (ctx, reader) => reader.ReadGuid();\n    public static readonly CtxReadDelegate<DateTime> ReadDateTime = (ctx, reader) => reader.ReadDateTime();\n    public static readonly CtxReadDelegate<Uri> ReadUri = (ctx, reader) => reader.ReadUri();\n    public static readonly CtxReadDelegate<RdId> ReadRdId = (ctx, reader) => reader.ReadRdId();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "1428fae8d139496ca8d9807031141f1e579a170d469d34e7090fa339c0e91672"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 272,
      "offset": 33,
      "length": 3,
      "code": {
        "startLine": 270,
        "length": 3,
        "offset": 151,
        "surroundingCode": "      var result = new SerializerPair(\n        (CtxReadDelegate<T>) ((ctx, reader) => readerCaster(reader.ReadInt())),\n        (CtxWriteDelegate<T>) ((ctx, w, o) => w.Write(writerCaster(o))));\n\n      return result;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "146c0c9277baf45f75ea021d8f5465efee7db6ef70d686a565858c5f6de57977"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 100,
      "offset": 63,
      "length": 3,
      "code": {
        "startLine": 98,
        "length": 3,
        "offset": 72,
        "surroundingCode": "    \n    \n    public static readonly CtxReadDelegate<byte> ReadUByte = (ctx, reader) => reader.ReadUByte();\n    public static readonly CtxReadDelegate<ushort> ReadUShort = (ctx, reader) => reader.ReadUShort();\n    public static readonly CtxReadDelegate<uint> ReadUInt = (ctx, reader) => reader.ReadUInt();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "16178d71f16fdf1162cf243fd383f493554687461d660a31f1cc34b5f215ab99"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'ld' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1415,
      "offset": 114,
      "length": 2,
      "code": {
        "startLine": 1413,
        "length": 2,
        "offset": 273,
        "surroundingCode": "      Assert.AreEqual(LifetimeTerminationTimeoutKind.ExtraLong, Lifetime.Define(definition.Lifetime, \"id\", (Lifetime ld) => {}).TerminationTimeoutKind);\n      \n      Assert.AreEqual(LifetimeTerminationTimeoutKind.ExtraLong, OuterLifetime.Define(definition.Lifetime, \"id\", (ld, lf) => {}).TerminationTimeoutKind);\n    }\n  }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "16f2c68a68be1056ed4a9bab0b3da5fc27e23502be0d0d9e0f0a473e420daf1a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Parameter '__' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CopyOnWriteList.cs",
      "language": "C#",
      "line": 63,
      "offset": 22,
      "length": 2,
      "code": {
        "startLine": 61,
        "length": 2,
        "offset": 51,
        "surroundingCode": "    public void Clear()\n    {\n      Modify(0, ((_, __) => new T[0]));\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "1c1b8a15aa3db03a01c9fe4711e5ef944785430cd0ef40a3e5c204f0354b1069"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'modelLifetime' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdIdHierarchyGuardTest.cs",
      "language": "C#",
      "line": 33,
      "offset": 52,
      "length": 13,
      "code": {
        "startLine": 31,
        "length": 13,
        "offset": 108,
        "surroundingCode": "      // capture model\n      Model capturedModel = null;\n      serverMap.View(LifetimeDefinition.Lifetime, (modelLifetime, key, model) =>\n      {\n        capturedModel = model;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "1d26a4596ec21832dfdb35dbcf383774805bf6b118219448721ef8f97962e781"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'key' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdIdHierarchyGuardTest.cs",
      "language": "C#",
      "line": 33,
      "offset": 67,
      "length": 3,
      "code": {
        "startLine": 31,
        "length": 3,
        "offset": 123,
        "surroundingCode": "      // capture model\n      Model capturedModel = null;\n      serverMap.View(LifetimeDefinition.Lifetime, (modelLifetime, key, model) =>\n      {\n        capturedModel = model;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "1fc72d3e4b51a2b9b43ae7e9fd2f891228a02e56bc53936eab491c09f9c2286b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarIntrinsicTests.cs",
      "language": "C#",
      "line": 136,
      "offset": 64,
      "length": 3,
      "code": {
        "startLine": 134,
        "length": 3,
        "offset": 224,
        "surroundingCode": "\n      public static CtxReadDelegate<NoRedIntrinsic1> Read = (ctx, reader) => new NoRedIntrinsic1(0/*reader.ReadByte()*/, reader.ReadByte(), reader.ReadByte());\n      public static CtxWriteDelegate<NoRedIntrinsic1> Write = (ctx, writer, value) =>\n      {\n        // writer.Write((byte) value.Red);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "21b20746530682e75ffbea3a4321faccb04e8fb3df53d762dfe5f686a414f296"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 87,
      "offset": 80,
      "length": 3,
      "code": {
        "startLine": 85,
        "length": 3,
        "offset": 180,
        "surroundingCode": "    public static readonly CtxReadDelegate<RdId> ReadRdId = (ctx, reader) => reader.ReadRdId();\n    \n    public static readonly CtxReadDelegate<RdSecureString> ReadSecureString = (ctx, reader) => reader.ReadSecureString();\n\n    public static readonly CtxReadDelegate<byte[]?> ReadByteArray = (ctx, reader) => reader.ReadArray(ReadByte, ctx);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "2370cd91079912af3954bb5b085beeac7e82d2710073a08549b6db7c62adb089"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'result' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGeneratorUtil.cs",
      "language": "C#",
      "line": 72,
      "offset": 59,
      "length": 6,
      "code": {
        "startLine": 70,
        "length": 6,
        "offset": 128,
        "surroundingCode": "        var task = call.Start(lifetime, request, responseScheduler);\n\n        task.Result.Advise(nestedCallsScheduler.Lifetime, result => { nestedCallsScheduler.Terminate(); });\n\n        RpcTimeouts timeoutsToUse = RpcTimeouts.GetRpcTimeouts(timeouts);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "2805d9c1ffd9dbe2a615db2a2ffdff0283f2253f63c80075336bd2f9ab4a0cbf"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 143,
      "offset": 64,
      "length": 3,
      "code": {
        "startLine": 141,
        "length": 3,
        "offset": 282,
        "surroundingCode": "    public static readonly CtxWriteDelegate<byte> WriteUByte = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<ushort> WriteUShort = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<uint> WriteUInt = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<ulong> WriteULong = (ctx, writer, value) => writer.Write(value);\n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "2a36d6ac3d424a0b2022582f8a4eb1af6d6bfabbb215c38a7cfb1ba2a45c297d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 103,
      "offset": 64,
      "length": 3,
      "code": {
        "startLine": 101,
        "length": 3,
        "offset": 261,
        "surroundingCode": "    public static readonly CtxReadDelegate<ushort> ReadUShort = (ctx, reader) => reader.ReadUShort();\n    public static readonly CtxReadDelegate<uint> ReadUInt = (ctx, reader) => reader.ReadUInt();\n    public static readonly CtxReadDelegate<ulong> ReadULong = (ctx, reader) => reader.ReadULong();\n    \n    public static readonly CtxReadDelegate<byte[]?> ReadUByteArray = (ctx, reader) => reader.ReadArray(ReadByte, ctx);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "2afbd161f0fe351821b5a6a8292e299839166885c12bd52a125b36e8331d28f0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 84,
      "offset": 60,
      "length": 3,
      "code": {
        "startLine": 82,
        "length": 3,
        "offset": 263,
        "surroundingCode": "    public static readonly CtxReadDelegate<Guid> ReadGuid = (ctx, reader) => reader.ReadGuid();\n    public static readonly CtxReadDelegate<DateTime> ReadDateTime = (ctx, reader) => reader.ReadDateTime();\n    public static readonly CtxReadDelegate<Uri> ReadUri = (ctx, reader) => reader.ReadUri();\n    public static readonly CtxReadDelegate<RdId> ReadRdId = (ctx, reader) => reader.ReadRdId();\n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "2b309747fdd7b106c6f1ecb5f6cbef1bc131d7162cf8e095c9492859ccd42e2d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdAssertion.cs",
      "language": "C#",
      "line": 41,
      "offset": 58,
      "length": 3,
      "code": {
        "startLine": 39,
        "length": 3,
        "offset": 69,
        "surroundingCode": "    };\n    \n    public static CtxWriteDelegate<RdAssertion> Write = (ctx, writer, value) => \n    {\n      writer.Write(value.MasterVersion);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "2c53050a00ea1157f29149c6e7232158e9766ea29d5ac1f05fb8ce6d16129089"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter '__' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextBasicTest.cs",
      "language": "C#",
      "line": 33,
      "offset": 34,
      "length": 2,
      "code": {
        "startLine": 31,
        "length": 2,
        "offset": 117,
        "surroundingCode": "      protected internal override void RegisterOn(ISerializers serializers)\n      {\n        serializers.Register((_, __) => Instance, (_, __, ___) => { });\n      }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "2ccb612548d491c031dc27e59ad86cf86948de58919d00e9aaa35c50a5b0dc76"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 271,
      "offset": 32,
      "length": 3,
      "code": {
        "startLine": 269,
        "length": 3,
        "offset": 150,
        "surroundingCode": "      Assertion.Assert(typeof(T).IsSubclassOf(typeof(Enum)), \"{0}\", typeof(T));\n      var result = new SerializerPair(\n        (CtxReadDelegate<T>) ((ctx, reader) => readerCaster(reader.ReadInt())),\n        (CtxWriteDelegate<T>) ((ctx, w, o) => w.Write(writerCaster(o))));\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "2e529ce963b4ecd72641e0a3e7e157dce67fe42da3940ab3ad86c7d3541e5631"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 142,
      "offset": 68,
      "length": 3,
      "code": {
        "startLine": 140,
        "length": 3,
        "offset": 176,
        "surroundingCode": "\n    public static readonly CtxWriteDelegate<byte> WriteUByte = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<ushort> WriteUShort = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<uint> WriteUInt = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<ulong> WriteULong = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "2e90e40007106304d9500aa2061a6b3136b5313a568693be7da1b9bafaac2fa3"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 's' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorInheritanceTest.cs",
      "language": "C#",
      "line": 46,
      "offset": 41,
      "length": 1,
      "code": {
        "startLine": 44,
        "length": 1,
        "offset": 89,
        "surroundingCode": "      // test signals\n      bool raised = false;\n      proxy.Signal.Advise(TestLifetime, s => raised = true);\n      client.Signal.Fire(\"test\");\n      Assertion.Assert(raised, \"!raised\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "31c3c172c61a59f96c5530e988d96f33a441bde160300a19735ddc60278cf11b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'i' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/SignalTest.cs",
      "language": "C#",
      "line": 25,
      "offset": 33,
      "length": 1,
      "code": {
        "startLine": 23,
        "length": 1,
        "offset": 49,
        "surroundingCode": "        }, lt);\n\n        Parallel.For(0, 100000, i =>\n        {\n          using (var ld = new LifetimeDefinition())"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "358f1b700ed4a9e320453b289a1ede96e1c7b30794c1e0f07ac72d382fae7325"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'value' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdListTest.cs",
      "language": "C#",
      "line": 99,
      "offset": 57,
      "length": 5,
      "code": {
        "startLine": 97,
        "length": 5,
        "offset": 94,
        "surroundingCode": "      var itemRemovedClient = false;\n\n      serverList.View(Lifetime.Eternal, (lifetime, key, value) =>\n      {\n        lifetime.OnTermination(() => { itemRemovedServer = true; });"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "35b00765c8dabe450e4f974fcc08568daebed44d6cac6f835b997548318b954e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 't' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ScalarSerializer.cs",
      "language": "C#",
      "line": 174,
      "offset": 51,
      "length": 1,
      "code": {
        "startLine": 172,
        "length": 1,
        "offset": 57,
        "surroundingCode": "    }\n\n    private static bool IsReadOnlyDictionary(Type t)\n    {\n#if !NET35"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "35f9717666145fb3cf5b76b7dd39fd645433a883ff68f53e9e7deb1ad550745c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'req' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdTaskTest.cs",
      "language": "C#",
      "line": 91,
      "offset": 35,
      "length": 3,
      "code": {
        "startLine": 89,
        "length": 3,
        "offset": 121,
        "surroundingCode": "      bool handlerFinished = false; \n      bool handlerCompletedSuccessfully = false; \n      clientEntity.Set(async (lf, req) =>\n      {\n        try"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "368425d0c97b455141597321065e6963dfd63c144bb30ed043a0e6930e58aca1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'seqN' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 87,
      "offset": 126,
      "length": 4,
      "code": {
        "startLine": 85,
        "length": 4,
        "offset": 148,
        "surroundingCode": "    {\n      int x = 0;\n      var buffer = new ByteBufferAsyncProcessor(\"TestAsyncProcessor\", 1, delegate(byte[] data, int offset, int len, ref long seqN) { x += data[offset]; });\n      var reason1 = \"reason1\";\n      var reason2 = \"reason2\";"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "36929fa9f7241baaefed622f66ad9c567b91e3e5d621d5a941f7b45378dfd938"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'ld' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1412,
      "offset": 128,
      "length": 2,
      "code": {
        "startLine": 1410,
        "length": 2,
        "offset": 250,
        "surroundingCode": "    {\n      var definition = new LifetimeDefinition { TerminationTimeoutKind = LifetimeTerminationTimeoutKind.ExtraLong };\n      Assert.AreEqual(LifetimeTerminationTimeoutKind.ExtraLong, Lifetime.Define(definition.Lifetime, \"id\", (LifetimeDefinition ld) => {}).TerminationTimeoutKind);\n      Assert.AreEqual(LifetimeTerminationTimeoutKind.ExtraLong, Lifetime.Define(definition.Lifetime, \"id\", (Lifetime ld) => {}).TerminationTimeoutKind);\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "376639207f7da24d2ad3fc3e4a4d48ab86d528374704090a3dc2506a75d35c2e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 74,
      "offset": 62,
      "length": 3,
      "code": {
        "startLine": 72,
        "length": 3,
        "offset": 253,
        "surroundingCode": "    public static readonly CtxReadDelegate<short> ReadShort = (ctx, reader) => reader.ReadShort();\n    public static readonly CtxReadDelegate<int> ReadInt = (ctx, reader) => reader.ReadInt();\n    public static readonly CtxReadDelegate<long> ReadLong = (ctx, reader) => reader.ReadLong();\n    public static readonly CtxReadDelegate<float> ReadFloat = (ctx, reader) => reader.ReadFloat();\n    public static readonly CtxReadDelegate<double> ReadDouble = (ctx, reader) => reader.ReadDouble();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "39c9a2f95372da28f7541269964153699c7e9084718f89c150e4dcdda25e5b1c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 79,
      "offset": 62,
      "length": 3,
      "code": {
        "startLine": 77,
        "length": 3,
        "offset": 253,
        "surroundingCode": "    public static readonly CtxReadDelegate<char> ReadChar = (ctx, reader) => reader.ReadChar();\n    public static readonly CtxReadDelegate<bool> ReadBool = (ctx, reader) => reader.ReadBool();\n    public static readonly CtxReadDelegate<Unit> ReadVoid = (ctx, reader) => reader.ReadVoid();\n\n    public static readonly CtxReadDelegate<string?> ReadString = (ctx, reader) => reader.ReadString();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "3ef67e8a498bce336e3ccea632f994f6cfcdf503cdc28f1ee820420f83c7decf"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SerializersTest.cs",
      "language": "C#",
      "line": 38,
      "offset": 59,
      "length": 3,
      "code": {
        "startLine": 36,
        "length": 3,
        "offset": 115,
        "surroundingCode": "      public MyTestObject(string data) { Data = data; }\n\n      public static CtxReadDelegate<MyTestObject> Read = (ctx, reader) =>\n      {\n        var data = reader.ReadString();"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "40895760411682db51ec86fd587575dd59829523ff14a46c607226ac8a795619"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'c' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorScalarInterfaceSerializerTest.cs",
      "language": "C#",
      "line": 21,
      "offset": 48,
      "length": 1,
      "code": {
        "startLine": 19,
        "length": 1,
        "offset": 82,
        "surroundingCode": "    public void TestSimple()\n    {\n     WithExtsProxy<SimpleCalls, ISimpleCalls>((c, proxy) =>\n     {\n       Assert.AreEqual(2, proxy.Count(new[] {\"test\", null, \"123\"}.Where(x => x != null)));"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "424e5873fa553602df7020511248883b888ee2dfc517f9a67a983ed1710231ef"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Parameter 'lifetime' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 55,
      "offset": 33,
      "length": 8,
      "code": {
        "startLine": 53,
        "length": 8,
        "offset": 91,
        "surroundingCode": "\n    [Obsolete(\"Lifetime is not required anymore\", false)]\n    public Serializers(Lifetime lifetime, TaskScheduler? scheduler, ITypesRegistrar? registrar)\n    : this(scheduler, registrar)\n    {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "46f3fb4c4e626cd6eff9f083b2537bc8e93a5796443a3be9e0a5702278b13945"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 's' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextBasicTest.cs",
      "language": "C#",
      "line": 67,
      "offset": 33,
      "length": 1,
      "code": {
        "startLine": 65,
        "length": 1,
        "offset": 67,
        "surroundingCode": "      {\n        var fired = false;\n        clientSignal.Advise(lt, s =>\n        {\n          Assert.AreEqual(\"1\", key.Value);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "48e889adf2c7a1aa8fd4d5e29ac452f9d9716a7278d3e2d6a3a2b68b43a7b08e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'ld' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1413,
      "offset": 118,
      "length": 2,
      "code": {
        "startLine": 1411,
        "length": 2,
        "offset": 397,
        "surroundingCode": "      var definition = new LifetimeDefinition { TerminationTimeoutKind = LifetimeTerminationTimeoutKind.ExtraLong };\n      Assert.AreEqual(LifetimeTerminationTimeoutKind.ExtraLong, Lifetime.Define(definition.Lifetime, \"id\", (LifetimeDefinition ld) => {}).TerminationTimeoutKind);\n      Assert.AreEqual(LifetimeTerminationTimeoutKind.ExtraLong, Lifetime.Define(definition.Lifetime, \"id\", (Lifetime ld) => {}).TerminationTimeoutKind);\n      \n      Assert.AreEqual(LifetimeTerminationTimeoutKind.ExtraLong, OuterLifetime.Define(definition.Lifetime, \"id\", (ld, lf) => {}).TerminationTimeoutKind);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "4b49c5f2974b39cb716fc87c49b65e05891e32aa6856673d7af2781cd71945d6"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 76,
      "offset": 66,
      "length": 3,
      "code": {
        "startLine": 74,
        "length": 3,
        "offset": 260,
        "surroundingCode": "    public static readonly CtxReadDelegate<long> ReadLong = (ctx, reader) => reader.ReadLong();\n    public static readonly CtxReadDelegate<float> ReadFloat = (ctx, reader) => reader.ReadFloat();\n    public static readonly CtxReadDelegate<double> ReadDouble = (ctx, reader) => reader.ReadDouble();\n    public static readonly CtxReadDelegate<char> ReadChar = (ctx, reader) => reader.ReadChar();\n    public static readonly CtxReadDelegate<bool> ReadBool = (ctx, reader) => reader.ReadBool();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "4ce91293deba11de3b1a1f771088ba3a98b7280583b59a3e9820e62b9349771c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 82,
      "offset": 62,
      "length": 3,
      "code": {
        "startLine": 80,
        "length": 3,
        "offset": 165,
        "surroundingCode": "\n    public static readonly CtxReadDelegate<string?> ReadString = (ctx, reader) => reader.ReadString();\n    public static readonly CtxReadDelegate<Guid> ReadGuid = (ctx, reader) => reader.ReadGuid();\n    public static readonly CtxReadDelegate<DateTime> ReadDateTime = (ctx, reader) => reader.ReadDateTime();\n    public static readonly CtxReadDelegate<Uri> ReadUri = (ctx, reader) => reader.ReadUri();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "4e4623432f896c0c4284c5c9ee7ba3d656d1e2d71992847a5c7158837dd85875"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/RdTextChangeSerializer.cs",
      "language": "C#",
      "line": 17,
      "offset": 67,
      "length": 3,
      "code": {
        "startLine": 15,
        "length": 3,
        "offset": 74,
        "surroundingCode": "    };\n\n    public static CtxWriteDelegate<RdTextChange> WriteDelegate = (ctx, writer, value) =>\n    {\n      writer.Write((int)value.Kind);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "4e7aa31d2eb6830d060ef6de9139689bbbd87e77f40ea31733bb94052d8a9b8b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 's' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorCornerCasesTests.cs",
      "language": "C#",
      "line": 117,
      "offset": 80,
      "length": 1,
      "code": {
        "startLine": 115,
        "length": 1,
        "offset": 101,
        "surroundingCode": "        try\n        {\n          WithExtsProxy<UnexpectedInterfaceType, IUnexpectedInterfaceType>((c, s) =>\n          {\n            c.ViewableProperty.Value = \"test\";"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "5059b1cc942f3ab2b09b417ee102328e1423af825bd9c20cb944273d404dda90"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Parameter 't3' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/EmptyAction.cs",
      "language": "C#",
      "line": 24,
      "offset": 67,
      "length": 2,
      "code": {
        "startLine": 22,
        "length": 2,
        "offset": 116,
        "surroundingCode": "  public static class EmptyAction<T1, T2, T3>\n  {\n    public static readonly Action<T1, T2, T3> Instance = (t1, t2, t3) => { };\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "50a0d62c2380c7c969feaddc43ea405cc29160c001afcdf55a1a0bbbab584566"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'a' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 209,
      "offset": 115,
      "length": 1,
      "code": {
        "startLine": 207,
        "length": 1,
        "offset": 149,
        "surroundingCode": "    public void TestCyclic()\n    {\n      RunScalarTest(new RedBlackList {Start = new RedBlackList.BlackNode() {Next = new RedBlackList.RedNode()}}, (a, b) =>\n      {\n        Assert.NotNull(b.Start.Next);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "523bf4f9c3d2573c4a02f5fb2dd9078e24bc1d3ae950985063cf4c5a9e4a44d0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 113,
      "offset": 64,
      "length": 3,
      "code": {
        "startLine": 111,
        "length": 3,
        "offset": 78,
        "surroundingCode": "\n    //writers\n    public static readonly CtxWriteDelegate<byte> WriteByte = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<short> WriteShort = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<int> WriteInt = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "530a1540288791fcb173c83d4a7dcc15c4018af715fee1b340b62f363a4eb8f0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'b' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 219,
      "offset": 86,
      "length": 1,
      "code": {
        "startLine": 217,
        "length": 1,
        "offset": 129,
        "surroundingCode": "    public void TestInvalidPointers()\n    {\n      Assert.Throws<ArgumentException>(() => { RunScalarTest(new NonScalarPtr(), (a, b) => { }); });\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "54f3e046c9f9e29ddaa5748a631035ae83c325b70aa6bf2b13c33a1fd6a94ffc"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter '___' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextEarlyDeliveryTest.cs",
      "language": "C#",
      "line": 75,
      "offset": 59,
      "length": 3,
      "code": {
        "startLine": 73,
        "length": 3,
        "offset": 142,
        "surroundingCode": "      protected internal override void RegisterOn(ISerializers serializers)\n      {\n        serializers.Register((_, __) => Instance, (_, __, ___) => { });\n      }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "57bc5eae33be3c887e57fd2d5bf35482740116cac124f4f420c3bd51538bc472"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 's' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextBasicTest.cs",
      "language": "C#",
      "line": 95,
      "offset": 33,
      "length": 1,
      "code": {
        "startLine": 93,
        "length": 1,
        "offset": 67,
        "surroundingCode": "      {\n        var fired = false;\n        serverSignal.Advise(lt, s =>\n        {\n          Assert.AreEqual(\"1\", key.Value);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "57e3d50ac4098b9f9308c08aacb66fd661cd1a780b64e9ebd0ffd3c773e5201b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 85,
      "offset": 62,
      "length": 3,
      "code": {
        "startLine": 83,
        "length": 3,
        "offset": 262,
        "surroundingCode": "    public static readonly CtxReadDelegate<DateTime> ReadDateTime = (ctx, reader) => reader.ReadDateTime();\n    public static readonly CtxReadDelegate<Uri> ReadUri = (ctx, reader) => reader.ReadUri();\n    public static readonly CtxReadDelegate<RdId> ReadRdId = (ctx, reader) => reader.ReadRdId();\n    \n    public static readonly CtxReadDelegate<RdSecureString> ReadSecureString = (ctx, reader) => reader.ReadSecureString();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "593a4ec9b5f7b91599e167e49756be9d402344d168fe6d5dc0a017b01661c625"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 118,
      "offset": 68,
      "length": 3,
      "code": {
        "startLine": 116,
        "length": 3,
        "offset": 283,
        "surroundingCode": "    public static readonly CtxWriteDelegate<long> WriteLong = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<float> WriteFloat = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<double> WriteDouble = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<char> WriteChar = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<bool> WriteBool = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "594bbcf5e2bd454046585c9b55f3308ab250883ee5de8d0f9ad97cc063273828"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Parameter 't2' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/EmptyAction.cs",
      "language": "C#",
      "line": 24,
      "offset": 63,
      "length": 2,
      "code": {
        "startLine": 22,
        "length": 2,
        "offset": 112,
        "surroundingCode": "  public static class EmptyAction<T1, T2, T3>\n  {\n    public static readonly Action<T1, T2, T3> Instance = (t1, t2, t3) => { };\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "5b441f2b51fd77d4c0ee2fd4633dc3eec5436aad39b93a0469ad9af5193a3232"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 125,
      "offset": 72,
      "length": 3,
      "code": {
        "startLine": 123,
        "length": 3,
        "offset": 290,
        "surroundingCode": "    public static readonly CtxWriteDelegate<string?> WriteString = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<Guid> WriteGuid = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<DateTime> WriteDateTime = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<Uri> WriteUri = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<RdId> WriteRdId = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "5d4c26895e607bc3d34c7c00e5b8def3d76cb07144009985dcb93c2947ca46ea"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SerializersTest.cs",
      "language": "C#",
      "line": 44,
      "offset": 61,
      "length": 3,
      "code": {
        "startLine": 42,
        "length": 3,
        "offset": 70,
        "surroundingCode": "      };\n\n      public static CtxWriteDelegate<MyTestObject> Write = (ctx, writer, value) => { writer.Write(value.Data); };\n    }\n  }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "60293aacd78222e1435ad6d72ef842e8368ee7a198e68be3d7549c3a73ca5fbc"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'lf' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/LifetimeTest.cs",
      "language": "C#",
      "line": 1415,
      "offset": 118,
      "length": 2,
      "code": {
        "startLine": 1413,
        "length": 2,
        "offset": 277,
        "surroundingCode": "      Assert.AreEqual(LifetimeTerminationTimeoutKind.ExtraLong, Lifetime.Define(definition.Lifetime, \"id\", (Lifetime ld) => {}).TerminationTimeoutKind);\n      \n      Assert.AreEqual(LifetimeTerminationTimeoutKind.ExtraLong, OuterLifetime.Define(definition.Lifetime, \"id\", (ld, lf) => {}).TerminationTimeoutKind);\n    }\n  }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "61de9955fbf5db9c549e613f574557265e0d312f93ab3ad4a7675a5ae5ec883d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 123,
      "offset": 69,
      "length": 3,
      "code": {
        "startLine": 121,
        "length": 3,
        "offset": 176,
        "surroundingCode": "    public static readonly CtxWriteDelegate<Unit> WriteVoid = (ctx, writer, value) => writer.Write(value);\n\n    public static readonly CtxWriteDelegate<string?> WriteString = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<Guid> WriteGuid = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<DateTime> WriteDateTime = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "63e97f4fe09390a8e5d02c2fab3f6ed06cf3dbd686ab810e1ad9a7d9c3b3772a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'value' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdMapTest.cs",
      "language": "C#",
      "line": 108,
      "offset": 56,
      "length": 5,
      "code": {
        "startLine": 106,
        "length": 5,
        "offset": 93,
        "surroundingCode": "      var itemRemovedClient = false;\n\n      serverMap.View(Lifetime.Eternal, (lifetime, key, value) =>\n      {\n        lifetime.OnTermination(() => { itemRemovedServer = true; });"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "64f03fffebb343f91caa71d9bbc13f22a70bf348d6525847773bbcabb988a2b9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'lf' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdTaskTest.cs",
      "language": "C#",
      "line": 62,
      "offset": 25,
      "length": 2,
      "code": {
        "startLine": 60,
        "length": 2,
        "offset": 256,
        "surroundingCode": "      var serverEntity = BindToServer(LifetimeDefinition.Lifetime, NewRdCall<string, string>(), ourKey);\n      var clientEntity = BindToClient(LifetimeDefinition.Lifetime, CreateEndpoint<string, string>(x => x.ToString()), ourKey);\n      clientEntity.Set((lf, req) => RdTask<string>.Successful(req == null ? \"NULL\" : null));\n\n      Assert.Throws<Assertion.AssertionException>(() =>"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "677e508e235fb6baf6d028e97a5fdbf7a1977bf400edfa4d9b6df07aefaf4c7a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 141,
      "offset": 65,
      "length": 3,
      "code": {
        "startLine": 139,
        "length": 3,
        "offset": 66,
        "surroundingCode": "\n\n    public static readonly CtxWriteDelegate<byte> WriteUByte = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<ushort> WriteUShort = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<uint> WriteUInt = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "69536916ebb863745b38bb7e67519aef681e965a67fac1f6ff458388eea8eb91"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 71,
      "offset": 62,
      "length": 3,
      "code": {
        "startLine": 69,
        "length": 3,
        "offset": 76,
        "surroundingCode": "\n    //readers\n    public static readonly CtxReadDelegate<byte> ReadByte = (ctx, reader) => reader.ReadByte();\n    public static readonly CtxReadDelegate<short> ReadShort = (ctx, reader) => reader.ReadShort();\n    public static readonly CtxReadDelegate<int> ReadInt = (ctx, reader) => reader.ReadInt();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "6b380d85f27939f1a55625967eb61af09772745ced98d7da2f563a70d3964745"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 's' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/RdExtReflectionBindableBase.cs",
      "language": "C#",
      "line": 14,
      "offset": 65,
      "length": 1,
      "code": {
        "startLine": 12,
        "length": 1,
        "offset": 116,
        "surroundingCode": "\n    private bool myBindableChildrenFilled = false;\n    protected override Action<ISerializers> Register { get; } = s => { };\n\n    void IReflectionBindable.EnsureBindableChildren()"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "6e20593ea49f37a3ca88b2040c85bd53f068a3575df23cca5f4064e3f0f2b675"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 124,
      "offset": 64,
      "length": 3,
      "code": {
        "startLine": 122,
        "length": 3,
        "offset": 176,
        "surroundingCode": "\n    public static readonly CtxWriteDelegate<string?> WriteString = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<Guid> WriteGuid = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<DateTime> WriteDateTime = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<Uri> WriteUri = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "6eb0277b595bbc216689d8e6eaaa87417d26f8528f8a78fc70afa666a72d935f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'type' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGeneratorCache.cs",
      "language": "C#",
      "line": 28,
      "offset": 51,
      "length": 4,
      "code": {
        "startLine": 26,
        "length": 4,
        "offset": 103,
        "surroundingCode": "    public Type CreateType(Type interfaceType)\n    {\n      return myTypesCache.GetOrAdd(interfaceType, type => myGenerator.CreateType(interfaceType));\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "6ee87eba212843d26ca6fdc284494a1374f32cb38f0f2902b68b23decb1c9b26"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'key' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdMapTest.cs",
      "language": "C#",
      "line": 113,
      "offset": 51,
      "length": 3,
      "code": {
        "startLine": 111,
        "length": 3,
        "offset": 61,
        "surroundingCode": "      });\n\n      clientMap.View(Lifetime.Eternal, (lifetime, key, value) =>\n      {\n        lifetime.OnTermination(() => { itemRemovedClient = true; });"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "706530420a496d7105a063a493b1b3daf28cd54de7c79635e42accc74fa8607f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter '___' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextBasicTest.cs",
      "language": "C#",
      "line": 47,
      "offset": 59,
      "length": 3,
      "code": {
        "startLine": 45,
        "length": 3,
        "offset": 142,
        "surroundingCode": "      protected internal override void RegisterOn(ISerializers serializers)\n      {\n        serializers.Register((_, __) => Instance, (_, __, ___) => { });\n      }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "72c08e785704e285d7695614dd1e889d2caeecd8c90040bd3461fc06b91ef440"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter '__' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextBasicTest.cs",
      "language": "C#",
      "line": 117,
      "offset": 55,
      "length": 2,
      "code": {
        "startLine": 115,
        "length": 2,
        "offset": 138,
        "surroundingCode": "      protected internal override void RegisterOn(ISerializers serializers)\n      {\n        serializers.Register((_, __) => Instance, (_, __, ___) => { });\n      }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "72cba5b6c02e13053955faaa5904d51fa6e890e6c0abb4f2bddd59573b2b3e0a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarIntrinsicTests.cs",
      "language": "C#",
      "line": 66,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 64,
        "length": 3,
        "offset": 43,
        "surroundingCode": "      {\n        cache.Register(\n          (ctx, reader) => new ScalarTests.ColorFields(0, reader.ReadByte(), reader.ReadByte()),\n          (ctx, writer, value) =>\n          {"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "76172811e19ceb2d5d9a6aca7655cac00b5d64841b3ddf5345950b74fb5250bd"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'a' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 219,
      "offset": 83,
      "length": 1,
      "code": {
        "startLine": 217,
        "length": 1,
        "offset": 126,
        "surroundingCode": "    public void TestInvalidPointers()\n    {\n      Assert.Throws<ArgumentException>(() => { RunScalarTest(new NonScalarPtr(), (a, b) => { }); });\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "77ecf2fb43f59a9e92051ec961f57407ee2d313de68b61bf72baf95eb3747929"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 116,
      "offset": 64,
      "length": 3,
      "code": {
        "startLine": 114,
        "length": 3,
        "offset": 277,
        "surroundingCode": "    public static readonly CtxWriteDelegate<short> WriteShort = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<int> WriteInt = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<long> WriteLong = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<float> WriteFloat = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<double> WriteDouble = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "79adf9c32493c909f54d48bc95a8fff4827b2e892c2554bc1dad0b87753d30f7"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Intrinsics/RdTextChangeSerializer.cs",
      "language": "C#",
      "line": 7,
      "offset": 65,
      "length": 3,
      "code": {
        "startLine": 5,
        "length": 3,
        "offset": 113,
        "surroundingCode": "  public static class RdTextChangeSerializer\n  {\n    public static CtxReadDelegate<RdTextChange> ReadDelegate = (ctx, stream) =>\n    {\n      var kind = (RdTextChangeKind)stream.ReadInt();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "7e6236cc0b6ab8efcd4516777f58d2c11ec0548257f3f67190ec18007d6c405c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter '___' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextBasicTest.cs",
      "language": "C#",
      "line": 33,
      "offset": 59,
      "length": 3,
      "code": {
        "startLine": 31,
        "length": 3,
        "offset": 142,
        "surroundingCode": "      protected internal override void RegisterOn(ISerializers serializers)\n      {\n        serializers.Register((_, __) => Instance, (_, __, ___) => { });\n      }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "80c48d89d08042d05ab8060804c3ff7dde79f55119c4df970b401c8114c43d89"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'c' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorCornerCasesTests.cs",
      "language": "C#",
      "line": 134,
      "offset": 81,
      "length": 1,
      "code": {
        "startLine": 132,
        "length": 1,
        "offset": 144,
        "surroundingCode": "      Assert.Throws<Assertion.AssertionException>(() =>\n      {\n        WithExtsProxy<DifferenceInBindableFields, IDifferenceInBindableFields>((c, s) =>\n        {\n        });"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "8149dc2edc619b1576ae802d369aa4d43da4f6fd67872e5650c0031f784aae7e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 78,
      "offset": 62,
      "length": 3,
      "code": {
        "startLine": 76,
        "length": 3,
        "offset": 259,
        "surroundingCode": "    public static readonly CtxReadDelegate<double> ReadDouble = (ctx, reader) => reader.ReadDouble();\n    public static readonly CtxReadDelegate<char> ReadChar = (ctx, reader) => reader.ReadChar();\n    public static readonly CtxReadDelegate<bool> ReadBool = (ctx, reader) => reader.ReadBool();\n    public static readonly CtxReadDelegate<Unit> ReadVoid = (ctx, reader) => reader.ReadVoid();\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "825e0b5ff5a74de9db27ad1f8ffb47118fb76554dbc5752dc20c865d6107eb16"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'lifetime' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Lifetimes/SequentialLifetimesTest.cs",
      "language": "C#",
      "line": 168,
      "offset": 32,
      "length": 8,
      "code": {
        "startLine": 166,
        "length": 8,
        "offset": 149,
        "surroundingCode": "        Assert.IsTrue(sequentialLifetimes.IsCurrentTerminated, \"sequentialLifetimes.IsCurrentTerminated\");\n      }));\n      sequentialLifetimes.Next(lifetime =>\n      {\n        sb.Append(\"N2\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "86be669943600e6dac25bf05e2a6992ff4401a34c3448186dab83acde5d1b22d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'offset' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 191,
      "offset": 35,
      "length": 6,
      "code": {
        "startLine": 189,
        "length": 6,
        "offset": 110,
        "surroundingCode": "      \n      buffer = new ByteBufferAsyncProcessor(\"TestAsyncProcessor\", 8,\n        delegate(byte[] data, int offset, int len, ref long seqN)\n        {\n          try"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "87e5f0c08ea6cb034e548b5ebb46ee64696c9342d2b704dfcb97ce09e9716d9f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'len' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 87,
      "offset": 112,
      "length": 3,
      "code": {
        "startLine": 85,
        "length": 3,
        "offset": 134,
        "surroundingCode": "    {\n      int x = 0;\n      var buffer = new ByteBufferAsyncProcessor(\"TestAsyncProcessor\", 1, delegate(byte[] data, int offset, int len, ref long seqN) { x += data[offset]; });\n      var reason1 = \"reason1\";\n      var reason2 = \"reason2\";"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "889eb01f4a60bfd1385e29b78794ec17c1a0f40784e0f9cb8392c9e9a82dd28e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'j' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/WriteOncePropertyTest.cs",
      "language": "C#",
      "line": 135,
      "offset": 52,
      "length": 1,
      "code": {
        "startLine": 133,
        "length": 1,
        "offset": 85,
        "surroundingCode": "        }, lifetime)).ToArray();\n\n        var values = Enumerable.Range(0, i).Select(j =>\n        {\n          var localValue = new AtomicValue();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "89d0c72b834583351ad8a874c561ef5a48d52163ff368c2782f4eff1a5e8b773"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'seqN' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 65,
      "offset": 126,
      "length": 4,
      "code": {
        "startLine": 63,
        "length": 4,
        "offset": 148,
        "surroundingCode": "    {\n      int x = 0;\n      var buffer = new ByteBufferAsyncProcessor(\"TestAsyncProcessor\", 1, delegate(byte[] data, int offset, int len, ref long seqN) { x += data[offset]; });\n      \n      buffer.Put(new byte[]{1});"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "920d39f0300397a7e53e1a106bff934e3e1b9bccfa8b53cf21b0d593737143fa"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter '__' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextEarlyDeliveryTest.cs",
      "language": "C#",
      "line": 89,
      "offset": 55,
      "length": 2,
      "code": {
        "startLine": 87,
        "length": 2,
        "offset": 138,
        "surroundingCode": "      protected internal override void RegisterOn(ISerializers serializers)\n      {\n        serializers.Register((_, __) => Instance, (_, __, ___) => { });\n      }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "958e17a3940f3725e7b369abc8eda7fd7b2f864c18a6e0133d80f0cf7f889358"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarIntrinsicTests.cs",
      "language": "C#",
      "line": 67,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 65,
        "length": 3,
        "offset": 132,
        "surroundingCode": "        cache.Register(\n          (ctx, reader) => new ScalarTests.ColorFields(0, reader.ReadByte(), reader.ReadByte()),\n          (ctx, writer, value) =>\n          {\n            writer.Write((byte) value.Green);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "96529e6e7c7bcb170824f2e554a8fccaa6f056ad6abdb4d68237dfd802636cde"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'c' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorScalarInterfaceSerializerTest.cs",
      "language": "C#",
      "line": 32,
      "offset": 49,
      "length": 1,
      "code": {
        "startLine": 30,
        "length": 1,
        "offset": 215,
        "surroundingCode": "    {\n      WithBothFacades(f => f.ScalarSerializers.RegisterPolymorphicSerializer(typeof(IMyInterface), SerializerPair.FromMarshaller(new MyInterfaceMarshaller())));\n      WithExtsProxy<SimpleCalls, ISimpleCalls>((c, proxy) =>\n      {\n        var instanceSerializer = CFacade.ScalarSerializers.GetInstanceSerializer(typeof(IReadOnlyDictionary<string, string>));"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "96ee6ebe08ce6321eb07c700b0fae5ce4158f834674104c4b0d8119d49dbefe0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 129,
      "offset": 82,
      "length": 3,
      "code": {
        "startLine": 127,
        "length": 3,
        "offset": 193,
        "surroundingCode": "    public static readonly CtxWriteDelegate<RdId> WriteRdId = (ctx, writer, value) => writer.Write(value);\n    \n    public static readonly CtxWriteDelegate<RdSecureString> WriteSecureString = (ctx, writer, value) => writer.Write(value.Contents);\n\n    public static readonly CtxWriteDelegate<byte[]?> WriteByteArray = (ctx, writer, value) => writer.WriteArray(WriteByte, ctx, value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "975db8ce866ba40e1b7ceff065e85886ca203e56d5c24b5dbab4adabe92ec92e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 101,
      "offset": 66,
      "length": 3,
      "code": {
        "startLine": 99,
        "length": 3,
        "offset": 168,
        "surroundingCode": "    \n    public static readonly CtxReadDelegate<byte> ReadUByte = (ctx, reader) => reader.ReadUByte();\n    public static readonly CtxReadDelegate<ushort> ReadUShort = (ctx, reader) => reader.ReadUShort();\n    public static readonly CtxReadDelegate<uint> ReadUInt = (ctx, reader) => reader.ReadUInt();\n    public static readonly CtxReadDelegate<ulong> ReadULong = (ctx, reader) => reader.ReadULong();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "97a25c760ac103366550e0a0203563e7afd3cdee6583f8a51461a8facd6c47eb"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Parameter 't' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/EmptyAction.cs",
      "language": "C#",
      "line": 14,
      "offset": 49,
      "length": 1,
      "code": {
        "startLine": 12,
        "length": 1,
        "offset": 89,
        "surroundingCode": "  public static class EmptyAction<T>\n  {\n    public static readonly Action<T> Instance = t => { };\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "9a10270e1c55704819111fba801add8a5ed9fbc9bc72f8731a5c990208fc19f9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'value' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdListTest.cs",
      "language": "C#",
      "line": 104,
      "offset": 57,
      "length": 5,
      "code": {
        "startLine": 102,
        "length": 5,
        "offset": 67,
        "surroundingCode": "      });\n\n      clientList.View(Lifetime.Eternal, (lifetime, key, value) =>\n      {\n        lifetime.OnTermination(() => { itemRemovedClient = true; });"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "9b1df31853e7a81cc115c5127b844d4154778f72425b7fd74f13645c90c76a7e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'key' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdListTest.cs",
      "language": "C#",
      "line": 104,
      "offset": 52,
      "length": 3,
      "code": {
        "startLine": 102,
        "length": 3,
        "offset": 62,
        "surroundingCode": "      });\n\n      clientList.View(Lifetime.Eternal, (lifetime, key, value) =>\n      {\n        lifetime.OnTermination(() => { itemRemovedClient = true; });"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "9bcad680090e3e8359e238442e32fba8f7c09d1207b6edca5612b569f7086200"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 75,
      "offset": 64,
      "length": 3,
      "code": {
        "startLine": 73,
        "length": 3,
        "offset": 252,
        "surroundingCode": "    public static readonly CtxReadDelegate<int> ReadInt = (ctx, reader) => reader.ReadInt();\n    public static readonly CtxReadDelegate<long> ReadLong = (ctx, reader) => reader.ReadLong();\n    public static readonly CtxReadDelegate<float> ReadFloat = (ctx, reader) => reader.ReadFloat();\n    public static readonly CtxReadDelegate<double> ReadDouble = (ctx, reader) => reader.ReadDouble();\n    public static readonly CtxReadDelegate<char> ReadChar = (ctx, reader) => reader.ReadChar();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "9be782ee26be5fef686ebc1ce811345931e0e10ac2e5b809316b359b0706cef6"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'i' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/NativeMemoryPoolTests.cs",
      "language": "C#",
      "line": 56,
      "offset": 55,
      "length": 1,
      "code": {
        "startLine": 54,
        "length": 1,
        "offset": 77,
        "surroundingCode": "\n      var count = 33;\n      var cookies = Enumerable.Range(0, count).Select(i => NativeMemoryPool.Reserve()).ToList();\n      Assert.AreEqual(count, NativeMemoryPool.SampleCount());\n      Assert.AreEqual(count, NativeMemoryPool.SampleUsed());"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "9d094a8bceeec46cf91eb0dc6848ed6368785ae885da8ab226a917faee393089"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'x' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/NativeMemoryPoolTests.cs",
      "language": "C#",
      "line": 76,
      "offset": 10,
      "length": 1,
      "code": {
        "startLine": 74,
        "length": 1,
        "offset": 53,
        "surroundingCode": "      {\n        MaxDegreeOfParallelism = -1\n      }, x =>\n      {\n        for (int a = 0; a < 100_000_000; a++)"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "9f445e45e4ca986e06bb84a2425ac11537c882511df5b8b998764e0dc31a927f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'kind' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdList.cs",
      "language": "C#",
      "line": 39,
      "offset": 47,
      "length": 4,
      "code": {
        "startLine": 37,
        "length": 4,
        "offset": 77,
        "surroundingCode": "      \n      //WPF integration\n      this.AdviseAddRemove(Lifetime.Eternal, (kind, idx, v) =>\n      {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(\"Item[]\"));"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "a0d79c6ea811e30aeec4a3c9ef4f6e3d909d29c6c19961e82d5bb96cce41fa46"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 73,
      "offset": 60,
      "length": 3,
      "code": {
        "startLine": 71,
        "length": 3,
        "offset": 254,
        "surroundingCode": "    public static readonly CtxReadDelegate<byte> ReadByte = (ctx, reader) => reader.ReadByte();\n    public static readonly CtxReadDelegate<short> ReadShort = (ctx, reader) => reader.ReadShort();\n    public static readonly CtxReadDelegate<int> ReadInt = (ctx, reader) => reader.ReadInt();\n    public static readonly CtxReadDelegate<long> ReadLong = (ctx, reader) => reader.ReadLong();\n    public static readonly CtxReadDelegate<float> ReadFloat = (ctx, reader) => reader.ReadFloat();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "a1109cbef1e502e95198702dbb814213fc7ffa216e8f6da8502f0bbad5153bbb"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 81,
      "offset": 67,
      "length": 3,
      "code": {
        "startLine": 79,
        "length": 3,
        "offset": 163,
        "surroundingCode": "    public static readonly CtxReadDelegate<Unit> ReadVoid = (ctx, reader) => reader.ReadVoid();\n\n    public static readonly CtxReadDelegate<string?> ReadString = (ctx, reader) => reader.ReadString();\n    public static readonly CtxReadDelegate<Guid> ReadGuid = (ctx, reader) => reader.ReadGuid();\n    public static readonly CtxReadDelegate<DateTime> ReadDateTime = (ctx, reader) => reader.ReadDateTime();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "a31dbf07437d303fabb154c305fb9268ce46824e24a8d9f9f8127f2a6533ca05"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 119,
      "offset": 64,
      "length": 3,
      "code": {
        "startLine": 117,
        "length": 3,
        "offset": 283,
        "surroundingCode": "    public static readonly CtxWriteDelegate<float> WriteFloat = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<double> WriteDouble = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<char> WriteChar = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<bool> WriteBool = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<Unit> WriteVoid = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "a3db42155d73976d9c5dec6c3468d0dfd33a452575184abdaa641900e234e489"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'key' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdListTest.cs",
      "language": "C#",
      "line": 99,
      "offset": 52,
      "length": 3,
      "code": {
        "startLine": 97,
        "length": 3,
        "offset": 89,
        "surroundingCode": "      var itemRemovedClient = false;\n\n      serverList.View(Lifetime.Eternal, (lifetime, key, value) =>\n      {\n        lifetime.OnTermination(() => { itemRemovedServer = true; });"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "a48d11f3a87d004dc5e03af86f5335b38a63d875cce2ebb5f9e1cdd072575cb8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 's' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextEarlyDeliveryTest.cs",
      "language": "C#",
      "line": 142,
      "offset": 33,
      "length": 1,
      "code": {
        "startLine": 140,
        "length": 1,
        "offset": 67,
        "surroundingCode": "      {\n        var fired = false;\n        serverSignal.Advise(lt, s =>\n        {\n          Assert.AreEqual(\"1\", key.Value);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "a5beabaf47bff508cb17cf68e8ff2521ef2b17e6fd0b6ec7756abfe2cb6d3d2c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter '__' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextBasicTest.cs",
      "language": "C#",
      "line": 47,
      "offset": 55,
      "length": 2,
      "code": {
        "startLine": 45,
        "length": 2,
        "offset": 138,
        "surroundingCode": "      protected internal override void RegisterOn(ISerializers serializers)\n      {\n        serializers.Register((_, __) => Instance, (_, __, ___) => { });\n      }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "a68f56be5135127acec658ba7a6869c5f16b7d19a13341600c0a017ab5ea971a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Parameter 't1' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/EmptyAction.cs",
      "language": "C#",
      "line": 24,
      "offset": 59,
      "length": 2,
      "code": {
        "startLine": 22,
        "length": 2,
        "offset": 108,
        "surroundingCode": "  public static class EmptyAction<T1, T2, T3>\n  {\n    public static readonly Action<T1, T2, T3> Instance = (t1, t2, t3) => { };\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "a77733dea15634beb7bb14f44fffffc06796903561c94ce69d6602959172e93e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 's' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorCornerCasesTests.cs",
      "language": "C#",
      "line": 134,
      "offset": 84,
      "length": 1,
      "code": {
        "startLine": 132,
        "length": 1,
        "offset": 147,
        "surroundingCode": "      Assert.Throws<Assertion.AssertionException>(() =>\n      {\n        WithExtsProxy<DifferenceInBindableFields, IDifferenceInBindableFields>((c, s) =>\n        {\n        });"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "aa64ca21e18e650a09d8ed4a88700149751f2b5cc2a8707f85d70cf2f198381c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 's' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextBasicTest.cs",
      "language": "C#",
      "line": 81,
      "offset": 33,
      "length": 1,
      "code": {
        "startLine": 79,
        "length": 1,
        "offset": 67,
        "surroundingCode": "      {\n        var fired = false;\n        clientSignal.Advise(lt, s =>\n        {\n          Assert.AreEqual(\"1\", key.Value);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "aae85cc310741e28988517ac36d08263b5b78c2a8b9164e7534921c8f1030f82"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 127,
      "offset": 64,
      "length": 3,
      "code": {
        "startLine": 125,
        "length": 3,
        "offset": 283,
        "surroundingCode": "    public static readonly CtxWriteDelegate<DateTime> WriteDateTime = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<Uri> WriteUri = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<RdId> WriteRdId = (ctx, writer, value) => writer.Write(value);\n    \n    public static readonly CtxWriteDelegate<RdSecureString> WriteSecureString = (ctx, writer, value) => writer.Write(value.Contents);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "ab8d2489c66ac18d837b6ec7b80dec13fa503e420925f637c99fa64653a97128"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'lifetime' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdListTest.cs",
      "language": "C#",
      "line": 80,
      "offset": 38,
      "length": 8,
      "code": {
        "startLine": 78,
        "length": 8,
        "offset": 76,
        "surroundingCode": "\n      serverList.Add(\"Server value\");\n      serverList.View(TestLifetime, (lifetime, i, s) => itemRemoved =  i+\":\"+s);\n      ServerWire.TransmitOneMessage();\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "b24a5324e7e187915b03492e6e3b17030dc9507f8407d3baccf74bf181f3cc21"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter '__' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextEarlyDeliveryTest.cs",
      "language": "C#",
      "line": 75,
      "offset": 55,
      "length": 2,
      "code": {
        "startLine": 73,
        "length": 2,
        "offset": 138,
        "surroundingCode": "      protected internal override void RegisterOn(ISerializers serializers)\n      {\n        serializers.Register((_, __) => Instance, (_, __, ___) => { });\n      }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "b35e9077edf1b730c2363e83a589da45e6763835a64fa7f8ed9494ba366539b2"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'value' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdMapTest.cs",
      "language": "C#",
      "line": 113,
      "offset": 56,
      "length": 5,
      "code": {
        "startLine": 111,
        "length": 5,
        "offset": 66,
        "surroundingCode": "      });\n\n      clientMap.View(Lifetime.Eternal, (lifetime, key, value) =>\n      {\n        lifetime.OnTermination(() => { itemRemovedClient = true; });"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "b3ea176fbec11d39c350140d45fcfd9f0fbbbd39e455a0fb97ae33e5ab3a9d85"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'v' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdList.cs",
      "language": "C#",
      "line": 39,
      "offset": 58,
      "length": 1,
      "code": {
        "startLine": 37,
        "length": 1,
        "offset": 88,
        "surroundingCode": "      \n      //WPF integration\n      this.AdviseAddRemove(Lifetime.Eternal, (kind, idx, v) =>\n      {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(\"Item[]\"));"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "b8be95aa06532375e07cfd95f6631d3e61620832e55ca52cfefd2b641eba2dd7"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter '__' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextEarlyDeliveryTest.cs",
      "language": "C#",
      "line": 89,
      "offset": 34,
      "length": 2,
      "code": {
        "startLine": 87,
        "length": 2,
        "offset": 117,
        "surroundingCode": "      protected internal override void RegisterOn(ISerializers serializers)\n      {\n        serializers.Register((_, __) => Instance, (_, __, ___) => { });\n      }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "bbbe6c3e168b420a02327fe38fb375b14d7ec4bd168209cd420eea665ed70b36"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'len' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 123,
      "offset": 47,
      "length": 3,
      "code": {
        "startLine": 121,
        "length": 3,
        "offset": 161,
        "surroundingCode": "      ByteBufferAsyncProcessor buffer = null;\n      buffer = new ByteBufferAsyncProcessor(\"TestAsyncProcessor\", 8,\n        delegate(byte[] data, int offset, int len, ref long seqN)\n        {\n          long l = 0;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "bbe97d51e8a46b18f78ca141d32502ce8f3ef023fca26c3319a0b7fba04c0635"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Parameter 'e' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/LogEx.cs",
      "language": "C#",
      "line": 667,
      "offset": 49,
      "length": 1,
      "code": {
        "startLine": 665,
        "length": 1,
        "offset": 55,
        "surroundingCode": "    }\n\n    private static void DropException(Exception e)\n    {\n      //do nothing"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "bf8a945875035becc670f83ecf50d9fb88980e587f3df33c44229f7badfcaa81"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'x' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ActorTest.cs",
      "language": "C#",
      "line": 76,
      "offset": 62,
      "length": 1,
      "code": {
        "startLine": 74,
        "length": 1,
        "offset": 121,
        "surroundingCode": "      int sum = 0;\n      var e = new AutoResetEvent(false);\n      var actor = new Actor<int>(\"TestActor\", def.Lifetime,  x =>\n      {\n        e.WaitOne(); //will deadlock if continuations are not async"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "c20c7e3cc572a8de3d811432f4ded94b6defabeb0618fc3b2fc904f529662ec9"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'x' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/SignalTest.cs",
      "language": "C#",
      "line": 28,
      "offset": 37,
      "length": 1,
      "code": {
        "startLine": 26,
        "length": 1,
        "offset": 98,
        "surroundingCode": "        {\n          using (var ld = new LifetimeDefinition())\n            sig.Advise(ld.Lifetime, x => { });\n        });\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "c2170a1e51b7ee55a3a624c3253327a99ac2cadddd3a6987a7d5e0d5047641ad"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter '___' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextEarlyDeliveryTest.cs",
      "language": "C#",
      "line": 89,
      "offset": 59,
      "length": 3,
      "code": {
        "startLine": 87,
        "length": 3,
        "offset": 142,
        "surroundingCode": "      protected internal override void RegisterOn(ISerializers serializers)\n      {\n        serializers.Register((_, __) => Instance, (_, __, ___) => { });\n      }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "c5a5bf25876d2203d6099455bd3bce909c999429f03d470c66f44e2c2ae082f6"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 114,
      "offset": 66,
      "length": 3,
      "code": {
        "startLine": 112,
        "length": 3,
        "offset": 186,
        "surroundingCode": "    //writers\n    public static readonly CtxWriteDelegate<byte> WriteByte = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<short> WriteShort = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<int> WriteInt = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<long> WriteLong = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "c71f88cf5f7203abc7f42cdd5f7bce5bf66a65f19d6efdece99f60163682cbd1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 72,
      "offset": 64,
      "length": 3,
      "code": {
        "startLine": 70,
        "length": 3,
        "offset": 173,
        "surroundingCode": "    //readers\n    public static readonly CtxReadDelegate<byte> ReadByte = (ctx, reader) => reader.ReadByte();\n    public static readonly CtxReadDelegate<short> ReadShort = (ctx, reader) => reader.ReadShort();\n    public static readonly CtxReadDelegate<int> ReadInt = (ctx, reader) => reader.ReadInt();\n    public static readonly CtxReadDelegate<long> ReadLong = (ctx, reader) => reader.ReadLong();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "c83e3623479154c2b0dc7c8763c3e88ba3ff4039a87098f3cba802948b591455"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Parameter 'sender' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/FirstChanceExceptionInterceptor.cs",
      "language": "C#",
      "line": 30,
      "offset": 56,
      "length": 6,
      "code": {
        "startLine": 28,
        "length": 6,
        "offset": 73,
        "surroundingCode": "      \n#if !NET35\n      AppDomain.CurrentDomain.FirstChanceException += (sender, args) =>\n      {\n        var info = string.Join(\"\\n -> \", GetThreadLocalDebugInfo());"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "c8a7d7ee97e8ef5feee44ff56aa8a33bc36b8b0e7f6c9f94adaa767a5d871826"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'len' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 65,
      "offset": 112,
      "length": 3,
      "code": {
        "startLine": 63,
        "length": 3,
        "offset": 134,
        "surroundingCode": "    {\n      int x = 0;\n      var buffer = new ByteBufferAsyncProcessor(\"TestAsyncProcessor\", 1, delegate(byte[] data, int offset, int len, ref long seqN) { x += data[offset]; });\n      \n      buffer.Put(new byte[]{1});"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "caa0c4b250c247ceb708f89eebe6389bc30a9ab2f09266af30eaaec37718f95f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'type' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGeneratorCache.cs",
      "language": "C#",
      "line": 33,
      "offset": 56,
      "length": 4,
      "code": {
        "startLine": 31,
        "length": 4,
        "offset": 134,
        "surroundingCode": "    public DynamicMethod CreateAdapter(Type selfType, MethodInfo method)\n    {\n      var methods = myAdaptersCache.GetOrAdd(selfType, type => new SortedList<MethodInfo, DynamicMethod>(MethodNameComparer.Instance));\n      lock (methods)\n      {"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "cb5756f5b8c81177cb5d8a98d7a5240e4d545b784c8e4bb3f0fd994ac4b239f2"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 77,
      "offset": 62,
      "length": 3,
      "code": {
        "startLine": 75,
        "length": 3,
        "offset": 262,
        "surroundingCode": "    public static readonly CtxReadDelegate<float> ReadFloat = (ctx, reader) => reader.ReadFloat();\n    public static readonly CtxReadDelegate<double> ReadDouble = (ctx, reader) => reader.ReadDouble();\n    public static readonly CtxReadDelegate<char> ReadChar = (ctx, reader) => reader.ReadChar();\n    public static readonly CtxReadDelegate<bool> ReadBool = (ctx, reader) => reader.ReadBool();\n    public static readonly CtxReadDelegate<Unit> ReadVoid = (ctx, reader) => reader.ReadVoid();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "cc0bcf6e07962b384597103b087568911b916d37e467e23dde21164a3f87dc38"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter '___' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextBasicTest.cs",
      "language": "C#",
      "line": 117,
      "offset": 59,
      "length": 3,
      "code": {
        "startLine": 115,
        "length": 3,
        "offset": 142,
        "surroundingCode": "      protected internal override void RegisterOn(ISerializers serializers)\n      {\n        serializers.Register((_, __) => Instance, (_, __, ___) => { });\n      }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "cc1633da1e47c225f273d94b282986a2d721dd39574cb3656cbb95721738755e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 117,
      "offset": 66,
      "length": 3,
      "code": {
        "startLine": 115,
        "length": 3,
        "offset": 277,
        "surroundingCode": "    public static readonly CtxWriteDelegate<int> WriteInt = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<long> WriteLong = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<float> WriteFloat = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<double> WriteDouble = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<char> WriteChar = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "cc81975d1cf4a5af8e1760724ec1d8dbd15df083d9f11da4a175a2ce2df7cc41"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 't1' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/EmptyAction.cs",
      "language": "C#",
      "line": 19,
      "offset": 55,
      "length": 2,
      "code": {
        "startLine": 17,
        "length": 2,
        "offset": 100,
        "surroundingCode": "  public static class EmptyAction<T1, T2>\n  {\n    public static readonly Action<T1, T2> Instance = (t1, t2) => { };\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "cd6c714e89e2140f535185f351dc37404bd68081285550612e145fde79879e84"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdAssertion.cs",
      "language": "C#",
      "line": 33,
      "offset": 56,
      "length": 3,
      "code": {
        "startLine": 31,
        "length": 3,
        "offset": 74,
        "surroundingCode": "    //statics\n    \n    public static CtxReadDelegate<RdAssertion> Read = (ctx, reader) => \n    {\n      var masterVersion = reader.ReadInt();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "cf8ae5d9a5b298448731d3da90e2c477bf7151a04513dee577d40fcc7bfe159a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'seqN' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 19,
      "offset": 127,
      "length": 4,
      "code": {
        "startLine": 17,
        "length": 4,
        "offset": 157,
        "surroundingCode": "    {\n      var processed = 0;\n      var buffer = new ByteBufferAsyncProcessor(\"TestAsyncProcessor\", 10, delegate(byte[] data, int offset, int len, ref long seqN)\n      {\n        Assert.Greater(len, 0);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "d0693d10093d2bda900c5c72d1cb155771bfeda3333cfa7f80319a00faf3387d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'x' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/BlockingPriorityQueueTest.cs",
      "language": "C#",
      "line": 50,
      "offset": 66,
      "length": 1,
      "code": {
        "startLine": 48,
        "length": 1,
        "offset": 171,
        "surroundingCode": "            var currentCount = 0;\n            var threadsCount = Math.Max(2, Environment.ProcessorCount);\n            var tasks = Enumerable.Range(0, threadsCount).Select(x =>\n            {\n              return Task.Factory.StartNew(() =>"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "d5962c8e8bf0c8163d307530642d5e8a9782313424189e13a0a5dce685dae649"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 102,
      "offset": 62,
      "length": 3,
      "code": {
        "startLine": 100,
        "length": 3,
        "offset": 261,
        "surroundingCode": "    public static readonly CtxReadDelegate<byte> ReadUByte = (ctx, reader) => reader.ReadUByte();\n    public static readonly CtxReadDelegate<ushort> ReadUShort = (ctx, reader) => reader.ReadUShort();\n    public static readonly CtxReadDelegate<uint> ReadUInt = (ctx, reader) => reader.ReadUInt();\n    public static readonly CtxReadDelegate<ulong> ReadULong = (ctx, reader) => reader.ReadULong();\n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "da4aa603addba2bfc70c938313b9e196c351a6a689510443cb915428add84a86"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 's' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorPropertiesTest.cs",
      "language": "C#",
      "line": 57,
      "offset": 41,
      "length": 1,
      "code": {
        "startLine": 55,
        "length": 1,
        "offset": 89,
        "surroundingCode": "      // test signals\n      bool raised = false;\n      proxy.Signal.Advise(TestLifetime, s => raised = true);\n      client.Signal.Fire(\"test\");\n      Assertion.Assert(raised, \"!raised\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "ddbaddaeb510118208864cfdefc99ba83b1ab10470d5852d4693a23083587c46"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter '__' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextEarlyDeliveryTest.cs",
      "language": "C#",
      "line": 75,
      "offset": 34,
      "length": 2,
      "code": {
        "startLine": 73,
        "length": 2,
        "offset": 117,
        "surroundingCode": "      protected internal override void RegisterOn(ISerializers serializers)\n      {\n        serializers.Register((_, __) => Instance, (_, __, ___) => { });\n      }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "df2487cb1a10af4ad8c61cf178c319898c4b1d97e1dd42edc5997428c9f8623f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Parameter 'allowCaching' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 169,
      "offset": 57,
      "length": 12,
      "code": {
        "startLine": 167,
        "length": 12,
        "offset": 164,
        "surroundingCode": "    [Obsolete(\"Use NewThreadLocalWriter()\")]\n    [MethodImpl(MethodImplAdvancedOptions.AggressiveInlining)]\n    private static Cookie NewThreadLocalWriterImpl(bool allowCaching)\n    {\n      return NewThreadLocalWriter();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "e44ac8dc33d015907b3cfaf09990225df761ed6533e653709d5c5cd142bce94f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Parameter 't2' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/EmptyAction.cs",
      "language": "C#",
      "line": 19,
      "offset": 59,
      "length": 2,
      "code": {
        "startLine": 17,
        "length": 2,
        "offset": 104,
        "surroundingCode": "  public static class EmptyAction<T1, T2>\n  {\n    public static readonly Action<T1, T2> Instance = (t1, t2) => { };\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "e7410283be1a874dcd1b5dbc926bff10794d225ad96f863ef9ca72f0cc40a09f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 120,
      "offset": 64,
      "length": 3,
      "code": {
        "startLine": 118,
        "length": 3,
        "offset": 281,
        "surroundingCode": "    public static readonly CtxWriteDelegate<double> WriteDouble = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<char> WriteChar = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<bool> WriteBool = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<Unit> WriteVoid = (ctx, writer, value) => writer.Write(value);\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "e98ec7657818e46ee6530a9bf21d96adf1698e5d502405a280fee56315be9391"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 's' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Contexts/RdContextEarlyDeliveryTest.cs",
      "language": "C#",
      "line": 128,
      "offset": 33,
      "length": 1,
      "code": {
        "startLine": 126,
        "length": 1,
        "offset": 67,
        "surroundingCode": "      {\n        var fired = false;\n        clientSignal.Advise(lt, s =>\n        {\n          Assert.AreEqual(\"1\", key.Value);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "ef4a4577ed33dce44da5ea2bd6484c066a8667ad6fd854c56245bca7454bcf20"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 144,
      "offset": 66,
      "length": 3,
      "code": {
        "startLine": 142,
        "length": 3,
        "offset": 283,
        "surroundingCode": "    public static readonly CtxWriteDelegate<ushort> WriteUShort = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<uint> WriteUInt = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<ulong> WriteULong = (ctx, writer, value) => writer.Write(value);\n    \n    public static readonly CtxWriteDelegate<byte[]?> WriteUByteArray = (ctx, writer, value) => writer.WriteArray(WriteByte, ctx, value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "f29e275dfd980fa668a176d5947f676fc61d372c8daf3f9e1fe93ba6b4f174f6"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'key' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdMapTest.cs",
      "language": "C#",
      "line": 108,
      "offset": 51,
      "length": 3,
      "code": {
        "startLine": 106,
        "length": 3,
        "offset": 88,
        "surroundingCode": "      var itemRemovedClient = false;\n\n      serverMap.View(Lifetime.Eternal, (lifetime, key, value) =>\n      {\n        lifetime.OnTermination(() => { itemRemovedServer = true; });"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "f5f1863c3f9b1013042d442686d001481efbc7d9fd483406aaf1f3a68342408c"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Parameter 'idx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdList.cs",
      "language": "C#",
      "line": 39,
      "offset": 53,
      "length": 3,
      "code": {
        "startLine": 37,
        "length": 3,
        "offset": 83,
        "surroundingCode": "      \n      //WPF integration\n      this.AdviseAddRemove(Lifetime.Eternal, (kind, idx, v) =>\n      {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(\"Item[]\"));"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "f62c5bc2cce34c3781e526c099db9a937940e2d9c06481f4b7f07dc1e738f3cf"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 115,
      "offset": 62,
      "length": 3,
      "code": {
        "startLine": 113,
        "length": 3,
        "offset": 277,
        "surroundingCode": "    public static readonly CtxWriteDelegate<byte> WriteByte = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<short> WriteShort = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<int> WriteInt = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<long> WriteLong = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<float> WriteFloat = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "f96252bf19227d866c169cd1077d8e10890c86c7733537dec720937f7513977a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 121,
      "offset": 64,
      "length": 3,
      "code": {
        "startLine": 119,
        "length": 3,
        "offset": 277,
        "surroundingCode": "    public static readonly CtxWriteDelegate<char> WriteChar = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<bool> WriteBool = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<Unit> WriteVoid = (ctx, writer, value) => writer.Write(value);\n\n    public static readonly CtxWriteDelegate<string?> WriteString = (ctx, writer, value) => writer.Write(value);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "f967e50fb666acc5ebd26974b1dc1b02cd5dc0c5fc186f85bd98e9c107894adf"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 126,
      "offset": 62,
      "length": 3,
      "code": {
        "startLine": 124,
        "length": 3,
        "offset": 283,
        "surroundingCode": "    public static readonly CtxWriteDelegate<Guid> WriteGuid = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<DateTime> WriteDateTime = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<Uri> WriteUri = (ctx, writer, value) => writer.Write(value);\n    public static readonly CtxWriteDelegate<RdId> WriteRdId = (ctx, writer, value) => writer.Write(value);\n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "f9b17e0bd03147958bea803817ca86e71b2a4f85a3fe08145efa01cad654c885"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'ctx' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarIntrinsicTests.cs",
      "language": "C#",
      "line": 135,
      "offset": 62,
      "length": 3,
      "code": {
        "startLine": 133,
        "length": 3,
        "offset": 70,
        "surroundingCode": "      }\n\n      public static CtxReadDelegate<NoRedIntrinsic1> Read = (ctx, reader) => new NoRedIntrinsic1(0/*reader.ReadByte()*/, reader.ReadByte(), reader.ReadByte());\n      public static CtxWriteDelegate<NoRedIntrinsic1> Write = (ctx, writer, value) =>\n      {"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "fcec2377eeb9f103b7e282b5f8d24b8268d97a7a155c780a918a24e6c91469aa"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'x' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ActorTest.cs",
      "language": "C#",
      "line": 156,
      "offset": 67,
      "length": 1,
      "code": {
        "startLine": 154,
        "length": 1,
        "offset": 220,
        "surroundingCode": "      var scheduler = SingleThreadScheduler.RunOnSeparateThread(TestLifetime, \"TestScheduler\");\n      var channel = new AsyncChannel<Unit>(TestLifetime);\n      var actor = new Actor<int>(\"TestActor\", TestLifetime, async x =>\n        {\n          Assert.AreEqual(scheduler, TaskScheduler.Current);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "ff4fdea4524a0eb3eca5c4a22c83058d0fdd500707b0ad6022c006f985d02996"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused parameter (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Parameter 'lmsg' is never used",
  "detailsInfo": "Parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Diagnostics/TextWriterLogTest.cs",
      "language": "C#",
      "line": 23,
      "offset": 24,
      "length": 4,
      "code": {
        "startLine": 21,
        "length": 4,
        "offset": 60,
        "surroundingCode": "\n      int extHandlersTriggered = 0;\n      log1.Handlers += lmsg => { extHandlersTriggered++; };\n      \n      log1.Verbose(\"record 1 verbose\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedParameter.Local"
  },
  "hash": "ff53d3b8c96627256d592f65f73df35a566c615b620476d03b9c5e527caa641b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Class 'EmptyAction' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/EmptyAction.cs",
      "language": "C#",
      "line": 17,
      "offset": 23,
      "length": 11,
      "code": {
        "startLine": 15,
        "length": 11,
        "offset": 27,
        "surroundingCode": "  }\n\n  public static class EmptyAction<T1, T2>\n  {\n    public static readonly Action<T1, T2> Instance = (t1, t2) => { };"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "07400efe1004ef49808aab9b9c71bea359f421c25831eb51a803168d272e4d57"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Class 'EmptyAction' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/EmptyAction.cs",
      "language": "C#",
      "line": 5,
      "offset": 23,
      "length": 11,
      "code": {
        "startLine": 3,
        "length": 11,
        "offset": 49,
        "surroundingCode": "namespace JetBrains.Util\n{\n  public static class EmptyAction\n  {\n    public static readonly Action Instance = () => { };"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "088d951d2099a662c7f69f2307e66435913deb063cb9d33621ef617584fd7f55"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Class 'ThreadLocalRdContext' is never used (except inside its declaration)",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/RdContext.cs",
      "language": "C#",
      "line": 120,
      "offset": 25,
      "length": 20,
      "code": {
        "startLine": 118,
        "length": 20,
        "offset": 80,
        "surroundingCode": "  /// </summary>\n  /// <typeparam name=\"T\"></typeparam>\n  public abstract class ThreadLocalRdContext<T> : RdContext<T>\n  {\n    [ThreadStatic] [CanBeNull] private static SingleThreadObjectPool<UpdateValueCookie> ourPool;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "0cb8d28a744869198c027b5b41bd173ec6ae8bfe6231a1631c8c8b497ffde353"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Class 'RdTextBuffer' is never used (except inside its declaration)",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/RdTextBuffer.cs",
      "language": "C#",
      "line": 16,
      "offset": 16,
      "length": 12,
      "code": {
        "startLine": 14,
        "length": 12,
        "offset": 50,
        "surroundingCode": "namespace JetBrains.Rd.Text.Impl\n{\n  public class RdTextBuffer : RdDelegateBase<RdTextBufferState>, ITextBufferWithTypingSession\n  {\n    public bool IsMaster { get; }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "2118b3c693a4dfdc0da601ed80c374cc83ddb75bbbc90c0b557c0825c3ab16e8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Class 'RdTextBufferState' is never used (except inside its declaration)",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 12,
      "offset": 16,
      "length": 17,
      "code": {
        "startLine": 10,
        "length": 17,
        "offset": 61,
        "surroundingCode": "namespace JetBrains.Rd.Text.Impl.Intrinsics\n{\n  public class RdTextBufferState : RdBindableBase\n  {\n    //fields"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "22afdc748e593a418a1710f69911416fb7456adb49e53beb0ff10425fa8e0bee"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Class 'Identities' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Identities.cs",
      "language": "C#",
      "line": 5,
      "offset": 16,
      "length": 10,
      "code": {
        "startLine": 3,
        "length": 10,
        "offset": 45,
        "surroundingCode": "namespace JetBrains.Rd.Impl\n{\n  public class Identities : IIdentities\n  {\n    private readonly IdKind Kind;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "265efe96e02f888c3bdff909045177d05f838b2aa83a407e8e8ba51acb2bd448"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Class 'RdAsyncAttribute' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFactory.cs",
      "language": "C#",
      "line": 83,
      "offset": 16,
      "length": 16,
      "code": {
        "startLine": 81,
        "length": 16,
        "offset": 170,
        "surroundingCode": "  [Obsolete(\"RdAsync enabled by default for everything\")]\n  [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property | AttributeTargets.Method)]\n  public class RdAsyncAttribute : Attribute { }\n\n  /// <summary>"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "47b512705f678b82a526ee87b0dc0074e026ef6705e307611a3490bdbed12a13"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Class 'MaybeNullAttribute' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/NullableAttributes.cs",
      "language": "C#",
      "line": 21,
      "offset": 27,
      "length": 18,
      "code": {
        "startLine": 19,
        "length": 18,
        "offset": 287,
        "surroundingCode": "    /// <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, Inherited = false)]\n    internal sealed class MaybeNullAttribute : Attribute { }\n\n    /// <summary>Specifies that an output will not be null even if the corresponding type allows it.</summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "4f0b9d472182465f8756bd4d0722bcf9eddc3274a7c54b474007eb8122985edf"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Class 'EmptyAction' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/EmptyAction.cs",
      "language": "C#",
      "line": 12,
      "offset": 23,
      "length": 11,
      "code": {
        "startLine": 10,
        "length": 11,
        "offset": 71,
        "surroundingCode": "  // ReSharper disable StaticFieldInGenericType\n\n  public static class EmptyAction<T>\n  {\n    public static readonly Action<T> Instance = t => { };"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "5d59dbe0944a72ac26c71f21b89981f8bc7ac6fb2dfe8e50eff05333c255fff3"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Class 'ReferenceEqualityComparer' is never used (except inside its declaration)",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/ReferenceEqualityComparer.cs",
      "language": "C#",
      "line": 12,
      "offset": 23,
      "length": 25,
      "code": {
        "startLine": 10,
        "length": 25,
        "offset": 78,
        "surroundingCode": "  /// </summary>\n  /// <typeparam name=\"T\"></typeparam>\n  public sealed class ReferenceEqualityComparer<T> : IEqualityComparer<T>\n    where T : class\n  {"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "67cfd79ea25837b4da398ecc3b41d89f85c5dd075188e79cef329cd400655527"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Class 'RdDelegateBase' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdDelegateBase.cs",
      "language": "C#",
      "line": 7,
      "offset": 16,
      "length": 14,
      "code": {
        "startLine": 5,
        "length": 14,
        "offset": 45,
        "surroundingCode": "namespace JetBrains.Rd.Base\n{\n  public class RdDelegateBase<T> : IRdBindable where T : class, IRdBindable\n  {\n    "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "6e8062dc71e809dd75c987f7f24288f433e4e79e19918d0a847f5c5b99f0b59b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Class 'EmptyEnumerator' is never used (except inside its declaration)",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/EmptyEnumerator.cs",
      "language": "C#",
      "line": 11,
      "offset": 23,
      "length": 15,
      "code": {
        "startLine": 9,
        "length": 15,
        "offset": 78,
        "surroundingCode": "  /// </summary>\n  /// <typeparam name=\"T\"></typeparam>\n  public sealed class EmptyEnumerator<T> : IEnumerator<T> \n  {\n    public static readonly EmptyEnumerator<T> Instance = new EmptyEnumerator<T>();"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "70743c3dd95f8b70f7cec12695577a208177f799bf70ad39688ba008f68cb05a"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Class 'InterningExtensionHolderInterningExtEx' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 77,
      "offset": 23,
      "length": 38,
      "code": {
        "startLine": 75,
        "length": 38,
        "offset": 32,
        "surroundingCode": "    }\n  }\n  public static class InterningExtensionHolderInterningExtEx\n   {\n    public static InterningExt GetInterningExt(this InterningExtensionHolder interningExtensionHolder)"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "75a8ecaea9cb2565bc128af040c7b5fd36584a696bda367c56905c9ba1f6accf"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Class 'Linearization' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Linearization.cs",
      "language": "C#",
      "line": 6,
      "offset": 16,
      "length": 13,
      "code": {
        "startLine": 4,
        "length": 13,
        "offset": 42,
        "surroundingCode": "namespace Test.Lifetimes\n{\n  public class Linearization\n  {\n    private readonly object myLock = new object();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "791fdd49715ba6f49a1387b158a1ee62e59f8bb5566d95a9599e3aee40fb0f9e"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Interface 'ITextBufferWithTypingSession' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/ITextBuffer.cs",
      "language": "C#",
      "line": 21,
      "offset": 20,
      "length": 28,
      "code": {
        "startLine": 19,
        "length": 28,
        "offset": 24,
        "surroundingCode": "  }\n\n  public interface ITextBufferWithTypingSession : ITextBuffer\n  {\n    ITypingSession StartTypingSession(Lifetime lifetime);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "7af643d0209ed8983e4f9d0d81be2ddca78f737ac7e9580030f2dd7ada8a649b"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Class 'Client' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 522,
      "offset": 18,
      "length": 6,
      "code": {
        "startLine": 520,
        "length": 6,
        "offset": 24,
        "surroundingCode": "    }\n\n    public class Client : Base\n    {\n      public Client(Lifetime lifetime, IScheduler scheduler, int port, string? optId = null) :"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "7e0fb0c2966c3e190b7513d77f3704a0ef5d3e1749fa84fcb7a6e835e82e8042"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Class 'RdPerContextMap' is never used (except inside its declaration)",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdPerContextMap.cs",
      "language": "C#",
      "line": 12,
      "offset": 18,
      "length": 15,
      "code": {
        "startLine": 10,
        "length": 15,
        "offset": 47,
        "surroundingCode": "namespace JetBrains.Rd.Impl\n{\n    public class RdPerContextMap<K, V> : RdReactiveBase, IPerContextMap<K, V> where V : RdBindableBase where K: notnull\n    {\n        public RdContext<K> Context { get; }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "89148d4080b83e58ed92bff44af85805bf69b2050639c11e381258a522c2f674"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Class 'GeneralEx' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/GeneralEx.cs",
      "language": "C#",
      "line": 8,
      "offset": 25,
      "length": 9,
      "code": {
        "startLine": 6,
        "length": 9,
        "offset": 51,
        "surroundingCode": "namespace Test.Lifetimes\n{\n    public static class GeneralEx\n    {\n        [DebuggerStepThrough]"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "9093b8df57dd32ab656dffaa2ee7ce3be7a2453f566ec80932f448ab4c7eca0d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Class 'AllowNullAttribute' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/NullableAttributes.cs",
      "language": "C#",
      "line": 13,
      "offset": 27,
      "length": 18,
      "code": {
        "startLine": 11,
        "length": 18,
        "offset": 262,
        "surroundingCode": "    /// <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property, Inherited = false)]\n    internal sealed class AllowNullAttribute : Attribute { }\n\n    /// <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "98881c7acce5efaeebe2f4bcd491ec4450cf68fa1c8fac73af6114c98ccc4a28"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Class 'StealingScheduler' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/StealingScheduler.cs",
      "language": "C#",
      "line": 13,
      "offset": 16,
      "length": 17,
      "code": {
        "startLine": 11,
        "length": 17,
        "offset": 150,
        "surroundingCode": "  /// A scheduler with a ability to join all queued tasks at some point and execute them synchronously when necessary\n  /// </summary>\n  public class StealingScheduler : TaskScheduler\n  {\n    private readonly bool myAllowParallelJoin;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "9b7a39671cc1db037e970bd89a1baeb017a2127f3b7727108e0726c82f1526d0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Class 'InterpolatedStringHandlerArgumentAttribute' is never used (except inside its declaration)",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/InterpolatedStringHandlerArgumentAttribute.cs",
      "language": "C#",
      "line": 11,
      "offset": 25,
      "length": 42,
      "code": {
        "startLine": 9,
        "length": 42,
        "offset": 251,
        "surroundingCode": "  /// <summary>Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.</summary>\n  [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false, Inherited = false)]\n  internal sealed class InterpolatedStringHandlerArgumentAttribute : Attribute\n  {\n    /// <summary>Initializes a new instance of the <see cref=\"InterpolatedStringHandlerArgumentAttribute\"/> class.</summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "a53635c5d618f4e93e75a3c729ecf154a4483e7d2cfdc7012e133cd7b5f5cff7"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Class 'InterpolatedStringHandlerAttribute' is never used (except inside its declaration)",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/InterpolatedStringHandlerAttribute.cs",
      "language": "C#",
      "line": 10,
      "offset": 25,
      "length": 34,
      "code": {
        "startLine": 8,
        "length": 34,
        "offset": 239,
        "surroundingCode": "  /// <summary>Indicates the attributed type is to be used as an interpolated string handler.</summary>\n  [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = false, Inherited = false)]\n  internal sealed class InterpolatedStringHandlerAttribute : Attribute\n  {\n    /// <summary>Initializes the <see cref=\"InterpolatedStringHandlerAttribute\"/>.</summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "a73861a0523c95c857a927dbe8a70e7acd2e0d51fc998127ada313a849b28d53"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Class 'SmartListExtensions' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CompactList.cs",
      "language": "C#",
      "line": 205,
      "offset": 23,
      "length": 19,
      "code": {
        "startLine": 203,
        "length": 19,
        "offset": 27,
        "surroundingCode": "  }\n\n  public static class SmartListExtensions\n  {\n    public static CompactList<T> ToSmartList<T>(this IEnumerable<T> source)"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "a8e261b31ab2280b2c4a37ad0c45e20027d03e1771b2f1988f404e887595566f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Class 'MemberNotNullAttribute' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Annotations/NullableAttributes.cs",
      "language": "C#",
      "line": 94,
      "offset": 27,
      "length": 22,
      "code": {
        "startLine": 92,
        "length": 22,
        "offset": 283,
        "surroundingCode": "    /// <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, Inherited = false, AllowMultiple = true)]\n    internal sealed class MemberNotNullAttribute : Attribute\n    {\n        /// <summary>Initializes the attribute with a field or property member.</summary>"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "ba9d8d509e9b59952e9b03c52a60433cb042567151f4e77de3f82629f797bd38"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Class 'SingletonLogFactory' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Internal/SingletonLogFactory.cs",
      "language": "C#",
      "line": 6,
      "offset": 16,
      "length": 19,
      "code": {
        "startLine": 4,
        "length": 19,
        "offset": 117,
        "surroundingCode": "  /// This factory always create one instance of <see cref=\"ILog\"/> for any category\n  /// </summary>\n  public class SingletonLogFactory : ILogFactory\n  {\n    private readonly ILog myLog;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "ddfea53533c134d08b57cbe4e6502e56ad675fd8bcd8a6ac934ce21a66af7d69"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Class 'Scalar1' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ScalarTests.cs",
      "language": "C#",
      "line": 404,
      "offset": 18,
      "length": 7,
      "code": {
        "startLine": 402,
        "length": 7,
        "offset": 26,
        "surroundingCode": "      }\n\n    public class Scalar1\n    {\n      public string Name;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "e0a942dbc2874f768c783a57fdd4a6dc4fc62dcd7e457cb3b25add92f4dbbf89"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Class 'AsyncTestFixture' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorAsyncCallsTest.cs",
      "language": "C#",
      "line": 46,
      "offset": 18,
      "length": 16,
      "code": {
        "startLine": 44,
        "length": 16,
        "offset": 24,
        "surroundingCode": "    }\n\n    public class AsyncTestFixture<T>\n    {\n      public virtual int Rounds => 1;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "e3baa0c107e5a765721ac7582c84ef5629c84d5e4232824854200e75ceae8733"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Class 'NullLog' is never used (except inside its declaration)",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/Internal/NullLog.cs",
      "language": "C#",
      "line": 6,
      "offset": 16,
      "length": 7,
      "code": {
        "startLine": 4,
        "length": 7,
        "offset": 58,
        "surroundingCode": "namespace JetBrains.Diagnostics.Internal\n{\n  public class NullLog : ILog\n  {\n    public static readonly NullLog Instance = new NullLog();        "
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "e415b04406471a3a087523612dee180f2b86aa4f39af33895a3c326a3df28398"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Class 'ReflectionSerializersFacade' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ReflectionSerializersFacade.cs",
      "language": "C#",
      "line": 8,
      "offset": 16,
      "length": 27,
      "code": {
        "startLine": 6,
        "length": 27,
        "offset": 51,
        "surroundingCode": "namespace JetBrains.Rd.Reflection\n{\n  public class ReflectionSerializersFacade\n  {\n    public ReflectionRdActivator Activator { get; }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "ebeeda7622cbd924425bc4599467fddb88182df25787c2ab935221c817bc1625"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Struct 'SingletonEnumerator' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/SingletonEnumerator.cs",
      "language": "C#",
      "line": 10,
      "offset": 17,
      "length": 19,
      "code": {
        "startLine": 8,
        "length": 19,
        "offset": 72,
        "surroundingCode": "  /// </summary>\n  /// <typeparam name=\"T\"></typeparam>\n  public struct SingletonEnumerator<T> : IEnumerator<T>\n  {\n    private bool myHasNext;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "f5439d3ee310a0bf5a1c735252618631303cf5d53f1afa8345b54735c4993a78"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Class 'EmptyAction' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/EmptyAction.cs",
      "language": "C#",
      "line": 22,
      "offset": 23,
      "length": 11,
      "code": {
        "startLine": 20,
        "length": 11,
        "offset": 27,
        "surroundingCode": "  }\n\n  public static class EmptyAction<T1, T2, T3>\n  {\n    public static readonly Action<T1, T2, T3> Instance = (t1, t2, t3) => { };"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedType.Global"
  },
  "hash": "ffc08a079f5f080c8d2605e4d6db7c6c465530170a427d9cac4fa3343798bcaa"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Enum 'E0' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/BitSliceTest.cs",
      "language": "C#",
      "line": 11,
      "offset": 18,
      "length": 2,
      "code": {
        "startLine": 9,
        "length": 2,
        "offset": 49,
        "surroundingCode": "  public class BitSliceTest\n  {\n    private enum E0 {}\n    private enum EMinus { Single = -1}\n    private enum EUint : uint { Single = uint.MaxValue}"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedType.Local"
  },
  "hash": "74bb0ae72c14769f3413140140417cfe2ca4c684bfbe3210f5036dd66b7b77b4"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Enum 'EUint' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/BitSliceTest.cs",
      "language": "C#",
      "line": 13,
      "offset": 18,
      "length": 5,
      "code": {
        "startLine": 11,
        "length": 5,
        "offset": 79,
        "surroundingCode": "    private enum E0 {}\n    private enum EMinus { Single = -1}\n    private enum EUint : uint { Single = uint.MaxValue}\n    private enum ELong : long { Single = long.MaxValue}\n    "
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedType.Local"
  },
  "hash": "b2b89d6555bcad4795741866bf4750faa844f335aa31b3ddbc27f2ca5f4f33c1"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Enum 'EMinus' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/BitSliceTest.cs",
      "language": "C#",
      "line": 12,
      "offset": 18,
      "length": 6,
      "code": {
        "startLine": 10,
        "length": 6,
        "offset": 44,
        "surroundingCode": "  {\n    private enum E0 {}\n    private enum EMinus { Single = -1}\n    private enum EUint : uint { Single = uint.MaxValue}\n    private enum ELong : long { Single = long.MaxValue}"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedType.Local"
  },
  "hash": "c058842b0012a70ed6419d5560999d2a569ae0363ffde5bd191ce0d98ac617bb"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type is never used (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Enum 'ELong' is never used",
  "detailsInfo": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/BitSliceTest.cs",
      "language": "C#",
      "line": 14,
      "offset": 18,
      "length": 5,
      "code": {
        "startLine": 12,
        "length": 5,
        "offset": 112,
        "surroundingCode": "    private enum EMinus { Single = -1}\n    private enum EUint : uint { Single = uint.MaxValue}\n    private enum ELong : long { Single = long.MaxValue}\n    \n    private enum E1 { Single }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedType.Local"
  },
  "hash": "f486adacd11b0c2a615898ffec9dcf5b092b06ff9fa28f916d83f515986f4276"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused type parameter",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Type parameter 'T' is never used",
  "detailsInfo": "Type parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorAsyncCallsTest.cs",
      "language": "C#",
      "line": 46,
      "offset": 35,
      "length": 1,
      "code": {
        "startLine": 44,
        "length": 1,
        "offset": 41,
        "surroundingCode": "    }\n\n    public class AsyncTestFixture<T>\n    {\n      public virtual int Rounds => 1;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedTypeParameter"
  },
  "hash": "20ff6d91ea872290724c72e1f5908f0967b14095352d81f13e20cd5cc4a07921"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused type parameter",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Type parameter 'TKey' is never used",
  "detailsInfo": "Type parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/CollectionSerializers.cs",
      "language": "C#",
      "line": 44,
      "offset": 73,
      "length": 4,
      "code": {
        "startLine": 42,
        "length": 4,
        "offset": 79,
        "surroundingCode": "    }\n\n    public static SerializerPair CreateReadOnlyDictionarySerializerPair<TKey, TValue>(SerializerPair keySerializer, SerializerPair valueSerializer)\n    {\n#if NET35"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedTypeParameter"
  },
  "hash": "682e791dbcbc06af2c4bc6fd24440c1a0781e35aa69fc0aa76b5ec0108367510"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused type parameter",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Type parameter 'TValue' is never used",
  "detailsInfo": "Type parameter is never used",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/CollectionSerializers.cs",
      "language": "C#",
      "line": 44,
      "offset": 79,
      "length": 6,
      "code": {
        "startLine": 42,
        "length": 6,
        "offset": 85,
        "surroundingCode": "    }\n\n    public static SerializerPair CreateReadOnlyDictionarySerializerPair<TKey, TValue>(SerializerPair keySerializer, SerializerPair valueSerializer)\n    {\n#if NET35"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedTypeParameter"
  },
  "hash": "79ca37e06b8e5e812648296d345f2c23e14b3cbbda56a0cefbf2cfdd7f7e3216"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Local variable 'client' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorSimpleTest.cs",
      "language": "C#",
      "line": 56,
      "offset": 11,
      "length": 6,
      "code": {
        "startLine": 54,
        "length": 6,
        "offset": 109,
        "surroundingCode": "    {\n      var proxy = SFacade.ActivateProxy<IUnitTestRemoteAgent>(TestLifetime, ServerProtocol);\n      var client = CFacade.Activator.ActivateBind<UnitTestRemoteAgent>(TestLifetime, ClientProtocol);\n      Assertion.Assert(((RdExtReflectionBindableBase)proxy).Connected.Value, \"((RdReflectionBindableBase)proxy).Connected.Value\");\n      proxy.RunTests(null);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedVariable"
  },
  "hash": "047e594421c31c7c705929a1544a8661fa426744f2aaa57171e8a932e8325961"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Local variable 'serializers' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorSimpleTest.cs",
      "language": "C#",
      "line": 82,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 80,
        "length": 11,
        "offset": 59,
        "surroundingCode": "      for (int i = 0; i < 100000; i++)\n      {\n        var serializers = new Serializers();\n      }\n      dotMemory.Check(m => Assert.Less(m.GetDifference(checkpoint).GetNewObjects().SizeInBytes, 128_000));"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedVariable"
  },
  "hash": "082da8000f3f76d40f7aa4d43c018499680b762a6d62ba9cc2494ab6f4978181"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Local variable 'v8' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/UnsafeMarshallersTest.cs",
      "language": "C#",
      "line": 174,
      "offset": 11,
      "length": 2,
      "code": {
        "startLine": 172,
        "length": 2,
        "offset": 87,
        "surroundingCode": "      var v6 = myReader.ReadDecimal();\n      var v7 = myReader.ReadDouble();\n      var v8 = myReader.ReadInt16();\n      var v9 = myReader.ReadInt32();\n      var v10 = myReader.ReadInt64();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedVariable"
  },
  "hash": "08837c519d2ea626f868d653e515eff5dba757c02096c1af468ce0323053a200"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Local variable 'animal' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/TestReflectionSerialization.cs",
      "language": "C#",
      "line": 142,
      "offset": 11,
      "length": 6,
      "code": {
        "startLine": 140,
        "length": 6,
        "offset": 61,
        "surroundingCode": "    public void TestNestedRdModelsCircular()\n    {\n      var animal = CFacade.Activator.Activate<Animal>();\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedVariable"
  },
  "hash": "13b336bf85f7fd85332d79fe0f98e3ccd6b2f6aeb28778efe3b7373c766a6974"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Local variable 'v10' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/UnsafeMarshallersTest.cs",
      "language": "C#",
      "line": 176,
      "offset": 11,
      "length": 3,
      "code": {
        "startLine": 174,
        "length": 3,
        "offset": 84,
        "surroundingCode": "      var v8 = myReader.ReadInt16();\n      var v9 = myReader.ReadInt32();\n      var v10 = myReader.ReadInt64();\n      var v11 = myReader.ReadString();\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedVariable"
  },
  "hash": "182138556e46051675f4089012e9c11ab2a59e8b6f64b37fafa6767e04c920db"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Local variable 'client' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorAsyncNestedCallsTest.cs",
      "language": "C#",
      "line": 56,
      "offset": 11,
      "length": 6,
      "code": {
        "startLine": 54,
        "length": 6,
        "offset": 134,
        "surroundingCode": "      await YieldToClient();\n      var serverProxy = CFacade.ActivateProxy<IServerFactorial>(TestLifetime, ClientProtocol);\n      var client = CFacade.InitBind(new ClientFactorialExt(serverProxy), TestLifetime, ClientProtocol);\n\n      var clientProxy = CFacade.ActivateProxy<IClientFactorial>(TestLifetime, ServerProtocol);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedVariable"
  },
  "hash": "1cc2a1787f82ed5d09c183db13ba692d06a826e0fed05d76c3ac1235fe3b5602"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Local variable 'client' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorPropertiesTest.cs",
      "language": "C#",
      "line": 88,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 86,
        "length": 6,
        "offset": 76,
        "surroundingCode": "      Assert.Throws<Assertion.AssertionException>(() =>\n      {\n        var client = CFacade.InitBind(new PartSync(), TestLifetime, ClientProtocol);\n        var proxy = SFacade.ActivateProxy<IPartSync>(TestLifetime, ServerProtocol);\n        Assertion.Assert(((RdExtReflectionBindableBase)proxy).Connected.Value, \"((RdReflectionBindableBase)proxy).Connected.Value\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedVariable"
  },
  "hash": "2437ef9c9ad44be8d066aec55f5b35c6dfe2d51b63be188482f4f39ae1b625b4"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Local variable 'v3' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/UnsafeMarshallersTest.cs",
      "language": "C#",
      "line": 169,
      "offset": 11,
      "length": 2,
      "code": {
        "startLine": 167,
        "length": 2,
        "offset": 85,
        "surroundingCode": "      var v1 = myReader.ReadBoolean();\n      var v2 = myReader.ReadByte();\n      var v3 = myReader.ReadByte();\n      var v4 = myReader.ReadChar();\n      var v5 = myReader.ReadChar();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedVariable"
  },
  "hash": "33b7240ef7e277873930068981a26023c6f8c95e55d58e0c0abcc5c8a0458c76"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Local variable 'client' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorSimpleTest.cs",
      "language": "C#",
      "line": 46,
      "offset": 11,
      "length": 6,
      "code": {
        "startLine": 44,
        "length": 6,
        "offset": 104,
        "surroundingCode": "      var proxy = SFacade.ActivateProxy<IUnitTestRemoteAgent>(TestLifetime, ServerProtocol);\n\n      var client = CFacade.Activator.ActivateBind<UnitTestRemoteAgent>(TestLifetime, ClientProtocol);\n      Assertion.Assert(((RdExtReflectionBindableBase)proxy).Connected.Value, \"((RdReflectionBindableBase)proxy).Connected.Value\");\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedVariable"
  },
  "hash": "381f8da82d69590c74a40ed21ccac10a7476e26cdc8e562f3534669276383266"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Local variable 'v1' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/UnsafeMarshallersTest.cs",
      "language": "C#",
      "line": 167,
      "offset": 11,
      "length": 2,
      "code": {
        "startLine": 165,
        "length": 2,
        "offset": 102,
        "surroundingCode": "      myReader.Reset(myCookie.Data, myCookie.Count);\n      var v0 = myReader.ReadBoolean();\n      var v1 = myReader.ReadBoolean();\n      var v2 = myReader.ReadByte();\n      var v3 = myReader.ReadByte();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedVariable"
  },
  "hash": "400dd77214b0713b2460f7a7f9cd03649091b4cab3480110d2420c6f04e81b29"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Local variable 'v4' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/UnsafeMarshallersTest.cs",
      "language": "C#",
      "line": 170,
      "offset": 11,
      "length": 2,
      "code": {
        "startLine": 168,
        "length": 2,
        "offset": 82,
        "surroundingCode": "      var v2 = myReader.ReadByte();\n      var v3 = myReader.ReadByte();\n      var v4 = myReader.ReadChar();\n      var v5 = myReader.ReadChar();\n      var v6 = myReader.ReadDecimal();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedVariable"
  },
  "hash": "4f27d7aa86b0e2a756f80763154ca0f4ad2f9b8b3f2db2fec28aa25adc17398d"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Local variable 'instanceSerializer' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorScalarInterfaceSerializerTest.cs",
      "language": "C#",
      "line": 34,
      "offset": 13,
      "length": 18,
      "code": {
        "startLine": 32,
        "length": 18,
        "offset": 81,
        "surroundingCode": "      WithExtsProxy<SimpleCalls, ISimpleCalls>((c, proxy) =>\n      {\n        var instanceSerializer = CFacade.ScalarSerializers.GetInstanceSerializer(typeof(IReadOnlyDictionary<string, string>));\n\n        Assert.AreEqual(typeof(MyImpl2).Name, proxy.GetTypeName2(new MyImpl1()));"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedVariable"
  },
  "hash": "596ec59173023283172f38ba54fa1569b29541fa7f72600af754bebec412dda6"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Local variable 'dict' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Synchronized/TestSynchronizedDictionary.cs",
      "language": "C#",
      "line": 11,
      "offset": 17,
      "length": 4,
      "code": {
        "startLine": 9,
        "length": 4,
        "offset": 66,
        "surroundingCode": "        public void TestLiveFiltering()\n        {\n            var dict = new SynchronizedDictionary<int, string>\n            {\n                {1, \"1\"},"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedVariable"
  },
  "hash": "59bc59fc73e678c01641fd42d3ee098aeae486f68745b8293649f68e0cdce1d8"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Local variable 'cookie' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/UnsafeWriterTest.cs",
      "language": "C#",
      "line": 39,
      "offset": 18,
      "length": 6,
      "code": {
        "startLine": 37,
        "length": 6,
        "offset": 64,
        "surroundingCode": "    public void TestNullWriterInCookie()\n    {\n      using (var cookie = new UnsafeWriter.Cookie())\n      {\n      }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedVariable"
  },
  "hash": "5de88dca019839ef69115c123b7657b7a72af56502c11a4e05d23c5a374b1e75"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Local variable 'clientEntity' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdTaskTest.cs",
      "language": "C#",
      "line": 43,
      "offset": 11,
      "length": 12,
      "code": {
        "startLine": 41,
        "length": 12,
        "offset": 113,
        "surroundingCode": "\n      var serverEntity = BindToServer(LifetimeDefinition.Lifetime, NewRdCall<int, string>(), ourKey);\n      var clientEntity = BindToClient(LifetimeDefinition.Lifetime, CreateEndpoint<int, string>(x => x.ToString()), ourKey);\n\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedVariable"
  },
  "hash": "65e2f3f90c3c8b3dd5167fec4a631ecd093ba91d30df6005c2c775f0adab5ffd"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Local variable 'v6' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/UnsafeMarshallersTest.cs",
      "language": "C#",
      "line": 172,
      "offset": 11,
      "length": 2,
      "code": {
        "startLine": 170,
        "length": 2,
        "offset": 82,
        "surroundingCode": "      var v4 = myReader.ReadChar();\n      var v5 = myReader.ReadChar();\n      var v6 = myReader.ReadDecimal();\n      var v7 = myReader.ReadDouble();\n      var v8 = myReader.ReadInt16();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedVariable"
  },
  "hash": "70cc6668cd2357b3d15a5873ea9c3bc74081d2b7a1b274a88929cf567f0c04f2"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Local variable 'property' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 280,
      "offset": 11,
      "length": 8,
      "code": {
        "startLine": 278,
        "length": 8,
        "offset": 55,
        "surroundingCode": "      var type = propertyInfo.PropertyType;\n\n      var property = typebuilder.DefineProperty(propertyInfo.Name, PropertyAttributes.HasDefault, type, EmptyArray<Type>.Instance);\n\n      var field = typebuilder.DefineField(MakeBackingFieldName(propertyInfo.Name), type, FieldAttributes.Private);"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UnusedVariable"
  },
  "hash": "71b2ffcff66c061ce99e94b0e909914772a733bc75a1bd07c4a5894079c14882"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Local variable 'serverEntity' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdTaskTest.cs",
      "language": "C#",
      "line": 162,
      "offset": 11,
      "length": 12,
      "code": {
        "startLine": 160,
        "length": 12,
        "offset": 27,
        "surroundingCode": "      });\n      \n      var serverEntity = BindToServer(LifetimeDefinition.Lifetime, call1, ourKey);\n      var clientEntity = BindToClient(LifetimeDefinition.Lifetime, call2, ourKey);\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedVariable"
  },
  "hash": "95994c8111798640628568661596d20b4b96ac5ce0e43ee04480e1dec507eea0"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Local variable 'client' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorSimpleTest.cs",
      "language": "C#",
      "line": 66,
      "offset": 11,
      "length": 6,
      "code": {
        "startLine": 64,
        "length": 6,
        "offset": 109,
        "surroundingCode": "    {\n      var proxy = SFacade.ActivateProxy<IUnitTestRemoteAgent>(TestLifetime, ServerProtocol);\n      var client = CFacade.Activator.ActivateBind<UnitTestRemoteAgent>(TestLifetime, ClientProtocol);\n\n      var checkpoint = dotMemory.Check();"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedVariable"
  },
  "hash": "982e699942d8e8d3d24489fc9032f2c69dda792840fc34627d29c31ede339d13"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Local variable 'to' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Utils/CastToTest.cs",
      "language": "C#",
      "line": 42,
      "offset": 17,
      "length": 2,
      "code": {
        "startLine": 40,
        "length": 2,
        "offset": 87,
        "surroundingCode": "        {\n            var from = new Tuple<ulong>(0x0123456789abcdef);\n            var to = new Tuple<uint,uint>(0x89abcdef,0x01234567);\n\n            Assert.Throws<TypeInitializationException>(() => CastTo<Tuple<uint,uint>>.From(@from));"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedVariable"
  },
  "hash": "9d3e9237bcb2f3f44dceb6cf6592836eb7f7e582ea9cc7e943da7b2eee3fc7bb"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Local variable 'v11' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/UnsafeMarshallersTest.cs",
      "language": "C#",
      "line": 177,
      "offset": 11,
      "length": 3,
      "code": {
        "startLine": 175,
        "length": 3,
        "offset": 85,
        "surroundingCode": "      var v9 = myReader.ReadInt32();\n      var v10 = myReader.ReadInt64();\n      var v11 = myReader.ReadString();\n    }\n#endif"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedVariable"
  },
  "hash": "a2775af73ebdc366aa9aa613f53a031234c0c49da684e42307e8838818d88733"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Local variable 'v5' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/UnsafeMarshallersTest.cs",
      "language": "C#",
      "line": 171,
      "offset": 11,
      "length": 2,
      "code": {
        "startLine": 169,
        "length": 2,
        "offset": 82,
        "surroundingCode": "      var v3 = myReader.ReadByte();\n      var v4 = myReader.ReadChar();\n      var v5 = myReader.ReadChar();\n      var v6 = myReader.ReadDecimal();\n      var v7 = myReader.ReadDouble();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedVariable"
  },
  "hash": "ae0686d1bfcea28e219cc3b4b29064514a8b2f5fc302d8affe248029f6dc357f"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Local variable 'v9' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/UnsafeMarshallersTest.cs",
      "language": "C#",
      "line": 175,
      "offset": 11,
      "length": 2,
      "code": {
        "startLine": 173,
        "length": 2,
        "offset": 85,
        "surroundingCode": "      var v7 = myReader.ReadDouble();\n      var v8 = myReader.ReadInt16();\n      var v9 = myReader.ReadInt32();\n      var v10 = myReader.ReadInt64();\n      var v11 = myReader.ReadString();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedVariable"
  },
  "hash": "d67a03109568621099ea1c3f5bb3e81138a5e04cab1d7a2e0da10225c18b22bc"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Local variable 'v0' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/UnsafeMarshallersTest.cs",
      "language": "C#",
      "line": 166,
      "offset": 11,
      "length": 2,
      "code": {
        "startLine": 164,
        "length": 2,
        "offset": 69,
        "surroundingCode": "    {\n      myReader.Reset(myCookie.Data, myCookie.Count);\n      var v0 = myReader.ReadBoolean();\n      var v1 = myReader.ReadBoolean();\n      var v2 = myReader.ReadByte();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedVariable"
  },
  "hash": "d9e07f73b2e90abefaf00c0300032fdb446687382a0cd99efade7f83c7c4cefc"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Local variable 'v2' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/UnsafeMarshallersTest.cs",
      "language": "C#",
      "line": 168,
      "offset": 11,
      "length": 2,
      "code": {
        "startLine": 166,
        "length": 2,
        "offset": 88,
        "surroundingCode": "      var v0 = myReader.ReadBoolean();\n      var v1 = myReader.ReadBoolean();\n      var v2 = myReader.ReadByte();\n      var v3 = myReader.ReadByte();\n      var v4 = myReader.ReadChar();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedVariable"
  },
  "hash": "db19e8c3c137ee5b2c0843ea03c42eaddb4e93b89fd33bd7dd75900618d0df45"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Local variable 'expected' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ProactiveLazyTest.cs",
      "language": "C#",
      "line": 32,
      "offset": 18,
      "length": 8,
      "code": {
        "startLine": 30,
        "length": 8,
        "offset": 61,
        "surroundingCode": "        {\n            var n = 100_000_000L;\n            long expected = n * (n - 1) / 2;\n\n            bool flag = false;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedVariable"
  },
  "hash": "de8148aeedf8b79b018a020c3252ffc3f8e5954cbb348bc745fe54e5b37205d2"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Local variable 'clientEntity' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/RdTaskTest.cs",
      "language": "C#",
      "line": 163,
      "offset": 11,
      "length": 12,
      "code": {
        "startLine": 161,
        "length": 12,
        "offset": 100,
        "surroundingCode": "      \n      var serverEntity = BindToServer(LifetimeDefinition.Lifetime, call1, ourKey);\n      var clientEntity = BindToClient(LifetimeDefinition.Lifetime, call2, ourKey);\n\n      var ld = new LifetimeDefinition();"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UnusedVariable"
  },
  "hash": "e63eb3057d46d7303a0ae7bbeab4b4fb964539103c9cede2b50d3bbe2c838ee3"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Local variable 'v7' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/UnsafeMarshallersTest.cs",
      "language": "C#",
      "line": 173,
      "offset": 11,
      "length": 2,
      "code": {
        "startLine": 171,
        "length": 2,
        "offset": 85,
        "surroundingCode": "      var v5 = myReader.ReadChar();\n      var v6 = myReader.ReadDecimal();\n      var v7 = myReader.ReadDouble();\n      var v8 = myReader.ReadInt16();\n      var v9 = myReader.ReadInt32();"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UnusedVariable"
  },
  "hash": "ef6c501af70b69340c2798a2e305ca4b4fef5b0a333542dc3e5657ce96a07cfe"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Use 'Array.Empty<T>()'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'Array.Empty()'",
  "detailsInfo": "Replace an empty array allocation with a call of the predefined 'Array.Empty()' method",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/UnsafeMarshallersTest.cs",
      "language": "C#",
      "line": 74,
      "offset": 23,
      "length": 13,
      "code": {
        "startLine": 72,
        "length": 13,
        "offset": 89,
        "surroundingCode": "\n      Assert.Null(reader.ReadArray(UnsafeReader.StringDelegate));\n      Assert.AreEqual(new string[0], reader.ReadArray(UnsafeReader.StringDelegate));\n      Assert.AreEqual(new[] {\"a\", \"b\", \"c\"}, reader.ReadArray(UnsafeReader.StringDelegate));\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UseArrayEmptyMethod"
  },
  "hash": "1c35e0b479cd3e6a2ff34645a171169ff139d4ccb24e0e7cfc5bfb6f8dc621f7"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Use 'Array.Empty<T>()'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'Array.Empty()'",
  "detailsInfo": "Replace an empty array allocation with a call of the predefined 'Array.Empty()' method",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 207,
      "offset": 48,
      "length": 13,
      "code": {
        "startLine": 205,
        "length": 13,
        "offset": 91,
        "surroundingCode": "        if (propertyInfo != null)\n        {\n          var value = propertyInfo.GetValue(o, new object[0]);\n          if (value is T)\n            result = (T) value;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UseArrayEmptyMethod"
  },
  "hash": "4d5c1d188d1d9a37f09f655d04366d11a8b00ac604ad1e5f1f05c322317f2033"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Use 'Array.Empty<T>()'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'Array.Empty()'",
  "detailsInfo": "Replace an empty array allocation with a call of the predefined 'Array.Empty()' method",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CopyOnWriteList.cs",
      "language": "C#",
      "line": 63,
      "offset": 29,
      "length": 8,
      "code": {
        "startLine": 61,
        "length": 8,
        "offset": 58,
        "surroundingCode": "    public void Clear()\n    {\n      Modify(0, ((_, __) => new T[0]));\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UseArrayEmptyMethod"
  },
  "hash": "4f453d49a4d7d817a7481bc85c99f2b2ecd81d3e681c5ecd2466e920b1ba8ca3"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Use 'Array.Empty<T>()'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'Array.Empty()'",
  "detailsInfo": "Replace an empty array allocation with a call of the predefined 'Array.Empty()' method",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/EmptyArray.cs",
      "language": "C#",
      "line": 13,
      "offset": 43,
      "length": 8,
      "code": {
        "startLine": 11,
        "length": 8,
        "offset": 82,
        "surroundingCode": "  public static class EmptyArray<T>\n  {\n    public static readonly T[] Instance = new T[0];\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UseArrayEmptyMethod"
  },
  "hash": "5b6084126e10e2fa129ecafc0192766a03e6e12b0cdf8c02ea69e7288b96da6b"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Use 'Array.Empty<T>()'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'Array.Empty()'",
  "detailsInfo": "Replace an empty array allocation with a call of the predefined 'Array.Empty()' method",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/UnsafeMarshallersTest.cs",
      "language": "C#",
      "line": 70,
      "offset": 23,
      "length": 10,
      "code": {
        "startLine": 68,
        "length": 10,
        "offset": 65,
        "surroundingCode": "\n      Assert.Null(reader.ReadIntArray());\n      Assert.AreEqual(new int[0], reader.ReadIntArray());\n      Assert.AreEqual(new[] {1, 2, 3}, reader.ReadIntArray());\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UseArrayEmptyMethod"
  },
  "hash": "7cf64a5c2c96ec0aa0cc497a1d7e3ffaabe00eb245c1b2246439622492f0e36e"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Use 'Array.Empty<T>()'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'Array.Empty()'",
  "detailsInfo": "Replace an empty array allocation with a call of the predefined 'Array.Empty()' method",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/CopyOnWriteList.cs",
      "language": "C#",
      "line": 22,
      "offset": 19,
      "length": 8,
      "code": {
        "startLine": 20,
        "length": 8,
        "offset": 53,
        "surroundingCode": "    public CopyOnWriteList()\n    {\n      myStorage = new T[0];\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UseArrayEmptyMethod"
  },
  "hash": "9ae280b020358199ab14b4d4017aecf8469be5d6ff7c59a849c7ee06f630696b"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Use 'Array.Empty<T>()'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'Array.Empty()'",
  "detailsInfo": "Replace an empty array allocation with a call of the predefined 'Array.Empty()' method",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/ReflectionExtensions.cs",
      "language": "C#",
      "line": 72,
      "offset": 55,
      "length": 13,
      "code": {
        "startLine": 70,
        "length": 13,
        "offset": 69,
        "surroundingCode": "            }\n\n            return property.GetValue(reflectedObject, new object[0]);\n        }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UseArrayEmptyMethod"
  },
  "hash": "9f1e55076641b006fb1de3e5474ecd88499c05e888b74d9c005a29d0d05faf43"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Use 'Array.Empty<T>()'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'Array.Empty()'",
  "detailsInfo": "Replace an empty array allocation with a call of the predefined 'Array.Empty()' method",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/UnsafeMarshallersTest.cs",
      "language": "C#",
      "line": 38,
      "offset": 29,
      "length": 10,
      "code": {
        "startLine": 36,
        "length": 10,
        "offset": 74,
        "surroundingCode": "\n        cookie.Writer.Write((int[]) (null));\n        cookie.Writer.Write(new int[0]);\n        cookie.Writer.Write(new[] {1, 2, 3});\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UseArrayEmptyMethod"
  },
  "hash": "acd3286bdec5e0a4fa049a8c271a050da0f8595e8d25e160360bd47838092ba4"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Use 'Array.Empty<T>()'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'Array.Empty()'",
  "detailsInfo": "Replace an empty array allocation with a call of the predefined 'Array.Empty()' method",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Collections/Viewable/SchedulerWrapper.cs",
      "language": "C#",
      "line": 43,
      "offset": 65,
      "length": 11,
      "code": {
        "startLine": 41,
        "length": 11,
        "offset": 75,
        "surroundingCode": "    }\n    \n    protected override IEnumerable<Task> GetScheduledTasks() => new Task[0];\n    \n    private class SyncContext : SynchronizationContext"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UseArrayEmptyMethod"
  },
  "hash": "b03220bfba62c4e98be280197eda57902a599a3bd755b92781723465877571b5"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Use 'Array.Empty<T>()'",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'Array.Empty()'",
  "detailsInfo": "Replace an empty array allocation with a call of the predefined 'Array.Empty()' method",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework.Reflection/ProxyGenerator.cs",
      "language": "C#",
      "line": 183,
      "offset": 18,
      "length": 16,
      "code": {
        "startLine": 181,
        "length": 16,
        "offset": 64,
        "surroundingCode": "      if (requestType == typeof(Unit))\n      {\n        fields = new FieldInfo[0];\n      }\n      else"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework.Reflection",
    "inspectionName": "UseArrayEmptyMethod"
  },
  "hash": "c0d92be00e91eba80b6c9e248e842b36b582cc25efe897ad044a5ec8e6b69401"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Use 'Array.Empty<T>()'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'Array.Empty()'",
  "detailsInfo": "Replace an empty array allocation with a call of the predefined 'Array.Empty()' method",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Serialization/UnsafeMarshallersTest.cs",
      "language": "C#",
      "line": 42,
      "offset": 58,
      "length": 13,
      "code": {
        "startLine": 40,
        "length": 13,
        "offset": 133,
        "surroundingCode": "\n        cookie.Writer.Write(UnsafeWriter.StringDelegate, (string[]) null);\n        cookie.Writer.Write(UnsafeWriter.StringDelegate, new string[0]);\n        cookie.Writer.Write(UnsafeWriter.StringDelegate, new[] {\"a\", \"b\", \"c\"});\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UseArrayEmptyMethod"
  },
  "hash": "d75e5a65b156dd726dfe4fa8e99686a061230f2087974f55e1aba54f2ff3c5b3"
},{
  "tool": "Code Inspection",
  "category": "Common Practices and Code Improvements",
  "type": "Use 'Array.Empty<T>()'",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'Array.Empty()'",
  "detailsInfo": "Replace an empty array allocation with a call of the predefined 'Array.Empty()' method",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 72,
      "offset": 28,
      "length": 13,
      "code": {
        "startLine": 70,
        "length": 13,
        "offset": 36,
        "surroundingCode": "      }\n\n      method?.Invoke(null, new object[0]);\n    }\n    "
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "UseArrayEmptyMethod"
  },
  "hash": "e01a4a890e78866369bc72ca84693fb9cfd8661027a0271d709ed5712d21e7a0"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use discard assignment",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use discard assignment",
  "detailsInfo": "Replace intentionally ignored variable declaration 'var _ = ...' with discard assignment '_ = ...'.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Diagnostics/InterpolatedStringHandlerTests.cs",
      "language": "C#",
      "line": 235,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 233,
        "length": 5,
        "offset": 41,
        "surroundingCode": "      var nullValue = (int?)null;\n\n      var _ = notNullValue.NotNull($\"{ThrowTestException()}\");\n      Assert.Throws<TestException>(() =>\n      {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UseDiscardAssignment"
  },
  "hash": "646dffaa355469545c1b10b0e05dcb385651148429dbdf1f61c7e970d3c28abb"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use discard assignment",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use discard assignment",
  "detailsInfo": "Replace intentionally ignored variable declaration 'var _ = ...' with discard assignment '_ = ...'.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Diagnostics/InterpolatedStringHandlerTests.cs",
      "language": "C#",
      "line": 224,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 222,
        "length": 5,
        "offset": 43,
        "surroundingCode": "      var nullValue = (object)null;\n\n      var _ = notNullValue.NotNull($\"{ThrowTestException()}\");\n      Assert.Throws<TestException>(() =>\n      {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UseDiscardAssignment"
  },
  "hash": "80c7e477ed6f326b6146b050f5d92ba81dd371b1a926e76eebed74578d356b57"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use discard assignment",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use discard assignment",
  "detailsInfo": "Replace intentionally ignored variable declaration 'var _ = ...' with discard assignment '_ = ...'.",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/Viewable/WriteOncePropertyTest.cs",
      "language": "C#",
      "line": 21,
      "offset": 56,
      "length": 5,
      "code": {
        "startLine": 19,
        "length": 5,
        "offset": 103,
        "surroundingCode": "      var prop = new WriteOnceProperty<int>();\n\n      Assert.Throws<InvalidOperationException>(() => { var _ = prop.Value; });\n\n      var v1 = 0;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UseDiscardAssignment"
  },
  "hash": "abd0812d9cd8460f1469a2e6ad9e0a61d0d6e70b31188cb4917d00f0546c5e4d"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use 'nameof' expression to reference type name",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'nameof' expression to reference type name",
  "detailsInfo": "Replace 'typeof(T).Name' expression with constant 'nameof' expression",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorScalarInterfaceSerializerTest.cs",
      "language": "C#",
      "line": 36,
      "offset": 25,
      "length": 20,
      "code": {
        "startLine": 34,
        "length": 20,
        "offset": 152,
        "surroundingCode": "        var instanceSerializer = CFacade.ScalarSerializers.GetInstanceSerializer(typeof(IReadOnlyDictionary<string, string>));\n\n        Assert.AreEqual(typeof(MyImpl2).Name, proxy.GetTypeName2(new MyImpl1()));\n        proxy.GetTypeName3(new IMyInterface[]{new MyImpl1(), new MyImpl2()});\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UseNameOfInsteadOfTypeOf"
  },
  "hash": "f3ac7605b4e80b55491a9256a939a5b8609aec67fe581dfe01af9176c9ea6fab"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use 'nameof' expression to reference name",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'nameof' expression to reference parameter 'versionBeforeTypingSession' name",
  "detailsInfo": "Replace string literal with statically typed 'nameof' expression [Learn more...](https://www.jetbrains.com/help/rider/UseNameofExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 36,
      "offset": 79,
      "length": 28,
      "code": {
        "startLine": 34,
        "length": 28,
        "offset": 155,
        "surroundingCode": "    {\n      if (changes == null) throw new ArgumentNullException(\"changes\");\n      if (versionBeforeTypingSession == null) throw new ArgumentNullException(\"versionBeforeTypingSession\");\n      if (assertedMasterText == null) throw new ArgumentNullException(\"assertedMasterText\");\n      if (assertedSlaveText == null) throw new ArgumentNullException(\"assertedSlaveText\");"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UseNameofExpression"
  },
  "hash": "06e0e32e1e54695540b9643e804c06d4ea3115c2a46786df3084ccebf11746ab"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use 'nameof' expression to reference name",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'nameof' expression to reference parameter 'value' name",
  "detailsInfo": "Replace string literal with statically typed 'nameof' expression [Learn more...](https://www.jetbrains.com/help/rider/UseNameofExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 624,
      "offset": 41,
      "length": 7,
      "code": {
        "startLine": 622,
        "length": 7,
        "offset": 70,
        "surroundingCode": "    {\n      if(value == null)\n        throw new ArgumentNullException(\"value\");\n      int size = value.Length;\n      Prepare(size);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UseNameofExpression"
  },
  "hash": "0bf2f31c3ec1a72d2f964813c22f65cee99109e14d6b7f38b6fd05d54baa9ce5"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use 'nameof' expression to reference name",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'nameof' expression to reference parameter 'text' name",
  "detailsInfo": "Replace string literal with statically typed 'nameof' expression [Learn more...](https://www.jetbrains.com/help/rider/UseNameofExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 599,
      "offset": 57,
      "length": 6,
      "code": {
        "startLine": 597,
        "length": 6,
        "offset": 68,
        "surroundingCode": "    )\n    {\n      if (text == null) throw new ArgumentNullException(\"text\");\n      \n      Text = text;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UseNameofExpression"
  },
  "hash": "10303bd9d96f658be6865bd7f73e14cbfd2f6131bdc5daf2b5da70129c538b86"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use 'nameof' expression to reference name",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'nameof' expression to reference parameter 'issues' name",
  "detailsInfo": "Replace string literal with statically typed 'nameof' expression [Learn more...](https://www.jetbrains.com/help/rider/UseNameofExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 383,
      "offset": 59,
      "length": 8,
      "code": {
        "startLine": 381,
        "length": 8,
        "offset": 143,
        "surroundingCode": "    {\n      if (searchLabel == null) throw new ArgumentNullException(\"searchLabel\");\n      if (issues == null) throw new ArgumentNullException(\"issues\");\n      \n      SearchLabel = searchLabel;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UseNameofExpression"
  },
  "hash": "17a1767cfc59c30c5f7f94e37fd788cb3c534d7396913d266ab4d46f307b1c16"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use 'nameof' expression to reference name",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'nameof' expression to reference parameter 'text' name",
  "detailsInfo": "Replace string literal with statically typed 'nameof' expression [Learn more...](https://www.jetbrains.com/help/rider/UseNameofExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 524,
      "offset": 57,
      "length": 6,
      "code": {
        "startLine": 522,
        "length": 6,
        "offset": 68,
        "surroundingCode": "    )\n    {\n      if (text == null) throw new ArgumentNullException(\"text\");\n      \n      Text = text;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UseNameofExpression"
  },
  "hash": "2ac2c9f378e53886035d79a163152785f4fcd84fec3c6b96e5eb8d77dd18c696"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use 'nameof' expression to reference name",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'nameof' expression to reference parameter 'issues' name",
  "detailsInfo": "Replace string literal with statically typed 'nameof' expression [Learn more...](https://www.jetbrains.com/help/rider/UseNameofExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 456,
      "offset": 59,
      "length": 8,
      "code": {
        "startLine": 454,
        "length": 8,
        "offset": 143,
        "surroundingCode": "    {\n      if (searchLabel == null) throw new ArgumentNullException(\"searchLabel\");\n      if (issues == null) throw new ArgumentNullException(\"issues\");\n      \n      SearchLabel = searchLabel;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UseNameofExpression"
  },
  "hash": "2fa0b22d227181907f8f57c3186a3c52e3e7afe7a52169b7406f3d29a4e60f03"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use 'nameof' expression to reference name",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'nameof' expression to reference parameter 'root' name",
  "detailsInfo": "Replace string literal with statically typed 'nameof' expression [Learn more...](https://www.jetbrains.com/help/rider/UseNameofExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 33,
      "offset": 57,
      "length": 6,
      "code": {
        "startLine": 31,
        "length": 6,
        "offset": 68,
        "surroundingCode": "    )\n    {\n      if (root == null) throw new ArgumentNullException(\"root\");\n      \n      _Root = root;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UseNameofExpression"
  },
  "hash": "3bdf0d4592c6f84037d0aa959031b19e8fe9bd50bfce2e2819621a051036421b"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use 'nameof' expression to reference name",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'nameof' expression to reference parameter 'internedLocally' name",
  "detailsInfo": "Replace string literal with statically typed 'nameof' expression [Learn more...](https://www.jetbrains.com/help/rider/UseNameofExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 108,
      "offset": 68,
      "length": 17,
      "code": {
        "startLine": 106,
        "length": 17,
        "offset": 79,
        "surroundingCode": "    )\n    {\n      if (internedLocally == null) throw new ArgumentNullException(\"internedLocally\");\n      if (internedExternally == null) throw new ArgumentNullException(\"internedExternally\");\n      if (internedInProtocol == null) throw new ArgumentNullException(\"internedInProtocol\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UseNameofExpression"
  },
  "hash": "4db7e81366723765298474b1219fa9ab94d63aff9cccf8185954ed1aee305414"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use 'nameof' expression to reference name",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'nameof' expression to reference parameter 'searchLabel' name",
  "detailsInfo": "Replace string literal with statically typed 'nameof' expression [Learn more...](https://www.jetbrains.com/help/rider/UseNameofExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 455,
      "offset": 64,
      "length": 13,
      "code": {
        "startLine": 453,
        "length": 13,
        "offset": 75,
        "surroundingCode": "    )\n    {\n      if (searchLabel == null) throw new ArgumentNullException(\"searchLabel\");\n      if (issues == null) throw new ArgumentNullException(\"issues\");\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UseNameofExpression"
  },
  "hash": "5428dc49b31f2b0c05e1eef8ab4e9694a5e0752852a19aa2e64c179f735ee305"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use 'nameof' expression to reference name",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'nameof' expression to reference parameter 'value' name",
  "detailsInfo": "Replace string literal with statically typed 'nameof' expression [Learn more...](https://www.jetbrains.com/help/rider/UseNameofExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 296,
      "offset": 58,
      "length": 7,
      "code": {
        "startLine": 294,
        "length": 7,
        "offset": 69,
        "surroundingCode": "    )\n    {\n      if (value == null) throw new ArgumentNullException(\"value\");\n      \n      Value = value;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UseNameofExpression"
  },
  "hash": "565f39d362086c2c70438ebbee66b096d6ddf199b782994d0112c7cb971ef4af"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use 'nameof' expression to reference name",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'nameof' expression to reference parameter 'internedInProtocol' name",
  "detailsInfo": "Replace string literal with statically typed 'nameof' expression [Learn more...](https://www.jetbrains.com/help/rider/UseNameofExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 110,
      "offset": 71,
      "length": 20,
      "code": {
        "startLine": 108,
        "length": 20,
        "offset": 250,
        "surroundingCode": "      if (internedLocally == null) throw new ArgumentNullException(\"internedLocally\");\n      if (internedExternally == null) throw new ArgumentNullException(\"internedExternally\");\n      if (internedInProtocol == null) throw new ArgumentNullException(\"internedInProtocol\");\n      \n      _InternedLocally = internedLocally;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UseNameofExpression"
  },
  "hash": "587c0e6b265decf9187e14dbe66d64ba011f70d225d28f426e7377f35adc2e47"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use 'nameof' expression to reference name",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'nameof' expression to reference parameter 'value' name",
  "detailsInfo": "Replace string literal with statically typed 'nameof' expression [Learn more...](https://www.jetbrains.com/help/rider/UseNameofExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 214,
      "offset": 58,
      "length": 7,
      "code": {
        "startLine": 212,
        "length": 7,
        "offset": 69,
        "surroundingCode": "    )\n    {\n      if (value == null) throw new ArgumentNullException(\"value\");\n      \n      Value = value;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UseNameofExpression"
  },
  "hash": "5907b82b35ea8dcb34e0a6a402eb460984253800875ed035ba5f36db5c3e0e98"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use 'nameof' expression to reference name",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'nameof' expression to reference parameter 'searchLabel' name",
  "detailsInfo": "Replace string literal with statically typed 'nameof' expression [Learn more...](https://www.jetbrains.com/help/rider/UseNameofExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 141,
      "offset": 64,
      "length": 13,
      "code": {
        "startLine": 139,
        "length": 13,
        "offset": 75,
        "surroundingCode": "    )\n    {\n      if (searchLabel == null) throw new ArgumentNullException(\"searchLabel\");\n      if (signaller == null) throw new ArgumentNullException(\"signaller\");\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UseNameofExpression"
  },
  "hash": "5d479148a0b9f61a440f15694f740aaf5545f144ac9ce17191ffc8e16c770dfb"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use 'nameof' expression to reference name",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'nameof' expression to reference parameter 'assertedMasterText' name",
  "detailsInfo": "Replace string literal with statically typed 'nameof' expression [Learn more...](https://www.jetbrains.com/help/rider/UseNameofExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 37,
      "offset": 71,
      "length": 20,
      "code": {
        "startLine": 35,
        "length": 20,
        "offset": 250,
        "surroundingCode": "      if (changes == null) throw new ArgumentNullException(\"changes\");\n      if (versionBeforeTypingSession == null) throw new ArgumentNullException(\"versionBeforeTypingSession\");\n      if (assertedMasterText == null) throw new ArgumentNullException(\"assertedMasterText\");\n      if (assertedSlaveText == null) throw new ArgumentNullException(\"assertedSlaveText\");\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UseNameofExpression"
  },
  "hash": "617ad338485e31d8834cab2a158915e7d1977c0dbdf8360f5855c2f7b8608e0f"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use 'nameof' expression to reference name",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'nameof' expression to reference parameter 'changes' name",
  "detailsInfo": "Replace string literal with statically typed 'nameof' expression [Learn more...](https://www.jetbrains.com/help/rider/UseNameofExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 35,
      "offset": 60,
      "length": 9,
      "code": {
        "startLine": 33,
        "length": 9,
        "offset": 71,
        "surroundingCode": "    )\n    {\n      if (changes == null) throw new ArgumentNullException(\"changes\");\n      if (versionBeforeTypingSession == null) throw new ArgumentNullException(\"versionBeforeTypingSession\");\n      if (assertedMasterText == null) throw new ArgumentNullException(\"assertedMasterText\");"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UseNameofExpression"
  },
  "hash": "a75c32548a6b3825bf75de96a85edd2d15f29004820e974033fd87bd4e67dd34"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use 'nameof' expression to reference name",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'nameof' expression to reference parameter 'assertedSlaveText' name",
  "detailsInfo": "Replace string literal with statically typed 'nameof' expression [Learn more...](https://www.jetbrains.com/help/rider/UseNameofExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdTextBufferState.cs",
      "language": "C#",
      "line": 38,
      "offset": 70,
      "length": 19,
      "code": {
        "startLine": 36,
        "length": 19,
        "offset": 271,
        "surroundingCode": "      if (versionBeforeTypingSession == null) throw new ArgumentNullException(\"versionBeforeTypingSession\");\n      if (assertedMasterText == null) throw new ArgumentNullException(\"assertedMasterText\");\n      if (assertedSlaveText == null) throw new ArgumentNullException(\"assertedSlaveText\");\n\n      _Changes = changes;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UseNameofExpression"
  },
  "hash": "ac4d6240f4c617dd4cbbcdf3d1467ba63eb00cd82430b1fcab7e91e68e6fe316"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use 'nameof' expression to reference name",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'nameof' expression to reference parameter 'value' name",
  "detailsInfo": "Replace string literal with statically typed 'nameof' expression [Learn more...](https://www.jetbrains.com/help/rider/UseNameofExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 635,
      "offset": 41,
      "length": 7,
      "code": {
        "startLine": 633,
        "length": 7,
        "offset": 70,
        "surroundingCode": "    {\n      if(value == null)\n        throw new ArgumentNullException(\"value\");\n      Prepare(length);\n      Marshal.Copy(value, start, (IntPtr)myPtr, length); // Unlike MemoryUtil::CopyMemory, this is a CLR intrinsic call"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UseNameofExpression"
  },
  "hash": "bd5b08619dc5b9d2c9c15db0525c2786126e9773a06779176945bee029b7c3d0"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use 'nameof' expression to reference name",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'nameof' expression to reference parameter 'text' name",
  "detailsInfo": "Replace string literal with statically typed 'nameof' expression [Learn more...](https://www.jetbrains.com/help/rider/UseNameofExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdAssertion.cs",
      "language": "C#",
      "line": 24,
      "offset": 57,
      "length": 6,
      "code": {
        "startLine": 22,
        "length": 6,
        "offset": 68,
        "surroundingCode": "    )\n    {\n      if (text == null) throw new ArgumentNullException(\"text\");\n      \n      MasterVersion = masterVersion;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UseNameofExpression"
  },
  "hash": "be223de94adcabb445dab5856aca7bcae2159f614db950b5c6f5d9e5201e56ed"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use 'nameof' expression to reference name",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'nameof' expression to reference parameter 'signaller' name",
  "detailsInfo": "Replace string literal with statically typed 'nameof' expression [Learn more...](https://www.jetbrains.com/help/rider/UseNameofExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 142,
      "offset": 62,
      "length": 11,
      "code": {
        "startLine": 140,
        "length": 11,
        "offset": 146,
        "surroundingCode": "    {\n      if (searchLabel == null) throw new ArgumentNullException(\"searchLabel\");\n      if (signaller == null) throw new ArgumentNullException(\"signaller\");\n      \n      SearchLabel = searchLabel;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UseNameofExpression"
  },
  "hash": "ea5e1621f214f349a0be89d5ceaccbc46401bd4670bb3c0f15e6a7b82736f3c5"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use 'nameof' expression to reference name",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'nameof' expression to reference parameter 'internedExternally' name",
  "detailsInfo": "Replace string literal with statically typed 'nameof' expression [Learn more...](https://www.jetbrains.com/help/rider/UseNameofExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningExtTestModel.cs",
      "language": "C#",
      "line": 109,
      "offset": 71,
      "length": 20,
      "code": {
        "startLine": 107,
        "length": 20,
        "offset": 163,
        "surroundingCode": "    {\n      if (internedLocally == null) throw new ArgumentNullException(\"internedLocally\");\n      if (internedExternally == null) throw new ArgumentNullException(\"internedExternally\");\n      if (internedInProtocol == null) throw new ArgumentNullException(\"internedInProtocol\");\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UseNameofExpression"
  },
  "hash": "eb69e33b89872988006ba3e3b529565bcdd3de956ceba6c5537257ec8e205a98"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use 'nameof' expression to reference name",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'nameof' expression to reference parameter 'searchLabel' name",
  "detailsInfo": "Replace string literal with statically typed 'nameof' expression [Learn more...](https://www.jetbrains.com/help/rider/UseNameofExpression.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 382,
      "offset": 64,
      "length": 13,
      "code": {
        "startLine": 380,
        "length": 13,
        "offset": 75,
        "surroundingCode": "    )\n    {\n      if (searchLabel == null) throw new ArgumentNullException(\"searchLabel\");\n      if (issues == null) throw new ArgumentNullException(\"issues\");\n      "
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UseNameofExpression"
  },
  "hash": "f37153a5dda705ba6dac50d0931bcc470d6155e458fcc0a36b6ec518568e1ca8"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert negated 'is' expression into 'is' expression with negated pattern",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use negated pattern",
  "detailsInfo": "Replace unary negation operator '!' before 'is' expression with C# 9.0 negated pattern",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/SerializersTest.cs",
      "language": "C#",
      "line": 44,
      "offset": 22,
      "length": 2,
      "code": {
        "startLine": 42,
        "length": 2,
        "offset": 133,
        "surroundingCode": "      if (a.LocalName.ToString() != b.LocalName.ToString() || a.Separator != b.Separator)\n        return false;\n      if (!(a.Parent is RName aParent) || !(b.Parent is RName bParent))\n        return a == b;\n      return RNameEquals(aParent, bParent);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UseNegatedPatternInIsExpression"
  },
  "hash": "1c29bc6d42c96cd397eea5dc8002a196c40f1b38e60eb9add6040102b8be8a49"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert negated 'is' expression into 'is' expression with negated pattern",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use negated pattern",
  "detailsInfo": "Replace unary negation operator '!' before 'is' expression with C# 9.0 negated pattern",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/RName.cs",
      "language": "C#",
      "line": 56,
      "offset": 20,
      "length": 2,
      "code": {
        "startLine": 54,
        "length": 2,
        "offset": 61,
        "surroundingCode": "    public RName DropNonEmptyRoot()\n    {\n      if (!(Parent is RName parent) || parent == Empty)\n        return Empty;\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UseNegatedPatternInIsExpression"
  },
  "hash": "43cd17bb773e9e17c7db02dacabbc9c8c2c9c508c1f63a4dd2783482291e7dc0"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert negated 'is' expression into 'is' expression with negated pattern",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use negated pattern",
  "detailsInfo": "Replace unary negation operator '!' before 'is' expression with C# 9.0 negated pattern",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Diagnostics/RName.cs",
      "language": "C#",
      "line": 48,
      "offset": 20,
      "length": 2,
      "code": {
        "startLine": 46,
        "length": 2,
        "offset": 60,
        "surroundingCode": "    public RName GetNonEmptyRoot()\n    {\n      if (!(Parent is RName parent) || Parent == Empty)\n        return this;\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UseNegatedPatternInIsExpression"
  },
  "hash": "52235374b7575e795bb885c2fd1b37876867bc4e282cd5fb6f483787638c69ef"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert negated 'is' expression into 'is' expression with negated pattern",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use negated pattern",
  "detailsInfo": "Replace unary negation operator '!' before 'is' expression with C# 9.0 negated pattern",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/SerializersTest.cs",
      "language": "C#",
      "line": 44,
      "offset": 54,
      "length": 2,
      "code": {
        "startLine": 42,
        "length": 2,
        "offset": 165,
        "surroundingCode": "      if (a.LocalName.ToString() != b.LocalName.ToString() || a.Separator != b.Separator)\n        return false;\n      if (!(a.Parent is RName aParent) || !(b.Parent is RName bParent))\n        return a == b;\n      return RNameEquals(aParent, bParent);"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UseNegatedPatternInIsExpression"
  },
  "hash": "8e0854bb94f756c5098790c6be1f733e2423a0b357beece701f4279767ac15e0"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert negated 'is' expression into 'is' expression with negated pattern",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use negated pattern",
  "detailsInfo": "Replace unary negation operator '!' before 'is' expression with C# 9.0 negated pattern",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdProperty.cs",
      "language": "C#",
      "line": 212,
      "offset": 25,
      "length": 2,
      "code": {
        "startLine": 210,
        "length": 2,
        "offset": 46,
        "surroundingCode": "        return null;\n\n      if (!(maybe.Value is RdBindableBase value))\n        return null;\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UseNegatedPatternInIsExpression"
  },
  "hash": "9d39e47f8f14237055ff8725528bb18dd6a591f559923e11001aa00a3ca37bbb"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert negated 'is' expression into 'is' expression with negated pattern",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use negated pattern",
  "detailsInfo": "Replace unary negation operator '!' before 'is' expression with C# 9.0 negated pattern",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdMap.cs",
      "language": "C#",
      "line": 378,
      "offset": 21,
      "length": 2,
      "code": {
        "startLine": 376,
        "length": 2,
        "offset": 41,
        "surroundingCode": "          continue;\n\n        if (!(value is RdBindableBase bindableValue))\n          break;\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UseNegatedPatternInIsExpression"
  },
  "hash": "a5498e2b4611ad75a15ab46e4bfcd71d7ed194ebba54b260913172056673b1f4"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert negated 'is' expression into 'is' expression with negated pattern",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use negated pattern",
  "detailsInfo": "Replace unary negation operator '!' before 'is' expression with C# 9.0 negated pattern",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/SocketWireTest.cs",
      "language": "C#",
      "line": 484,
      "offset": 27,
      "length": 2,
      "code": {
        "startLine": 482,
        "length": 2,
        "offset": 88,
        "surroundingCode": "    private static void CloseSocket(IProtocol protocol)\n    {\n      if (!(protocol.Wire is SocketWire.Base socketWire))\n      {\n        Assert.Fail();"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UseNegatedPatternInIsExpression"
  },
  "hash": "ab0ed68772a032dd56fae17feeb6e800569ffae95c31ea7b68beb2893281718e"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert negated 'is' expression into 'is' expression with negated pattern",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use negated pattern",
  "detailsInfo": "Replace unary negation operator '!' before 'is' expression with C# 9.0 negated pattern",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/RdList.cs",
      "language": "C#",
      "line": 326,
      "offset": 46,
      "length": 2,
      "code": {
        "startLine": 324,
        "length": 2,
        "offset": 67,
        "surroundingCode": "        return null;\n\n      if (!(myList.ElementAtOrDefault(index) is RdBindableBase element))\n        return null;\n"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UseNegatedPatternInIsExpression"
  },
  "hash": "ac1b6ad8ba7138de160f3ded526411b4140494863c263103c797adc3a93f182f"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Convert 'as' expression type check and the following null check into negated pattern matching",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use pattern matching",
  "detailsInfo": "Replace variable for 'as' expression type check and the following check for it being null with negated C# 7.0 pattern matching expression",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/WireEx.cs",
      "language": "C#",
      "line": 11,
      "offset": 35,
      "length": 20,
      "code": {
        "startLine": 9,
        "length": 20,
        "offset": 93,
        "surroundingCode": "    public static int GetServerPort(this IWire wire)\n    {\n      var serverSocketWire = wire as SocketWire.Server;\n      if (serverSocketWire == null)\n        throw new ArgumentException(\"You must use SocketWire.Server to get server port\");"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UseNegatedPatternMatching"
  },
  "hash": "77780b94540f1125fc0a47448242e12630d491ec50770d9892bbe602c351587e"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Replace if statement with null-propagating code",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use null propagation",
  "detailsInfo": "Replaces if statement with null-propagating code using ?. operator [Learn more...](https://www.jetbrains.com/help/rider/UseNullPropagation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 85,
      "offset": 22,
      "length": 7,
      "code": {
        "startLine": 83,
        "length": 7,
        "offset": 95,
        "surroundingCode": "      {\n        // default struct constructor was used for unknown reason\n        if (myWriter == null)\n          return;\n"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UseNullPropagation"
  },
  "hash": "40507fba504738e61b369f87807e35b6c14b7c730edfeb1c2870cf3fa5cf9537"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Replace if statement with null-propagating code",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use null propagation",
  "detailsInfo": "Replaces if statement with null-propagating code using ?. operator [Learn more...](https://www.jetbrains.com/help/rider/UseNullPropagation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Util/ReflectionUtil.cs",
      "language": "C#",
      "line": 205,
      "offset": 26,
      "length": 7,
      "code": {
        "startLine": 203,
        "length": 7,
        "offset": 36,
        "surroundingCode": "        }\n\n        if (propertyInfo != null)\n        {\n          var value = propertyInfo.GetValue(o, new object[0]);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UseNullPropagation"
  },
  "hash": "e2c6a403c4c12f191bd92acea4fd3cfd284ab8144219c5619040ea46467a6607"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use object or collection initializer when possible",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use object initializer",
  "detailsInfo": "Suggest to replace object sequential assignments to newly created object fields by object initializer [Learn more...](https://www.jetbrains.com/help/rider/UseObjectOrCollectionInitializer.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Protocol.cs",
      "language": "C#",
      "line": 75,
      "offset": 18,
      "length": 3,
      "code": {
        "startLine": 73,
        "length": 3,
        "offset": 98,
        "surroundingCode": "    private InternRoot<object> CreateProtocolInternRoot(Lifetime lifetime)\n    {\n      var root = new InternRoot<object>();\n      root.RdId = RdId.Nil.Mix(ProtocolInternRootRdId);\n      "
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UseObjectOrCollectionInitializer"
  },
  "hash": "5b742b884f6a1184872054d8ea491bc337c4ba559f675d510266dbf6abbf4a9c"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use object or collection initializer when possible",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use object initializer",
  "detailsInfo": "Suggest to replace object sequential assignments to newly created object fields by object initializer [Learn more...](https://www.jetbrains.com/help/rider/UseObjectOrCollectionInitializer.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Tasks/RdTask.cs",
      "language": "C#",
      "line": 28,
      "offset": 17,
      "length": 3,
      "code": {
        "startLine": 26,
        "length": 3,
        "offset": 86,
        "surroundingCode": "    private static RdTask<T> FromResult(RdTaskResult<T> result)\n    {\n      var res = new RdTask<T>();\n      res.ResultInternal.Value = result;\n      return res;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UseObjectOrCollectionInitializer"
  },
  "hash": "6537ce816360e77ee92b18dd0918ff5eb828655db550ceb05969de8259b02561"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use object or collection initializer when possible",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use object initializer",
  "detailsInfo": "Suggest to replace object sequential assignments to newly created object fields by object initializer [Learn more...](https://www.jetbrains.com/help/rider/UseObjectOrCollectionInitializer.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 190,
      "offset": 16,
      "length": 3,
      "code": {
        "startLine": 188,
        "length": 3,
        "offset": 63,
        "surroundingCode": "      List<long> log = new List<long>();\n      \n      buffer = new ByteBufferAsyncProcessor(\"TestAsyncProcessor\", 8,\n        delegate(byte[] data, int offset, int len, ref long seqN)\n        {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UseObjectOrCollectionInitializer"
  },
  "hash": "9eacee364c5f920f711698f53ea94ae6e8ff742bc98b9c4dcb5177d71b78c7db"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use object or collection initializer when possible",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use collection initializer",
  "detailsInfo": "Suggest to replace object sequential assignments to newly created object fields by object initializer [Learn more...](https://www.jetbrains.com/help/rider/UseObjectOrCollectionInitializer.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/PriorityQueueTest.cs",
      "language": "C#",
      "line": 24,
      "offset": 15,
      "length": 3,
      "code": {
        "startLine": 22,
        "length": 3,
        "offset": 55,
        "surroundingCode": "    public void TestEnumerator02()\n    {\n      var q = new JetPriorityQueue<int>();\n      q.Add(1);\n      q.Add(2);"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UseObjectOrCollectionInitializer"
  },
  "hash": "b276fa7d718caed4d3e3bffa7b755d9a3cb8ee338dd0265d20ee24e11e571a3f"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use object or collection initializer when possible",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use object initializer",
  "detailsInfo": "Suggest to replace object sequential assignments to newly created object fields by object initializer [Learn more...](https://www.jetbrains.com/help/rider/UseObjectOrCollectionInitializer.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Threading/ByteBufferAsyncProcessorTest.cs",
      "language": "C#",
      "line": 122,
      "offset": 16,
      "length": 3,
      "code": {
        "startLine": 120,
        "length": 3,
        "offset": 82,
        "surroundingCode": "      long prev = 0;\n      ByteBufferAsyncProcessor buffer = null;\n      buffer = new ByteBufferAsyncProcessor(\"TestAsyncProcessor\", 8,\n        delegate(byte[] data, int offset, int len, ref long seqN)\n        {"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UseObjectOrCollectionInitializer"
  },
  "hash": "ce47ee3e858a379db84dd03c38dfbb657e339e0699a2311cfcf0e8e1e5bdb67d"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use object or collection initializer when possible",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use object initializer",
  "detailsInfo": "Suggest to replace object sequential assignments to newly created object fields by object initializer [Learn more...](https://www.jetbrains.com/help/rider/UseObjectOrCollectionInitializer.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/TestGeneratedModelsInReflection.cs",
      "language": "C#",
      "line": 27,
      "offset": 23,
      "length": 3,
      "code": {
        "startLine": 25,
        "length": 3,
        "offset": 71,
        "surroundingCode": "      WithExts<ReflectionRoot>((c, s) =>\n      {\n        c.Val.Value = new OpenClass(\"testField\");\n        c.Val.Value.String.Value = \"Test live models\"; // live propoperty\n"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UseObjectOrCollectionInitializer"
  },
  "hash": "e73a7740c7ba8de56a4071c2295523ff3ff6a760b6fe15403731abb01278902c"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use object or collection initializer when possible",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use object initializer",
  "detailsInfo": "Suggest to replace object sequential assignments to newly created object fields by object initializer [Learn more...](https://www.jetbrains.com/help/rider/UseObjectOrCollectionInitializer.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Reflection/ProxyGeneratorCustomSignalTest.cs",
      "language": "C#",
      "line": 54,
      "offset": 22,
      "length": 3,
      "code": {
        "startLine": 52,
        "length": 3,
        "offset": 48,
        "surroundingCode": "      {\n        myId = id;\n        myRdSignal = new RdSignal<T>(read, write);\n        myRdSignal.ValueCanBeNull = true;\n      }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UseObjectOrCollectionInitializer"
  },
  "hash": "f8106ff56ffb85a379f379057d5fb720d814480e67c5d49a5b50d204e508a9cf"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use string interpolation expression",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use string interpolation expression",
  "detailsInfo": "Replace string construction by 'String.Format()' method invocation with string interpolation expression [Learn more...](https://www.jetbrains.com/help/rider/UseStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 322,
      "offset": 11,
      "length": 13,
      "code": {
        "startLine": 320,
        "length": 13,
        "offset": 55,
        "surroundingCode": "      {\n        throw new ArgumentException(\n          string.Format(\"Can't allocate more memory for chunk: {0} bytes, currentlyAllocated={1}, count={2}\", reallocSize,\n            myCurrentAllocSize, myCount), e);\n      }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UseStringInterpolation"
  },
  "hash": "319c158d5fc2506c15aaae0c80ac1b1ed527c1db117a403e68f6fe5a640a6077"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use string interpolation expression",
  "detailsInfo": "Replace string construction by 'String.Format()' method invocation with string interpolation expression [Learn more...](https://www.jetbrains.com/help/rider/UseStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/PriorityQueueTest.cs",
      "language": "C#",
      "line": 154,
      "offset": 49,
      "length": 13,
      "code": {
        "startLine": 152,
        "length": 13,
        "offset": 91,
        "surroundingCode": "        {\n          res = queue.Extract();\n          Assert.LessOrEqual(lastDateTime, res, string.Format(\"Count = {0}, Seed = {1}\", queue.Count, seed));\n\n          lastDateTime = res;"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UseStringInterpolation"
  },
  "hash": "35e5de03d317fa08a19ccc79c64a71805cbcef298aa46bfbd783595be8365846"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use string interpolation expression",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use string interpolation expression",
  "detailsInfo": "Replace string construction by 'String.Format()' method invocation with string interpolation expression [Learn more...](https://www.jetbrains.com/help/rider/UseStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 278,
      "offset": 44,
      "length": 13,
      "code": {
        "startLine": 276,
        "length": 13,
        "offset": 206,
        "surroundingCode": "          {\n            var realType = myTypeMapping.SingleOrDefault(c => EqualityComparer<RdId>.Default.Equals(c.Value, typeId)); //ok because it's rarely needed\n            throw new KeyNotFoundException(string.Format(\"There is no readers found. Requested type '{0}'. Real type {1}\", typeof(T).FullName, realType));\n          }\n        }"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UseStringInterpolation"
  },
  "hash": "40b9d541dd11b48525946db12bdb753f0ca78a9291fe8b53a7c8a6e3938cf1b8"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use string interpolation expression",
  "detailsInfo": "Replace string construction by 'String.Format()' method invocation with string interpolation expression [Learn more...](https://www.jetbrains.com/help/rider/UseStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 492,
      "offset": 97,
      "length": 13,
      "code": {
        "startLine": 490,
        "length": 13,
        "offset": 135,
        "surroundingCode": "    {\n      if (value == null) return;\n      if (offset < 0 || count < 0 || offset + count > value.Length) throw new ArgumentException(string.Format(\"string.length={0}, offset={1}, count={2}\", value.Length, offset, count));\n\n      WriteStringContentInternal(this, value, offset, count);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UseStringInterpolation"
  },
  "hash": "5ee78011bdcb415d29edab9c92358e3348d46bc8119adb9c7a318d046262ec24"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use string interpolation expression",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use string interpolation expression",
  "detailsInfo": "Replace string construction by 'String.Format()' method invocation with string interpolation expression [Learn more...](https://www.jetbrains.com/help/rider/UseStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Collections/PriorityQueueTest.cs",
      "language": "C#",
      "line": 191,
      "offset": 49,
      "length": 13,
      "code": {
        "startLine": 189,
        "length": 13,
        "offset": 121,
        "surroundingCode": "            Assert.AreEqual(peekVal, curVal, \"Peek/Extract mismatch.\");\n\n            Assert.LessOrEqual(prevVal, curVal, string.Format(\"Values are not ordered (Size = {0}, Seed = {1}, Count = {2}).\", size, seed, queue.Count));\n            prevVal = curVal;\n          }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "UseStringInterpolation"
  },
  "hash": "beb2d00271c879e6b4a3670b4c123ee49003211f1d018762aaaed8da899f4936"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Use string interpolation expression",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use string interpolation expression",
  "detailsInfo": "Replace string construction by 'String.Format()' method invocation with string interpolation expression [Learn more...](https://www.jetbrains.com/help/rider/UseStringInterpolation.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/Serializers.cs",
      "language": "C#",
      "line": 242,
      "offset": 41,
      "length": 13,
      "code": {
        "startLine": 240,
        "length": 13,
        "offset": 143,
        "surroundingCode": "            lock(myLock)\n              existingType = myTypeMapping.First(p => p.Value == typeId).Key;\n            throw new ArgumentException(string.Format(\"Can't register {0} with id {1}. Already registered {2}\", typeof(T).FullName, typeId, existingType));\n          }\n          Protocol.InitTrace?.Log($\"Registering type {typeof(T).Name}, id={typeId}\");"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UseStringInterpolation"
  },
  "hash": "c244e8b8f44710d2fdb09fbd05ef48eaad8efc7dcbc9104953b6c0930af4272b"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Literal length can be reduced by using verbatim string",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use verbatim string",
  "detailsInfo": "String literal length can be reduced by using verbatim string",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 156,
      "offset": 98,
      "length": 20,
      "code": {
        "startLine": 154,
        "length": 20,
        "offset": 229,
        "surroundingCode": "            foreach (XmlNode node in doc.SelectNodes($\"//x:Import[contains(@Project, \\\"{pkg}\\\")]\", namespaceManager))\n            {\n              node.Attributes[\"Project\"].Value = Regex.Replace(node.Attributes[\"Project\"].Value, $\"{pkg}.*.\\\\\\\\build\", $\"{pkg}.{RdVersion}\\\\build\");\n            }\n          }"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "UseVerbatimString"
  },
  "hash": "981d6034c064e922f8c4c1e51bbe3ecd4720e28fe396dad44f546b23881e2126"
},{
  "tool": "Code Inspection",
  "category": "Language Usage Opportunities",
  "type": "Literal length can be reduced by using verbatim string",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use verbatim string",
  "detailsInfo": "String literal length can be reduced by using verbatim string",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 151,
      "offset": 54,
      "length": 18,
      "code": {
        "startLine": 149,
        "length": 18,
        "offset": 119,
        "surroundingCode": "            {\n              var text = (XmlText) node.FirstChild;\n              text.Value = Regex.Replace(text.Value, $\"{pkg}.*.\\\\\\\\lib\", $\"{pkg}.{RdVersion}\\\\lib\");\n            }\n"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "UseVerbatimString"
  },
  "hash": "ab4e07f8ca22b625fa0ae35ec42ee035e690bcb955f5cb259495a38f28df0696"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Useless arithmetical operation",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Multiplication by 0 in every execution path, which is useless",
  "detailsInfo": "Useless arithmetical operation",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 639,
      "offset": 16,
      "length": 6,
      "code": {
        "startLine": 637,
        "length": 6,
        "offset": 55,
        "surroundingCode": "      unchecked {\n        var hash = 0;\n        hash = hash * 31 + Text.GetHashCode();\n        return hash;\n      }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UselessBinaryOperation"
  },
  "hash": "4a0a6b8b4d837cfbe59ce2623ef1a552bc29b07248e68826eedbfdbd6c5cae7c"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Useless arithmetical operation",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Multiplication by 0 in every execution path, which is useless",
  "detailsInfo": "Useless arithmetical operation",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 257,
      "offset": 16,
      "length": 6,
      "code": {
        "startLine": 255,
        "length": 6,
        "offset": 55,
        "surroundingCode": "      unchecked {\n        var hash = 0;\n        hash = hash * 31 + Value.GetHashCode();\n        hash = hash * 31 + (Inner != null ?Inner.GetHashCode() : 0);\n        return hash;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UselessBinaryOperation"
  },
  "hash": "86043f6c1280b5ec224e7986caef71c93e6fbf73efe6b6b47d54671d5c09183b"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Useless arithmetical operation",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Multiplication by 0 in every execution path, which is useless",
  "detailsInfo": "Useless arithmetical operation",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 341,
      "offset": 16,
      "length": 6,
      "code": {
        "startLine": 339,
        "length": 6,
        "offset": 55,
        "surroundingCode": "      unchecked {\n        var hash = 0;\n        hash = hash * 31 + Value.GetHashCode();\n        hash = hash * 31 + (Inner != null ?Inner.GetHashCode() : 0);\n        return hash;"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UselessBinaryOperation"
  },
  "hash": "9dee54943a298d11bac9888d0de309f183f2a2901469f8702537b52a49d480da"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Useless arithmetical operation",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Multiplication by 0 in every execution path, which is useless",
  "detailsInfo": "Useless arithmetical operation",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 564,
      "offset": 16,
      "length": 6,
      "code": {
        "startLine": 562,
        "length": 6,
        "offset": 55,
        "surroundingCode": "      unchecked {\n        var hash = 0;\n        hash = hash * 31 + Text.GetHashCode();\n        return hash;\n      }"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "UselessBinaryOperation"
  },
  "hash": "d8dfef68a6b821c5c0bb0504f43e894bb8b607d7b3d162255c66717e6c097132"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Useless arithmetical operation",
  "tags": [
    "C#",
    ".NETStandard 2.0",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Multiplication by 0 in every execution path, which is useless",
  "detailsInfo": "Useless arithmetical operation",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Text/Impl/Intrinsics/RdAssertion.cs",
      "language": "C#",
      "line": 67,
      "offset": 16,
      "length": 6,
      "code": {
        "startLine": 65,
        "length": 6,
        "offset": 55,
        "surroundingCode": "      unchecked {\n        var hash = 0;\n        hash = hash * 31 + MasterVersion.GetHashCode();\n        hash = hash * 31 + SlaveVersion.GetHashCode();\n        hash = hash * 31 + Text.GetHashCode();"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "UselessBinaryOperation"
  },
  "hash": "e250d1cb2f0d447f26f12ce3342b456b5266773a092753e25387830768adebc7"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Do not use object initializer for 'using' variable",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Initialize object properties inside the 'using' statement to ensure that the object is disposed if an exception is thrown during initialization",
  "detailsInfo": "Initialize object properties inside the 'using' statement to ensure that the object is disposed if an exception is thrown during initialization",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/Program.cs",
      "language": "C#",
      "line": 205,
      "offset": 27,
      "length": 3,
      "code": {
        "startLine": 203,
        "length": 3,
        "offset": 79,
        "surroundingCode": "\n      string newLine = LineEndingUtil.Detect(path);\n      using (var writer = new StreamWriter(path, false, enc) {NewLine = newLine}) doc.Save(writer);\n    }\n  }"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "UsingStatementResourceInitialization"
  },
  "hash": "81943e4b4e98dc736a2fa6a7733db250c935b7b2f3eda1bc672db2a8fc4d60d8"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "'value' parameter is not used",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "'value' parameter is not used",
  "detailsInfo": "The setter of a property or indexer does not use its 'value' parameter. This also applies to adders and removers of events. [Learn more...](https://www.jetbrains.com/help/rider/ValueParameterNotUsed.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Serialization/UnsafeWriter.cs",
      "language": "C#",
      "line": 138,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 136,
        "length": 3,
        "offset": 31,
        "surroundingCode": "    {\n      get => true;\n      set\n      {\n      }"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ValueParameterNotUsed"
  },
  "hash": "3bbc07cbca65c5aafc5f02e7cafed79797f64d0c1bce8da51788abfa3e04e6b3"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Variable in local function hides variable from outer scope",
  "tags": [
    "C#",
    ".NETCoreApp 3.1",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Local variable '_' hides outer local variable with the same name",
  "detailsInfo": "Variable in local function hides variable from outer scope",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Diagnostics/InterpolatedStringHandlerTests.cs",
      "language": "C#",
      "line": 238,
      "offset": 13,
      "length": 1,
      "code": {
        "startLine": 236,
        "length": 1,
        "offset": 61,
        "surroundingCode": "      Assert.Throws<TestException>(() =>\n      {\n        var _ = nullValue.NotNull($\"{ThrowTestException()}\");\n      });\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "VariableHidesOuterVariable"
  },
  "hash": "0db9461812fc781d428f3577c245544236d5c2d128ff8728de5d7660c6dbcc0d"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Variable in local function hides variable from outer scope",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Local variable '_' hides outer local variable with the same name",
  "detailsInfo": "Variable in local function hides variable from outer scope",
  "sources": [
    {
      "type": "file",
      "path": "Test.Lifetimes/Diagnostics/InterpolatedStringHandlerTests.cs",
      "language": "C#",
      "line": 227,
      "offset": 13,
      "length": 1,
      "code": {
        "startLine": 225,
        "length": 1,
        "offset": 61,
        "surroundingCode": "      Assert.Throws<TestException>(() =>\n      {\n        var _ = nullValue.NotNull($\"{ThrowTestException()}\");\n      });\n    }"
      }
    }
  ],
  "attributes": {
    "module": "Test.Lifetimes",
    "inspectionName": "VariableHidesOuterVariable"
  },
  "hash": "f3f7c38f6617e34c27a05e1ce9af6a9541f414f91eca503bdf2c91d5f62f3377"
},{
  "tool": "Code Inspection",
  "category": "Potential Code Quality Issues",
  "type": "Virtual member call in constructor",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Virtual member call in constructor",
  "detailsInfo": "When a virtual method is called, the actual type that executes the method is not selected until run time. When a constructor calls a virtual method, it is possible that the constructor for the instance that invokes the method has not executed. See <http://msdn2.microsoft.com/en-us/library/ms182331.aspx>. [Learn more...](https://www.jetbrains.com/help/rider/VirtualMemberCallInConstructor.html)",
  "sources": [
    {
      "type": "file",
      "path": "Test.RdFramework/Interning/InterningTestModel.cs",
      "language": "C#",
      "line": 56,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 54,
        "length": 8,
        "offset": 86,
        "surroundingCode": "    public InterningRoot1(Lifetime lifetime, IProtocol protocol) : this()\n    {\n      Identify(protocol.Identities, RdId.Root.Mix(GetType().Name));\n      Bind(lifetime, protocol, GetType().Name);\n      Protocol.InitTrace?.Log ($\"CREATED toplevel object {this.PrintToString()}\");"
      }
    }
  ],
  "attributes": {
    "module": "Test.RdFramework",
    "inspectionName": "VirtualMemberCallInConstructor"
  },
  "hash": "c0b3f67d954c93742154ad258e4b26334dc5bd4d80382de33df7f83591e66249"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Virtual (overridable) member is never overridden (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5",
    ".NETStandard 2.0",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Virtual property 'ValueForPerContextEntity' is never overridden",
  "detailsInfo": "Virtual (overridable) member is never overridden and so the 'virtual' ('overridable') modifier can be removed [Learn more...](https://www.jetbrains.com/help/rider/VirtualMemberNeverOverridden.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/RdContext.cs",
      "language": "C#",
      "line": 100,
      "offset": 12,
      "length": 7,
      "code": {
        "startLine": 98,
        "length": 7,
        "offset": 135,
        "surroundingCode": "    /// Value which is used as a key inside per-context entities like <see cref=\"RdPerContextMap{K,V}\"/>\n    /// </summary>\n    public virtual T ValueForPerContextEntity => Value;\n\n    internal sealed override object ValueBoxed => Value;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "VirtualMemberNeverOverridden.Global"
  },
  "hash": "7c9da77ced2ffb4b18016108fd44c91bc82a64502b38eb3f64c306cd76dda9cb"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Virtual (overridable) member is never overridden (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1",
    ".NETStandard 2.0",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Virtual method 'AcceptHandshake' is never overridden",
  "detailsInfo": "Virtual (overridable) member is never overridden and so the 'virtual' ('overridable') modifier can be removed [Learn more...](https://www.jetbrains.com/help/rider/VirtualMemberNeverOverridden.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Impl/SocketWire.cs",
      "language": "C#",
      "line": 515,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 513,
        "length": 7,
        "offset": 18,
        "surroundingCode": "\n\n      protected virtual bool AcceptHandshake(Socket socket)\n      {\n        return true;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "VirtualMemberNeverOverridden.Global"
  },
  "hash": "bcbf0f1d490f4c88040ed95687b605d21e67a409133de11dd4f147fa9ff18709"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Virtual (overridable) member is never overridden (non-private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Virtual property 'SerializationHash' is never overridden",
  "detailsInfo": "Virtual (overridable) member is never overridden and so the 'virtual' ('overridable') modifier can be removed [Learn more...](https://www.jetbrains.com/help/rider/VirtualMemberNeverOverridden.Global.html)",
  "sources": [
    {
      "type": "file",
      "path": "RdFramework/Base/RdExtBase.cs",
      "language": "C#",
      "line": 40,
      "offset": 15,
      "length": 7,
      "code": {
        "startLine": 38,
        "length": 7,
        "offset": 77,
        "surroundingCode": "\n    protected abstract Action<ISerializers> Register { get; }\n    protected virtual long SerializationHash => 0L;\n\n    public override IScheduler WireScheduler => SynchronousScheduler.Instance;"
      }
    }
  ],
  "attributes": {
    "module": "RdFramework",
    "inspectionName": "VirtualMemberNeverOverridden.Global"
  },
  "hash": "c4e17014571d7dad9f60f5e03e7b442ece8543b8e3bda5087798690d2f397ecc"
}]}